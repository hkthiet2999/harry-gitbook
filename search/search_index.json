{"config":{"indexing":"full","lang":["vi"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"welcome.md","title":"Home"},{"location":"Architecture/Architecture/","text":"Architecture","title":"Architecture"},{"location":"Architecture/Architecture/#architecture","text":"","title":"Architecture"},{"location":"Database/Data-types/","text":"Data types Khi create table, ta c\u1ea7n ch\u1ec9 \u0111\u1ecbnh ki\u1ec3u d\u1eef li\u1ec7u cho m\u1ed7i c\u1ed9t. M\u1ed7i ki\u1ec3u d\u1eef li\u1ec7u c\u00f3 m\u1ed9t \u0111\u1ecbnh d\u1ea1ng l\u01b0u tr\u1eef nh\u1ea5t \u0111\u1ecbnh, ph\u1ea1m vi gi\u00e1 tr\u1ecb h\u1ee3p l\u1ec7 v\u00e0 c\u00e1c r\u00e0ng bu\u1ed9c. Data Types important points Kh\u00f4ng ph\u1ea3i t\u1ea5t c\u1ea3 c\u00e1c ki\u1ec3u d\u1eef li\u1ec7u \u1edf d\u01b0\u1edbi \u0111\u00e2y \u0111\u1ec1u \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3 b\u1edfi m\u1ecdi nh\u00e0 cung c\u1ea5p Relational Database. V\u00ed d\u1ee5: Oracle kh\u00f4ng h\u1ed7 tr\u1ee3 DATETIME ( ch\u1ec9 d\u00f9ng DATE ) v\u00e0 MySQL kh\u00f4ng h\u1ed7 tr\u1ee3 ki\u1ec3u d\u1eef li\u1ec7u CLOB ( d\u00f9ng LONGTEXT ). V\u00ec v\u1eady, khi thi\u1ebft k\u1ebf Database Schema v\u00e0 vi\u1ebft SQL queries th\u00ec c\u1ea7n \u0111\u1ea3m b\u1ea3o ki\u1ec3m tra xem c\u00e1c ki\u1ec3u d\u1eef li\u1ec7u c\u1ee5 th\u1ec3 c\u00f3 \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3 hay kh\u00f4ng. C\u00e1c ki\u1ec3u d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c li\u1ec7t k\u00ea \u1edf d\u01b0\u1edbi kh\u00f4ng bao g\u1ed3m t\u1ea5t c\u1ea3 c\u00e1c ki\u1ec3u d\u1eef li\u1ec7u trong Database, \u0111\u00e2y l\u00e0 nh\u1eefng lo\u1ea1i d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng ph\u1ed5 bi\u1ebfn nh\u1ea5t. M\u1ed9t s\u1ed1 nh\u00e0 cung c\u1ea5p c\u01a1 s\u1edf d\u1eef li\u1ec7u quan h\u1ec7 c\u00f3 ki\u1ec3u d\u1eef li\u1ec7u ri\u00eang c\u1ee7a h\u1ecd. V\u00ed d\u1ee5: Microsoft SQL Server c\u00f3 c\u00e1c lo\u1ea1i d\u1eef li\u1ec7u money v\u00e0 smallmoney nh\u01b0ng v\u00ec n\u00f3 kh\u00f4ng \u0111\u01b0\u1ee3c c\u00e1c nh\u00e0 cung c\u1ea5p c\u01a1 s\u1edf d\u1eef li\u1ec7u ph\u1ed5 bi\u1ebfn kh\u00e1c h\u1ed7 tr\u1ee3 n\u00ean n\u00f3 kh\u00f4ng \u0111\u01b0\u1ee3c li\u1ec7t k\u00ea \u1edf \u0111\u00e2y. M\u1ed7i nh\u00e0 cung c\u1ea5p c\u01a1 s\u1edf d\u1eef li\u1ec7u quan h\u1ec7 \u0111\u1ec1u c\u00f3 gi\u1edbi h\u1ea1n k\u00edch th\u01b0\u1edbc t\u1ed1i \u0111a ri\u00eang cho c\u00e1c lo\u1ea1i d\u1eef li\u1ec7u kh\u00e1c nhau, ta kh\u00f4ng c\u1ea7n ph\u1ea3i nh\u1edb c\u00e1i gi\u1edbi h\u1ea1n n\u00e0y m\u00e0 quan tr\u1ecdng l\u00e0 c\u00f3 ki\u1ebfn \u200b\u200bth\u1ee9c v\u1ec1 ki\u1ec3u d\u1eef li\u1ec7u n\u00e0o s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong m\u1ed9t tr\u01b0\u1eddng h\u1ee3p c\u1ee5 th\u1ec3 n\u00e0o. Theo m\u00ecnh t\u00ecm hi\u1ec3u, c\u00f3 s\u1ef1 kh\u00e1c bi\u1ec7t v\u1ec1 data types gi\u1eefa T-SQL v\u00e0 PL/SQL , nh\u01b0ng nh\u00ecn chung \u0111\u1ec1u l\u00e0 SQL v\u00e0 c\u00f3 th\u1ec3 group c\u00e1c Data Types theo h\u00ecnh sau: Numeric Data Types Numeric Data Types d\u00f9ng \u0111\u1ec3 l\u01b0u tr\u1eef c\u00e1c gi\u00e1 tr\u1ecb s\u1ed1 Datatype From To bit 0 1 tinyint 0 255 smallint -32,768 32,767 int -2,147,483,648 2,147,483,647 bigint -9,223,372,036, 854,775,808 9,223,372,036, 854,775,807 decimal -10^38 +1 10^38 -1 numeric -10^38 +1 10^38 -1 float -1.79E + 308 1.79E + 308 real -3.40E + 38 3.40E + 38 Character Data Types Character Data Types ki\u1ec3u d\u1eef li\u1ec7u l\u01b0u tr\u1eef c\u00e1c gi\u00e1 tr\u1ecb alphanumeric values , ho\u1eb7c strings . Ch\u00fang l\u01b0u tr\u1eef d\u1eef li\u1ec7u d\u1ef1a tr\u00ean b\u1ed9 k\u00fd t\u1ef1 c\u1ee7a c\u01a1 s\u1edf d\u1eef li\u1ec7u - database\u2019s character set ,\u0111i\u1ec3n h\u00ecnh l\u00e0 b\u1ed9 m\u00e3 ASCII . Trong SQL Data types, Character Data c\u00f3 th\u1ec3 chia l\u00e0m 2 lo\u1ea1i l\u00e0 Character/String data types nh\u01b0 char , varchar , text v\u00e0 Unicode Character/String data types \u0111\u1ec3 ch\u1ee9a c\u00e1c k\u00fd t\u1ef1 Unicode Character/String data types Data Type Description NCHAR C\u1ea5p b\u1ed9 nh\u1edb c\u1ed1 \u0111\u1ecbnh d\u1ef1a tr\u00ean size - s\u1ed1 k\u00fd t\u1ef1 l\u01b0u tr\u1eef. T\u1ed1i \u0111a 4000 k\u00fd t\u1ef1. Th\u00eam d\u1ea5u c\u00e1ch v\u1ec1 b\u00ean ph\u1ea3i \u0111\u1ec3 b\u00f9 ph\u1ea7n tr\u1ed1ng cho \u0111\u1ee7 s\u1ed1 k\u00ed t\u1ef1. NVARCHAR/NVARCHAR(max) B\u1ed9 nh\u1edb c\u00f3 th\u1ec3 thay \u0111\u1ed5i, size l\u00e0 s\u1ed1 k\u00ed t\u1ef1 l\u01b0u tr\u1eef. T\u1ed1i \u0111a 4000 k\u00fd t\u1ef1. N\u1ebfu set max th\u00ec c\u00f3 th\u1ec3 l\u01b0u tr\u1eef t\u1ed1i \u0111a 2GB b\u1ed9 nh\u1edb NTEXT B\u1ed9 nh\u1edb c\u00f3 th\u1ec3 thay \u0111\u1ed5i, l\u01b0u tr\u1eef t\u1ed1i \u0111a 2GB b\u1ed9 nh\u1edb Unicode Character/String data type Data Type Description NCHAR C\u1ea5p b\u1ed9 nh\u1edb c\u1ed1 \u0111\u1ecbnh d\u1ef1a tr\u00ean size - s\u1ed1 k\u00fd t\u1ef1 l\u01b0u tr\u1eef. T\u1ed1i \u0111a 4000 k\u00fd t\u1ef1. Th\u00eam d\u1ea5u c\u00e1ch v\u1ec1 b\u00ean ph\u1ea3i \u0111\u1ec3 b\u00f9 ph\u1ea7n tr\u1ed1ng cho \u0111\u1ee7 s\u1ed1 k\u00ed t\u1ef1. NVARCHAR/NVARCHAR(max) B\u1ed9 nh\u1edb c\u00f3 th\u1ec3 thay \u0111\u1ed5i, size l\u00e0 s\u1ed1 k\u00ed t\u1ef1 l\u01b0u tr\u1eef. T\u1ed1i \u0111a 4000 k\u00fd t\u1ef1. N\u1ebfu set max th\u00ec c\u00f3 th\u1ec3 l\u01b0u tr\u1eef t\u1ed1i \u0111a 2GB b\u1ed9 nh\u1edb NTEXT B\u1ed9 nh\u1edb c\u00f3 th\u1ec3 thay \u0111\u1ed5i, l\u01b0u tr\u1eef t\u1ed1i \u0111a 1GB b\u1ed9 nh\u1edb Ki\u1ec3u d\u1eef li\u1ec7u CHAR v\u00e0 VARCHAR l\u00e0 gi\u1ed1ng nhau, nh\u01b0ng kh\u00e1c nhau \u1edf c\u00e1ch ch\u00fang \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef v\u00e0 truy xu\u1ea5t. Ch\u00fang c\u0169ng kh\u00e1c nhau v\u1ec1 chi\u1ec1u d\u00e0i t\u1ed1i \u0111a v\u00e0 gi\u1eef l\u1ea1i hay kh\u00f4ng kho\u1ea3ng tr\u1eafng ph\u00eda tr\u01b0\u1edbc (trailing spaces). Date and Time Data Types Data Type Description DATE L\u01b0u tr\u1eef date theo format YYYY-MM-DD TIME L\u01b0u tr\u1eef time theo format HH:MI:SS DATETIME L\u01b0u tr\u1eef date v\u00e0 time theo format YYYY-MM-DD HH:MI:SS TIMESTAMP L\u01b0u tr\u1eef c\u1ea3 hai th\u00f4ng tin ng\u00e0y th\u00e1ng v\u00e0 th\u1eddi gian. Gi\u00e1 tr\u1ecb n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c chuy\u1ec3n \u0111\u1ed5i t\u1eeb m\u00fai gi\u1edd hi\u1ec7n t\u1ea1i sang UTC trong qu\u00e1 tr\u00ecnh l\u01b0u tr\u1eef, v\u00e0 s\u1ebd chuy\u1ec3n tr\u1edf l\u1ea1i m\u00fai gi\u1edd hi\u1ec7n t\u1ea1i khi l\u1ea5y d\u1eef li\u1ec7u ra. Ph\u1ea1m vi '1970-01-01 00:00:01' UTC t\u1edbi '2038-01-19 03:14:07' UTC YEAR(2)/YEAR(4) V\u1edbi YEAR(4), hi\u1ec3n th\u1ecb gi\u00e1 tr\u1ecb YEAR theo format YYYY trong ph\u1ea1m vi 1901 t\u1edbi 2155, ho\u1eb7c 0000. V\u1edbi YEAR(2), hi\u1ec3n th\u1ecb gi\u00e1 tr\u1ecb YEAR theo 2 s\u1ed1 cu\u1ed1i c\u1ee7a YEAR trong kho\u1ea3ng t\u1eeb '0' t\u1edbi '99' , trong \u0111\u00f3 '0' t\u1edbi '69' t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi gi\u00e1 tr\u1ecb YEAR t\u1eeb 2000-2069, v\u00e0 '70' t\u1edbi '99' t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi YEAR t\u1eeb 1970 t\u1edbi 1999. S\u1ef1 kh\u00e1c bi\u1ec7t ch\u00ednh c\u1ee7a DATETIME v\u00e0 TIMESTAMP l\u00e0 gi\u00e1 tr\u1ecb c\u1ee7a TIMESTAMP \u0111\u01b0\u1ee3c chuy\u1ec3n \u0111\u1ed5i t\u1eeb m\u00fai gi\u1edd hi\u1ec7n t\u1ea1i sang UTC trong khi l\u01b0u tr\u1eef, v\u00e0 chuy\u1ec3n ng\u01b0\u1ee3c tr\u1edf l\u1ea1i t\u1eeb UTC sang m\u00fai gi\u1edd hi\u1ec7n t\u1ea1i trong l\u00fac l\u1ea5y ra. C\u00f2n ki\u1ec3u d\u1eef li\u1ec7u DATETIME th\u00ec kh\u00f4ng c\u00f3 g\u00ec thay \u0111\u1ed5i. Binary Data Types Data Type Description BINARY L\u01b0u gi\u00e1 tr\u1ecb nh\u1ecb ph\u00e2n. C\u1ea5p b\u1ed9 nh\u1edb c\u1ed1 \u0111\u1ecbnh. T\u1ed1i \u0111a 8000 bytes VARBINARY/VARBINARY(max) B\u1ed9 nh\u1edb c\u00f3 th\u1ec3 thay \u0111\u1ed5i, t\u1ed1i \u0111a 8000 bytes. N\u1ebfu set max th\u00ec c\u00f3 th\u1ec3 l\u01b0u tr\u1eef t\u1ed1i \u0111a max bytes b\u1ed9 nh\u1edb IMAGE D\u1eef li\u1ec7u nh\u1ecb ph\u00e2n, b\u1ed9 nh\u1edb c\u1ea5p c\u00f3 th\u1ec3 thay \u0111\u1ed5i, t\u1ed1i \u0111a l\u01b0u 2GB binary data C\u00e1c ki\u1ec3u d\u1eef li\u1ec7u BINARY v\u00e0 VARBINARY t\u01b0\u01a1ng t\u1ef1 nh\u01b0 CHAR v\u00e0 VARCHAR, ngo\u1ea1i tr\u1eeb vi\u1ec7c ch\u00fang c\u00f3 ch\u1ee9a c\u00e1c chu\u1ed7i nh\u1ecb ph\u00e2n ch\u1ee9 kh\u00f4ng ph\u1ea3i l\u00e0 chu\u1ed7i non-binary. Miscellaneous Data Types Data Type Description CLOB L\u01b0u tr\u1eef characters large objects , c\u00f3 k\u00ednh th\u01b0\u1edbc l\u1edbn h\u01a1n 2GB BLOB L\u01b0u tr\u1eef binary large objects XML L\u01b0u tr\u1eef XML data JSON L\u01b0u tr\u1eef JSON data Reference SQL Data Types Database SQL Reference - Oracle MySQL Datatypes SQL Datatypes - W3C PostgreSQL 9.5.25 Documentation - Chapter 8. Data Types data-types-sql","title":"Data types"},{"location":"Database/Data-types/#data-types","text":"Khi create table, ta c\u1ea7n ch\u1ec9 \u0111\u1ecbnh ki\u1ec3u d\u1eef li\u1ec7u cho m\u1ed7i c\u1ed9t. M\u1ed7i ki\u1ec3u d\u1eef li\u1ec7u c\u00f3 m\u1ed9t \u0111\u1ecbnh d\u1ea1ng l\u01b0u tr\u1eef nh\u1ea5t \u0111\u1ecbnh, ph\u1ea1m vi gi\u00e1 tr\u1ecb h\u1ee3p l\u1ec7 v\u00e0 c\u00e1c r\u00e0ng bu\u1ed9c.","title":"Data types"},{"location":"Database/Data-types/#data-types-important-points","text":"Kh\u00f4ng ph\u1ea3i t\u1ea5t c\u1ea3 c\u00e1c ki\u1ec3u d\u1eef li\u1ec7u \u1edf d\u01b0\u1edbi \u0111\u00e2y \u0111\u1ec1u \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3 b\u1edfi m\u1ecdi nh\u00e0 cung c\u1ea5p Relational Database. V\u00ed d\u1ee5: Oracle kh\u00f4ng h\u1ed7 tr\u1ee3 DATETIME ( ch\u1ec9 d\u00f9ng DATE ) v\u00e0 MySQL kh\u00f4ng h\u1ed7 tr\u1ee3 ki\u1ec3u d\u1eef li\u1ec7u CLOB ( d\u00f9ng LONGTEXT ). V\u00ec v\u1eady, khi thi\u1ebft k\u1ebf Database Schema v\u00e0 vi\u1ebft SQL queries th\u00ec c\u1ea7n \u0111\u1ea3m b\u1ea3o ki\u1ec3m tra xem c\u00e1c ki\u1ec3u d\u1eef li\u1ec7u c\u1ee5 th\u1ec3 c\u00f3 \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3 hay kh\u00f4ng. C\u00e1c ki\u1ec3u d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c li\u1ec7t k\u00ea \u1edf d\u01b0\u1edbi kh\u00f4ng bao g\u1ed3m t\u1ea5t c\u1ea3 c\u00e1c ki\u1ec3u d\u1eef li\u1ec7u trong Database, \u0111\u00e2y l\u00e0 nh\u1eefng lo\u1ea1i d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng ph\u1ed5 bi\u1ebfn nh\u1ea5t. M\u1ed9t s\u1ed1 nh\u00e0 cung c\u1ea5p c\u01a1 s\u1edf d\u1eef li\u1ec7u quan h\u1ec7 c\u00f3 ki\u1ec3u d\u1eef li\u1ec7u ri\u00eang c\u1ee7a h\u1ecd. V\u00ed d\u1ee5: Microsoft SQL Server c\u00f3 c\u00e1c lo\u1ea1i d\u1eef li\u1ec7u money v\u00e0 smallmoney nh\u01b0ng v\u00ec n\u00f3 kh\u00f4ng \u0111\u01b0\u1ee3c c\u00e1c nh\u00e0 cung c\u1ea5p c\u01a1 s\u1edf d\u1eef li\u1ec7u ph\u1ed5 bi\u1ebfn kh\u00e1c h\u1ed7 tr\u1ee3 n\u00ean n\u00f3 kh\u00f4ng \u0111\u01b0\u1ee3c li\u1ec7t k\u00ea \u1edf \u0111\u00e2y. M\u1ed7i nh\u00e0 cung c\u1ea5p c\u01a1 s\u1edf d\u1eef li\u1ec7u quan h\u1ec7 \u0111\u1ec1u c\u00f3 gi\u1edbi h\u1ea1n k\u00edch th\u01b0\u1edbc t\u1ed1i \u0111a ri\u00eang cho c\u00e1c lo\u1ea1i d\u1eef li\u1ec7u kh\u00e1c nhau, ta kh\u00f4ng c\u1ea7n ph\u1ea3i nh\u1edb c\u00e1i gi\u1edbi h\u1ea1n n\u00e0y m\u00e0 quan tr\u1ecdng l\u00e0 c\u00f3 ki\u1ebfn \u200b\u200bth\u1ee9c v\u1ec1 ki\u1ec3u d\u1eef li\u1ec7u n\u00e0o s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong m\u1ed9t tr\u01b0\u1eddng h\u1ee3p c\u1ee5 th\u1ec3 n\u00e0o. Theo m\u00ecnh t\u00ecm hi\u1ec3u, c\u00f3 s\u1ef1 kh\u00e1c bi\u1ec7t v\u1ec1 data types gi\u1eefa T-SQL v\u00e0 PL/SQL , nh\u01b0ng nh\u00ecn chung \u0111\u1ec1u l\u00e0 SQL v\u00e0 c\u00f3 th\u1ec3 group c\u00e1c Data Types theo h\u00ecnh sau:","title":"Data Types important points"},{"location":"Database/Data-types/#numeric-data-types","text":"Numeric Data Types d\u00f9ng \u0111\u1ec3 l\u01b0u tr\u1eef c\u00e1c gi\u00e1 tr\u1ecb s\u1ed1 Datatype From To bit 0 1 tinyint 0 255 smallint -32,768 32,767 int -2,147,483,648 2,147,483,647 bigint -9,223,372,036, 854,775,808 9,223,372,036, 854,775,807 decimal -10^38 +1 10^38 -1 numeric -10^38 +1 10^38 -1 float -1.79E + 308 1.79E + 308 real -3.40E + 38 3.40E + 38","title":"Numeric Data Types"},{"location":"Database/Data-types/#character-data-types","text":"Character Data Types ki\u1ec3u d\u1eef li\u1ec7u l\u01b0u tr\u1eef c\u00e1c gi\u00e1 tr\u1ecb alphanumeric values , ho\u1eb7c strings . Ch\u00fang l\u01b0u tr\u1eef d\u1eef li\u1ec7u d\u1ef1a tr\u00ean b\u1ed9 k\u00fd t\u1ef1 c\u1ee7a c\u01a1 s\u1edf d\u1eef li\u1ec7u - database\u2019s character set ,\u0111i\u1ec3n h\u00ecnh l\u00e0 b\u1ed9 m\u00e3 ASCII . Trong SQL Data types, Character Data c\u00f3 th\u1ec3 chia l\u00e0m 2 lo\u1ea1i l\u00e0 Character/String data types nh\u01b0 char , varchar , text v\u00e0 Unicode Character/String data types \u0111\u1ec3 ch\u1ee9a c\u00e1c k\u00fd t\u1ef1 Unicode","title":"Character Data Types"},{"location":"Database/Data-types/#characterstring-data-types","text":"Data Type Description NCHAR C\u1ea5p b\u1ed9 nh\u1edb c\u1ed1 \u0111\u1ecbnh d\u1ef1a tr\u00ean size - s\u1ed1 k\u00fd t\u1ef1 l\u01b0u tr\u1eef. T\u1ed1i \u0111a 4000 k\u00fd t\u1ef1. Th\u00eam d\u1ea5u c\u00e1ch v\u1ec1 b\u00ean ph\u1ea3i \u0111\u1ec3 b\u00f9 ph\u1ea7n tr\u1ed1ng cho \u0111\u1ee7 s\u1ed1 k\u00ed t\u1ef1. NVARCHAR/NVARCHAR(max) B\u1ed9 nh\u1edb c\u00f3 th\u1ec3 thay \u0111\u1ed5i, size l\u00e0 s\u1ed1 k\u00ed t\u1ef1 l\u01b0u tr\u1eef. T\u1ed1i \u0111a 4000 k\u00fd t\u1ef1. N\u1ebfu set max th\u00ec c\u00f3 th\u1ec3 l\u01b0u tr\u1eef t\u1ed1i \u0111a 2GB b\u1ed9 nh\u1edb NTEXT B\u1ed9 nh\u1edb c\u00f3 th\u1ec3 thay \u0111\u1ed5i, l\u01b0u tr\u1eef t\u1ed1i \u0111a 2GB b\u1ed9 nh\u1edb","title":"Character/String data types"},{"location":"Database/Data-types/#unicode-characterstring-data-type","text":"Data Type Description NCHAR C\u1ea5p b\u1ed9 nh\u1edb c\u1ed1 \u0111\u1ecbnh d\u1ef1a tr\u00ean size - s\u1ed1 k\u00fd t\u1ef1 l\u01b0u tr\u1eef. T\u1ed1i \u0111a 4000 k\u00fd t\u1ef1. Th\u00eam d\u1ea5u c\u00e1ch v\u1ec1 b\u00ean ph\u1ea3i \u0111\u1ec3 b\u00f9 ph\u1ea7n tr\u1ed1ng cho \u0111\u1ee7 s\u1ed1 k\u00ed t\u1ef1. NVARCHAR/NVARCHAR(max) B\u1ed9 nh\u1edb c\u00f3 th\u1ec3 thay \u0111\u1ed5i, size l\u00e0 s\u1ed1 k\u00ed t\u1ef1 l\u01b0u tr\u1eef. T\u1ed1i \u0111a 4000 k\u00fd t\u1ef1. N\u1ebfu set max th\u00ec c\u00f3 th\u1ec3 l\u01b0u tr\u1eef t\u1ed1i \u0111a 2GB b\u1ed9 nh\u1edb NTEXT B\u1ed9 nh\u1edb c\u00f3 th\u1ec3 thay \u0111\u1ed5i, l\u01b0u tr\u1eef t\u1ed1i \u0111a 1GB b\u1ed9 nh\u1edb Ki\u1ec3u d\u1eef li\u1ec7u CHAR v\u00e0 VARCHAR l\u00e0 gi\u1ed1ng nhau, nh\u01b0ng kh\u00e1c nhau \u1edf c\u00e1ch ch\u00fang \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef v\u00e0 truy xu\u1ea5t. Ch\u00fang c\u0169ng kh\u00e1c nhau v\u1ec1 chi\u1ec1u d\u00e0i t\u1ed1i \u0111a v\u00e0 gi\u1eef l\u1ea1i hay kh\u00f4ng kho\u1ea3ng tr\u1eafng ph\u00eda tr\u01b0\u1edbc (trailing spaces).","title":"Unicode Character/String data type"},{"location":"Database/Data-types/#date-and-time-data-types","text":"Data Type Description DATE L\u01b0u tr\u1eef date theo format YYYY-MM-DD TIME L\u01b0u tr\u1eef time theo format HH:MI:SS DATETIME L\u01b0u tr\u1eef date v\u00e0 time theo format YYYY-MM-DD HH:MI:SS TIMESTAMP L\u01b0u tr\u1eef c\u1ea3 hai th\u00f4ng tin ng\u00e0y th\u00e1ng v\u00e0 th\u1eddi gian. Gi\u00e1 tr\u1ecb n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c chuy\u1ec3n \u0111\u1ed5i t\u1eeb m\u00fai gi\u1edd hi\u1ec7n t\u1ea1i sang UTC trong qu\u00e1 tr\u00ecnh l\u01b0u tr\u1eef, v\u00e0 s\u1ebd chuy\u1ec3n tr\u1edf l\u1ea1i m\u00fai gi\u1edd hi\u1ec7n t\u1ea1i khi l\u1ea5y d\u1eef li\u1ec7u ra. Ph\u1ea1m vi '1970-01-01 00:00:01' UTC t\u1edbi '2038-01-19 03:14:07' UTC YEAR(2)/YEAR(4) V\u1edbi YEAR(4), hi\u1ec3n th\u1ecb gi\u00e1 tr\u1ecb YEAR theo format YYYY trong ph\u1ea1m vi 1901 t\u1edbi 2155, ho\u1eb7c 0000. V\u1edbi YEAR(2), hi\u1ec3n th\u1ecb gi\u00e1 tr\u1ecb YEAR theo 2 s\u1ed1 cu\u1ed1i c\u1ee7a YEAR trong kho\u1ea3ng t\u1eeb '0' t\u1edbi '99' , trong \u0111\u00f3 '0' t\u1edbi '69' t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi gi\u00e1 tr\u1ecb YEAR t\u1eeb 2000-2069, v\u00e0 '70' t\u1edbi '99' t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi YEAR t\u1eeb 1970 t\u1edbi 1999. S\u1ef1 kh\u00e1c bi\u1ec7t ch\u00ednh c\u1ee7a DATETIME v\u00e0 TIMESTAMP l\u00e0 gi\u00e1 tr\u1ecb c\u1ee7a TIMESTAMP \u0111\u01b0\u1ee3c chuy\u1ec3n \u0111\u1ed5i t\u1eeb m\u00fai gi\u1edd hi\u1ec7n t\u1ea1i sang UTC trong khi l\u01b0u tr\u1eef, v\u00e0 chuy\u1ec3n ng\u01b0\u1ee3c tr\u1edf l\u1ea1i t\u1eeb UTC sang m\u00fai gi\u1edd hi\u1ec7n t\u1ea1i trong l\u00fac l\u1ea5y ra. C\u00f2n ki\u1ec3u d\u1eef li\u1ec7u DATETIME th\u00ec kh\u00f4ng c\u00f3 g\u00ec thay \u0111\u1ed5i.","title":"Date and Time Data Types"},{"location":"Database/Data-types/#binary-data-types","text":"Data Type Description BINARY L\u01b0u gi\u00e1 tr\u1ecb nh\u1ecb ph\u00e2n. C\u1ea5p b\u1ed9 nh\u1edb c\u1ed1 \u0111\u1ecbnh. T\u1ed1i \u0111a 8000 bytes VARBINARY/VARBINARY(max) B\u1ed9 nh\u1edb c\u00f3 th\u1ec3 thay \u0111\u1ed5i, t\u1ed1i \u0111a 8000 bytes. N\u1ebfu set max th\u00ec c\u00f3 th\u1ec3 l\u01b0u tr\u1eef t\u1ed1i \u0111a max bytes b\u1ed9 nh\u1edb IMAGE D\u1eef li\u1ec7u nh\u1ecb ph\u00e2n, b\u1ed9 nh\u1edb c\u1ea5p c\u00f3 th\u1ec3 thay \u0111\u1ed5i, t\u1ed1i \u0111a l\u01b0u 2GB binary data C\u00e1c ki\u1ec3u d\u1eef li\u1ec7u BINARY v\u00e0 VARBINARY t\u01b0\u01a1ng t\u1ef1 nh\u01b0 CHAR v\u00e0 VARCHAR, ngo\u1ea1i tr\u1eeb vi\u1ec7c ch\u00fang c\u00f3 ch\u1ee9a c\u00e1c chu\u1ed7i nh\u1ecb ph\u00e2n ch\u1ee9 kh\u00f4ng ph\u1ea3i l\u00e0 chu\u1ed7i non-binary.","title":"Binary Data Types"},{"location":"Database/Data-types/#miscellaneous-data-types","text":"Data Type Description CLOB L\u01b0u tr\u1eef characters large objects , c\u00f3 k\u00ednh th\u01b0\u1edbc l\u1edbn h\u01a1n 2GB BLOB L\u01b0u tr\u1eef binary large objects XML L\u01b0u tr\u1eef XML data JSON L\u01b0u tr\u1eef JSON data","title":"Miscellaneous Data Types"},{"location":"Database/Data-types/#reference","text":"SQL Data Types Database SQL Reference - Oracle MySQL Datatypes SQL Datatypes - W3C PostgreSQL 9.5.25 Documentation - Chapter 8. Data Types data-types-sql","title":"Reference"},{"location":"Database/Deadlock/","text":"Deadlock Consistency and Lock in Relational Database Deadlock Deadlock Detection Deadlock Avoidance Deadlock Prevention Consistency and Lock in Relational Database Relational database l\u00e0 d\u1ea1ng database c\u00f3 \u0111\u1ed9 nh\u1ea5t qu\u00e1n d\u1eef li\u1ec7u cao nh\u1ea5t. D\u1eef li\u1ec7u trong database lu\u00f4n \u1edf d\u1ea1ng Consistency t\u1ea1i m\u1ecdi th\u1eddi \u0111i\u1ec3m. Ngh\u0129a l\u00e0 v\u1edbi c\u00f9ng m\u1ed9t d\u1eef li\u1ec7u th\u00ec kh\u00f4ng th\u1ec3 c\u00f3 vi\u1ec7c ghi (update, insert, delete) t\u1ea1i c\u00f9ng m\u1ed9t th\u1eddi \u0111i\u1ec3m. Relational database \u0111\u1ea3m b\u1ea3o t\u00ednh consistency c\u1ee7a d\u1eef li\u1ec7u th\u00f4ng qua c\u01a1 ch\u1ebf Lock d\u1eef li\u1ec7u l\u1ea1i khi d\u1eef li\u1ec7u \u0111ang in progress. Lock \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o t\u00ednh consistency data l\u00e0 m\u1ed9t trong c\u00e1c \u01b0u \u0111i\u1ec3m n\u1ed5i b\u1eadt c\u1ee7a c\u01a1 s\u1edf d\u1eef li\u1ec7u quan h\u1ec7. V\u00ec v\u1eady n\u1ebfu \u0111\u00e3 d\u00f9ng c\u01a1 s\u1edf d\u1eef li\u1ec7u quan h\u1ec7 th\u00ec ph\u1ea3i bi\u1ebft t\u1eadn d\u1ee5ng n\u00f3. Tr\u00e1nh t\u1ed1i \u0111a vi\u1ec7c s\u1eed d\u1ee5ng c\u00e1c ch\u1ebf \u0111\u1ed9 b\u1ecf lock nh\u01b0 mode nolock v\u00ec c\u00f3 th\u1ec3 d\u1eabn t\u1edbi hi\u1ec7n t\u01b0\u1ee3ng \u0111\u1ecdc sai l\u1ec7ch d\u1eef li\u1ec7u. C\u01a1 ch\u1ebf Lock trong Database: Trong tr\u01b0\u1eddng h\u1ee3p c\u00f3 nhi\u1ec1u h\u01a1n 1 transaction \u0111\u1ed3ng th\u1eddi x\u1eed l\u00fd tr\u00ean c\u00f9ng 1 table, s\u1ebd r\u01a1i v\u00e0o 1 s\u1ed1 tr\u01b0\u1eddng h\u1ee3p sau, l\u1ea5y v\u00ed d\u1ee5 2 transaction: T1 & T2: TH1: 2 transaction \u0111\u00f3 kh\u00f4ng x\u1eed l\u00fd tr\u00ean c\u00f9ng 1 row: N\u1ebfu config cho database \u0111\u00f3 \u0111ang \u0111\u1ec3 l\u00e0 lock table : table s\u1ebd b\u1ecb lock cho \u0111\u1ebfn khi T1 x\u1eed l\u00fd xong v\u00e0 \u0111\u01b0\u1ee3c commit th\u00ec m\u1edbi unlock. Sau \u0111\u00f3 T2 m\u1edbi \u0111\u01b0\u1ee3c x\u1eed l\u00fd ti\u1ebfp. T2 s\u1ebd \u0111\u01b0\u1ee3c x\u1eed l\u00fd khi T1 ch\u1ea1y xong, tr\u01b0\u1eddng h\u1ee3p T1 ch\u1ea1y m\u00e3i kh\u00f4ng xong th\u00ec T2 s\u1ebd tr\u1ea3 v\u1ec1 timeout exception N\u1ebfu config cho database \u0111\u00f3 \u0111ang \u0111\u1ec3 l\u00e0 lock row: row \u0111ang \u0111\u01b0\u1ee3c x\u1eed l\u00fd \u1edf 2 transaction s\u1ebd b\u1ecb lock, tuy nhi\u00ean 2 transaction x\u1eed l\u00fd 2 row kh\u00e1c nhau n\u00ean c\u1ea3 2 \u0111\u1ec1u \u0111\u01b0\u1ee3c x\u1eed l\u00fd \u0111\u1ed3ng th\u1eddi. TH2: 2 transaction \u0111\u00f3 x\u1eed l\u00fd v\u00e0o c\u00f9ng 1 row: row \u0111\u01b0\u1ee3c x\u1eed l\u00fd s\u1ebd lock, T1 x\u1eed l\u00fd xong, commit th\u00ec l\u00fac n\u00e0y T2 m\u1edbi th\u1ef1c thi, n\u1ebfu T1 x\u1eed l\u00fd ch\u1eadm th\u00ec T2 s\u1ebd tr\u1ea3 v\u1ec1 timeout exception . \u0110\u00f3 l\u00e0 tr\u01b0\u1eddng h\u1ee3p Lock, n\u00f3 ch\u1ec9 \u1ea3nh h\u01b0\u1edfng m\u1ed9t ph\u1ea7n t\u1edbi performance khi c\u00e1c Transaction \u0111\u1ed3ng th\u1eddi ph\u1ea3i ch\u1edd v\u00e0 th\u1ef1c hi\u1ec7n m\u1ed9t c\u00e1ch tu\u1ea7n t\u1ef1. Nh\u01b0ng, s\u1ebd c\u00f3 tr\u01b0\u1eddng h\u1ee3p c\u00e1c Transaction \u0111\u00f3 b\u1ecb conflict v\u1edbi nhau, d\u1eabn t\u1edbi kh\u00f4ng m\u1ed9t Transaction n\u00e0o th\u1ef1c hi\u1ec7n \u0111\u01b0\u1ee3c. Tr\u01b0\u1eddng h\u1ee3p nh\u01b0 v\u1eady \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 DeadLock Deadlock Concepts Deadlock l\u00e0 t\u00ecnh tr\u1ea1ng 2 ho\u1eb7c nhi\u1ec1u transactions kh\u00e1c nhau kh\u00f4ng th\u1ec3 ti\u1ebfp t\u1ee5c x\u1eed l\u00fd v\u00ec m\u1ed7i transaction \u0111\u1ec1u \u0111ang Lock c\u00e1c t\u00e0i nguy\u00ean m\u00e0 c\u00e1c transaction kh\u00e1c c\u1ea7n \u0111\u1ec3 x\u1eed l\u00fd v\u00e0 Release Lock . D\u1eabn \u0111\u1ebfn c\u00e1c transactions kh\u00f4ng bao gi\u1edd c\u00f3 th\u1ec3 release lock c\u00e1c t\u00e0i nguy\u00ean m\u00e0 n\u00f3 \u0111ang gi\u1eef. Example Transaction T1 \u0111ang lock m\u1ed9t record trong b\u1ea3ng Students v\u00e0 c\u1ea7n c\u1eadp nh\u1eadt m\u1ed9t s\u1ed1 th\u00f4ng tin trong record c\u1ee7a b\u1ea3ng Grade . \u0110\u1ed3ng th\u1eddi, Transaction T2 lock tr\u00ean ch\u00ednh c\u00e1c record m\u00e0 T1 c\u1ea7n c\u1eadp nh\u1eadt trong b\u1ea3ng Grades, nh\u01b0ng T2 c\u0169ng c\u1ea7n c\u1eadp nh\u1eadt c\u00e1c record trong b\u1ea3ng Students do Transaction T1 lock. Tr\u01b0\u1eddng h\u1ee3p n\u00e0y g\u00e2y ra Deadlock . Transaction T1 s\u1ebd ch\u1edd Transaction T2 gi\u1ea3i ph\u00f3ng t\u00e0i nguy\u00ean v\u00e0 t\u01b0\u01a1ng t\u1ef1 Transaction T2 s\u1ebd ch\u1edd Transaction T1 gi\u1ea3i ph\u00f3ng. K\u1ebft qu\u1ea3 l\u00e0, m\u1ecdi ho\u1ea1t \u0111\u1ed9ng \u0111\u1ec1u d\u1eebng l\u1ea1i v\u00e0 t\u1ed3n t\u1ea1i m\u00e3i m\u00e3i tr\u1eeb khi h\u1ec7 qu\u1ea3n tr\u1ecb c\u01a1 s\u1edf d\u1eef li\u1ec7u ph\u00e1t hi\u1ec7n ra deadlock v\u00e0 h\u1ee7y b\u1ecf m\u1ed9t trong c\u00e1c Transaction. Deadlock Detection C\u00e1c Relational database \u0111\u1ec1u c\u00f3 ph\u01b0\u01a1ng ph\u00e1p \u0111\u1ec3 c\u00f3 th\u1ec3 ph\u00e1t hi\u1ec7n ra khi n\u00e0o deadlock x\u1ea3y ra, tr\u00e1nh d\u1eabn \u0111\u1ebfn vi\u1ec7c h\u1ec7 th\u1ed1ng b\u1ecb Deadlock qu\u00e1 l\u00e2u. Th\u1eadm ch\u00ed Relational database theo d\u00f5i c\u00e1c Transaction lock d\u1eef li\u1ec7u nh\u01b0 th\u1ebf n\u00e0o b\u1ea5t k\u1ec3 n\u00f3 c\u00f3 d\u1eabn \u0111\u1ebfn deadlock hay kh\u00f4ng. Wait-for Graph l\u00e0 m\u1ed9t trong nh\u1eefng ph\u01b0\u01a1ng ph\u00e1p \u0111\u1ec3 ph\u00e1t hi\u1ec7n deadlock. Trong ph\u01b0\u01a1ng ph\u00e1p n\u00e0y, m\u1ed9t bi\u1ec3u \u0111\u1ed3 \u0111\u01b0\u1ee3c v\u1ebd d\u1ef1a tr\u00ean Transactions v\u00e0 lock status c\u1ee7a t\u1eebng Transactions. N\u1ebfu \u0111\u1ed3 th\u1ecb n\u00e0y t\u1ea1o th\u00e0nh m\u1ed9t chu k\u1ef3 th\u00ec t\u1ee9c l\u00e0 \u0111ang c\u00f3 m\u1ed9t deadlock. V\u00ed d\u1ee5 v\u1ec1 1 bi\u1ec3u \u0111\u1ed3 khi x\u1ea3y ra deadlock d\u1ef1a tr\u00ean ph\u01b0\u01a1ng ph\u00e1p Wait-for graph: Deadlock Avoidance M\u1ed9t ph\u01b0\u01a1ng ph\u00e1p \u0111\u1ec3 tr\u00e1nh deadlock l\u00e0 \u00e1p d\u1ee5ng t\u00ednh Consistency l\u00ean c\u00e1c Table trong Database. Trong v\u00ed d\u1ee5 \u0111\u00e3 cho \u1edf tr\u00ean, c\u00e1c Transaction truy c\u1eadp Student v\u00e0 Grade ph\u1ea3i lu\u00f4n truy c\u1eadp v\u00e0o c\u00e1c table theo m\u1ed9t th\u1ee9 t\u1ef1 nh\u1ea5t \u0111\u1ecbnh. Gi\u1ea3 s\u1eed nh\u01b0 th\u1ee9 t\u1ef1 truy c\u1eadp c\u1ed1 \u0111\u1ecbnh c\u1ee7a 2 b\u1ea3ng l\u00e0 Student \u2192 Grade . Trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y th\u00ec T2 s\u1ebd ph\u1ea3i ch\u1edd T1 gi\u1ea3i ph\u00f3ng t\u00e0i nguy\u00ean t\u1ea1i b\u1ea3ng Student xong th\u00ec m\u1edbi b\u1eaft \u0111\u1ea7u (t\u1ee9c l\u00e0 T2 s\u1ebd ch\u01b0a lock t\u00e0i nguy\u00ean c\u1ee7a b\u1ea3ng Grade ) do \u0111\u00f3 T1 s\u1ebd th\u1ef1c hi\u1ec7n 1 c\u00e1ch b\u00ecnh th\u01b0\u1eddng r\u1ed3i T2 m\u1edbi th\u1ef1c hi\u1ec7n v\u00e0 deadlock s\u1ebd kh\u00f4ng x\u1ea3y ra. Ngo\u00e0i ra c\u00f2n c\u00f3 c\u00e1c Deadlock Avoidance nh\u01b0 sau: H\u1ea1n ch\u1ebf s\u1eed d\u1ee5ng transactions n\u1ebfu kh\u00f4ng th\u1eadt s\u1ef1 c\u1ea7n thi\u1ebft. \u0110\u1ec3 l\u00e0m \u0111\u01b0\u1ee3c \u0111i\u1ec1u n\u00e0y, th\u00ec ch\u00fang ta c\u1ea7n ph\u1ea3i hi\u1ec3u \u00fd ngh\u0129a c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng transaction v\u00e0 tr\u00e1nh l\u1ea1m d\u1ee5ng. Gi\u1ea3m thi\u1ec3u s\u1ed1 l\u01b0\u1ee3ng b\u1ea3ng c\u1ea7n t\u00e1c \u0111\u1ed9ng trong m\u1ed9t transactions, transactions c\u00f3 s\u1ed1 b\u1ea3ng tham gia c\u00e0ng \u00edt th\u00ec kh\u1ea3 n\u0103ng x\u1ea3y ra deadlock c\u00e0ng th\u1ea5p. Gi\u1eef cho c\u00e1c transactions lu\u00f4n c\u00f3 workloads v\u00e0 th\u1eddi gian x\u1eed l\u00fd c\u00e0ng \u00edt c\u00e0ng t\u1ed1t, t\u1ed1i \u01b0u query, clean code v.vv Khi s\u1eeda \u0111\u1ed5i nhi\u1ec1u table trong m\u1ed9t transactions ho\u1eb7c c\u00e1c row kh\u00e1c nhau trong c\u00f9ng m\u1ed9t table, n\u00ean th\u1ef1c hi\u1ec7n c\u00e1c thao t\u00e1c \u0111\u00f3 theo th\u1ee9 t\u1ef1 nh\u1ea5t qu\u00e1n. Deadlock Prevention Deadlock Avoidance th\u00f4i ch\u01b0a \u0111\u1ee7. \u0110\u1ed1i v\u1edbi m\u1ed9t c\u01a1 s\u1edf d\u1eef li\u1ec7u l\u1edbn th\u01b0\u1eddng s\u1ebd d\u00f9ng ph\u01b0\u01a1ng ph\u00e1p Deadlock Prevention \u0111\u1ec3 ng\u0103n ch\u1eb7n t\u00ecnh tr\u1ea1ng Deadlock b\u1eb1ng c\u00e1ch ph\u00e2n b\u1ed5 c\u00e1c resource m\u1ed9t c\u00e1ch h\u1ee3p l\u00fd sao cho kh\u00f4ng th\u1ec3 x\u1ea3y ra t\u00ecnh tr\u1ea1ng Deadlock. C\u00e1c Database s\u1ebd ph\u00e2n t\u00edch c\u00e1c ho\u1ea1t \u0111\u1ed9ng c\u1ee7a Transactions xem ch\u00fang c\u00f3 x\u00e1c su\u1ea5t Deadlock hay kh\u00f4ng, n\u1ebfu c\u00f3, Transaction \u0111\u00f3 c\u00f3 th\u1ec3 kh\u00f4ng bao gi\u1edd \u0111\u01b0\u1ee3c ph\u00e9p th\u1ef1c hi\u1ec7n. C\u01a1 ch\u1ebf Deadlock Prevention \u0111\u1ec1 xu\u1ea5t hai ph\u01b0\u01a1ng \u00e1n: Wait-Die Scheme : N\u1ebfu m\u1ed9t Transaction y\u00eau c\u1ea7u m\u1ed9t t\u00e0i nguy\u00ean \u0111ang b\u1ecb lock b\u1edfi m\u1ed9t Transaction kh\u00e1c, th\u00ec DBMS ch\u1ec9 c\u1ea7n check c\u00e1i timestamp c\u1ee7a c\u1ea3 hai Transaction v\u00e0 cho ph\u00e9p Transaction c\u00f3 timestamp tr\u1ec5 h\u01a1n h\u01a1n \u0111\u1ee3i cho \u0111\u1ebfn khi t\u00e0i nguy\u00ean available. Wound Wait Scheme : T\u01b0\u01a1ng t\u1ef1 nh\u01b0 tr\u00ean, DBMS c\u0169ng s\u1ebd check c\u00e1i timestamp \u0111\u1ec3 ph\u00e2n bi\u1ec7t older transaction v\u00e0 younger transaction . Kh\u00e1c bi\u1ec7t l\u00e0 thay v\u00ec b\u1eaft younger transaction \u0111\u1ee3i th\u00ec n\u00f3 s\u1ebd kill younger transaction lu\u00f4n. younger transaction s\u1ebd \u0111\u01b0\u1ee3c b\u1eaft \u0111\u1ea7u l\u1ea1i v\u1edbi \u0111\u1ed9 tr\u1ec5 h\u01a1n timestamp ban \u0111\u1ea7u c\u1ee7a n\u00f3. Reference Deadlock in DBMS - geeksforgeeks What is the difference between \"wait-die\" and \"wound-wait\" deadlock prevention algorithms? - stackoverflow - questions 32794142 Deadlocks - docs.oracle Deadlock in DBMS - educba","title":"Deadlock"},{"location":"Database/Deadlock/#deadlock","text":"Consistency and Lock in Relational Database Deadlock Deadlock Detection Deadlock Avoidance Deadlock Prevention","title":"Deadlock"},{"location":"Database/Deadlock/#consistency-and-lock-in-relational-database","text":"Relational database l\u00e0 d\u1ea1ng database c\u00f3 \u0111\u1ed9 nh\u1ea5t qu\u00e1n d\u1eef li\u1ec7u cao nh\u1ea5t. D\u1eef li\u1ec7u trong database lu\u00f4n \u1edf d\u1ea1ng Consistency t\u1ea1i m\u1ecdi th\u1eddi \u0111i\u1ec3m. Ngh\u0129a l\u00e0 v\u1edbi c\u00f9ng m\u1ed9t d\u1eef li\u1ec7u th\u00ec kh\u00f4ng th\u1ec3 c\u00f3 vi\u1ec7c ghi (update, insert, delete) t\u1ea1i c\u00f9ng m\u1ed9t th\u1eddi \u0111i\u1ec3m. Relational database \u0111\u1ea3m b\u1ea3o t\u00ednh consistency c\u1ee7a d\u1eef li\u1ec7u th\u00f4ng qua c\u01a1 ch\u1ebf Lock d\u1eef li\u1ec7u l\u1ea1i khi d\u1eef li\u1ec7u \u0111ang in progress. Lock \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o t\u00ednh consistency data l\u00e0 m\u1ed9t trong c\u00e1c \u01b0u \u0111i\u1ec3m n\u1ed5i b\u1eadt c\u1ee7a c\u01a1 s\u1edf d\u1eef li\u1ec7u quan h\u1ec7. V\u00ec v\u1eady n\u1ebfu \u0111\u00e3 d\u00f9ng c\u01a1 s\u1edf d\u1eef li\u1ec7u quan h\u1ec7 th\u00ec ph\u1ea3i bi\u1ebft t\u1eadn d\u1ee5ng n\u00f3. Tr\u00e1nh t\u1ed1i \u0111a vi\u1ec7c s\u1eed d\u1ee5ng c\u00e1c ch\u1ebf \u0111\u1ed9 b\u1ecf lock nh\u01b0 mode nolock v\u00ec c\u00f3 th\u1ec3 d\u1eabn t\u1edbi hi\u1ec7n t\u01b0\u1ee3ng \u0111\u1ecdc sai l\u1ec7ch d\u1eef li\u1ec7u. C\u01a1 ch\u1ebf Lock trong Database: Trong tr\u01b0\u1eddng h\u1ee3p c\u00f3 nhi\u1ec1u h\u01a1n 1 transaction \u0111\u1ed3ng th\u1eddi x\u1eed l\u00fd tr\u00ean c\u00f9ng 1 table, s\u1ebd r\u01a1i v\u00e0o 1 s\u1ed1 tr\u01b0\u1eddng h\u1ee3p sau, l\u1ea5y v\u00ed d\u1ee5 2 transaction: T1 & T2: TH1: 2 transaction \u0111\u00f3 kh\u00f4ng x\u1eed l\u00fd tr\u00ean c\u00f9ng 1 row: N\u1ebfu config cho database \u0111\u00f3 \u0111ang \u0111\u1ec3 l\u00e0 lock table : table s\u1ebd b\u1ecb lock cho \u0111\u1ebfn khi T1 x\u1eed l\u00fd xong v\u00e0 \u0111\u01b0\u1ee3c commit th\u00ec m\u1edbi unlock. Sau \u0111\u00f3 T2 m\u1edbi \u0111\u01b0\u1ee3c x\u1eed l\u00fd ti\u1ebfp. T2 s\u1ebd \u0111\u01b0\u1ee3c x\u1eed l\u00fd khi T1 ch\u1ea1y xong, tr\u01b0\u1eddng h\u1ee3p T1 ch\u1ea1y m\u00e3i kh\u00f4ng xong th\u00ec T2 s\u1ebd tr\u1ea3 v\u1ec1 timeout exception N\u1ebfu config cho database \u0111\u00f3 \u0111ang \u0111\u1ec3 l\u00e0 lock row: row \u0111ang \u0111\u01b0\u1ee3c x\u1eed l\u00fd \u1edf 2 transaction s\u1ebd b\u1ecb lock, tuy nhi\u00ean 2 transaction x\u1eed l\u00fd 2 row kh\u00e1c nhau n\u00ean c\u1ea3 2 \u0111\u1ec1u \u0111\u01b0\u1ee3c x\u1eed l\u00fd \u0111\u1ed3ng th\u1eddi. TH2: 2 transaction \u0111\u00f3 x\u1eed l\u00fd v\u00e0o c\u00f9ng 1 row: row \u0111\u01b0\u1ee3c x\u1eed l\u00fd s\u1ebd lock, T1 x\u1eed l\u00fd xong, commit th\u00ec l\u00fac n\u00e0y T2 m\u1edbi th\u1ef1c thi, n\u1ebfu T1 x\u1eed l\u00fd ch\u1eadm th\u00ec T2 s\u1ebd tr\u1ea3 v\u1ec1 timeout exception . \u0110\u00f3 l\u00e0 tr\u01b0\u1eddng h\u1ee3p Lock, n\u00f3 ch\u1ec9 \u1ea3nh h\u01b0\u1edfng m\u1ed9t ph\u1ea7n t\u1edbi performance khi c\u00e1c Transaction \u0111\u1ed3ng th\u1eddi ph\u1ea3i ch\u1edd v\u00e0 th\u1ef1c hi\u1ec7n m\u1ed9t c\u00e1ch tu\u1ea7n t\u1ef1. Nh\u01b0ng, s\u1ebd c\u00f3 tr\u01b0\u1eddng h\u1ee3p c\u00e1c Transaction \u0111\u00f3 b\u1ecb conflict v\u1edbi nhau, d\u1eabn t\u1edbi kh\u00f4ng m\u1ed9t Transaction n\u00e0o th\u1ef1c hi\u1ec7n \u0111\u01b0\u1ee3c. Tr\u01b0\u1eddng h\u1ee3p nh\u01b0 v\u1eady \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 DeadLock","title":"Consistency and Lock in Relational Database"},{"location":"Database/Deadlock/#deadlock_1","text":"Concepts Deadlock l\u00e0 t\u00ecnh tr\u1ea1ng 2 ho\u1eb7c nhi\u1ec1u transactions kh\u00e1c nhau kh\u00f4ng th\u1ec3 ti\u1ebfp t\u1ee5c x\u1eed l\u00fd v\u00ec m\u1ed7i transaction \u0111\u1ec1u \u0111ang Lock c\u00e1c t\u00e0i nguy\u00ean m\u00e0 c\u00e1c transaction kh\u00e1c c\u1ea7n \u0111\u1ec3 x\u1eed l\u00fd v\u00e0 Release Lock . D\u1eabn \u0111\u1ebfn c\u00e1c transactions kh\u00f4ng bao gi\u1edd c\u00f3 th\u1ec3 release lock c\u00e1c t\u00e0i nguy\u00ean m\u00e0 n\u00f3 \u0111ang gi\u1eef. Example Transaction T1 \u0111ang lock m\u1ed9t record trong b\u1ea3ng Students v\u00e0 c\u1ea7n c\u1eadp nh\u1eadt m\u1ed9t s\u1ed1 th\u00f4ng tin trong record c\u1ee7a b\u1ea3ng Grade . \u0110\u1ed3ng th\u1eddi, Transaction T2 lock tr\u00ean ch\u00ednh c\u00e1c record m\u00e0 T1 c\u1ea7n c\u1eadp nh\u1eadt trong b\u1ea3ng Grades, nh\u01b0ng T2 c\u0169ng c\u1ea7n c\u1eadp nh\u1eadt c\u00e1c record trong b\u1ea3ng Students do Transaction T1 lock. Tr\u01b0\u1eddng h\u1ee3p n\u00e0y g\u00e2y ra Deadlock . Transaction T1 s\u1ebd ch\u1edd Transaction T2 gi\u1ea3i ph\u00f3ng t\u00e0i nguy\u00ean v\u00e0 t\u01b0\u01a1ng t\u1ef1 Transaction T2 s\u1ebd ch\u1edd Transaction T1 gi\u1ea3i ph\u00f3ng. K\u1ebft qu\u1ea3 l\u00e0, m\u1ecdi ho\u1ea1t \u0111\u1ed9ng \u0111\u1ec1u d\u1eebng l\u1ea1i v\u00e0 t\u1ed3n t\u1ea1i m\u00e3i m\u00e3i tr\u1eeb khi h\u1ec7 qu\u1ea3n tr\u1ecb c\u01a1 s\u1edf d\u1eef li\u1ec7u ph\u00e1t hi\u1ec7n ra deadlock v\u00e0 h\u1ee7y b\u1ecf m\u1ed9t trong c\u00e1c Transaction.","title":"Deadlock"},{"location":"Database/Deadlock/#deadlock-detection","text":"C\u00e1c Relational database \u0111\u1ec1u c\u00f3 ph\u01b0\u01a1ng ph\u00e1p \u0111\u1ec3 c\u00f3 th\u1ec3 ph\u00e1t hi\u1ec7n ra khi n\u00e0o deadlock x\u1ea3y ra, tr\u00e1nh d\u1eabn \u0111\u1ebfn vi\u1ec7c h\u1ec7 th\u1ed1ng b\u1ecb Deadlock qu\u00e1 l\u00e2u. Th\u1eadm ch\u00ed Relational database theo d\u00f5i c\u00e1c Transaction lock d\u1eef li\u1ec7u nh\u01b0 th\u1ebf n\u00e0o b\u1ea5t k\u1ec3 n\u00f3 c\u00f3 d\u1eabn \u0111\u1ebfn deadlock hay kh\u00f4ng. Wait-for Graph l\u00e0 m\u1ed9t trong nh\u1eefng ph\u01b0\u01a1ng ph\u00e1p \u0111\u1ec3 ph\u00e1t hi\u1ec7n deadlock. Trong ph\u01b0\u01a1ng ph\u00e1p n\u00e0y, m\u1ed9t bi\u1ec3u \u0111\u1ed3 \u0111\u01b0\u1ee3c v\u1ebd d\u1ef1a tr\u00ean Transactions v\u00e0 lock status c\u1ee7a t\u1eebng Transactions. N\u1ebfu \u0111\u1ed3 th\u1ecb n\u00e0y t\u1ea1o th\u00e0nh m\u1ed9t chu k\u1ef3 th\u00ec t\u1ee9c l\u00e0 \u0111ang c\u00f3 m\u1ed9t deadlock. V\u00ed d\u1ee5 v\u1ec1 1 bi\u1ec3u \u0111\u1ed3 khi x\u1ea3y ra deadlock d\u1ef1a tr\u00ean ph\u01b0\u01a1ng ph\u00e1p Wait-for graph:","title":"Deadlock Detection"},{"location":"Database/Deadlock/#deadlock-avoidance","text":"M\u1ed9t ph\u01b0\u01a1ng ph\u00e1p \u0111\u1ec3 tr\u00e1nh deadlock l\u00e0 \u00e1p d\u1ee5ng t\u00ednh Consistency l\u00ean c\u00e1c Table trong Database. Trong v\u00ed d\u1ee5 \u0111\u00e3 cho \u1edf tr\u00ean, c\u00e1c Transaction truy c\u1eadp Student v\u00e0 Grade ph\u1ea3i lu\u00f4n truy c\u1eadp v\u00e0o c\u00e1c table theo m\u1ed9t th\u1ee9 t\u1ef1 nh\u1ea5t \u0111\u1ecbnh. Gi\u1ea3 s\u1eed nh\u01b0 th\u1ee9 t\u1ef1 truy c\u1eadp c\u1ed1 \u0111\u1ecbnh c\u1ee7a 2 b\u1ea3ng l\u00e0 Student \u2192 Grade . Trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y th\u00ec T2 s\u1ebd ph\u1ea3i ch\u1edd T1 gi\u1ea3i ph\u00f3ng t\u00e0i nguy\u00ean t\u1ea1i b\u1ea3ng Student xong th\u00ec m\u1edbi b\u1eaft \u0111\u1ea7u (t\u1ee9c l\u00e0 T2 s\u1ebd ch\u01b0a lock t\u00e0i nguy\u00ean c\u1ee7a b\u1ea3ng Grade ) do \u0111\u00f3 T1 s\u1ebd th\u1ef1c hi\u1ec7n 1 c\u00e1ch b\u00ecnh th\u01b0\u1eddng r\u1ed3i T2 m\u1edbi th\u1ef1c hi\u1ec7n v\u00e0 deadlock s\u1ebd kh\u00f4ng x\u1ea3y ra. Ngo\u00e0i ra c\u00f2n c\u00f3 c\u00e1c Deadlock Avoidance nh\u01b0 sau: H\u1ea1n ch\u1ebf s\u1eed d\u1ee5ng transactions n\u1ebfu kh\u00f4ng th\u1eadt s\u1ef1 c\u1ea7n thi\u1ebft. \u0110\u1ec3 l\u00e0m \u0111\u01b0\u1ee3c \u0111i\u1ec1u n\u00e0y, th\u00ec ch\u00fang ta c\u1ea7n ph\u1ea3i hi\u1ec3u \u00fd ngh\u0129a c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng transaction v\u00e0 tr\u00e1nh l\u1ea1m d\u1ee5ng. Gi\u1ea3m thi\u1ec3u s\u1ed1 l\u01b0\u1ee3ng b\u1ea3ng c\u1ea7n t\u00e1c \u0111\u1ed9ng trong m\u1ed9t transactions, transactions c\u00f3 s\u1ed1 b\u1ea3ng tham gia c\u00e0ng \u00edt th\u00ec kh\u1ea3 n\u0103ng x\u1ea3y ra deadlock c\u00e0ng th\u1ea5p. Gi\u1eef cho c\u00e1c transactions lu\u00f4n c\u00f3 workloads v\u00e0 th\u1eddi gian x\u1eed l\u00fd c\u00e0ng \u00edt c\u00e0ng t\u1ed1t, t\u1ed1i \u01b0u query, clean code v.vv Khi s\u1eeda \u0111\u1ed5i nhi\u1ec1u table trong m\u1ed9t transactions ho\u1eb7c c\u00e1c row kh\u00e1c nhau trong c\u00f9ng m\u1ed9t table, n\u00ean th\u1ef1c hi\u1ec7n c\u00e1c thao t\u00e1c \u0111\u00f3 theo th\u1ee9 t\u1ef1 nh\u1ea5t qu\u00e1n.","title":"Deadlock Avoidance"},{"location":"Database/Deadlock/#deadlock-prevention","text":"Deadlock Avoidance th\u00f4i ch\u01b0a \u0111\u1ee7. \u0110\u1ed1i v\u1edbi m\u1ed9t c\u01a1 s\u1edf d\u1eef li\u1ec7u l\u1edbn th\u01b0\u1eddng s\u1ebd d\u00f9ng ph\u01b0\u01a1ng ph\u00e1p Deadlock Prevention \u0111\u1ec3 ng\u0103n ch\u1eb7n t\u00ecnh tr\u1ea1ng Deadlock b\u1eb1ng c\u00e1ch ph\u00e2n b\u1ed5 c\u00e1c resource m\u1ed9t c\u00e1ch h\u1ee3p l\u00fd sao cho kh\u00f4ng th\u1ec3 x\u1ea3y ra t\u00ecnh tr\u1ea1ng Deadlock. C\u00e1c Database s\u1ebd ph\u00e2n t\u00edch c\u00e1c ho\u1ea1t \u0111\u1ed9ng c\u1ee7a Transactions xem ch\u00fang c\u00f3 x\u00e1c su\u1ea5t Deadlock hay kh\u00f4ng, n\u1ebfu c\u00f3, Transaction \u0111\u00f3 c\u00f3 th\u1ec3 kh\u00f4ng bao gi\u1edd \u0111\u01b0\u1ee3c ph\u00e9p th\u1ef1c hi\u1ec7n. C\u01a1 ch\u1ebf Deadlock Prevention \u0111\u1ec1 xu\u1ea5t hai ph\u01b0\u01a1ng \u00e1n: Wait-Die Scheme : N\u1ebfu m\u1ed9t Transaction y\u00eau c\u1ea7u m\u1ed9t t\u00e0i nguy\u00ean \u0111ang b\u1ecb lock b\u1edfi m\u1ed9t Transaction kh\u00e1c, th\u00ec DBMS ch\u1ec9 c\u1ea7n check c\u00e1i timestamp c\u1ee7a c\u1ea3 hai Transaction v\u00e0 cho ph\u00e9p Transaction c\u00f3 timestamp tr\u1ec5 h\u01a1n h\u01a1n \u0111\u1ee3i cho \u0111\u1ebfn khi t\u00e0i nguy\u00ean available. Wound Wait Scheme : T\u01b0\u01a1ng t\u1ef1 nh\u01b0 tr\u00ean, DBMS c\u0169ng s\u1ebd check c\u00e1i timestamp \u0111\u1ec3 ph\u00e2n bi\u1ec7t older transaction v\u00e0 younger transaction . Kh\u00e1c bi\u1ec7t l\u00e0 thay v\u00ec b\u1eaft younger transaction \u0111\u1ee3i th\u00ec n\u00f3 s\u1ebd kill younger transaction lu\u00f4n. younger transaction s\u1ebd \u0111\u01b0\u1ee3c b\u1eaft \u0111\u1ea7u l\u1ea1i v\u1edbi \u0111\u1ed9 tr\u1ec5 h\u01a1n timestamp ban \u0111\u1ea7u c\u1ee7a n\u00f3.","title":"Deadlock Prevention"},{"location":"Database/Deadlock/#reference","text":"Deadlock in DBMS - geeksforgeeks What is the difference between \"wait-die\" and \"wound-wait\" deadlock prevention algorithms? - stackoverflow - questions 32794142 Deadlocks - docs.oracle Deadlock in DBMS - educba","title":"Reference"},{"location":"Database/Index-Constraints-Unique/","text":"Index, Constraints, Unique Index Concepts Index l\u00e0 m\u1ed9t Database Optimization Techniques, n\u00f3 nh\u01b0 m\u1ed9t c\u1ea5u tr\u00fac d\u1eef li\u1ec7u m\u00e0 Database Search Engine c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u1ec3 t\u0103ng nhanh th\u1eddi gian v\u00e0 t\u1ed1i \u01b0u hi\u1ec7u su\u1ea5t truy v\u1ea5n database b\u1eb1ng vi\u1ec7c gi\u1ea3m l\u01b0\u1ee3ng truy c\u1eadp v\u00e0o b\u1ed9 nh\u1edb khi th\u1ef1c hi\u1ec7n c\u00e1c c\u00e2u truy v\u1ea5n. Hi\u1ec3u \u0111\u01a1n gi\u1ea3n, m\u1ed9t Index l\u00e0 m\u1ed9t con tr\u1ecf t\u1edbi d\u1eef li\u1ec7u trong m\u1ed9t b\u1ea3ng (t\u01b0\u01a1ng t\u1ef1 nh\u01b0 M\u1ee5c l\u1ee5c c\u1ee7a cu\u1ed1n s\u00e1ch). Gi\u1ea3 s\u1eed ta c\u00f3 m\u1ed9t b\u1ea3ng User l\u01b0u th\u00f4ng tin c\u1ee7a ng\u01b0\u1eddi d\u00f9ng, ta mu\u1ed1n search th\u00f4ng tin c\u1ee7a ng\u01b0\u1eddi d\u00f9ng c\u00f3 field Name l\u00e0 \u201cNguyenVanA\u201d . Ta c\u00f3 truy v\u1ea5n SQL sau: SELECT * FROM User WHERE Name = 'NguyenVanA'; Khi kh\u00f4ng c\u00f3 Index cho c\u1ed9t Name, Database Search Engine s\u1ebd ph\u1ea3i search qua t\u1ea5t c\u1ea3 c\u00e1c Row c\u1ee7a b\u1ea3ng User \u0111\u1ec3 so s\u00e1nh v\u00e0 l\u1ea5y ra nh\u1eefng Row th\u1ecfa m\u00e3n \u0111i\u1ec1u ki\u1ec7n WHERE. V\u00ec v\u1eady, khi s\u1ed1 l\u01b0\u1ee3ng record trong 1 table c\u1ef1c l\u1edbn, vi\u1ec7c search t\u1eebng record nh\u01b0 th\u1ebf s\u1ebd t\u1ed1n performance r\u1ea5t nhi\u1ec1u. Index \u0111\u01b0\u1ee3c sinh ra \u0111\u1ec3 gi\u1ea3i quy\u1ebft v\u1ea5n \u0111\u1ec1 n\u00e0y. Index tr\u1ecf t\u1edbi \u0111\u1ecba ch\u1ec9 d\u1eef li\u1ec7u trong m\u1ed9t b\u1ea3ng, n\u00f3 gi\u00fap Database Search Engine th\u1ef1c hi\u1ec7n c\u00e1c c\u00e2u truy v\u1ea5n nhanh ch\u00f3ng b\u1eb1ng c\u00e1ch t\u00ecm t\u1edbi \u0111\u00fang \u0111\u1ecba ch\u1ec9 d\u1eef li\u1ec7u \u0111\u1ec3 l\u1ea5y n\u00f3 ra thay v\u00ec ph\u1ea3i \u0111i nh\u00ecn m\u1eb7t t\u1eebng th\u1eb1ng d\u1eef li\u1ec7u \ud83d\ude04 Index c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c t\u1ea1o cho m\u1ed9t ho\u1eb7c nhi\u1ec1u c\u1ed9t trong database. Index th\u01b0\u1eddng \u0111\u01b0\u1ee3c t\u1ea1o m\u1eb7c \u0111\u1ecbnh cho Primary key, Foreign key. Ngo\u00e0i ra, ta c\u0169ng c\u00f3 th\u1ec3 t\u1ea1o th\u00eam index cho c\u00e1c c\u1ed9t n\u1ebfu c\u1ea7n. Structure of a Database Index Index l\u00e0 m\u1ed9t c\u1ea5u tr\u00fac d\u1eef li\u1ec7u key-value pair g\u1ed3m: Search Key : ch\u1ee9a b\u1ea3n sao c\u00e1c gi\u00e1 tr\u1ecb c\u1ee7a c\u1ed9t \u0111\u01b0\u1ee3c t\u1ea1o Index ( th\u01b0\u1eddng g\u1ed3m primary key) Data Reference : ch\u1ee9a con tr\u1ecf tr\u1ecf \u0111\u1ebfn \u0111\u1ecba ch\u1ec9 c\u1ee7a record c\u00f3 gi\u00e1 tr\u1ecb c\u1ed9t index t\u01b0\u01a1ng \u1ee9ng Indexing methods C\u00f3 nhi\u1ec1u ph\u01b0\u01a1ng ph\u00e1p l\u1eadp index kh\u00e1c nhau, t\u00f9y tr\u01b0\u1eddng h\u1ee3p c\u1ee5 th\u1ec3 s\u1ebd c\u00f3 c\u00e1c c\u00e1ch l\u1eadp index t\u1ed1i \u01b0u. H\u00ecnh b\u00ean d\u01b0\u1edbi l\u00e0 Index data structure types , ng\u01b0\u1eddi ta d\u1ef1a v\u00e0o c\u00e1c ti\u00eau ch\u00ed \u0111\u00f3 \u0111\u1ec3 ch\u1ecdn c\u00e1ch l\u1eadp index t\u1ed1i \u01b0u nh\u1ea5t cho h\u1ec7 th\u1ed1ng c\u1ee7a m\u00ecnh. Ph\u1ea1m vi truy c\u1eadp d\u1eef li\u1ec7u l\u00e0 Internal/External, search theo ki\u1ec3u Dynamic search/Static search, database Cluster/Non Cluster, Sparse hay Dense. \u0110i\u1ec1u quan tr\u1ecdng nh\u1ea5t l\u00e0 ta mu\u1ed1n l\u1eadp index c\u00e1c m\u1ed1i quan h\u1ec7 d\u1eef li\u1ec7u m\u1ed9t chi\u1ec1u hay nhi\u1ec1u chi\u1ec1u. Constraints Concepts Constraint l\u00e0 nh\u1eefng quy t\u1eafc \u0111\u01b0\u1ee3c \u00e1p d\u1ee5ng tr\u00ean c\u00e1c c\u1ed9t d\u1eef li\u1ec7u, tr\u00ean b\u1ea3ng. \u0110\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 ki\u1ec3m tra t\u00ednh h\u1ee3p l\u1ec7 c\u1ee7a d\u1eef li\u1ec7u v\u00e0o, \u0111\u1ea3m b\u1ea3o t\u00ednh ch\u00ednh x\u00e1c, t\u00ednh to\u00e0n v\u1eb9n c\u1ee7a d\u1eef li\u1ec7u. Constraint c\u00f3 c\u00e1c sau level: Column/Row level l\u00e0 c\u00e1c r\u00e0ng bu\u1ed9c \u00e1p d\u1ee5ng cho c\u00e1c c\u1ed9t, c\u00e1c d\u00f2ng trong 1 table Table level : l\u00e0 c\u00e1c r\u00e0ng bu\u1ed9c \u00e1p d\u1ee5ng cho to\u00e0n b\u1ed9 table. External level : l\u00e0 c\u00e1c r\u00e0ng bu\u1ed9c \u00e1p d\u1ee5ng cho c\u00e1c table v\u1edbi nhau. Types of Constraints Constraints Description NOT NULL S\u1eed d\u1ee5ng \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o d\u1eef li\u1ec7u c\u1ee7a c\u1ed9t kh\u00f4ng \u0111\u01b0\u1ee3c nh\u1eadn gi\u00e1 tr\u1ecb NULL DEFAULT G\u00e1n gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh trong tr\u01b0\u1eddng h\u1ee3p d\u1eef li\u1ec7u c\u1ee7a c\u1ed9t kh\u00f4ng \u0111\u01b0\u1ee3c x\u00e1c \u0111\u1ecbnh. UNIQUE S\u1eed d\u1ee5ng \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o d\u1eef li\u1ec7u c\u1ee7a c\u1ed9t l\u00e0 duy nh\u1ea5t, kh\u00f4ng tr\u00f9ng l\u1eb7p gi\u00e1 tr\u1ecb tr\u00ean c\u00f9ng 1 c\u1ed9t. PRIMARY KEY D\u00f9ng \u0111\u1ec3 thi\u1ebft l\u1eadp kh\u00f3a ch\u00ednh tr\u00ean b\u1ea3ng, x\u00e1c \u0111\u1ecbnh gi\u00e1 tr\u1ecb tr\u00ean t\u1eadp c\u00e1c c\u1ed9t l\u00e0m kh\u00f3a ch\u00ednh ph\u1ea3i l\u00e0 duy nh\u1ea5t, kh\u00f4ng \u0111\u01b0\u1ee3c tr\u00f9ng l\u1eb7p. Vi\u1ec7c khai b\u00e1o r\u00e0ng bu\u1ed9c kh\u00f3a ch\u00ednh y\u00eau c\u1ea7u c\u00e1c c\u1ed9t ph\u1ea3i NOT NULL. FOREIGN KEY D\u00f9ng \u0111\u1ec3 thi\u1ebft l\u1eadp kh\u00f3a ngo\u1ea1i tr\u00ean b\u1ea3ng, tham chi\u1ebfu \u0111\u1ebfn b\u1ea3ng kh\u00e1c th\u00f4ng qua gi\u00e1 tr\u1ecb c\u1ee7a c\u1ed9t \u0111\u01b0\u1ee3c li\u00ean k\u1ebft. Gi\u00e1 tr\u1ecb c\u1ee7a c\u1ed9t \u0111\u01b0\u1ee3c li\u00ean k\u1ebft ph\u1ea3i l\u00e0 duy nh\u1ea5t trong b\u1ea3ng kia. CHECK B\u1ea3o \u0111\u1ea3m t\u1ea5t c\u1ea3 gi\u00e1 tr\u1ecb trong c\u1ed9t th\u1ecfa m\u00e3n \u0111i\u1ec1u ki\u1ec7n n\u00e0o \u0111\u00f3. \u0110\u00e2y l\u00e0 h\u00ecnh th\u1ee9c s\u1eed d\u1ee5ng ph\u1ed5 bi\u1ebfn \u0111\u1ec3 ki\u1ec3m tra t\u00ednh h\u1ee3p l\u1ec7 c\u1ee7a d\u1eef li\u1ec7u (validate data) TRIGGER ki\u1ec3m tra r\u00e0ng bu\u1ed9c (check constraints) tr\u00ean nhi\u1ec1u quan h\u1ec7 (nhi\u1ec1u b\u1ea3ng/table) ho\u1eb7c tr\u00ean nhi\u1ec1u d\u00f2ng (nhi\u1ec1u record) c\u1ee7a b\u1ea3ng. Ng\u0103n ch\u1eb7n vi\u1ec7c x\u00f3a nh\u1eefng d\u1eef li\u1ec7u quan tr\u1ecdng. (c\u00f3 th\u1ec3 d\u00f9ng back up c\u00e1c d\u1eef li\u1ec7u quan tr\u1ecdng sang table kh\u00e1c ph\u00f2ng khi \u2026b\u1ecb x\u00f3a ngo\u00e0i \u00fd mu\u1ed1n) H\u00ecnh d\u01b0\u1edbi \u0111\u00e2y l\u00e0 ph\u1ea1m vi \u00e1p d\u1ee5ng theo level c\u1ee7a c\u00e1c Constraints UNIQUE Constraints UNIQUE Constraints \u0111\u1ea3m b\u1ea3o r\u1eb1ng t\u1ea5t c\u1ea3 c\u00e1c gi\u00e1 tr\u1ecb trong m\u1ed9t c\u1ed9t l\u00e0 duy nh\u1ea5t. C\u1ea3 r\u00e0ng bu\u1ed9c UNIQUE v\u00e0 PRIMARY KEY \u0111\u1ec1u \u0111\u1ea3m b\u1ea3o t\u00ednh duy nh\u1ea5t cho m\u1ed9t c\u1ed9t trong b\u1ea3ng. R\u00e0ng bu\u1ed9c PRIMARY KEY t\u1ef1 \u0111\u1ed9ng c\u00f3 m\u1ed9t r\u00e0ng bu\u1ed9c UNIQUE constraint . Tuy nhi\u00ean c\u00f3 th\u1ec3 c\u00f3 nhi\u1ec1u UNIQUE constraints tr\u00ean m\u1ed7i b\u1ea3ng, nh\u01b0ng ch\u1ec9 c\u00f3 m\u1ed9t PRIMARY KEY cho m\u1ed9t b\u1ea3ng. SQL UNIQUE Constraint on CREATE TABLE SQL sau t\u1ea1o UNIQUE Constraint tr\u00ean c\u1ed9t \"ID\" khi b\u1ea3ng \"Persons\" \u0111\u01b0\u1ee3c t\u1ea1o: CREATE TABLE Persons ( ID int NOT NULL , LastName varchar ( 255 ) NOT NULL , FirstName varchar ( 255 ), Age int , UNIQUE ( ID ) ); \u0110\u1ec3 \u0111\u1eb7t t\u00ean cho m\u1ed9t UNIQUE Constraint hay \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh m\u1ed9t UNIQUE Constraint tr\u00ean nhi\u1ec1u c\u1ed9t, s\u1eed d\u1ee5ng c\u00fa ph\u00e1p SQL sau: CREATE TABLE Persons ( ID int NOT NULL , LastName varchar ( 255 ) NOT NULL , FirstName varchar ( 255 ), Age int , CONSTRAINT UC_Person UNIQUE ( ID , LastName ) ); SQL UNIQUE Constraint on ALTER TABLE \u0110\u1ec3 th\u00eam UNIQUE Constraint v\u00e0o c\u1ed9t \"ID\" khi b\u1ea3ng Persons \u0111\u00e3 \u0111\u01b0\u1ee3c t\u1ea1o, s\u1eed d\u1ee5ng SQL sau: ALTER TABLE Persons ADD UNIQUE ( ID ); \u0110\u1ec3 \u0111\u1eb7t t\u00ean cho UNIQUE Constraint v\u00e0 \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh UNIQUE Constraint tr\u00ean nhi\u1ec1u c\u1ed9t, s\u1eed d\u1ee5ng c\u00fa ph\u00e1p SQL sau: ALTER TABLE Persons ADD CONSTRAINT UC_Person UNIQUE ( ID , LastName ); DROP a UNIQUE Constraint X\u00f3a UNIQUE Constraint ALTER TABLE Persons DROP INDEX UC_Person ; Primary key vs Unique key H\u00ecnh d\u01b0\u1edbi \u0111\u00e2y so s\u00e1nh \u0111i\u1ec3m gi\u1ed1ng, kh\u00e1c gi\u1eefa Primary key v\u00e0 Unique key Reference Indexing in Databases Database Optimization Techniques #1: Indexing 4 Index Data Structures a Data Engineer Must Know Constraints in SQL SQL UNIQUE Constraint Difference between Primary key and Unique key","title":"Index, Constraints, Unique"},{"location":"Database/Index-Constraints-Unique/#index-constraints-unique","text":"","title":"Index, Constraints, Unique"},{"location":"Database/Index-Constraints-Unique/#index","text":"","title":"Index"},{"location":"Database/Index-Constraints-Unique/#concepts","text":"Index l\u00e0 m\u1ed9t Database Optimization Techniques, n\u00f3 nh\u01b0 m\u1ed9t c\u1ea5u tr\u00fac d\u1eef li\u1ec7u m\u00e0 Database Search Engine c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u1ec3 t\u0103ng nhanh th\u1eddi gian v\u00e0 t\u1ed1i \u01b0u hi\u1ec7u su\u1ea5t truy v\u1ea5n database b\u1eb1ng vi\u1ec7c gi\u1ea3m l\u01b0\u1ee3ng truy c\u1eadp v\u00e0o b\u1ed9 nh\u1edb khi th\u1ef1c hi\u1ec7n c\u00e1c c\u00e2u truy v\u1ea5n. Hi\u1ec3u \u0111\u01a1n gi\u1ea3n, m\u1ed9t Index l\u00e0 m\u1ed9t con tr\u1ecf t\u1edbi d\u1eef li\u1ec7u trong m\u1ed9t b\u1ea3ng (t\u01b0\u01a1ng t\u1ef1 nh\u01b0 M\u1ee5c l\u1ee5c c\u1ee7a cu\u1ed1n s\u00e1ch). Gi\u1ea3 s\u1eed ta c\u00f3 m\u1ed9t b\u1ea3ng User l\u01b0u th\u00f4ng tin c\u1ee7a ng\u01b0\u1eddi d\u00f9ng, ta mu\u1ed1n search th\u00f4ng tin c\u1ee7a ng\u01b0\u1eddi d\u00f9ng c\u00f3 field Name l\u00e0 \u201cNguyenVanA\u201d . Ta c\u00f3 truy v\u1ea5n SQL sau: SELECT * FROM User WHERE Name = 'NguyenVanA'; Khi kh\u00f4ng c\u00f3 Index cho c\u1ed9t Name, Database Search Engine s\u1ebd ph\u1ea3i search qua t\u1ea5t c\u1ea3 c\u00e1c Row c\u1ee7a b\u1ea3ng User \u0111\u1ec3 so s\u00e1nh v\u00e0 l\u1ea5y ra nh\u1eefng Row th\u1ecfa m\u00e3n \u0111i\u1ec1u ki\u1ec7n WHERE. V\u00ec v\u1eady, khi s\u1ed1 l\u01b0\u1ee3ng record trong 1 table c\u1ef1c l\u1edbn, vi\u1ec7c search t\u1eebng record nh\u01b0 th\u1ebf s\u1ebd t\u1ed1n performance r\u1ea5t nhi\u1ec1u. Index \u0111\u01b0\u1ee3c sinh ra \u0111\u1ec3 gi\u1ea3i quy\u1ebft v\u1ea5n \u0111\u1ec1 n\u00e0y. Index tr\u1ecf t\u1edbi \u0111\u1ecba ch\u1ec9 d\u1eef li\u1ec7u trong m\u1ed9t b\u1ea3ng, n\u00f3 gi\u00fap Database Search Engine th\u1ef1c hi\u1ec7n c\u00e1c c\u00e2u truy v\u1ea5n nhanh ch\u00f3ng b\u1eb1ng c\u00e1ch t\u00ecm t\u1edbi \u0111\u00fang \u0111\u1ecba ch\u1ec9 d\u1eef li\u1ec7u \u0111\u1ec3 l\u1ea5y n\u00f3 ra thay v\u00ec ph\u1ea3i \u0111i nh\u00ecn m\u1eb7t t\u1eebng th\u1eb1ng d\u1eef li\u1ec7u \ud83d\ude04 Index c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c t\u1ea1o cho m\u1ed9t ho\u1eb7c nhi\u1ec1u c\u1ed9t trong database. Index th\u01b0\u1eddng \u0111\u01b0\u1ee3c t\u1ea1o m\u1eb7c \u0111\u1ecbnh cho Primary key, Foreign key. Ngo\u00e0i ra, ta c\u0169ng c\u00f3 th\u1ec3 t\u1ea1o th\u00eam index cho c\u00e1c c\u1ed9t n\u1ebfu c\u1ea7n.","title":"Concepts"},{"location":"Database/Index-Constraints-Unique/#structure-of-a-database-index","text":"Index l\u00e0 m\u1ed9t c\u1ea5u tr\u00fac d\u1eef li\u1ec7u key-value pair g\u1ed3m: Search Key : ch\u1ee9a b\u1ea3n sao c\u00e1c gi\u00e1 tr\u1ecb c\u1ee7a c\u1ed9t \u0111\u01b0\u1ee3c t\u1ea1o Index ( th\u01b0\u1eddng g\u1ed3m primary key) Data Reference : ch\u1ee9a con tr\u1ecf tr\u1ecf \u0111\u1ebfn \u0111\u1ecba ch\u1ec9 c\u1ee7a record c\u00f3 gi\u00e1 tr\u1ecb c\u1ed9t index t\u01b0\u01a1ng \u1ee9ng","title":"Structure of a Database Index"},{"location":"Database/Index-Constraints-Unique/#indexing-methods","text":"C\u00f3 nhi\u1ec1u ph\u01b0\u01a1ng ph\u00e1p l\u1eadp index kh\u00e1c nhau, t\u00f9y tr\u01b0\u1eddng h\u1ee3p c\u1ee5 th\u1ec3 s\u1ebd c\u00f3 c\u00e1c c\u00e1ch l\u1eadp index t\u1ed1i \u01b0u. H\u00ecnh b\u00ean d\u01b0\u1edbi l\u00e0 Index data structure types , ng\u01b0\u1eddi ta d\u1ef1a v\u00e0o c\u00e1c ti\u00eau ch\u00ed \u0111\u00f3 \u0111\u1ec3 ch\u1ecdn c\u00e1ch l\u1eadp index t\u1ed1i \u01b0u nh\u1ea5t cho h\u1ec7 th\u1ed1ng c\u1ee7a m\u00ecnh. Ph\u1ea1m vi truy c\u1eadp d\u1eef li\u1ec7u l\u00e0 Internal/External, search theo ki\u1ec3u Dynamic search/Static search, database Cluster/Non Cluster, Sparse hay Dense. \u0110i\u1ec1u quan tr\u1ecdng nh\u1ea5t l\u00e0 ta mu\u1ed1n l\u1eadp index c\u00e1c m\u1ed1i quan h\u1ec7 d\u1eef li\u1ec7u m\u1ed9t chi\u1ec1u hay nhi\u1ec1u chi\u1ec1u.","title":"Indexing methods"},{"location":"Database/Index-Constraints-Unique/#constraints","text":"","title":"Constraints"},{"location":"Database/Index-Constraints-Unique/#concepts_1","text":"Constraint l\u00e0 nh\u1eefng quy t\u1eafc \u0111\u01b0\u1ee3c \u00e1p d\u1ee5ng tr\u00ean c\u00e1c c\u1ed9t d\u1eef li\u1ec7u, tr\u00ean b\u1ea3ng. \u0110\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 ki\u1ec3m tra t\u00ednh h\u1ee3p l\u1ec7 c\u1ee7a d\u1eef li\u1ec7u v\u00e0o, \u0111\u1ea3m b\u1ea3o t\u00ednh ch\u00ednh x\u00e1c, t\u00ednh to\u00e0n v\u1eb9n c\u1ee7a d\u1eef li\u1ec7u. Constraint c\u00f3 c\u00e1c sau level: Column/Row level l\u00e0 c\u00e1c r\u00e0ng bu\u1ed9c \u00e1p d\u1ee5ng cho c\u00e1c c\u1ed9t, c\u00e1c d\u00f2ng trong 1 table Table level : l\u00e0 c\u00e1c r\u00e0ng bu\u1ed9c \u00e1p d\u1ee5ng cho to\u00e0n b\u1ed9 table. External level : l\u00e0 c\u00e1c r\u00e0ng bu\u1ed9c \u00e1p d\u1ee5ng cho c\u00e1c table v\u1edbi nhau.","title":"Concepts"},{"location":"Database/Index-Constraints-Unique/#types-of-constraints","text":"Constraints Description NOT NULL S\u1eed d\u1ee5ng \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o d\u1eef li\u1ec7u c\u1ee7a c\u1ed9t kh\u00f4ng \u0111\u01b0\u1ee3c nh\u1eadn gi\u00e1 tr\u1ecb NULL DEFAULT G\u00e1n gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh trong tr\u01b0\u1eddng h\u1ee3p d\u1eef li\u1ec7u c\u1ee7a c\u1ed9t kh\u00f4ng \u0111\u01b0\u1ee3c x\u00e1c \u0111\u1ecbnh. UNIQUE S\u1eed d\u1ee5ng \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o d\u1eef li\u1ec7u c\u1ee7a c\u1ed9t l\u00e0 duy nh\u1ea5t, kh\u00f4ng tr\u00f9ng l\u1eb7p gi\u00e1 tr\u1ecb tr\u00ean c\u00f9ng 1 c\u1ed9t. PRIMARY KEY D\u00f9ng \u0111\u1ec3 thi\u1ebft l\u1eadp kh\u00f3a ch\u00ednh tr\u00ean b\u1ea3ng, x\u00e1c \u0111\u1ecbnh gi\u00e1 tr\u1ecb tr\u00ean t\u1eadp c\u00e1c c\u1ed9t l\u00e0m kh\u00f3a ch\u00ednh ph\u1ea3i l\u00e0 duy nh\u1ea5t, kh\u00f4ng \u0111\u01b0\u1ee3c tr\u00f9ng l\u1eb7p. Vi\u1ec7c khai b\u00e1o r\u00e0ng bu\u1ed9c kh\u00f3a ch\u00ednh y\u00eau c\u1ea7u c\u00e1c c\u1ed9t ph\u1ea3i NOT NULL. FOREIGN KEY D\u00f9ng \u0111\u1ec3 thi\u1ebft l\u1eadp kh\u00f3a ngo\u1ea1i tr\u00ean b\u1ea3ng, tham chi\u1ebfu \u0111\u1ebfn b\u1ea3ng kh\u00e1c th\u00f4ng qua gi\u00e1 tr\u1ecb c\u1ee7a c\u1ed9t \u0111\u01b0\u1ee3c li\u00ean k\u1ebft. Gi\u00e1 tr\u1ecb c\u1ee7a c\u1ed9t \u0111\u01b0\u1ee3c li\u00ean k\u1ebft ph\u1ea3i l\u00e0 duy nh\u1ea5t trong b\u1ea3ng kia. CHECK B\u1ea3o \u0111\u1ea3m t\u1ea5t c\u1ea3 gi\u00e1 tr\u1ecb trong c\u1ed9t th\u1ecfa m\u00e3n \u0111i\u1ec1u ki\u1ec7n n\u00e0o \u0111\u00f3. \u0110\u00e2y l\u00e0 h\u00ecnh th\u1ee9c s\u1eed d\u1ee5ng ph\u1ed5 bi\u1ebfn \u0111\u1ec3 ki\u1ec3m tra t\u00ednh h\u1ee3p l\u1ec7 c\u1ee7a d\u1eef li\u1ec7u (validate data) TRIGGER ki\u1ec3m tra r\u00e0ng bu\u1ed9c (check constraints) tr\u00ean nhi\u1ec1u quan h\u1ec7 (nhi\u1ec1u b\u1ea3ng/table) ho\u1eb7c tr\u00ean nhi\u1ec1u d\u00f2ng (nhi\u1ec1u record) c\u1ee7a b\u1ea3ng. Ng\u0103n ch\u1eb7n vi\u1ec7c x\u00f3a nh\u1eefng d\u1eef li\u1ec7u quan tr\u1ecdng. (c\u00f3 th\u1ec3 d\u00f9ng back up c\u00e1c d\u1eef li\u1ec7u quan tr\u1ecdng sang table kh\u00e1c ph\u00f2ng khi \u2026b\u1ecb x\u00f3a ngo\u00e0i \u00fd mu\u1ed1n) H\u00ecnh d\u01b0\u1edbi \u0111\u00e2y l\u00e0 ph\u1ea1m vi \u00e1p d\u1ee5ng theo level c\u1ee7a c\u00e1c Constraints","title":"Types of Constraints"},{"location":"Database/Index-Constraints-Unique/#unique-constraints","text":"UNIQUE Constraints \u0111\u1ea3m b\u1ea3o r\u1eb1ng t\u1ea5t c\u1ea3 c\u00e1c gi\u00e1 tr\u1ecb trong m\u1ed9t c\u1ed9t l\u00e0 duy nh\u1ea5t. C\u1ea3 r\u00e0ng bu\u1ed9c UNIQUE v\u00e0 PRIMARY KEY \u0111\u1ec1u \u0111\u1ea3m b\u1ea3o t\u00ednh duy nh\u1ea5t cho m\u1ed9t c\u1ed9t trong b\u1ea3ng. R\u00e0ng bu\u1ed9c PRIMARY KEY t\u1ef1 \u0111\u1ed9ng c\u00f3 m\u1ed9t r\u00e0ng bu\u1ed9c UNIQUE constraint . Tuy nhi\u00ean c\u00f3 th\u1ec3 c\u00f3 nhi\u1ec1u UNIQUE constraints tr\u00ean m\u1ed7i b\u1ea3ng, nh\u01b0ng ch\u1ec9 c\u00f3 m\u1ed9t PRIMARY KEY cho m\u1ed9t b\u1ea3ng.","title":"UNIQUE Constraints"},{"location":"Database/Index-Constraints-Unique/#sql-unique-constraint-on-create-table","text":"SQL sau t\u1ea1o UNIQUE Constraint tr\u00ean c\u1ed9t \"ID\" khi b\u1ea3ng \"Persons\" \u0111\u01b0\u1ee3c t\u1ea1o: CREATE TABLE Persons ( ID int NOT NULL , LastName varchar ( 255 ) NOT NULL , FirstName varchar ( 255 ), Age int , UNIQUE ( ID ) ); \u0110\u1ec3 \u0111\u1eb7t t\u00ean cho m\u1ed9t UNIQUE Constraint hay \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh m\u1ed9t UNIQUE Constraint tr\u00ean nhi\u1ec1u c\u1ed9t, s\u1eed d\u1ee5ng c\u00fa ph\u00e1p SQL sau: CREATE TABLE Persons ( ID int NOT NULL , LastName varchar ( 255 ) NOT NULL , FirstName varchar ( 255 ), Age int , CONSTRAINT UC_Person UNIQUE ( ID , LastName ) );","title":"SQL UNIQUE Constraint on CREATE TABLE"},{"location":"Database/Index-Constraints-Unique/#sql-unique-constraint-on-alter-table","text":"\u0110\u1ec3 th\u00eam UNIQUE Constraint v\u00e0o c\u1ed9t \"ID\" khi b\u1ea3ng Persons \u0111\u00e3 \u0111\u01b0\u1ee3c t\u1ea1o, s\u1eed d\u1ee5ng SQL sau: ALTER TABLE Persons ADD UNIQUE ( ID ); \u0110\u1ec3 \u0111\u1eb7t t\u00ean cho UNIQUE Constraint v\u00e0 \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh UNIQUE Constraint tr\u00ean nhi\u1ec1u c\u1ed9t, s\u1eed d\u1ee5ng c\u00fa ph\u00e1p SQL sau: ALTER TABLE Persons ADD CONSTRAINT UC_Person UNIQUE ( ID , LastName );","title":"SQL UNIQUE Constraint on ALTER TABLE"},{"location":"Database/Index-Constraints-Unique/#drop-a-unique-constraint","text":"X\u00f3a UNIQUE Constraint ALTER TABLE Persons DROP INDEX UC_Person ;","title":"DROP a UNIQUE Constraint"},{"location":"Database/Index-Constraints-Unique/#primary-key-vs-unique-key","text":"H\u00ecnh d\u01b0\u1edbi \u0111\u00e2y so s\u00e1nh \u0111i\u1ec3m gi\u1ed1ng, kh\u00e1c gi\u1eefa Primary key v\u00e0 Unique key","title":"Primary key vs Unique key"},{"location":"Database/Index-Constraints-Unique/#reference","text":"Indexing in Databases Database Optimization Techniques #1: Indexing 4 Index Data Structures a Data Engineer Must Know Constraints in SQL SQL UNIQUE Constraint Difference between Primary key and Unique key","title":"Reference"},{"location":"Database/Locking-Isolation/","text":"Locking / Isolation Level Note: Data unit . V\u00ec c\u00e1c ph\u01b0\u01a1ng th\u1ee9c Locks \u0111\u01b0\u1ee3c thi\u1ebft l\u1eadp tr\u00ean m\u1ed9t \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u c\u1ee5 th\u1ec3, n\u00ean \u0111\u1ec3 hi\u1ec3u \u0111\u01b0\u1ee3c v\u00e0 c\u00e1c ph\u01b0\u01a1ng th\u1ee9c kh\u00f3a tr\u01b0\u1edbc ti\u00ean c\u1ea7n t\u00ecm hi\u1ec3u v\u1ec1 kh\u00e1i ni\u1ec7m \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u: \u0110\u01a1n v\u1ecb d\u1eef li\u1ec7u c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c chia th\u00e0nh nhi\u1ec1u c\u1ea5p \u0111\u1ed9 sau: - M\u1ed9t d\u00f2ng d\u1eef li\u1ec7u. - M\u1ed9t trang (page) (8KB) - M\u1ed9t b\u1ea3ng (table) trong c\u01a1 s\u1edf d\u1eef li\u1ec7u. - M\u1ed9t c\u01a1 s\u1edf d\u1eef li\u1ec7u (database) Concurrency Control Problem Nh\u1eefng t\u00ecnh hu\u1ed1ng Race condition hay g\u1eb7p trong Database: 1. Dirty read Uncommitted data / Dirty read - T\u00ecnh tr\u1ea1ng m\u00e0 Database read ra gi\u00e1 tr\u1ecb ch\u01b0a \u0111\u01b0\u1ee3c commit. X\u1ea3y ra khi m\u1ed9t transaction th\u1ef1c hi\u1ec7n \u0111\u1ecdc tr\u00ean m\u1ed9t \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u m\u00e0 \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u n\u00e0y \u0111ang b\u1ecb c\u1eadp nh\u1eadt b\u1edfi m\u1ed9t transaction kh\u00e1c nh\u01b0ng vi\u1ec7c c\u1eadp nh\u1eadt ch\u01b0a \u0111\u01b0\u1ee3c commit. T\u01b0\u01a1ng t\u1ef1 v\u1edbi Dirty read l\u00e0 Dirty write . L\u00e0 t\u00ecnh hu\u1ed1ng m\u00e0 transaction x\u1ea3y ra tr\u01b0\u1edbc ch\u01b0a k\u1ecbp commit, th\u00ec c\u00e1i t\u1edbi sau \u0111\u00e3 ghi \u0111\u00e8 l\u00ean, d\u1eabn t\u1edbi vi\u1ec7c k\u1ebft qu\u1ea3 b\u1ecb x\u00e1o tr\u1ed9n, database kh\u00f4ng bi\u1ebft d\u1eef li\u1ec7u n\u00e0o l\u00e0 d\u1eef li\u1ec7u \u0111\u00fang nh\u1ea5t, l\u00e0m m\u1ea5t \u0111i Consistency - t\u00ednh nh\u1ea5t qu\u00e1n c\u1ee7a Transaction. M\u1ed9t Transaction \u0111\u01b0\u1ee3c coi l\u00e0 no dirty write khi m\u00e0 Database ch\u1ec9 write l\u00ean nh\u1eefng record \u0111\u00e3 \u0111\u01b0\u1ee3c commit tr\u01b0\u1edbc \u0111\u00f3. N\u1ebfu 2 transaction c\u00f9ng mu\u1ed1n ghi \u0111\u1ed3ng th\u1eddi, th\u00ec c\u00e1i n\u00e0o t\u1edbi sau s\u1ebd ph\u1ea3i ch\u1edd \u0111\u1ee3i transaction tr\u01b0\u1edbc \u0111\u00f3 commit success ho\u1eb7c rollback. Vi\u1ec7c \u0111\u1ea3m b\u1ea3o no dirty read gi\u00fap cho end user c\u1ee7a Database tr\u00e1nh \u0111\u01b0\u1ee3c nh\u1eefng tr\u01b0\u1eddng h\u1ee3p kh\u00f3 hi\u1ec3u nh\u01b0 l\u00e0: C\u00f3 th\u00f4ng b\u00e1o m\u1edbi nh\u01b0ng s\u1ed1 badge th\u00ec v\u1eabn ch\u01b0a nh\u1ea3y +1 L\u1ea5y ra d\u1eef li\u1ec7u \u0111\u00e3 b\u1ecb rollback. Tuy nhi\u00ean vi\u1ec7c s\u1eed d\u1ee5ng no-dirty read hay no dirty write \u0111\u1ec1u ti\u1ec1m \u1ea9n nh\u1eefng v\u1ea5n \u0111\u1ec1 b\u00ean d\u01b0\u1edbi 2. Unrepeatable Unrepeatable data / Read Skew / Non-repeatable Read : T\u00ecnh tr\u1ea1ng n\u00e0y x\u1ea3y ra khi m\u1ed9t transaction T1 v\u1eeba th\u1ef1c hi\u1ec7n xong thao t\u00e1c ghi tr\u00ean m\u1ed9t \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u (nh\u01b0ng ch\u01b0a commit) th\u00ec transaction kh\u00e1c (T2) ti\u1ebfn h\u00e0nh \u0111\u1ecdc tr\u00ean \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u n\u00e0y. \u0110i\u1ec1u n\u00e0y l\u00e0m cho l\u1ea7n \u0111\u1ecdc c\u1ee7a T2 kh\u00f4ng nh\u1eadn \u0111\u01b0\u1ee3c d\u1eef li\u1ec7u \u0111\u00e3 ghi t\u1eeb T1. L\u1ed7i n\u00e0y th\u01b0\u1eddng xu\u1ea5t hi\u1ec7n \u0111\u1ed1i v\u1edbi nh\u1eefng read-only transaction , n\u00f3 v\u1eabn \u0111\u1ea3m b\u1ea3o eventually consistency mi\u1ec5n l\u00e0 user reload l\u1ea1i app ngay sau \u0111\u00f3 (hay c\u00f2n g\u1ecdi l\u00e0 repeated read). V\u00ec ch\u1ec9 g\u00e2y \u1ea3nh h\u01b0\u1edfng t\u1edbi k\u1ebft qu\u1ea3 read n\u00ean n\u00f3 kh\u00f4ng \u0111\u01b0\u1ee3c x\u1ebfp v\u00e0o lo\u1ea1i l\u1ed7i nghi\u00eam tr\u1ecdng. Tuy nhi\u00ean, trong m\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p nh\u01b0 sau th\u00ec ta c\u1ea7n \u0111\u00f2i h\u1ecfi k\u1ebft qu\u1ea3 ph\u1ea3i 100% consistency v\u00e0o th\u1eddi \u0111i\u1ec3m th\u1ef1c thi transaction: Truy v\u1ea5n th\u1ed1ng k\u00ea tr\u00ean 1 \u0111o\u1ea1n d\u1eef li\u1ec7u l\u1edbn: th\u1eddi \u0111i\u1ec3m b\u1eaft \u0111\u1ea7u truy v\u1ea5n c\u00e1ch th\u1eddi \u0111i\u1ec3m k\u1ebft th\u00fac l\u00ean t\u1edbi v\u00e0i gi\u00e2y, th\u1eadm ch\u00ed t\u1eadn v\u00e0i ph\u00fat. Backup d\u1eef li\u1ec7u: c\u00f3 th\u1ec3 k\u00e9o d\u00e0i l\u00ean t\u1edbi h\u00e0ng ti\u1ebfng \u0111\u1ed3ng h\u1ed3. Ch\u1eafc ch\u1eafn ch\u00fang ta s\u1ebd kh\u00f4ng mu\u1ed1n d\u1eef li\u1ec7u sao l\u01b0u s\u1ebd b\u1ecb l\u1eabn l\u1ed9n gi\u1eefa c\u1ea3 version c\u0169 v\u00e0 version m\u1edbi. 3. Lost update Lost update - M\u1ea5t d\u1eef li\u1ec7u khi update: T\u00ecnh tr\u1ea1ng n\u00e0y x\u1ea3y ra khi c\u00f3 nhi\u1ec1u h\u01a1n m\u1ed9t transaction c\u00f9ng th\u1ef1c hi\u1ec7n c\u1eadp nh\u1eadt tr\u00ean 1 \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u. Khi \u0111\u00f3, transaction th\u1ef1c hi\u1ec7n sau s\u1ebd c\u1eadp nh\u1eadt \u0111\u00e8 l\u00ean thao t\u00e1c c\u1eadp nh\u1eadt tr\u01b0\u1edbc. L\u1ed7i n\u00e0y \u0111\u01b0\u1ee3c x\u1ebfp v\u00e0o h\u00e0ng nghi\u00eam tr\u1ecdng v\u00ec c\u00f3 th\u1ec3 g\u00e2y sai s\u00f3t logic trong qu\u00e1 tr\u00ecnh ghi v\u00e0o Database. C\u00f3 nhi\u1ec1u c\u00e1ch \u0111\u1ec3 gi\u1ea3i quy\u1ebft n\u00f3, trong s\u1ed1 \u0111\u00f3 bao g\u1ed3m vi\u1ec7c b\u1ed5 sung lock cho c\u1ea3 read operation. Tuy nhi\u00ean, c\u00e1ch n\u00e0y kh\u00f4ng gi\u1ea3i quy\u1ebft \u0111\u01b0\u1ee3c tri\u1ec7t \u0111\u1ec3, v\u00ec n\u00f3 ch\u1ec9 \u0111\u1ea3m b\u1ea3o transaction cho 1 row, ch\u1ee9 kh\u00f4ng \u0111\u1ea3m b\u1ea3o \u0111\u01b0\u1ee3c tr\u00ean nhi\u1ec1u row. 4. Phantom Read Phantom Read : L\u00e0 t\u00ecnh tr\u1ea1ng m\u00e0 m\u1ed9t transaction \u0111ang thao t\u00e1c tr\u00ean m\u1ed9t t\u1eadp d\u1eef li\u1ec7u nh\u01b0ng transaction kh\u00e1c l\u1ea1i ch\u00e8n th\u00eam c\u00e1c d\u00f2ng d\u1eef li\u1ec7u v\u00e0o t\u1eadp d\u1eef li\u1ec7u m\u00e0 transaction kia \u0111ang th\u00e1o t\u00e1c. \u0110\u00e2y ch\u00ednh l\u00e0 phi\u00ean b\u1ea3n n\u00e2ng c\u1ea5p c\u1ee7a l\u1ed7i Lost Update : th\u01b0\u1eddng x\u1ea3y ra khi truy v\u1ea5n search r\u1ed3i check 1 s\u1ed1 \u0111i\u1ec1u ki\u1ec7n v\u00e0 save l\u1ea1i v\u00e0o Database (kh\u00f4ng c\u00f9ng modify 1 object n\u00ean kh\u00f4ng b\u1ecb lock write). K\u1ebft qu\u1ea3 c\u1ee7a c\u00e2u l\u1ec7nh write s\u1ebd l\u00e0m thay \u0111\u1ed5i k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 c\u1ee7a truy v\u1ea5n search tr\u01b0\u1edbc \u0111\u00f3. Gi\u1ea3i th\u00edch cho tr\u01b0\u1eddng h\u1ee3p c\u1ee7a h\u00ecnh v\u1ebd minh h\u1ecda b\u00ean tr\u00ean: Trong m\u1ed9t b\u1ec7nh vi\u1ec7n, lu\u00f4n ph\u1ea3i c\u00f3 t\u1ed1i thi\u1ec3u 1 b\u00e1c s\u0129 tr\u1ef1c. B\u00e1c s\u0129 Alice v\u00e0 Bob c\u00f9ng g\u1eedi y\u00eau c\u1ea7u xin v\u1ec1 nh\u00e0 v\u00e0o c\u00f9ng th\u1eddi \u0111i\u1ec3m v\u00ec bu\u1ed3n ng\u1ee7/m\u1ec7t/l\u00fd do gia \u0111\u00ecnh. S\u1ed1 l\u01b0\u1ee3ng b\u00e1c s\u0129 \u0111ang tr\u1ef1c l\u00e0 2 (th\u1ecfa m\u00e3n l\u1edbn h\u01a1n 1), n\u00ean y\u00eau c\u1ea7u c\u1ee7a c\u1ea3 2 \u0111\u1ec1u \u0111\u01b0\u1ee3c ch\u1ea5p thu\u1eadn. K\u1ebft qu\u1ea3 l\u00e0 kh\u00f4ng c\u00f2n b\u00e1c s\u0129 n\u00e0o tr\u1ef1c \u1edf b\u1ec7nh vi\u1ec7n c\u1ea3. Locking Level Database locking Gi\u1ea3 s\u1eed c\u00f3 2 transaction T1, T2 \u0111ang truy xu\u1ea5t \u0111\u1ed3ng th\u1eddi tr\u00ean 1 Data unit. C\u00f3 t\u1ea5t c\u1ea3 4 tr\u01b0\u1eddng h\u1ee3p sau: T1 T2 K\u1ebft qu\u1ea3 \u0110\u1ecdc \u0110\u1ecdc Kh\u00f4ng c\u00f3 tranh ch\u1ea5p \u0110\u1ecdc Ghi X\u1ea3y ra tranh ch\u1ea5p Ghi \u0110\u1ecdc X\u1ea3y ra tranh ch\u1ea5p Ghi Ghi Database ch\u1ec9 cho ph\u00e9p c\u00f3 \u0111\u00fang 1 transaction \u0111\u01b0\u1ee3c ghi tr\u00ean \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u t\u1ea1i m\u1ed9t th\u1eddi \u0111i\u1ec3m. Nh\u01b0 v\u1eady, khi c\u00f3 2 transaction (c\u1ee7a 2 connection kh\u00e1c nhau) c\u00f3 \u00edt nh\u1ea5t 1 thao t\u00e1c ghi tr\u00ean c\u00f9ng m\u1ed9t \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u s\u1ebd x\u1ea3y ra t\u00ecnh tr\u1ea1ng tranh ch\u1ea5p. N\u1ebfu \u0111\u1ec3 t\u00ecnh tr\u1ea1ng tranh ch\u1ea5p n\u00e0y x\u1ea3y ra s\u1ebd d\u1eabn \u0111\u1ebfn nh\u1eefng sai s\u00f3t tr\u00ean CSDL. \u0110\u1ec3 gi\u1ea3i quy\u1ebft c\u00e1c v\u1ea5n \u0111\u1ec1 tranh ch\u1ea5p n\u00eau tr\u00ean, Database c\u1ea7n s\u1eed d\u1ee5ng c\u00e1c ph\u01b0\u01a1ng ph\u00e1p locks, g\u1ecdi l\u00e0 Database locking . Nh\u1edd v\u1eady m\u00e0 khi c\u00f3 tranh ch\u1ea5p x\u1ea3y ra, Database c\u00f3 th\u1ec3 quy\u1ebft \u0111\u1ecbnh transaction n\u00e0o \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n v\u00e0 transaction n\u00e0o ph\u1ea3i ch\u1edd. Database lock th\u1ef1c t\u1ebf c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n \u1edf nhi\u1ec1u level kh\u00e1c nhau - c\u00f2n \u0111\u01b0\u1ee3c bi\u1ebft \u0111\u1ebfn nh\u01b0 l\u00e0 lock granularity - b\u00ean trong c\u01a1 s\u1edf d\u1eef li\u1ec7u. \u0110\u00e2y l\u00e0 danh s\u00e1ch c\u1ee7a c\u00e1c c\u1ea5p \u0111\u1ed9 lock v\u00e0 ki\u1ec3u d\u1eef li\u1ec7u h\u1ed7 tr\u1ee3: Database level locking Table level locking Page or block level locking Row/Column level locking Lock modes and compatibility Trong Database locking c\u00f3 c\u00e1c Lock modes c\u01a1 b\u1ea3n: Exclusive (X) Shared (S) Update (U) Intent (I) Schema (Sch) Bulk Update (BU) 1. Shared Locks / Read Locks Khi \u0111\u1ecdc 1 \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u, Database t\u1ef1 \u0111\u1ed9ng thi\u1ebft l\u1eadp Shared Lock tr\u00ean \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u \u0111\u00f3 (tr\u1eeb tr\u01b0\u1eddng h\u1ee3p s\u1eed d\u1ee5ng No Lock) Shared Lock c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c thi\u1ebft l\u1eadp tr\u00ean 1 b\u1ea3ng, 1 trang, 1 key hay tr\u00ean 1 d\u00f2ng d\u1eef li\u1ec7u. Nhi\u1ec1u transaction c\u00f3 th\u1ec3 \u0111\u1ed3ng th\u1eddi gi\u1eef Shared Lock tr\u00ean c\u00f9ng 1 \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u. Kh\u00f4ng th\u1ec3 thi\u1ebft l\u1eadp Exclusive Lock tr\u00ean \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u \u0111ang c\u00f3 Shared Lock. Shared Lock th\u01b0\u1eddng \u0111\u01b0\u1ee3c gi\u1ea3i ph\u00f3ng ngay sau khi s\u1eed d\u1ee5ng xong d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c \u0111\u1ecdc, tr\u1eeb khi c\u00f3 thi\u1ebft l\u1eadp gi\u1eef shared lock cho \u0111\u1ebfn h\u1ebft transaction. 2. Exclusive Lock / Write Lock Khi th\u1ef1c hi\u1ec7n thao t\u00e1c ghi (insert, update, delete) tr\u00ean 1 \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u, Database t\u1ef1 \u0111\u1ed9ng thi\u1ebft l\u1eadp Exclusive Lock tr\u00ean \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u \u0111\u00f3. Exclusive Lock lu\u00f4n \u0111\u01b0\u1ee3c gi\u1eef \u0111\u1ebfn h\u1ebft transaction. T\u1ea1i 1 th\u1eddi \u0111i\u1ec3m, ch\u1ec9 c\u00f3 t\u1ed1i \u0111a 1 transaction \u0111\u01b0\u1ee3c quy\u1ec1n gi\u1eef Exclusive Lock tr\u00ean 1 \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u. Kh\u00f4ng th\u1ec3 thi\u1ebft l\u1eadp Exclusive Lock tr\u00ean \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u \u0111ang c\u00f3 Shared Lock. 3. Update Locks / Intent-to-update Lock Update Lock s\u1eed d\u1ee5ng khi \u0111\u1ecdc d\u1eef li\u1ec7u v\u1edbi d\u1ef1 \u0111\u1ecbnh ghi tr\u1edf l\u1ea1i sau khi \u0111\u1ecdc tr\u00ean \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u n\u00e0y. Update Lock l\u00e0 ch\u1ebf \u0111\u1ed9 kh\u00f3a trung gian gi\u1eefa Shared Lock v\u00e0 Exclusive Lock T\u1ea1i 1 th\u1eddi \u0111i\u1ec3m, c\u00f3 t\u1ed1i \u0111a 1 Update Lock tr\u00ean 1 \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u Update Lock kh\u00f4ng ng\u0103n c\u1ea3n vi\u1ec7c thi\u1ebft l\u1eadp c\u00e1c Shared Lock kh\u00e1c tr\u00ean c\u00f9ng 1 \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u => Update Lock t\u01b0\u01a1ng th\u00edch v\u1edbi Shared Lock Update Lock gi\u00fap tr\u00e1nh hi\u1ec7n t\u01b0\u1ee3ng deadlock khi c\u00f3 y\u00eau c\u1ea7u chuy\u1ec3n t\u1eeb Shared Lock l\u00ean Exclusive Lock tr\u00ean 1 \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u n\u00e0o \u0111\u00f3 (Do t\u1ea1i 1 th\u1eddi \u0111i\u1ec3m ch\u1ec9 c\u00f3 t\u1ed1i \u0111a 1 Update Lock tr\u00ean 1 \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u) T\u00f3m l\u1ea1i, ta c\u00f3 b\u1ea3ng t\u01b0\u01a1ng th\u00edch gi\u1eefa c\u00e1c lo\u1ea1i Lock nh\u01b0 sau: Lock Type Shared Update Exclusive Shared Yes Yes No Update Yes No No Exclusive No No No Isolation Level M\u1ed7i Database \u0111\u1ec1u s\u1eed d\u1ee5ng ph\u01b0\u01a1ng ph\u00e1p Isolation kh\u00e1c nhau. Th\u1eadm ch\u00ed c\u0169ng c\u00f3 chuy\u1ec7n c\u00f9ng m\u1ed9t \u00fd t\u01b0\u1edfng nh\u01b0ng m\u1ed7i ng\u01b0\u1eddi l\u1ea1i tri\u1ec3n khai kh\u00e1c nhau: c\u00e1i th\u00ec ch\u1ea1y nhanh h\u01a1n, c\u00e1i th\u00ec l\u1ea1i t\u1ed1n \u00edt b\u1ed9 nh\u1edb h\u01a1n, th\u1eadm ch\u00ed c\u00e1i c\u00f2n c\u00f3 bug... V\u1ec1 c\u01a1 b\u1ea3n th\u00ec hi\u1ec7n nay c\u00f3 4 ti\u00eau chu\u1ea9n Transaction Isolation trong Database, v\u00e0 m\u1ed7i ch\u00fang n\u00f3 s\u1ebd gi\u1ea3i quy\u1ebft \u0111\u01b0\u1ee3c c\u00e1c \u0111\u1ed9 kh\u00f3 Concurrency Control Problem kh\u00e1c nhau: Dirty Write Dirty Read Read Skew Lost Update Write Skew Phantoms Read Uncommitted \u2713 \u2715 \u2715 \u2715 \u2715 \u2715 Read Committed \u2713 \u2713 \u2715 \u2715 \u2715 \u2715 Repeatable Read \u2713 \u2713 \u2713 \u2014 \u2014 \u2014 Serializable \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 : kh\u00f4ng b\u1ecb l\u1ed7i \u2715 : b\u1ecb l\u1ed7i \u2014 : t\u00f9y t\u1eebng tr\u01b0\u1eddng h\u1ee3p v\u00e0 gi\u1ea3i ph\u00e1p s\u1eed d\u1ee5ng Tr\u00ean \u0111\u00e2y l\u00e0 ti\u00eau chu\u1ea9n chung v\u00e0 \u0111\u00e3 \u0111\u01b0\u1ee3c th\u1ed1ng nh\u1ea5t. Tuy nhi\u00ean, m\u1ed7i Database n\u00f3 l\u1ea1i c\u00f3 nh\u1eefng c\u00e1i t\u00ean kh\u00e1c nhau. Ch\u1eb3ng h\u1ea1n SQL Server c\u00f3 t\u1edbi t\u1eadn 6 m\u1ee9c \u0111\u1ed9 isolation. Chi ti\u1ebft h\u01a1n xem t\u1ea1i \u0111\u00e2y: github.com/ept/hermitage 1. Read Uncommitted \u0110\u00e2y l\u00e0 level c\u01a1 b\u1ea3n nh\u1ea5t, c\u00f3 th\u1ec3 d\u00f9ng \u0111\u1ec3 ch\u1ed1ng l\u1ed7i Dirty Write . N\u00f3 c\u00f3 c\u00e1c \u0111\u1eb7c \u0111i\u1ec3m l\u00e0 lightweight , ch\u1ec9 acquire lock khi g\u1ecdi Write Operation, v\u00e0 release lock khi transaction k\u1ebft th\u00fac (\u0111\u01b0\u1ee3c commit ho\u1eb7c rollback). \u0110i\u1ec1u n\u00e0y \u0111\u1ed3ng ngh\u0129a v\u1edbi vi\u1ec7c m\u1ed7i row trong 1 th\u1eddi \u0111i\u1ec3m ch\u1ec9 c\u00f3 1 transaction \u0111\u01b0\u1ee3c quy\u1ec1n write t\u1edbi n\u00f3. Kh\u00f4ng thi\u1ebft l\u1eadp Shared Lock tr\u00ean nh\u1eefng \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u c\u1ea7n \u0111\u1ecdc. Do \u0111\u00f3 kh\u00f4ng ph\u1ea3i ch\u1edd khi \u0111\u1ecdc d\u1eef li\u1ec7u (k\u1ec3 c\u1ea3 khi d\u1eef li\u1ec7u \u0111ang b\u1ecb lock b\u1edfi giao t\u00e1c kh\u00e1c) \u2013 T\u1ea1o Exclusive Lock tr\u00ean \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c ghi c\u00f2n Exclusive Lock \u0111\u01b0\u1ee3c gi\u1eef cho \u0111\u1ebfn h\u1ebft giao t\u00e1c. \u01afu \u0111i\u1ec3m : \u2013 T\u1ed1c \u0111\u1ed9 x\u1eed l\u00fd r\u1ea5t nhanh \u2013 Kh\u00f4ng c\u1ea3n tr\u1edf nh\u1eefng giao t\u00e1c kh\u00e1c th\u1ef1c hi\u1ec7n vi\u1ec7c c\u1eadp nh\u1eadt d\u1eef li\u1ec7u Khuy\u1ebft \u0111i\u1ec3m : Gi\u1ea3i quy\u1ebft \u0111\u01b0\u1ee3c Dirty Write nh\u01b0ng l\u1ea1i c\u00f3 kh\u1ea3 n\u0103ng x\u1ea3y ra Dirty Reads , Read Skew , Write Skew , Phantoms , Lost Update Nh\u00ecn chung th\u00ec Read Uncommitted c\u0169ng kh\u00f4ng qu\u00e1 t\u1ec7 n\u1ebfu ta bi\u1ebft c\u00e1ch s\u1eed d\u1ee5ng \u0111\u00fang l\u00fac \u0111\u00fang ch\u1ed7, v\u00ec \u0111\u1ed1i v\u1edbi c\u00e1c h\u1ec7 th\u1ed1ng l\u1edbn th\u00ec vi\u1ec7c Write \u0111\u00fang quan tr\u1ecdng h\u01a1n Read \u0111\u00fang r\u1ea5t nhi\u1ec1u. M\u1ed9t sai s\u00f3t nh\u1ecf trong vi\u1ec7c ghi c\u00f3 th\u1ec3 d\u1eabn t\u1edbi vi\u1ec7c d\u1eef li\u1ec7u kh\u00f4ng th\u1ec3 kh\u00f4i ph\u1ee5c ch\u00ednh x\u00e1c l\u1ea1i \u0111\u01b0\u1ee3c, c\u00f2n Read sai th\u00ec ch\u1ec9 c\u1ea7n refresh l\u1ea1i giao di\u1ec7n ho\u1eb7c fix code l\u00e0 \u0111\u01b0\u1ee3c. 2. Read Committed \u0110\u1ecdc d\u1eef li\u1ec7u khi \u0111\u00e3 Commit \u0110\u00e2y l\u00e0 m\u1ee9c \u0111\u1ed9 c\u00f4 l\u1eadp m\u1eb7c \u0111\u1ecbnh c\u1ee7a SQL Server M\u1ed9t ph\u01b0\u01a1ng ph\u00e1p chia l\u00e0m 2 c\u00e1ch ti\u1ebfp c\u1eadn 2.1. Shared Lock C\u00e1ch ti\u1ebfp c\u1eadn n\u00e0y d\u00f9ng Shared Lock , c\u1ea3i ti\u1ebfn t\u1eeb Read Uncommited v\u00e0 b\u1ed5 sung th\u00eam acquire lock k\u1ec3 c\u1ea3 khi g\u1ecdi Read Operation (nh\u01b0ng ch\u1ec9 l\u00e0 shared lock). Kh\u00e1c v\u1edbi exclusive lock, shared lock s\u1ebd \u0111\u01b0\u1ee3c release ngay khi ho\u00e0n th\u00e0nh Operation. C\u00e1ch ti\u1ebfp c\u1eadn n\u00e0y gi\u00fap cho ta \u0111\u1ea3m b\u1ea3o nh\u1eefng thay \u0111\u1ed5i c\u1ee7a row s\u1ebd ph\u1ea3i ch\u1edd \u0111\u01b0\u1ee3c commit/rollback th\u00ec m\u1edbi \u0111\u01b0\u1ee3c ph\u00e9p s\u1eb5n s\u00e0ng available to read. 2.2. Consistent Read C\u00e1ch ti\u1ebfp c\u1eadn n\u00e0y s\u1eed d\u1ee5ng multi-version concurrency control : Ngo\u00e0i gi\u00e1 tr\u1ecb \u0111\u00e3 \u0111\u01b0\u1ee3c commit l\u00e0 stable version , level n\u00e0y l\u01b0u th\u00eam c\u1ea3 gi\u00e1 tr\u1ecb ch\u01b0a \u0111\u01b0\u1ee3c commit n\u1eefa n\u1ebfu c\u00f3, g\u1ecdi l\u00e0 latest version . V\u00ec t\u1ed1i \u0111a trong m\u1ed9t th\u1eddi \u0111i\u1ec3m s\u1ebd ch\u1ec9 c\u00f3 1 transaction \u0111\u01b0\u1ee3c quy\u1ec1n write v\u00e0o row cho n\u00ean ta s\u1ebd ch\u1ec9 c\u00f3 1 latest version th\u00f4i. T\u1ed5ng c\u1ed9ng l\u00e0 c\u00f3 2 version. Nh\u01b0 v\u1eady, khi 1 transaction ti\u1ebfn h\u00e0nh ghi v\u00e0o row, n\u00f3 s\u1ebd acquire lock v\u00e0 \u0111\u00e1nh d\u1ea5u version m\u1edbi cho b\u1ea3n ghi. Trong l\u00fac transaction ch\u1edd \u0111\u01b0\u1ee3c commit/rollback th\u00ec c\u00e1c thread kh\u00e1c ho\u00e0n to\u00e0n v\u1eabn c\u00f3 th\u1ec3 v\u00f4 t\u01b0 read stable version c\u1ee7a row m\u00e0 kh\u00f4ng ph\u1ea3i ch\u1edd m\u1edf lock n\u1eefa. \u01afu \u0111i\u1ec3m Gi\u1ea3i quy\u1ebft v\u1ea5n \u0111\u1ec1 Dirty Reads Shared Lock \u0111\u01b0\u1ee3c gi\u1ea3i ph\u00f3ng ngay, kh\u00f4ng c\u1ea7n ph\u1ea3i gi\u1eef cho \u0111\u1ebfn h\u1ebft giao t\u00e1c n\u00ean kh\u00f4ng c\u1ea3n tr\u1edf nhi\u1ec1u \u0111\u1ebfn thao t\u00e1c c\u1eadp nh\u1eadt c\u1ee7a c\u00e1c giao t\u00e1c kh\u00e1c. Khuy\u1ebft \u0111i\u1ec3m : Ch\u01b0a gi\u1ea3i quy\u1ebft \u0111\u01b0\u1ee3c v\u1ea5n \u0111\u1ec1 Unrepeatable Reads , Phantoms , Lost Updates Ph\u1ea3i ch\u1edd n\u1ebfu \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u c\u1ea7n \u0111\u1ecdc \u0111ang \u0111\u01b0\u1ee3c Exclusive lock lock l\u1ea1i. 3. Repeatable Read Level n\u00e0y \u0111\u1ec1 xu\u1ea5t nh\u1eefng ph\u01b0\u01a1ng ph\u00e1p c\u00f3 kh\u1ea3 n\u0103ng gi\u1ea3i quy\u1ebft \u0111\u01b0\u1ee3c b\u00e0i to\u00e1n Read Skew hay Non-repeatable Read . Ngo\u00e0i ra n\u1ebfu d\u00f9ng \u0111\u00fang c\u00e1ch, n\u00f3 c\u0169ng ph\u1ea7n n\u00e0o x\u1eed l\u00fd \u0111\u01b0\u1ee3c c\u00e1c v\u1ea5n \u0111\u1ec1 ph\u1ee9c t\u1ea1p h\u01a1n nh\u01b0 Lost Update, Phantom Read, Write Skew (t\u00f9y theo gi\u1ea3i ph\u00e1p m\u00e0 m\u00ecnh ch\u1ecdn) Repeatable Readchia l\u00e0m 2 tr\u01b0\u1eddng ph\u00e1i: S\u1eed d\u1ee5ng Lock - Repeatable Read , tr\u00f9ng v\u1edbi t\u00ean c\u1ee7a Isolation Level lu\u00f4n. N\u00f3 c\u1ea3i ti\u1ebfn t\u1eeb c\u00e1i c\u00e1ch x\u1eed l\u00fd s\u1eed d\u1ee5ng Shared Lock c\u1ee7a Read Committed. Gi\u1ea3i ph\u00e1p n\u00e0y s\u1ebd lock l\u1ea1i b\u1ea5t c\u1ee9 row n\u00e0o m\u00e0 n\u00f3 \u0111i qua cho t\u1edbi khi transaction \u0111\u01b0\u1ee3c k\u1ebft th\u00fac k\u1ec3 c\u1ea3 l\u00e0 read operation (thay v\u00ec ngay khi k\u1ebft th\u00fac read operation nh\u01b0 Read Committed). Kh\u00f4ng s\u1eed d\u1ee5ng Lock - Snapshot Isolation : Ph\u01b0\u01a1ng ph\u00e1p n\u00e0y c\u1ea3i ti\u1ebfn t\u1eeb Consistent Read c\u1ee7a Read Committed. Trong qu\u00e1 tr\u00ecnh query, c\u00f3 r\u1ea5t nhi\u1ec1u row \u0111\u00e3 \u0111\u01b0\u1ee3c update b\u1edfi c\u00e1c transaction kh\u00e1c, th\u1eadm ch\u00ed c\u00f2n b\u1ecb update nhi\u1ec1u l\u1ea7n. Thay v\u00ec ch\u1ec9 l\u01b0u 2 version, th\u00ec ta s\u1ebd l\u01b0u to\u00e0n b\u1ed9 c\u00e1c version t\u1eeb tr\u01b0\u1edbc t\u1edbi nay, v\u00e0 ch\u1ec9 l\u1ea5y ra version \u0111\u01b0\u1ee3c commit tr\u01b0\u1edbc khi transaction hi\u1ec7n t\u1ea1i \u0111\u01b0\u1ee3c b\u1eaft \u0111\u1ea7u. 4. Serializable Serializable \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a l\u00e0: v\u1edbi m\u1ed7i th\u1ee9 t\u1ef1 th\u1ef1c hi\u1ec7n c\u00e1c transaction, s\u1ebd ch\u1ec9 c\u00f3 1 k\u1ebft qu\u1ea3 duy nh\u1ea5t x\u1ea3y ra. Kh\u00f4ng th\u1ec3 n\u00e0o c\u00f3 2 hay nhi\u1ec1u kh\u1ea3 n\u0103ng k\u1ebft qu\u1ea3 x\u1ea3y ra \u0111\u01b0\u1ee3c. \u0110\u00e2y l\u00e0 level cao nh\u1ea5t c\u1ee7a Isolation, nh\u01b0ng s\u1eed d\u1ee5ng n\u00f3 th\u00ec s\u1ebd ph\u1ea3i tr\u1ea3 gi\u00e1 r\u1ea5t l\u1edbn cho hi\u1ec7u su\u1ea5t c\u1ee7a ch\u01b0\u01a1ng tr\u00ecnh. Cho n\u00ean kh\u00f4ng c\u00f3 Database truy\u1ec1n th\u1ed1ng n\u00e0o c\u00e0i \u0111\u1eb7t m\u1ee9c n\u00e0y l\u00e0m c\u1ea5u h\u00ecnh m\u1eb7c \u0111\u1ecbnh c\u1ea3. Hi\u1ec7n \u0111ang c\u00f3 3 c\u00e1ch x\u1eed l\u00fd ph\u1ed5 bi\u1ebfn nh\u1ea5t Serializable d\u1ef1a tr\u00ean guy\u00ean l\u00fd gi\u1ebft nh\u1ea7m c\u00f2n h\u01a1n b\u1ecf s\u00f3t, kh\u00f4ng c\u1ea7n bi\u1ebft c\u00e1i operation n\u00e0y c\u00f3 g\u00e2y vi ph\u1ea1m isolation v\u1edbi transaction kh\u00e1c hay kh\u00f4ng, c\u1ee9 lock n\u00f3 l\u1ea1i cho an to\u00e0n. V\u00e0 chia ra l\u00e0m 2 h\u01b0\u1edbng ti\u1ebfp c\u1eadn 4.1. Actual Serial Execution \u00dd t\u01b0\u1edfng \u1edf \u0111\u00e2y l\u00e0 C\u00e1ch t\u1ed1t nh\u1ea5t \u0111\u1ec3 tr\u00e1nh kh\u1ecfi c\u00e1c v\u1ea5n \u0111\u1ec1 v\u1ec1 b\u1ea5t \u0111\u1ed3ng b\u1ed9 \u0111\u00f3 l\u00e0 h\u00e3y x\u1eed l\u00fd ch\u00fang n\u00f3 l\u1ea7n l\u01b0\u1ee3t tr\u00ean c\u00f9ng 1 thread . \u0110i\u1ec3n h\u00ecnh c\u00f3 th\u1ec3 k\u1ec3 \u0111\u1ebfn Redis \u00e1p d\u1ee5ng Actual Serial Execution . Ngo\u00e0i ra c\u00f2n nhi\u1ec1u Database kh\u00e1c n\u1eefa (VoltDB, H-Store, Datomic ...) c\u0169ng s\u1eed d\u1ee5ng c\u00e1ch n\u00e0y nh\u01b0ng \u00edt ph\u1ed5 bi\u1ebfn h\u01a1n. Nh\u1eefng Database s\u1eed d\u1ee5ng single-thread ki\u1ec3u n\u00e0y th\u1eadm ch\u00ed c\u00f2n nhanh h\u01a1n c\u1ea3 c\u00e1c Database truy\u1ec1n th\u1ed1ng kh\u00e1c, nh\u1edd v\u00e0o vi\u1ec7c kh\u00f4ng c\u1ea7n s\u1eed d\u1ee5ng Database locking . Nh\u01b0\u1ee3c \u0111i\u1ec3m c\u1ee7a ph\u01b0\u01a1ng ph\u00e1p n\u00e0y: Transaction ph\u1ea3i \u0111\u1ee7 nh\u1ecf v\u00e0 \u0111\u1ee7 nhanh, \u0111\u1ec3 kh\u00f4ng block c\u00e1c operation kh\u00e1c. \u0110\u00e2y l\u00e0 l\u00fd do m\u00e0 h\u1ea7u h\u1ebft c\u00e1c Database nh\u01b0 Redis s\u1eed d\u1ee5ng ph\u01b0\u01a1ng ph\u00e1p n\u00e0y \u0111\u1ec1u l\u01b0u data tr\u1ef1c ti\u1ebfp tr\u00ean memory, thay v\u00ec truy c\u1eadp xu\u1ed1ng disk. 4.2 Two-Phase Locking (2PL) \u0110\u01b0\u1ee3c s\u1eed d\u1ee5ng trong MySQL (InnoDB) v\u00e0 SQL Server. K\u1ef9 thu\u1eadt n\u00e0y c\u1ea3i ti\u1ebfn t\u1eeb ph\u01b0\u01a1ng ph\u00e1p Repeatable Read, full n\u1ed9i dung nh\u01b0 sau: N\u1ebfu transaction A \u0111\u00e3 \u0111\u1ecdc 1 row v\u00e0 transaction B mu\u1ed1n ghi v\u00e0o row \u0111\u00f3: B ph\u1ea3i ch\u1edd cho t\u1edbi khi A k\u1ebft th\u00fac (commit ho\u1eb7c abort) th\u00ec m\u1edbi \u0111\u01b0\u1ee3c ti\u1ebfp t\u1ee5c. N\u1ebfu transaction A \u0111\u00e3 ghi v\u00e0o 1 row v\u00e0 transaction B mu\u1ed1n \u0111\u1ecdc row \u0111\u00f3: B ph\u1ea3i ch\u1edd cho t\u1edbi khi A k\u1ebft th\u00fac (commit ho\u1eb7c abort) th\u00ec m\u1edbi \u0111\u01b0\u1ee3c ti\u1ebfp t\u1ee5c. Ban \u0111\u1ea7u khi transaction A mu\u1ed1n \u0111\u1ecdc 1 row, n\u00f3 s\u1ebd acquire lock v\u00e0 hold n\u00f3 cho t\u1edbi khi k\u1ebft th\u00fac transaction. Tuy nhi\u00ean lock n\u00e0y \u1edf ch\u1ebf \u0111\u1ed9 share mode (t\u1ee9c l\u00e0 nhi\u1ec1u transaction c\u00f9ng c\u00f3 th\u1ec3 c\u00f9ng acquire v\u00e0 hold n\u00f3). Khi transaction B mu\u1ed1n ghi v\u00e0o row, lock s\u1ebd upgrade l\u00ean ch\u1ebf \u0111\u1ed9 exclusive mode. Qu\u00e1 tr\u00ecnh upgrade n\u00e0y ch\u1ec9 \u0111\u01b0\u1ee3c di\u1ec5n ra khi t\u1ea5t c\u1ea3 c\u00e1c transaction kh\u00e1c \u0111\u00e3 release kh\u1ecfi lock \u0111\u00e3. Sau \u0111\u00f3 B s\u1ebd acquire exclusive lock. Kh\u00f4ng transaction n\u00e0o kh\u00e1c \u0111\u01b0\u1ee3c ph\u00e9p acquire exclusive lock trong l\u00fac v\u1eabn c\u00f2n transaction ch\u01b0a release. Khi transaction C v\u1eeba \u0111\u1ecdc r\u1ed3i ghi l\u1ea1i v\u00e0o row: lock \u0111ang \u0111\u01b0\u1ee3c hold s\u1ebd \u0111\u01b0\u1ee3c upgrade t\u1eeb share mode l\u00ean exclusive mode. T\u01b0\u01a1ng t\u1ef1 nh\u01b0 tr\u00ean: qu\u00e1 tr\u00ecnh upgrade c\u0169ng ph\u1ea3i ch\u1edd t\u1ea5t c\u1ea3 c\u00e1c transaction release kh\u1ecfi lock. T\u01b0\u01a1ng t\u1ef1 Repeatable Read, s\u1ebd c\u00f3 tr\u01b0\u1eddng h\u1ee3p b\u1ecb Deadlock. Database c\u1ea7n ph\u1ea3i c\u00f3 1 c\u01a1 ch\u1ebf \u0111\u1ec3 detect \u0111\u01b0\u1ee3c v\u1ea5n \u0111\u1ec1 n\u00e0y v\u00e0 abort transaction \u0111\u1ec3 retry l\u1ea1i (c\u00f3 th\u1ec3 t\u1ef1 \u0111\u1ed9ng retry ho\u1eb7c m\u00ecnh ch\u1ee7 \u0111\u1ed9ng l\u00e0m b\u1eb1ng tay). Serializable Snapshot Isolation (SSI) H\u1ea7u h\u1ebft 4 Isolation Level tr\u00ean \u0111\u1ec1u \u0111\u01b0\u1ee3c c\u00e1i n\u00e0y th\u00ec m\u1ea5t c\u00e1i kia, tuy nhi\u00ean g\u1ea7n \u0111\u00e2y \u0111\u00e3 c\u00f3 nghi\u00ean c\u1ee9u m\u1edbi v\u1ec1 1 ph\u01b0\u01a1ng ph\u00e1p c\u00f3 th\u1ec3 dung h\u00f2a \u0111\u01b0\u1ee3c t\u1ea5t c\u1ea3 y\u1ebfu t\u1ed1 b\u00ean tr\u00ean. Thu\u1eadt to\u00e1n c\u00f3 t\u00ean l\u00e0 Serializable Snapshot Isolation (SSI) , \u0111\u01b0\u1ee3c \u0111\u00e1nh gi\u00e1 r\u1ea5t tri\u1ec3n v\u1ecdng, \u0111\u01b0\u1ee3c ra m\u1eaft v\u00e0o n\u0103m 2008 trong lu\u1eadn \u00e1n t\u1ed1t nghi\u1ec7p ti\u1ebfn s\u0129 c\u1ee7a Michael Cahill. SSI hi\u1ec7n \u0111ang \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong PostgreSQL b\u1eaft \u0111\u1ea7u t\u1eeb phi\u00ean b\u1ea3n 9.1. Thu\u1eadt to\u00e1n SSI kh\u00e1 ph\u1ee9c t\u1ea1p v\u00e0 tu\u1ed5i \u0111\u1eddi c\u00f2n tr\u1ebb n\u00ean v\u1eabn c\u00f2n nhi\u1ec1u th\u1ee9 ph\u1ea3i ph\u00e1t tri\u1ec3n ti\u1ebfp. V\u1ec1 c\u01a1 b\u1ea3n, n\u00f3 \u0111\u01b0\u1ee3c implement d\u1ef1a tr\u00ean \u00fd t\u01b0\u1edfng c\u1ee7a ph\u01b0\u01a1ng ph\u00e1p Snapshot Isolation. V\u00ec th\u1ebf n\u00ean n\u00f3 m\u1edbi c\u00f3 c\u00e1i t\u00ean l\u00e0 Serializable Snapshot Isolation. Reference Transaction Isolation - dogy.io The Read Uncommitted Isolation Level - sqlperformance.com Comprehensive Understanding of Transaction Isolation Levels - alibabacloud.com Databases 101: ACID, MVCC vs Locks, Transaction Isolation Levels, and Concurrency - ithare.com Isolation levels and locking in relational databases - retool.com Locking and Isolation Levels - docs.actian.com Locking, concurrency, and isolation - docs.oracle.com Transaction Isolation Levels in DBMS - geeksforgeeks.org All about locking in SQL Server - sqlshack.com Isolation levels behavior in SQL Server Always On Availability Groups - sqlshack.com","title":"Locking / Isolation Level"},{"location":"Database/Locking-Isolation/#locking-isolation-level","text":"Note: Data unit . V\u00ec c\u00e1c ph\u01b0\u01a1ng th\u1ee9c Locks \u0111\u01b0\u1ee3c thi\u1ebft l\u1eadp tr\u00ean m\u1ed9t \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u c\u1ee5 th\u1ec3, n\u00ean \u0111\u1ec3 hi\u1ec3u \u0111\u01b0\u1ee3c v\u00e0 c\u00e1c ph\u01b0\u01a1ng th\u1ee9c kh\u00f3a tr\u01b0\u1edbc ti\u00ean c\u1ea7n t\u00ecm hi\u1ec3u v\u1ec1 kh\u00e1i ni\u1ec7m \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u: \u0110\u01a1n v\u1ecb d\u1eef li\u1ec7u c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c chia th\u00e0nh nhi\u1ec1u c\u1ea5p \u0111\u1ed9 sau: - M\u1ed9t d\u00f2ng d\u1eef li\u1ec7u. - M\u1ed9t trang (page) (8KB) - M\u1ed9t b\u1ea3ng (table) trong c\u01a1 s\u1edf d\u1eef li\u1ec7u. - M\u1ed9t c\u01a1 s\u1edf d\u1eef li\u1ec7u (database)","title":"Locking / Isolation Level"},{"location":"Database/Locking-Isolation/#concurrency-control-problem","text":"Nh\u1eefng t\u00ecnh hu\u1ed1ng Race condition hay g\u1eb7p trong Database:","title":"Concurrency Control Problem"},{"location":"Database/Locking-Isolation/#1-dirty-read","text":"Uncommitted data / Dirty read - T\u00ecnh tr\u1ea1ng m\u00e0 Database read ra gi\u00e1 tr\u1ecb ch\u01b0a \u0111\u01b0\u1ee3c commit. X\u1ea3y ra khi m\u1ed9t transaction th\u1ef1c hi\u1ec7n \u0111\u1ecdc tr\u00ean m\u1ed9t \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u m\u00e0 \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u n\u00e0y \u0111ang b\u1ecb c\u1eadp nh\u1eadt b\u1edfi m\u1ed9t transaction kh\u00e1c nh\u01b0ng vi\u1ec7c c\u1eadp nh\u1eadt ch\u01b0a \u0111\u01b0\u1ee3c commit. T\u01b0\u01a1ng t\u1ef1 v\u1edbi Dirty read l\u00e0 Dirty write . L\u00e0 t\u00ecnh hu\u1ed1ng m\u00e0 transaction x\u1ea3y ra tr\u01b0\u1edbc ch\u01b0a k\u1ecbp commit, th\u00ec c\u00e1i t\u1edbi sau \u0111\u00e3 ghi \u0111\u00e8 l\u00ean, d\u1eabn t\u1edbi vi\u1ec7c k\u1ebft qu\u1ea3 b\u1ecb x\u00e1o tr\u1ed9n, database kh\u00f4ng bi\u1ebft d\u1eef li\u1ec7u n\u00e0o l\u00e0 d\u1eef li\u1ec7u \u0111\u00fang nh\u1ea5t, l\u00e0m m\u1ea5t \u0111i Consistency - t\u00ednh nh\u1ea5t qu\u00e1n c\u1ee7a Transaction. M\u1ed9t Transaction \u0111\u01b0\u1ee3c coi l\u00e0 no dirty write khi m\u00e0 Database ch\u1ec9 write l\u00ean nh\u1eefng record \u0111\u00e3 \u0111\u01b0\u1ee3c commit tr\u01b0\u1edbc \u0111\u00f3. N\u1ebfu 2 transaction c\u00f9ng mu\u1ed1n ghi \u0111\u1ed3ng th\u1eddi, th\u00ec c\u00e1i n\u00e0o t\u1edbi sau s\u1ebd ph\u1ea3i ch\u1edd \u0111\u1ee3i transaction tr\u01b0\u1edbc \u0111\u00f3 commit success ho\u1eb7c rollback. Vi\u1ec7c \u0111\u1ea3m b\u1ea3o no dirty read gi\u00fap cho end user c\u1ee7a Database tr\u00e1nh \u0111\u01b0\u1ee3c nh\u1eefng tr\u01b0\u1eddng h\u1ee3p kh\u00f3 hi\u1ec3u nh\u01b0 l\u00e0: C\u00f3 th\u00f4ng b\u00e1o m\u1edbi nh\u01b0ng s\u1ed1 badge th\u00ec v\u1eabn ch\u01b0a nh\u1ea3y +1 L\u1ea5y ra d\u1eef li\u1ec7u \u0111\u00e3 b\u1ecb rollback. Tuy nhi\u00ean vi\u1ec7c s\u1eed d\u1ee5ng no-dirty read hay no dirty write \u0111\u1ec1u ti\u1ec1m \u1ea9n nh\u1eefng v\u1ea5n \u0111\u1ec1 b\u00ean d\u01b0\u1edbi","title":"1. Dirty read"},{"location":"Database/Locking-Isolation/#2-unrepeatable","text":"Unrepeatable data / Read Skew / Non-repeatable Read : T\u00ecnh tr\u1ea1ng n\u00e0y x\u1ea3y ra khi m\u1ed9t transaction T1 v\u1eeba th\u1ef1c hi\u1ec7n xong thao t\u00e1c ghi tr\u00ean m\u1ed9t \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u (nh\u01b0ng ch\u01b0a commit) th\u00ec transaction kh\u00e1c (T2) ti\u1ebfn h\u00e0nh \u0111\u1ecdc tr\u00ean \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u n\u00e0y. \u0110i\u1ec1u n\u00e0y l\u00e0m cho l\u1ea7n \u0111\u1ecdc c\u1ee7a T2 kh\u00f4ng nh\u1eadn \u0111\u01b0\u1ee3c d\u1eef li\u1ec7u \u0111\u00e3 ghi t\u1eeb T1. L\u1ed7i n\u00e0y th\u01b0\u1eddng xu\u1ea5t hi\u1ec7n \u0111\u1ed1i v\u1edbi nh\u1eefng read-only transaction , n\u00f3 v\u1eabn \u0111\u1ea3m b\u1ea3o eventually consistency mi\u1ec5n l\u00e0 user reload l\u1ea1i app ngay sau \u0111\u00f3 (hay c\u00f2n g\u1ecdi l\u00e0 repeated read). V\u00ec ch\u1ec9 g\u00e2y \u1ea3nh h\u01b0\u1edfng t\u1edbi k\u1ebft qu\u1ea3 read n\u00ean n\u00f3 kh\u00f4ng \u0111\u01b0\u1ee3c x\u1ebfp v\u00e0o lo\u1ea1i l\u1ed7i nghi\u00eam tr\u1ecdng. Tuy nhi\u00ean, trong m\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p nh\u01b0 sau th\u00ec ta c\u1ea7n \u0111\u00f2i h\u1ecfi k\u1ebft qu\u1ea3 ph\u1ea3i 100% consistency v\u00e0o th\u1eddi \u0111i\u1ec3m th\u1ef1c thi transaction: Truy v\u1ea5n th\u1ed1ng k\u00ea tr\u00ean 1 \u0111o\u1ea1n d\u1eef li\u1ec7u l\u1edbn: th\u1eddi \u0111i\u1ec3m b\u1eaft \u0111\u1ea7u truy v\u1ea5n c\u00e1ch th\u1eddi \u0111i\u1ec3m k\u1ebft th\u00fac l\u00ean t\u1edbi v\u00e0i gi\u00e2y, th\u1eadm ch\u00ed t\u1eadn v\u00e0i ph\u00fat. Backup d\u1eef li\u1ec7u: c\u00f3 th\u1ec3 k\u00e9o d\u00e0i l\u00ean t\u1edbi h\u00e0ng ti\u1ebfng \u0111\u1ed3ng h\u1ed3. Ch\u1eafc ch\u1eafn ch\u00fang ta s\u1ebd kh\u00f4ng mu\u1ed1n d\u1eef li\u1ec7u sao l\u01b0u s\u1ebd b\u1ecb l\u1eabn l\u1ed9n gi\u1eefa c\u1ea3 version c\u0169 v\u00e0 version m\u1edbi.","title":"2. Unrepeatable"},{"location":"Database/Locking-Isolation/#3-lost-update","text":"Lost update - M\u1ea5t d\u1eef li\u1ec7u khi update: T\u00ecnh tr\u1ea1ng n\u00e0y x\u1ea3y ra khi c\u00f3 nhi\u1ec1u h\u01a1n m\u1ed9t transaction c\u00f9ng th\u1ef1c hi\u1ec7n c\u1eadp nh\u1eadt tr\u00ean 1 \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u. Khi \u0111\u00f3, transaction th\u1ef1c hi\u1ec7n sau s\u1ebd c\u1eadp nh\u1eadt \u0111\u00e8 l\u00ean thao t\u00e1c c\u1eadp nh\u1eadt tr\u01b0\u1edbc. L\u1ed7i n\u00e0y \u0111\u01b0\u1ee3c x\u1ebfp v\u00e0o h\u00e0ng nghi\u00eam tr\u1ecdng v\u00ec c\u00f3 th\u1ec3 g\u00e2y sai s\u00f3t logic trong qu\u00e1 tr\u00ecnh ghi v\u00e0o Database. C\u00f3 nhi\u1ec1u c\u00e1ch \u0111\u1ec3 gi\u1ea3i quy\u1ebft n\u00f3, trong s\u1ed1 \u0111\u00f3 bao g\u1ed3m vi\u1ec7c b\u1ed5 sung lock cho c\u1ea3 read operation. Tuy nhi\u00ean, c\u00e1ch n\u00e0y kh\u00f4ng gi\u1ea3i quy\u1ebft \u0111\u01b0\u1ee3c tri\u1ec7t \u0111\u1ec3, v\u00ec n\u00f3 ch\u1ec9 \u0111\u1ea3m b\u1ea3o transaction cho 1 row, ch\u1ee9 kh\u00f4ng \u0111\u1ea3m b\u1ea3o \u0111\u01b0\u1ee3c tr\u00ean nhi\u1ec1u row.","title":"3. Lost update"},{"location":"Database/Locking-Isolation/#4-phantom-read","text":"Phantom Read : L\u00e0 t\u00ecnh tr\u1ea1ng m\u00e0 m\u1ed9t transaction \u0111ang thao t\u00e1c tr\u00ean m\u1ed9t t\u1eadp d\u1eef li\u1ec7u nh\u01b0ng transaction kh\u00e1c l\u1ea1i ch\u00e8n th\u00eam c\u00e1c d\u00f2ng d\u1eef li\u1ec7u v\u00e0o t\u1eadp d\u1eef li\u1ec7u m\u00e0 transaction kia \u0111ang th\u00e1o t\u00e1c. \u0110\u00e2y ch\u00ednh l\u00e0 phi\u00ean b\u1ea3n n\u00e2ng c\u1ea5p c\u1ee7a l\u1ed7i Lost Update : th\u01b0\u1eddng x\u1ea3y ra khi truy v\u1ea5n search r\u1ed3i check 1 s\u1ed1 \u0111i\u1ec1u ki\u1ec7n v\u00e0 save l\u1ea1i v\u00e0o Database (kh\u00f4ng c\u00f9ng modify 1 object n\u00ean kh\u00f4ng b\u1ecb lock write). K\u1ebft qu\u1ea3 c\u1ee7a c\u00e2u l\u1ec7nh write s\u1ebd l\u00e0m thay \u0111\u1ed5i k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 c\u1ee7a truy v\u1ea5n search tr\u01b0\u1edbc \u0111\u00f3. Gi\u1ea3i th\u00edch cho tr\u01b0\u1eddng h\u1ee3p c\u1ee7a h\u00ecnh v\u1ebd minh h\u1ecda b\u00ean tr\u00ean: Trong m\u1ed9t b\u1ec7nh vi\u1ec7n, lu\u00f4n ph\u1ea3i c\u00f3 t\u1ed1i thi\u1ec3u 1 b\u00e1c s\u0129 tr\u1ef1c. B\u00e1c s\u0129 Alice v\u00e0 Bob c\u00f9ng g\u1eedi y\u00eau c\u1ea7u xin v\u1ec1 nh\u00e0 v\u00e0o c\u00f9ng th\u1eddi \u0111i\u1ec3m v\u00ec bu\u1ed3n ng\u1ee7/m\u1ec7t/l\u00fd do gia \u0111\u00ecnh. S\u1ed1 l\u01b0\u1ee3ng b\u00e1c s\u0129 \u0111ang tr\u1ef1c l\u00e0 2 (th\u1ecfa m\u00e3n l\u1edbn h\u01a1n 1), n\u00ean y\u00eau c\u1ea7u c\u1ee7a c\u1ea3 2 \u0111\u1ec1u \u0111\u01b0\u1ee3c ch\u1ea5p thu\u1eadn. K\u1ebft qu\u1ea3 l\u00e0 kh\u00f4ng c\u00f2n b\u00e1c s\u0129 n\u00e0o tr\u1ef1c \u1edf b\u1ec7nh vi\u1ec7n c\u1ea3.","title":"4. Phantom Read"},{"location":"Database/Locking-Isolation/#locking-level","text":"","title":"Locking Level"},{"location":"Database/Locking-Isolation/#database-locking","text":"Gi\u1ea3 s\u1eed c\u00f3 2 transaction T1, T2 \u0111ang truy xu\u1ea5t \u0111\u1ed3ng th\u1eddi tr\u00ean 1 Data unit. C\u00f3 t\u1ea5t c\u1ea3 4 tr\u01b0\u1eddng h\u1ee3p sau: T1 T2 K\u1ebft qu\u1ea3 \u0110\u1ecdc \u0110\u1ecdc Kh\u00f4ng c\u00f3 tranh ch\u1ea5p \u0110\u1ecdc Ghi X\u1ea3y ra tranh ch\u1ea5p Ghi \u0110\u1ecdc X\u1ea3y ra tranh ch\u1ea5p Ghi Ghi Database ch\u1ec9 cho ph\u00e9p c\u00f3 \u0111\u00fang 1 transaction \u0111\u01b0\u1ee3c ghi tr\u00ean \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u t\u1ea1i m\u1ed9t th\u1eddi \u0111i\u1ec3m. Nh\u01b0 v\u1eady, khi c\u00f3 2 transaction (c\u1ee7a 2 connection kh\u00e1c nhau) c\u00f3 \u00edt nh\u1ea5t 1 thao t\u00e1c ghi tr\u00ean c\u00f9ng m\u1ed9t \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u s\u1ebd x\u1ea3y ra t\u00ecnh tr\u1ea1ng tranh ch\u1ea5p. N\u1ebfu \u0111\u1ec3 t\u00ecnh tr\u1ea1ng tranh ch\u1ea5p n\u00e0y x\u1ea3y ra s\u1ebd d\u1eabn \u0111\u1ebfn nh\u1eefng sai s\u00f3t tr\u00ean CSDL. \u0110\u1ec3 gi\u1ea3i quy\u1ebft c\u00e1c v\u1ea5n \u0111\u1ec1 tranh ch\u1ea5p n\u00eau tr\u00ean, Database c\u1ea7n s\u1eed d\u1ee5ng c\u00e1c ph\u01b0\u01a1ng ph\u00e1p locks, g\u1ecdi l\u00e0 Database locking . Nh\u1edd v\u1eady m\u00e0 khi c\u00f3 tranh ch\u1ea5p x\u1ea3y ra, Database c\u00f3 th\u1ec3 quy\u1ebft \u0111\u1ecbnh transaction n\u00e0o \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n v\u00e0 transaction n\u00e0o ph\u1ea3i ch\u1edd. Database lock th\u1ef1c t\u1ebf c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n \u1edf nhi\u1ec1u level kh\u00e1c nhau - c\u00f2n \u0111\u01b0\u1ee3c bi\u1ebft \u0111\u1ebfn nh\u01b0 l\u00e0 lock granularity - b\u00ean trong c\u01a1 s\u1edf d\u1eef li\u1ec7u. \u0110\u00e2y l\u00e0 danh s\u00e1ch c\u1ee7a c\u00e1c c\u1ea5p \u0111\u1ed9 lock v\u00e0 ki\u1ec3u d\u1eef li\u1ec7u h\u1ed7 tr\u1ee3: Database level locking Table level locking Page or block level locking Row/Column level locking","title":"Database locking"},{"location":"Database/Locking-Isolation/#lock-modes-and-compatibility","text":"Trong Database locking c\u00f3 c\u00e1c Lock modes c\u01a1 b\u1ea3n: Exclusive (X) Shared (S) Update (U) Intent (I) Schema (Sch) Bulk Update (BU)","title":"Lock modes and compatibility"},{"location":"Database/Locking-Isolation/#1-shared-locks-read-locks","text":"Khi \u0111\u1ecdc 1 \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u, Database t\u1ef1 \u0111\u1ed9ng thi\u1ebft l\u1eadp Shared Lock tr\u00ean \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u \u0111\u00f3 (tr\u1eeb tr\u01b0\u1eddng h\u1ee3p s\u1eed d\u1ee5ng No Lock) Shared Lock c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c thi\u1ebft l\u1eadp tr\u00ean 1 b\u1ea3ng, 1 trang, 1 key hay tr\u00ean 1 d\u00f2ng d\u1eef li\u1ec7u. Nhi\u1ec1u transaction c\u00f3 th\u1ec3 \u0111\u1ed3ng th\u1eddi gi\u1eef Shared Lock tr\u00ean c\u00f9ng 1 \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u. Kh\u00f4ng th\u1ec3 thi\u1ebft l\u1eadp Exclusive Lock tr\u00ean \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u \u0111ang c\u00f3 Shared Lock. Shared Lock th\u01b0\u1eddng \u0111\u01b0\u1ee3c gi\u1ea3i ph\u00f3ng ngay sau khi s\u1eed d\u1ee5ng xong d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c \u0111\u1ecdc, tr\u1eeb khi c\u00f3 thi\u1ebft l\u1eadp gi\u1eef shared lock cho \u0111\u1ebfn h\u1ebft transaction.","title":"1. Shared Locks / Read Locks"},{"location":"Database/Locking-Isolation/#2-exclusive-lock-write-lock","text":"Khi th\u1ef1c hi\u1ec7n thao t\u00e1c ghi (insert, update, delete) tr\u00ean 1 \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u, Database t\u1ef1 \u0111\u1ed9ng thi\u1ebft l\u1eadp Exclusive Lock tr\u00ean \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u \u0111\u00f3. Exclusive Lock lu\u00f4n \u0111\u01b0\u1ee3c gi\u1eef \u0111\u1ebfn h\u1ebft transaction. T\u1ea1i 1 th\u1eddi \u0111i\u1ec3m, ch\u1ec9 c\u00f3 t\u1ed1i \u0111a 1 transaction \u0111\u01b0\u1ee3c quy\u1ec1n gi\u1eef Exclusive Lock tr\u00ean 1 \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u. Kh\u00f4ng th\u1ec3 thi\u1ebft l\u1eadp Exclusive Lock tr\u00ean \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u \u0111ang c\u00f3 Shared Lock.","title":"2. Exclusive Lock / Write Lock"},{"location":"Database/Locking-Isolation/#3-update-locks-intent-to-update-lock","text":"Update Lock s\u1eed d\u1ee5ng khi \u0111\u1ecdc d\u1eef li\u1ec7u v\u1edbi d\u1ef1 \u0111\u1ecbnh ghi tr\u1edf l\u1ea1i sau khi \u0111\u1ecdc tr\u00ean \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u n\u00e0y. Update Lock l\u00e0 ch\u1ebf \u0111\u1ed9 kh\u00f3a trung gian gi\u1eefa Shared Lock v\u00e0 Exclusive Lock T\u1ea1i 1 th\u1eddi \u0111i\u1ec3m, c\u00f3 t\u1ed1i \u0111a 1 Update Lock tr\u00ean 1 \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u Update Lock kh\u00f4ng ng\u0103n c\u1ea3n vi\u1ec7c thi\u1ebft l\u1eadp c\u00e1c Shared Lock kh\u00e1c tr\u00ean c\u00f9ng 1 \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u => Update Lock t\u01b0\u01a1ng th\u00edch v\u1edbi Shared Lock Update Lock gi\u00fap tr\u00e1nh hi\u1ec7n t\u01b0\u1ee3ng deadlock khi c\u00f3 y\u00eau c\u1ea7u chuy\u1ec3n t\u1eeb Shared Lock l\u00ean Exclusive Lock tr\u00ean 1 \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u n\u00e0o \u0111\u00f3 (Do t\u1ea1i 1 th\u1eddi \u0111i\u1ec3m ch\u1ec9 c\u00f3 t\u1ed1i \u0111a 1 Update Lock tr\u00ean 1 \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u) T\u00f3m l\u1ea1i, ta c\u00f3 b\u1ea3ng t\u01b0\u01a1ng th\u00edch gi\u1eefa c\u00e1c lo\u1ea1i Lock nh\u01b0 sau: Lock Type Shared Update Exclusive Shared Yes Yes No Update Yes No No Exclusive No No No","title":"3. Update Locks / Intent-to-update Lock"},{"location":"Database/Locking-Isolation/#isolation-level","text":"M\u1ed7i Database \u0111\u1ec1u s\u1eed d\u1ee5ng ph\u01b0\u01a1ng ph\u00e1p Isolation kh\u00e1c nhau. Th\u1eadm ch\u00ed c\u0169ng c\u00f3 chuy\u1ec7n c\u00f9ng m\u1ed9t \u00fd t\u01b0\u1edfng nh\u01b0ng m\u1ed7i ng\u01b0\u1eddi l\u1ea1i tri\u1ec3n khai kh\u00e1c nhau: c\u00e1i th\u00ec ch\u1ea1y nhanh h\u01a1n, c\u00e1i th\u00ec l\u1ea1i t\u1ed1n \u00edt b\u1ed9 nh\u1edb h\u01a1n, th\u1eadm ch\u00ed c\u00e1i c\u00f2n c\u00f3 bug... V\u1ec1 c\u01a1 b\u1ea3n th\u00ec hi\u1ec7n nay c\u00f3 4 ti\u00eau chu\u1ea9n Transaction Isolation trong Database, v\u00e0 m\u1ed7i ch\u00fang n\u00f3 s\u1ebd gi\u1ea3i quy\u1ebft \u0111\u01b0\u1ee3c c\u00e1c \u0111\u1ed9 kh\u00f3 Concurrency Control Problem kh\u00e1c nhau: Dirty Write Dirty Read Read Skew Lost Update Write Skew Phantoms Read Uncommitted \u2713 \u2715 \u2715 \u2715 \u2715 \u2715 Read Committed \u2713 \u2713 \u2715 \u2715 \u2715 \u2715 Repeatable Read \u2713 \u2713 \u2713 \u2014 \u2014 \u2014 Serializable \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 : kh\u00f4ng b\u1ecb l\u1ed7i \u2715 : b\u1ecb l\u1ed7i \u2014 : t\u00f9y t\u1eebng tr\u01b0\u1eddng h\u1ee3p v\u00e0 gi\u1ea3i ph\u00e1p s\u1eed d\u1ee5ng Tr\u00ean \u0111\u00e2y l\u00e0 ti\u00eau chu\u1ea9n chung v\u00e0 \u0111\u00e3 \u0111\u01b0\u1ee3c th\u1ed1ng nh\u1ea5t. Tuy nhi\u00ean, m\u1ed7i Database n\u00f3 l\u1ea1i c\u00f3 nh\u1eefng c\u00e1i t\u00ean kh\u00e1c nhau. Ch\u1eb3ng h\u1ea1n SQL Server c\u00f3 t\u1edbi t\u1eadn 6 m\u1ee9c \u0111\u1ed9 isolation. Chi ti\u1ebft h\u01a1n xem t\u1ea1i \u0111\u00e2y: github.com/ept/hermitage","title":"Isolation Level"},{"location":"Database/Locking-Isolation/#1-read-uncommitted","text":"\u0110\u00e2y l\u00e0 level c\u01a1 b\u1ea3n nh\u1ea5t, c\u00f3 th\u1ec3 d\u00f9ng \u0111\u1ec3 ch\u1ed1ng l\u1ed7i Dirty Write . N\u00f3 c\u00f3 c\u00e1c \u0111\u1eb7c \u0111i\u1ec3m l\u00e0 lightweight , ch\u1ec9 acquire lock khi g\u1ecdi Write Operation, v\u00e0 release lock khi transaction k\u1ebft th\u00fac (\u0111\u01b0\u1ee3c commit ho\u1eb7c rollback). \u0110i\u1ec1u n\u00e0y \u0111\u1ed3ng ngh\u0129a v\u1edbi vi\u1ec7c m\u1ed7i row trong 1 th\u1eddi \u0111i\u1ec3m ch\u1ec9 c\u00f3 1 transaction \u0111\u01b0\u1ee3c quy\u1ec1n write t\u1edbi n\u00f3. Kh\u00f4ng thi\u1ebft l\u1eadp Shared Lock tr\u00ean nh\u1eefng \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u c\u1ea7n \u0111\u1ecdc. Do \u0111\u00f3 kh\u00f4ng ph\u1ea3i ch\u1edd khi \u0111\u1ecdc d\u1eef li\u1ec7u (k\u1ec3 c\u1ea3 khi d\u1eef li\u1ec7u \u0111ang b\u1ecb lock b\u1edfi giao t\u00e1c kh\u00e1c) \u2013 T\u1ea1o Exclusive Lock tr\u00ean \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c ghi c\u00f2n Exclusive Lock \u0111\u01b0\u1ee3c gi\u1eef cho \u0111\u1ebfn h\u1ebft giao t\u00e1c. \u01afu \u0111i\u1ec3m : \u2013 T\u1ed1c \u0111\u1ed9 x\u1eed l\u00fd r\u1ea5t nhanh \u2013 Kh\u00f4ng c\u1ea3n tr\u1edf nh\u1eefng giao t\u00e1c kh\u00e1c th\u1ef1c hi\u1ec7n vi\u1ec7c c\u1eadp nh\u1eadt d\u1eef li\u1ec7u Khuy\u1ebft \u0111i\u1ec3m : Gi\u1ea3i quy\u1ebft \u0111\u01b0\u1ee3c Dirty Write nh\u01b0ng l\u1ea1i c\u00f3 kh\u1ea3 n\u0103ng x\u1ea3y ra Dirty Reads , Read Skew , Write Skew , Phantoms , Lost Update Nh\u00ecn chung th\u00ec Read Uncommitted c\u0169ng kh\u00f4ng qu\u00e1 t\u1ec7 n\u1ebfu ta bi\u1ebft c\u00e1ch s\u1eed d\u1ee5ng \u0111\u00fang l\u00fac \u0111\u00fang ch\u1ed7, v\u00ec \u0111\u1ed1i v\u1edbi c\u00e1c h\u1ec7 th\u1ed1ng l\u1edbn th\u00ec vi\u1ec7c Write \u0111\u00fang quan tr\u1ecdng h\u01a1n Read \u0111\u00fang r\u1ea5t nhi\u1ec1u. M\u1ed9t sai s\u00f3t nh\u1ecf trong vi\u1ec7c ghi c\u00f3 th\u1ec3 d\u1eabn t\u1edbi vi\u1ec7c d\u1eef li\u1ec7u kh\u00f4ng th\u1ec3 kh\u00f4i ph\u1ee5c ch\u00ednh x\u00e1c l\u1ea1i \u0111\u01b0\u1ee3c, c\u00f2n Read sai th\u00ec ch\u1ec9 c\u1ea7n refresh l\u1ea1i giao di\u1ec7n ho\u1eb7c fix code l\u00e0 \u0111\u01b0\u1ee3c.","title":"1. Read Uncommitted"},{"location":"Database/Locking-Isolation/#2-read-committed","text":"\u0110\u1ecdc d\u1eef li\u1ec7u khi \u0111\u00e3 Commit \u0110\u00e2y l\u00e0 m\u1ee9c \u0111\u1ed9 c\u00f4 l\u1eadp m\u1eb7c \u0111\u1ecbnh c\u1ee7a SQL Server M\u1ed9t ph\u01b0\u01a1ng ph\u00e1p chia l\u00e0m 2 c\u00e1ch ti\u1ebfp c\u1eadn","title":"2. Read Committed"},{"location":"Database/Locking-Isolation/#21-shared-lock","text":"C\u00e1ch ti\u1ebfp c\u1eadn n\u00e0y d\u00f9ng Shared Lock , c\u1ea3i ti\u1ebfn t\u1eeb Read Uncommited v\u00e0 b\u1ed5 sung th\u00eam acquire lock k\u1ec3 c\u1ea3 khi g\u1ecdi Read Operation (nh\u01b0ng ch\u1ec9 l\u00e0 shared lock). Kh\u00e1c v\u1edbi exclusive lock, shared lock s\u1ebd \u0111\u01b0\u1ee3c release ngay khi ho\u00e0n th\u00e0nh Operation. C\u00e1ch ti\u1ebfp c\u1eadn n\u00e0y gi\u00fap cho ta \u0111\u1ea3m b\u1ea3o nh\u1eefng thay \u0111\u1ed5i c\u1ee7a row s\u1ebd ph\u1ea3i ch\u1edd \u0111\u01b0\u1ee3c commit/rollback th\u00ec m\u1edbi \u0111\u01b0\u1ee3c ph\u00e9p s\u1eb5n s\u00e0ng available to read.","title":"2.1. Shared Lock"},{"location":"Database/Locking-Isolation/#22-consistent-read","text":"C\u00e1ch ti\u1ebfp c\u1eadn n\u00e0y s\u1eed d\u1ee5ng multi-version concurrency control : Ngo\u00e0i gi\u00e1 tr\u1ecb \u0111\u00e3 \u0111\u01b0\u1ee3c commit l\u00e0 stable version , level n\u00e0y l\u01b0u th\u00eam c\u1ea3 gi\u00e1 tr\u1ecb ch\u01b0a \u0111\u01b0\u1ee3c commit n\u1eefa n\u1ebfu c\u00f3, g\u1ecdi l\u00e0 latest version . V\u00ec t\u1ed1i \u0111a trong m\u1ed9t th\u1eddi \u0111i\u1ec3m s\u1ebd ch\u1ec9 c\u00f3 1 transaction \u0111\u01b0\u1ee3c quy\u1ec1n write v\u00e0o row cho n\u00ean ta s\u1ebd ch\u1ec9 c\u00f3 1 latest version th\u00f4i. T\u1ed5ng c\u1ed9ng l\u00e0 c\u00f3 2 version. Nh\u01b0 v\u1eady, khi 1 transaction ti\u1ebfn h\u00e0nh ghi v\u00e0o row, n\u00f3 s\u1ebd acquire lock v\u00e0 \u0111\u00e1nh d\u1ea5u version m\u1edbi cho b\u1ea3n ghi. Trong l\u00fac transaction ch\u1edd \u0111\u01b0\u1ee3c commit/rollback th\u00ec c\u00e1c thread kh\u00e1c ho\u00e0n to\u00e0n v\u1eabn c\u00f3 th\u1ec3 v\u00f4 t\u01b0 read stable version c\u1ee7a row m\u00e0 kh\u00f4ng ph\u1ea3i ch\u1edd m\u1edf lock n\u1eefa. \u01afu \u0111i\u1ec3m Gi\u1ea3i quy\u1ebft v\u1ea5n \u0111\u1ec1 Dirty Reads Shared Lock \u0111\u01b0\u1ee3c gi\u1ea3i ph\u00f3ng ngay, kh\u00f4ng c\u1ea7n ph\u1ea3i gi\u1eef cho \u0111\u1ebfn h\u1ebft giao t\u00e1c n\u00ean kh\u00f4ng c\u1ea3n tr\u1edf nhi\u1ec1u \u0111\u1ebfn thao t\u00e1c c\u1eadp nh\u1eadt c\u1ee7a c\u00e1c giao t\u00e1c kh\u00e1c. Khuy\u1ebft \u0111i\u1ec3m : Ch\u01b0a gi\u1ea3i quy\u1ebft \u0111\u01b0\u1ee3c v\u1ea5n \u0111\u1ec1 Unrepeatable Reads , Phantoms , Lost Updates Ph\u1ea3i ch\u1edd n\u1ebfu \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u c\u1ea7n \u0111\u1ecdc \u0111ang \u0111\u01b0\u1ee3c Exclusive lock lock l\u1ea1i.","title":"2.2. Consistent Read"},{"location":"Database/Locking-Isolation/#3-repeatable-read","text":"Level n\u00e0y \u0111\u1ec1 xu\u1ea5t nh\u1eefng ph\u01b0\u01a1ng ph\u00e1p c\u00f3 kh\u1ea3 n\u0103ng gi\u1ea3i quy\u1ebft \u0111\u01b0\u1ee3c b\u00e0i to\u00e1n Read Skew hay Non-repeatable Read . Ngo\u00e0i ra n\u1ebfu d\u00f9ng \u0111\u00fang c\u00e1ch, n\u00f3 c\u0169ng ph\u1ea7n n\u00e0o x\u1eed l\u00fd \u0111\u01b0\u1ee3c c\u00e1c v\u1ea5n \u0111\u1ec1 ph\u1ee9c t\u1ea1p h\u01a1n nh\u01b0 Lost Update, Phantom Read, Write Skew (t\u00f9y theo gi\u1ea3i ph\u00e1p m\u00e0 m\u00ecnh ch\u1ecdn) Repeatable Readchia l\u00e0m 2 tr\u01b0\u1eddng ph\u00e1i: S\u1eed d\u1ee5ng Lock - Repeatable Read , tr\u00f9ng v\u1edbi t\u00ean c\u1ee7a Isolation Level lu\u00f4n. N\u00f3 c\u1ea3i ti\u1ebfn t\u1eeb c\u00e1i c\u00e1ch x\u1eed l\u00fd s\u1eed d\u1ee5ng Shared Lock c\u1ee7a Read Committed. Gi\u1ea3i ph\u00e1p n\u00e0y s\u1ebd lock l\u1ea1i b\u1ea5t c\u1ee9 row n\u00e0o m\u00e0 n\u00f3 \u0111i qua cho t\u1edbi khi transaction \u0111\u01b0\u1ee3c k\u1ebft th\u00fac k\u1ec3 c\u1ea3 l\u00e0 read operation (thay v\u00ec ngay khi k\u1ebft th\u00fac read operation nh\u01b0 Read Committed). Kh\u00f4ng s\u1eed d\u1ee5ng Lock - Snapshot Isolation : Ph\u01b0\u01a1ng ph\u00e1p n\u00e0y c\u1ea3i ti\u1ebfn t\u1eeb Consistent Read c\u1ee7a Read Committed. Trong qu\u00e1 tr\u00ecnh query, c\u00f3 r\u1ea5t nhi\u1ec1u row \u0111\u00e3 \u0111\u01b0\u1ee3c update b\u1edfi c\u00e1c transaction kh\u00e1c, th\u1eadm ch\u00ed c\u00f2n b\u1ecb update nhi\u1ec1u l\u1ea7n. Thay v\u00ec ch\u1ec9 l\u01b0u 2 version, th\u00ec ta s\u1ebd l\u01b0u to\u00e0n b\u1ed9 c\u00e1c version t\u1eeb tr\u01b0\u1edbc t\u1edbi nay, v\u00e0 ch\u1ec9 l\u1ea5y ra version \u0111\u01b0\u1ee3c commit tr\u01b0\u1edbc khi transaction hi\u1ec7n t\u1ea1i \u0111\u01b0\u1ee3c b\u1eaft \u0111\u1ea7u.","title":"3. Repeatable Read"},{"location":"Database/Locking-Isolation/#4-serializable","text":"Serializable \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a l\u00e0: v\u1edbi m\u1ed7i th\u1ee9 t\u1ef1 th\u1ef1c hi\u1ec7n c\u00e1c transaction, s\u1ebd ch\u1ec9 c\u00f3 1 k\u1ebft qu\u1ea3 duy nh\u1ea5t x\u1ea3y ra. Kh\u00f4ng th\u1ec3 n\u00e0o c\u00f3 2 hay nhi\u1ec1u kh\u1ea3 n\u0103ng k\u1ebft qu\u1ea3 x\u1ea3y ra \u0111\u01b0\u1ee3c. \u0110\u00e2y l\u00e0 level cao nh\u1ea5t c\u1ee7a Isolation, nh\u01b0ng s\u1eed d\u1ee5ng n\u00f3 th\u00ec s\u1ebd ph\u1ea3i tr\u1ea3 gi\u00e1 r\u1ea5t l\u1edbn cho hi\u1ec7u su\u1ea5t c\u1ee7a ch\u01b0\u01a1ng tr\u00ecnh. Cho n\u00ean kh\u00f4ng c\u00f3 Database truy\u1ec1n th\u1ed1ng n\u00e0o c\u00e0i \u0111\u1eb7t m\u1ee9c n\u00e0y l\u00e0m c\u1ea5u h\u00ecnh m\u1eb7c \u0111\u1ecbnh c\u1ea3. Hi\u1ec7n \u0111ang c\u00f3 3 c\u00e1ch x\u1eed l\u00fd ph\u1ed5 bi\u1ebfn nh\u1ea5t Serializable d\u1ef1a tr\u00ean guy\u00ean l\u00fd gi\u1ebft nh\u1ea7m c\u00f2n h\u01a1n b\u1ecf s\u00f3t, kh\u00f4ng c\u1ea7n bi\u1ebft c\u00e1i operation n\u00e0y c\u00f3 g\u00e2y vi ph\u1ea1m isolation v\u1edbi transaction kh\u00e1c hay kh\u00f4ng, c\u1ee9 lock n\u00f3 l\u1ea1i cho an to\u00e0n. V\u00e0 chia ra l\u00e0m 2 h\u01b0\u1edbng ti\u1ebfp c\u1eadn","title":"4. Serializable"},{"location":"Database/Locking-Isolation/#41-actual-serial-execution","text":"\u00dd t\u01b0\u1edfng \u1edf \u0111\u00e2y l\u00e0 C\u00e1ch t\u1ed1t nh\u1ea5t \u0111\u1ec3 tr\u00e1nh kh\u1ecfi c\u00e1c v\u1ea5n \u0111\u1ec1 v\u1ec1 b\u1ea5t \u0111\u1ed3ng b\u1ed9 \u0111\u00f3 l\u00e0 h\u00e3y x\u1eed l\u00fd ch\u00fang n\u00f3 l\u1ea7n l\u01b0\u1ee3t tr\u00ean c\u00f9ng 1 thread . \u0110i\u1ec3n h\u00ecnh c\u00f3 th\u1ec3 k\u1ec3 \u0111\u1ebfn Redis \u00e1p d\u1ee5ng Actual Serial Execution . Ngo\u00e0i ra c\u00f2n nhi\u1ec1u Database kh\u00e1c n\u1eefa (VoltDB, H-Store, Datomic ...) c\u0169ng s\u1eed d\u1ee5ng c\u00e1ch n\u00e0y nh\u01b0ng \u00edt ph\u1ed5 bi\u1ebfn h\u01a1n. Nh\u1eefng Database s\u1eed d\u1ee5ng single-thread ki\u1ec3u n\u00e0y th\u1eadm ch\u00ed c\u00f2n nhanh h\u01a1n c\u1ea3 c\u00e1c Database truy\u1ec1n th\u1ed1ng kh\u00e1c, nh\u1edd v\u00e0o vi\u1ec7c kh\u00f4ng c\u1ea7n s\u1eed d\u1ee5ng Database locking . Nh\u01b0\u1ee3c \u0111i\u1ec3m c\u1ee7a ph\u01b0\u01a1ng ph\u00e1p n\u00e0y: Transaction ph\u1ea3i \u0111\u1ee7 nh\u1ecf v\u00e0 \u0111\u1ee7 nhanh, \u0111\u1ec3 kh\u00f4ng block c\u00e1c operation kh\u00e1c. \u0110\u00e2y l\u00e0 l\u00fd do m\u00e0 h\u1ea7u h\u1ebft c\u00e1c Database nh\u01b0 Redis s\u1eed d\u1ee5ng ph\u01b0\u01a1ng ph\u00e1p n\u00e0y \u0111\u1ec1u l\u01b0u data tr\u1ef1c ti\u1ebfp tr\u00ean memory, thay v\u00ec truy c\u1eadp xu\u1ed1ng disk.","title":"4.1. Actual Serial Execution"},{"location":"Database/Locking-Isolation/#42-two-phase-locking-2pl","text":"\u0110\u01b0\u1ee3c s\u1eed d\u1ee5ng trong MySQL (InnoDB) v\u00e0 SQL Server. K\u1ef9 thu\u1eadt n\u00e0y c\u1ea3i ti\u1ebfn t\u1eeb ph\u01b0\u01a1ng ph\u00e1p Repeatable Read, full n\u1ed9i dung nh\u01b0 sau: N\u1ebfu transaction A \u0111\u00e3 \u0111\u1ecdc 1 row v\u00e0 transaction B mu\u1ed1n ghi v\u00e0o row \u0111\u00f3: B ph\u1ea3i ch\u1edd cho t\u1edbi khi A k\u1ebft th\u00fac (commit ho\u1eb7c abort) th\u00ec m\u1edbi \u0111\u01b0\u1ee3c ti\u1ebfp t\u1ee5c. N\u1ebfu transaction A \u0111\u00e3 ghi v\u00e0o 1 row v\u00e0 transaction B mu\u1ed1n \u0111\u1ecdc row \u0111\u00f3: B ph\u1ea3i ch\u1edd cho t\u1edbi khi A k\u1ebft th\u00fac (commit ho\u1eb7c abort) th\u00ec m\u1edbi \u0111\u01b0\u1ee3c ti\u1ebfp t\u1ee5c. Ban \u0111\u1ea7u khi transaction A mu\u1ed1n \u0111\u1ecdc 1 row, n\u00f3 s\u1ebd acquire lock v\u00e0 hold n\u00f3 cho t\u1edbi khi k\u1ebft th\u00fac transaction. Tuy nhi\u00ean lock n\u00e0y \u1edf ch\u1ebf \u0111\u1ed9 share mode (t\u1ee9c l\u00e0 nhi\u1ec1u transaction c\u00f9ng c\u00f3 th\u1ec3 c\u00f9ng acquire v\u00e0 hold n\u00f3). Khi transaction B mu\u1ed1n ghi v\u00e0o row, lock s\u1ebd upgrade l\u00ean ch\u1ebf \u0111\u1ed9 exclusive mode. Qu\u00e1 tr\u00ecnh upgrade n\u00e0y ch\u1ec9 \u0111\u01b0\u1ee3c di\u1ec5n ra khi t\u1ea5t c\u1ea3 c\u00e1c transaction kh\u00e1c \u0111\u00e3 release kh\u1ecfi lock \u0111\u00e3. Sau \u0111\u00f3 B s\u1ebd acquire exclusive lock. Kh\u00f4ng transaction n\u00e0o kh\u00e1c \u0111\u01b0\u1ee3c ph\u00e9p acquire exclusive lock trong l\u00fac v\u1eabn c\u00f2n transaction ch\u01b0a release. Khi transaction C v\u1eeba \u0111\u1ecdc r\u1ed3i ghi l\u1ea1i v\u00e0o row: lock \u0111ang \u0111\u01b0\u1ee3c hold s\u1ebd \u0111\u01b0\u1ee3c upgrade t\u1eeb share mode l\u00ean exclusive mode. T\u01b0\u01a1ng t\u1ef1 nh\u01b0 tr\u00ean: qu\u00e1 tr\u00ecnh upgrade c\u0169ng ph\u1ea3i ch\u1edd t\u1ea5t c\u1ea3 c\u00e1c transaction release kh\u1ecfi lock. T\u01b0\u01a1ng t\u1ef1 Repeatable Read, s\u1ebd c\u00f3 tr\u01b0\u1eddng h\u1ee3p b\u1ecb Deadlock. Database c\u1ea7n ph\u1ea3i c\u00f3 1 c\u01a1 ch\u1ebf \u0111\u1ec3 detect \u0111\u01b0\u1ee3c v\u1ea5n \u0111\u1ec1 n\u00e0y v\u00e0 abort transaction \u0111\u1ec3 retry l\u1ea1i (c\u00f3 th\u1ec3 t\u1ef1 \u0111\u1ed9ng retry ho\u1eb7c m\u00ecnh ch\u1ee7 \u0111\u1ed9ng l\u00e0m b\u1eb1ng tay).","title":"4.2 Two-Phase Locking (2PL)"},{"location":"Database/Locking-Isolation/#serializable-snapshot-isolation-ssi","text":"H\u1ea7u h\u1ebft 4 Isolation Level tr\u00ean \u0111\u1ec1u \u0111\u01b0\u1ee3c c\u00e1i n\u00e0y th\u00ec m\u1ea5t c\u00e1i kia, tuy nhi\u00ean g\u1ea7n \u0111\u00e2y \u0111\u00e3 c\u00f3 nghi\u00ean c\u1ee9u m\u1edbi v\u1ec1 1 ph\u01b0\u01a1ng ph\u00e1p c\u00f3 th\u1ec3 dung h\u00f2a \u0111\u01b0\u1ee3c t\u1ea5t c\u1ea3 y\u1ebfu t\u1ed1 b\u00ean tr\u00ean. Thu\u1eadt to\u00e1n c\u00f3 t\u00ean l\u00e0 Serializable Snapshot Isolation (SSI) , \u0111\u01b0\u1ee3c \u0111\u00e1nh gi\u00e1 r\u1ea5t tri\u1ec3n v\u1ecdng, \u0111\u01b0\u1ee3c ra m\u1eaft v\u00e0o n\u0103m 2008 trong lu\u1eadn \u00e1n t\u1ed1t nghi\u1ec7p ti\u1ebfn s\u0129 c\u1ee7a Michael Cahill. SSI hi\u1ec7n \u0111ang \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong PostgreSQL b\u1eaft \u0111\u1ea7u t\u1eeb phi\u00ean b\u1ea3n 9.1. Thu\u1eadt to\u00e1n SSI kh\u00e1 ph\u1ee9c t\u1ea1p v\u00e0 tu\u1ed5i \u0111\u1eddi c\u00f2n tr\u1ebb n\u00ean v\u1eabn c\u00f2n nhi\u1ec1u th\u1ee9 ph\u1ea3i ph\u00e1t tri\u1ec3n ti\u1ebfp. V\u1ec1 c\u01a1 b\u1ea3n, n\u00f3 \u0111\u01b0\u1ee3c implement d\u1ef1a tr\u00ean \u00fd t\u01b0\u1edfng c\u1ee7a ph\u01b0\u01a1ng ph\u00e1p Snapshot Isolation. V\u00ec th\u1ebf n\u00ean n\u00f3 m\u1edbi c\u00f3 c\u00e1i t\u00ean l\u00e0 Serializable Snapshot Isolation.","title":"Serializable Snapshot Isolation (SSI)"},{"location":"Database/Locking-Isolation/#reference","text":"Transaction Isolation - dogy.io The Read Uncommitted Isolation Level - sqlperformance.com Comprehensive Understanding of Transaction Isolation Levels - alibabacloud.com Databases 101: ACID, MVCC vs Locks, Transaction Isolation Levels, and Concurrency - ithare.com Isolation levels and locking in relational databases - retool.com Locking and Isolation Levels - docs.actian.com Locking, concurrency, and isolation - docs.oracle.com Transaction Isolation Levels in DBMS - geeksforgeeks.org All about locking in SQL Server - sqlshack.com Isolation levels behavior in SQL Server Always On Availability Groups - sqlshack.com","title":"Reference"},{"location":"Database/Queries/","text":"Queries What is a database query? Languages for database querying Query Processing in DBMS What is a database query? Query trong database query l\u00e0 truy v\u1ea5n th\u00f4ng tin tr\u00edch xu\u1ea5t t\u1eeb m\u1ed9t database. Query d\u00f9ng \u0111\u1ec3 th\u1ef1c hi\u1ec7n c\u00e1c thao t\u00e1c l\u00ean d\u1eef li\u1ec7u \u0111\u00f3 data manipulation , d\u1ef1a v\u00e0o \u0111\u00f3 c\u00f3 th\u1ec3 chia Queries th\u00e0nh 2 lo\u1ea1i: Select Query : D\u00f9ng \u0111\u1ec3 l\u1ea5y d\u1eef li\u1ec7u, t\u00ecm ki\u1ebfm, l\u1ecdc, \u0111\u1ebfm v.vvv v\u00e0 kh\u00f4ng l\u00e0m thay \u0111\u1ed5i d\u1eef li\u1ec7u trong database. Action Query : L\u1ea5y d\u1eef li\u1ec7u ra, thay \u0111\u1ed5i ho\u1eb7c th\u1ef1c hi\u1ec7n c\u00e1c CRUD tr\u00ean d\u1eef li\u1ec7u c\u1ee7a database. Languages for database querying C\u00f3 nhi\u1ec1u c\u00e1ch \u0111\u1ec3 truy v\u1ea5n d\u1eef li\u1ec7u trong database nh\u01b0 Using available parameters , Query by example (QBE) , Installing database plugins , nh\u01b0ng c\u01a1 b\u1ea3n nh\u1ea5t l\u00e0 d\u00f9ng Query language Query language - Ng\u00f4n ng\u1eef truy v\u1ea5n: L\u00e0 lo\u1ea1i ng\u00f4n ng\u1eef giao ti\u1ebfp v\u1edbi m\u00e1y t\u00ednh, cho ph\u00e9p ch\u00fang ta th\u1ef1c hi\u1ec7n c\u00e1c data manipulation nh\u01b0 \u0111\u00e3 k\u1ec3 tr\u00ean b\u1eb1ng c\u00e1c c\u00e2u truy v\u1ea5n t\u1edbi c\u01a1 s\u1edf d\u1eef li\u1ec7u. Structured Query Language (SQL) l\u00e0 ng\u00f4n ng\u1eef truy v\u1ea5n n\u1ed5i ti\u1ebfng nh\u1ea5t. V\u1edbi SQL, ch\u00fang ta c\u00f3 th\u1ec3 l\u01b0u tr\u1eef, truy xu\u1ea5t v\u00e0 thao t\u00e1c d\u1eef li\u1ec7u b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng c\u00e1c \u0111o\u1ea1n code, \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 c\u00e2u truy v\u1ea5n trong RDBMS D\u01b0\u1edbi \u0111\u00e2y l\u00e0 m\u1ed9t s\u1ed1 l\u1ec7nh truy v\u1ea5n ph\u1ed5 bi\u1ebfn nh\u1ea5t t\u01b0\u01a1ng \u1ee9ng v\u1edbi c\u00e1c ch\u1ee9c n\u0103ng c\u1ee7a ch\u00fang: SELECT \u2013 fetch data t\u1eeb database. \u0110\u00e2y l\u00e0 m\u1ed9t trong nh\u1eefng l\u1ec7nh ph\u1ed5 bi\u1ebfn nh\u1ea5t, v\u00ec m\u1ecdi request t\u1edbi database \u0111\u1ec1u b\u1eaft \u0111\u1ea7u b\u1eb1ng m\u1ed9t select query. AND \u2013 combine data t\u1eeb m\u1ed9t ho\u1eb7c nhi\u1ec1u b\u1ea3ng ORDER BY \u2013 s\u1eafp x\u1ebfp d\u1eef li\u1ec7u tr\u1ea3 v\u1ec1 theo s\u1ed1 ho\u1eb7c theo th\u1ee9 t\u1ef1 b\u1ea3ng ch\u1eef c\u00e1i. SUM \u2013 t\u1ed5ng h\u1ee3p d\u1eef li\u1ec7u t\u1eeb m\u1ed9t c\u1ed9t c\u1ee5 th\u1ec3. UPDATE \u2013 thay \u0111\u1ed5i d\u1eef li\u1ec7u t\u1eeb m\u1ed9t d\u00f2ng trong b\u1ea3ng INSERT \u2013 th\u00eam m\u1edbi d\u1eef li\u1ec7u v\u00e0o b\u1ea3ng WHERE \u2013 l\u1ecdc d\u1eef li\u1ec7u v\u00e0 l\u1ea5y gi\u00e1 tr\u1ecb c\u1ee7a n\u00f3 d\u1ef1a tr\u00ean c\u00e1c \u0111i\u1ec1u ki\u1ec7n and more Truy v\u1ea5n d\u1eef li\u1ec7u SQL c\u00f3 th\u1ec3 chia th\u00e0nh 4 nh\u00f3m: DQL - Data Query Language - Nh\u00f3m truy v\u1ea5n d\u1eef li\u1ec7u: g\u1ed3m c\u00e1c l\u1ec7nh truy v\u1ea5n Select \u0111\u1ec3 l\u1ea5y th\u00f4ng tin nh\u01b0ng kh\u00f4ng l\u00e0m thay \u0111\u1ed5i d\u1eef li\u1ec7u trong c\u00e1c b\u1ea3ng DDL \u2013 Data Definition Language - Nh\u00f3m \u0111\u1ecbnh ngh\u0129a d\u1eef li\u1ec7u: G\u1ed3m c\u00e1c l\u1ec7nh t\u1ea1o, thay \u0111\u1ed5i c\u00e1c b\u1ea3ng d\u1eef li\u1ec7u (Create, Drop, Alter, \u2026) DML \u2013 Data Manipulation Language - Nh\u00f3m thao t\u00e1c d\u1eef li\u1ec7u - DML: G\u1ed3m c\u00e1c l\u1ec7nh l\u00e0m thay \u0111\u1ed5i d\u1eef li\u1ec7u l\u01b0u trong c\u00e1c b\u1ea3ng (Insert, Delete, Update,\u2026) DCL \u2013 Data Control Language - Nh\u00f3m qu\u1ea3n l\u00fd d\u1eef li\u1ec7u: G\u1ed3m c\u00e1c l\u1ec7nh qu\u1ea3n l\u00fd quy\u1ec1n truy nh\u1eadp v\u00e0o d\u1eef li\u1ec7u v\u00e0 c\u00e1c b\u1ea3ng (Grant, Revoke, \u2026) Query Processing in DBMS Query Processing l\u00e0 qu\u00e1 tr\u00ecnh t\u1eebng b\u01b0\u1edbc chuy\u1ec3n ng\u00f4n ng\u1eef c\u1ea5p cao th\u00e0nh ng\u00f4n ng\u1eef c\u1ea5p th\u1ea5p m\u00e0 m\u00e1y c\u00f3 th\u1ec3 hi\u1ec3u v\u00e0 th\u1ef1c hi\u1ec7n c\u00e1c actions t\u1eeb ph\u00eda ng\u01b0\u1eddi d\u00f9ng y\u00eau c\u1ea7u. B\u1ed9 x\u1eed l\u00fd truy v\u1ea5n - Query Processor trong DBMS c\u00f3 nhi\u1ec7m v\u1ee5 th\u1ef1c hi\u1ec7n t\u00e1c v\u1ee5 n\u00e0y. 1. Parsing and translation \u1ede b\u01b0\u1edbc n\u00e0y, database s\u1ebd ti\u1ebfn h\u00e0nh ki\u1ec3m tra c\u00e2u l\u1ec7nh SQL v\u1ec1 c\u00e1c m\u1eb7t syxtax , semantic , v\u00e0 shared pool . Khi qu\u00e1 tr\u00ecnh n\u00e0y ho\u00e0n t\u1ea5t, c\u00e2u l\u1ec7nh SQL s\u1ebd \u0111\u01b0\u1ee3c chuy\u1ec3n sang d\u1ea1ng relational algebra ( c\u00f3 th\u1ec3 l\u00e0 tree, graph). Syntax check \u2013 Ki\u1ec3m tra c\u00fa ph\u00e1p c\u1ee7a SQL. Semantic check \u2013 Ki\u1ec3m tra v\u1ec1 m\u1eb7t ng\u1eef ngh\u0129a c\u1ee7a c\u00e2u SQL. V\u00ed d\u1ee5 c\u00e2u truy v\u1ea5n ch\u1ee9a t\u00ean c\u1ee7a m\u1ed9t b\u1ea3ng kh\u00f4ng ch\u1ee9a trong database. Shared pool check \u2013 M\u1ecdi c\u00e2u truy v\u1ea5n \u0111\u1ec1u ch\u1ee9a m\u1ed9t m\u00e3 b\u0103m trong qu\u00e1 tr\u00ecnh th\u1ef1c thi, vi\u1ec7c ki\u1ec3m tra n\u00e0y cho ph\u00e9p database ki\u1ec3m tra n\u1ebfu \u0111\u00e3 t\u1ed3n t\u1ea1i m\u00e3 b\u0103m n\u00e0y \u0111\u00e3 t\u1ed3n t\u1ea1i trong shared pool hay ch\u01b0a, n\u1ebfu \u0111\u00e3 c\u00f3 th\u00ec database ch\u1ec9 vi\u1ec7c th\u1ef1c thi m\u00e0 kh\u00f4ng c\u1ea7n quan t\u00e2m \u0111\u1ebfn b\u01b0\u1edbc kh\u00e1c trong qu\u00e1 tr\u00ecnh x\u1eed l\u00fd truy v\u1ea5n c\u1ee7a database, \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 soft parse , ng\u01b0\u1ee3c l\u1ea1i g\u1ecdi l\u00e0 hard parse . 2. Optimizer Trong giai \u0111o\u1ea1n t\u1ed1i \u01b0u ho\u00e1, database ph\u1ea3i th\u1ef1c hi\u1ec7n \u00edt nh\u1ea5t m\u1ed9t l\u1ea7n hard parse cho m\u1ed9t DML statement duy nh\u1ea5t v\u00e0 t\u1ed1i \u01b0u ho\u00e1 trong qu\u00e1 tr\u00ecnh n\u00e0y. C\u01a1 s\u1edf d\u1eef li\u1ec7u n\u00e0y kh\u00f4ng bao gi\u1edd t\u1ed1i \u01b0u h\u00f3a DDL tr\u1eeb khi n\u00f3 bao g\u1ed3m m\u1ed9t th\u00e0nh ph\u1ea7n DML nh\u01b0 truy v\u1ea5n con y\u00eau c\u1ea7u t\u1ed1i \u01b0u h\u00f3a. N\u00f3 l\u00e0 m\u1ed9t qu\u00e1 tr\u00ecnh trong \u0111\u00f3 nhi\u1ec1u k\u1ebf ho\u1ea1ch th\u1ef1c thi truy v\u1ea5n \u0111\u1ec3 \u0111\u00e1p \u1ee9ng m\u1ed9t truy v\u1ea5n \u0111\u01b0\u1ee3c ki\u1ec3m tra v\u00e0 k\u1ebf ho\u1ea1ch truy v\u1ea5n hi\u1ec7u qu\u1ea3 nh\u1ea5t \u0111\u01b0\u1ee3c \u0111\u00e1p \u1ee9ng \u0111\u1ec3 th\u1ef1c thi Database catalog l\u01b0u tr\u1eef c\u00e1c k\u1ebf ho\u1ea1ch th\u1ef1c thi v\u00e0 sau \u0111\u00f3 tr\u00ecnh t\u1ed1i \u01b0u h\u00f3a chuy\u1ec3n k\u1ebf ho\u1ea1ch chi ph\u00ed th\u1ea5p nh\u1ea5t \u0111\u1ec3 th\u1ef1c hi\u1ec7n. 3. Evaluation Cu\u1ed1i c\u00f9ng c\u00e2u truy v\u1ea5n s\u1ebd \u0111\u01b0\u1ee3c th\u1ef1c thi v\u00e0 tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3 cho ng\u01b0\u1eddi d\u00f9ng. Reference SQL | Query Processing SQL | DDL, DQL, DML, DCL and TCL What is a database query? SQL and NoSQL queries explained Query Processing in DBMS What is a Query? Database Query Explained","title":"Queries"},{"location":"Database/Queries/#queries","text":"What is a database query? Languages for database querying Query Processing in DBMS","title":"Queries"},{"location":"Database/Queries/#what-is-a-database-query","text":"Query trong database query l\u00e0 truy v\u1ea5n th\u00f4ng tin tr\u00edch xu\u1ea5t t\u1eeb m\u1ed9t database. Query d\u00f9ng \u0111\u1ec3 th\u1ef1c hi\u1ec7n c\u00e1c thao t\u00e1c l\u00ean d\u1eef li\u1ec7u \u0111\u00f3 data manipulation , d\u1ef1a v\u00e0o \u0111\u00f3 c\u00f3 th\u1ec3 chia Queries th\u00e0nh 2 lo\u1ea1i: Select Query : D\u00f9ng \u0111\u1ec3 l\u1ea5y d\u1eef li\u1ec7u, t\u00ecm ki\u1ebfm, l\u1ecdc, \u0111\u1ebfm v.vvv v\u00e0 kh\u00f4ng l\u00e0m thay \u0111\u1ed5i d\u1eef li\u1ec7u trong database. Action Query : L\u1ea5y d\u1eef li\u1ec7u ra, thay \u0111\u1ed5i ho\u1eb7c th\u1ef1c hi\u1ec7n c\u00e1c CRUD tr\u00ean d\u1eef li\u1ec7u c\u1ee7a database.","title":"What is a database query?"},{"location":"Database/Queries/#languages-for-database-querying","text":"C\u00f3 nhi\u1ec1u c\u00e1ch \u0111\u1ec3 truy v\u1ea5n d\u1eef li\u1ec7u trong database nh\u01b0 Using available parameters , Query by example (QBE) , Installing database plugins , nh\u01b0ng c\u01a1 b\u1ea3n nh\u1ea5t l\u00e0 d\u00f9ng Query language Query language - Ng\u00f4n ng\u1eef truy v\u1ea5n: L\u00e0 lo\u1ea1i ng\u00f4n ng\u1eef giao ti\u1ebfp v\u1edbi m\u00e1y t\u00ednh, cho ph\u00e9p ch\u00fang ta th\u1ef1c hi\u1ec7n c\u00e1c data manipulation nh\u01b0 \u0111\u00e3 k\u1ec3 tr\u00ean b\u1eb1ng c\u00e1c c\u00e2u truy v\u1ea5n t\u1edbi c\u01a1 s\u1edf d\u1eef li\u1ec7u. Structured Query Language (SQL) l\u00e0 ng\u00f4n ng\u1eef truy v\u1ea5n n\u1ed5i ti\u1ebfng nh\u1ea5t. V\u1edbi SQL, ch\u00fang ta c\u00f3 th\u1ec3 l\u01b0u tr\u1eef, truy xu\u1ea5t v\u00e0 thao t\u00e1c d\u1eef li\u1ec7u b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng c\u00e1c \u0111o\u1ea1n code, \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 c\u00e2u truy v\u1ea5n trong RDBMS D\u01b0\u1edbi \u0111\u00e2y l\u00e0 m\u1ed9t s\u1ed1 l\u1ec7nh truy v\u1ea5n ph\u1ed5 bi\u1ebfn nh\u1ea5t t\u01b0\u01a1ng \u1ee9ng v\u1edbi c\u00e1c ch\u1ee9c n\u0103ng c\u1ee7a ch\u00fang: SELECT \u2013 fetch data t\u1eeb database. \u0110\u00e2y l\u00e0 m\u1ed9t trong nh\u1eefng l\u1ec7nh ph\u1ed5 bi\u1ebfn nh\u1ea5t, v\u00ec m\u1ecdi request t\u1edbi database \u0111\u1ec1u b\u1eaft \u0111\u1ea7u b\u1eb1ng m\u1ed9t select query. AND \u2013 combine data t\u1eeb m\u1ed9t ho\u1eb7c nhi\u1ec1u b\u1ea3ng ORDER BY \u2013 s\u1eafp x\u1ebfp d\u1eef li\u1ec7u tr\u1ea3 v\u1ec1 theo s\u1ed1 ho\u1eb7c theo th\u1ee9 t\u1ef1 b\u1ea3ng ch\u1eef c\u00e1i. SUM \u2013 t\u1ed5ng h\u1ee3p d\u1eef li\u1ec7u t\u1eeb m\u1ed9t c\u1ed9t c\u1ee5 th\u1ec3. UPDATE \u2013 thay \u0111\u1ed5i d\u1eef li\u1ec7u t\u1eeb m\u1ed9t d\u00f2ng trong b\u1ea3ng INSERT \u2013 th\u00eam m\u1edbi d\u1eef li\u1ec7u v\u00e0o b\u1ea3ng WHERE \u2013 l\u1ecdc d\u1eef li\u1ec7u v\u00e0 l\u1ea5y gi\u00e1 tr\u1ecb c\u1ee7a n\u00f3 d\u1ef1a tr\u00ean c\u00e1c \u0111i\u1ec1u ki\u1ec7n and more Truy v\u1ea5n d\u1eef li\u1ec7u SQL c\u00f3 th\u1ec3 chia th\u00e0nh 4 nh\u00f3m: DQL - Data Query Language - Nh\u00f3m truy v\u1ea5n d\u1eef li\u1ec7u: g\u1ed3m c\u00e1c l\u1ec7nh truy v\u1ea5n Select \u0111\u1ec3 l\u1ea5y th\u00f4ng tin nh\u01b0ng kh\u00f4ng l\u00e0m thay \u0111\u1ed5i d\u1eef li\u1ec7u trong c\u00e1c b\u1ea3ng DDL \u2013 Data Definition Language - Nh\u00f3m \u0111\u1ecbnh ngh\u0129a d\u1eef li\u1ec7u: G\u1ed3m c\u00e1c l\u1ec7nh t\u1ea1o, thay \u0111\u1ed5i c\u00e1c b\u1ea3ng d\u1eef li\u1ec7u (Create, Drop, Alter, \u2026) DML \u2013 Data Manipulation Language - Nh\u00f3m thao t\u00e1c d\u1eef li\u1ec7u - DML: G\u1ed3m c\u00e1c l\u1ec7nh l\u00e0m thay \u0111\u1ed5i d\u1eef li\u1ec7u l\u01b0u trong c\u00e1c b\u1ea3ng (Insert, Delete, Update,\u2026) DCL \u2013 Data Control Language - Nh\u00f3m qu\u1ea3n l\u00fd d\u1eef li\u1ec7u: G\u1ed3m c\u00e1c l\u1ec7nh qu\u1ea3n l\u00fd quy\u1ec1n truy nh\u1eadp v\u00e0o d\u1eef li\u1ec7u v\u00e0 c\u00e1c b\u1ea3ng (Grant, Revoke, \u2026)","title":"Languages for database querying"},{"location":"Database/Queries/#query-processing-in-dbms","text":"Query Processing l\u00e0 qu\u00e1 tr\u00ecnh t\u1eebng b\u01b0\u1edbc chuy\u1ec3n ng\u00f4n ng\u1eef c\u1ea5p cao th\u00e0nh ng\u00f4n ng\u1eef c\u1ea5p th\u1ea5p m\u00e0 m\u00e1y c\u00f3 th\u1ec3 hi\u1ec3u v\u00e0 th\u1ef1c hi\u1ec7n c\u00e1c actions t\u1eeb ph\u00eda ng\u01b0\u1eddi d\u00f9ng y\u00eau c\u1ea7u. B\u1ed9 x\u1eed l\u00fd truy v\u1ea5n - Query Processor trong DBMS c\u00f3 nhi\u1ec7m v\u1ee5 th\u1ef1c hi\u1ec7n t\u00e1c v\u1ee5 n\u00e0y.","title":"Query Processing in DBMS"},{"location":"Database/Queries/#1-parsing-and-translation","text":"\u1ede b\u01b0\u1edbc n\u00e0y, database s\u1ebd ti\u1ebfn h\u00e0nh ki\u1ec3m tra c\u00e2u l\u1ec7nh SQL v\u1ec1 c\u00e1c m\u1eb7t syxtax , semantic , v\u00e0 shared pool . Khi qu\u00e1 tr\u00ecnh n\u00e0y ho\u00e0n t\u1ea5t, c\u00e2u l\u1ec7nh SQL s\u1ebd \u0111\u01b0\u1ee3c chuy\u1ec3n sang d\u1ea1ng relational algebra ( c\u00f3 th\u1ec3 l\u00e0 tree, graph). Syntax check \u2013 Ki\u1ec3m tra c\u00fa ph\u00e1p c\u1ee7a SQL. Semantic check \u2013 Ki\u1ec3m tra v\u1ec1 m\u1eb7t ng\u1eef ngh\u0129a c\u1ee7a c\u00e2u SQL. V\u00ed d\u1ee5 c\u00e2u truy v\u1ea5n ch\u1ee9a t\u00ean c\u1ee7a m\u1ed9t b\u1ea3ng kh\u00f4ng ch\u1ee9a trong database. Shared pool check \u2013 M\u1ecdi c\u00e2u truy v\u1ea5n \u0111\u1ec1u ch\u1ee9a m\u1ed9t m\u00e3 b\u0103m trong qu\u00e1 tr\u00ecnh th\u1ef1c thi, vi\u1ec7c ki\u1ec3m tra n\u00e0y cho ph\u00e9p database ki\u1ec3m tra n\u1ebfu \u0111\u00e3 t\u1ed3n t\u1ea1i m\u00e3 b\u0103m n\u00e0y \u0111\u00e3 t\u1ed3n t\u1ea1i trong shared pool hay ch\u01b0a, n\u1ebfu \u0111\u00e3 c\u00f3 th\u00ec database ch\u1ec9 vi\u1ec7c th\u1ef1c thi m\u00e0 kh\u00f4ng c\u1ea7n quan t\u00e2m \u0111\u1ebfn b\u01b0\u1edbc kh\u00e1c trong qu\u00e1 tr\u00ecnh x\u1eed l\u00fd truy v\u1ea5n c\u1ee7a database, \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 soft parse , ng\u01b0\u1ee3c l\u1ea1i g\u1ecdi l\u00e0 hard parse .","title":"1. Parsing and translation"},{"location":"Database/Queries/#2-optimizer","text":"Trong giai \u0111o\u1ea1n t\u1ed1i \u01b0u ho\u00e1, database ph\u1ea3i th\u1ef1c hi\u1ec7n \u00edt nh\u1ea5t m\u1ed9t l\u1ea7n hard parse cho m\u1ed9t DML statement duy nh\u1ea5t v\u00e0 t\u1ed1i \u01b0u ho\u00e1 trong qu\u00e1 tr\u00ecnh n\u00e0y. C\u01a1 s\u1edf d\u1eef li\u1ec7u n\u00e0y kh\u00f4ng bao gi\u1edd t\u1ed1i \u01b0u h\u00f3a DDL tr\u1eeb khi n\u00f3 bao g\u1ed3m m\u1ed9t th\u00e0nh ph\u1ea7n DML nh\u01b0 truy v\u1ea5n con y\u00eau c\u1ea7u t\u1ed1i \u01b0u h\u00f3a. N\u00f3 l\u00e0 m\u1ed9t qu\u00e1 tr\u00ecnh trong \u0111\u00f3 nhi\u1ec1u k\u1ebf ho\u1ea1ch th\u1ef1c thi truy v\u1ea5n \u0111\u1ec3 \u0111\u00e1p \u1ee9ng m\u1ed9t truy v\u1ea5n \u0111\u01b0\u1ee3c ki\u1ec3m tra v\u00e0 k\u1ebf ho\u1ea1ch truy v\u1ea5n hi\u1ec7u qu\u1ea3 nh\u1ea5t \u0111\u01b0\u1ee3c \u0111\u00e1p \u1ee9ng \u0111\u1ec3 th\u1ef1c thi Database catalog l\u01b0u tr\u1eef c\u00e1c k\u1ebf ho\u1ea1ch th\u1ef1c thi v\u00e0 sau \u0111\u00f3 tr\u00ecnh t\u1ed1i \u01b0u h\u00f3a chuy\u1ec3n k\u1ebf ho\u1ea1ch chi ph\u00ed th\u1ea5p nh\u1ea5t \u0111\u1ec3 th\u1ef1c hi\u1ec7n.","title":"2. Optimizer"},{"location":"Database/Queries/#3-evaluation","text":"Cu\u1ed1i c\u00f9ng c\u00e2u truy v\u1ea5n s\u1ebd \u0111\u01b0\u1ee3c th\u1ef1c thi v\u00e0 tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3 cho ng\u01b0\u1eddi d\u00f9ng.","title":"3. Evaluation"},{"location":"Database/Queries/#reference","text":"SQL | Query Processing SQL | DDL, DQL, DML, DCL and TCL What is a database query? SQL and NoSQL queries explained Query Processing in DBMS What is a Query? Database Query Explained","title":"Reference"},{"location":"Database/Relationship-Keys-Cascade/","text":"Relationship, Keys, Cascade Relationship: Concepts, Degrees of Relationship Types, Structural Constraints of Relationships in ER Model Keys: Types of Keys - Primary/Foreign keys Cascade Database l\u00e0 m\u1ed9t t\u1eadp h\u1ee3p c\u1ee7a d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c t\u1ed5 ch\u1ee9c sao cho d\u1ec5 d\u00e0ng truy c\u1eadp c\u0169ng nh\u01b0 c\u1eadp nh\u1eadt, ch\u1ec9nh s\u1eeda. M\u1ed9t c\u01a1 s\u1edf d\u1eef li\u1ec7u th\u01b0\u1eddng s\u1ebd \u0111\u01b0\u1ee3c t\u1ed5 ch\u1ee9c th\u00e0nh c\u00e1c b\u1ea3ng, c\u00e1c b\u1ea3ng l\u01b0u tr\u1eef th\u00f4ng tin theo c\u1ea5u tr\u00fac ri\u00eang c\u1ee7a n\u00f3. Relationship Relationship : D\u00f9ng \u0111\u1ec3 ch\u1ec9 m\u1ed1i quan h\u1ec7 gi\u1eefa hai hay nhi\u1ec1u Entity (Entity) kh\u00e1c nhau. V\u00ed d\u1ee5: Student (A) tham gia kh\u00f3a h\u1ecdc (X). Nh\u1eefng Relationship c\u00f3 c\u00f9ng m\u1ed9t ki\u1ec3u \u0111\u01b0\u1ee3c nh\u00f3m l\u1ea1i g\u1ecdi l\u00e0 ki\u1ec3u RelationshipType Trong ER Model, ng\u01b0\u1eddi ta s\u1eed d\u1ee5ng h\u00ecnh thoi v\u00e0 b\u00ean trong ghi t\u00ean ki\u1ec3u Relationship \u0111\u1ec3 k\u00fd hi\u1ec7u ki\u1ec3u Relationship. Degrees of Relationship Types Degrees of Relationship Types Th\u1ec3 hi\u1ec7n s\u1ed1 l\u01b0\u1ee3ng c\u00e1c ki\u1ec3u Entity c\u00f3 c\u00f9ng Relationship. C\u00f3 c\u00e1c m\u1ee9c \u0111\u1ed9 sau: The Unary (recursive) relationship type - b\u1eadc 1: M\u1ed1i quan h\u1ec7 gi\u1eefa c\u00f9ng 1 Entity. The Binary relationship type b\u1eadc 2 - M\u1ed1i quan h\u1ec7 gi\u1eefa 2 Entity v\u1edbi nhau The Ternary relationship type - b\u1eadc 3: M\u1ed1i quan h\u1ec7 gi\u1eefa 3 Entity N-ary (n degree) - b\u1eadc n: M\u1ed1i quan h\u1ec7 gi\u1eefa N Entity. Structural Constraints of Relationships in ER Model Relationships th\u01b0\u1eddng c\u00f3 m\u1ed9t s\u1ed1 r\u00e0ng bu\u1ed9c ( Constraints ) n\u00e0o \u0111\u00f3 v\u1ec1 c\u00e1c Entity \u0111\u1ec3 th\u1ec3 hi\u1ec7n c\u00e1c Entity c\u00f3 th\u1ec3 k\u1ebft h\u1ee3p v\u1edbi nhau th\u00f4ng qua m\u1ed9t s\u1ed1 r\u00e0ng bu\u1ed9c nh\u1ea5t \u0111\u1ecbnh. C\u00e1c r\u00e0ng bu\u1ed9c n\u00e0y \u0111\u01b0\u1ee3c x\u00e1c \u0111\u1ecbnh t\u1eeb c\u00e1c t\u00ecnh hu\u1ed1ng th\u1ef1c t\u1ebf c\u1ee7a m\u1ed1i quan h\u1ec7 gi\u1eefa c\u00e1c Entity v\u1edbi nhau. One to one (1:1) relationship : M\u1ed9t Entity A c\u00f3 li\u00ean k\u1ebft v\u1edbi m\u1ed9t Entity B v\u00e0 ng\u01b0\u1ee3c l\u1ea1i. One to many (1:N) relationship : M\u1ed9t Entity A c\u00f3 li\u00ean k\u1ebft v\u1edbi nhi\u1ec1u Entity B1, B2, B3, B.... Nh\u01b0ng ng\u01b0\u1ee3c l\u1ea1i m\u1ed9t Entity B1, B2 B ch\u1ea5m ch\u1ea5m \u0111\u00f3 l\u1ea1i c\u00f3 li\u00ean k\u1ebft duy nh\u1ea5t v\u1edbi Entity A. Many-to-one (N:1) relationship : Nhi\u1ec1u Entity A1, A2, A3, A... c\u00f3 c\u00f9ng m\u1ed1i quan h\u1ec7 v\u1edbi duy nh\u1ea5t m\u1ed9t Entity B. Many to many (N:N) relationships : M\u1ed9t Entity A c\u00f3 li\u00ean k\u1ebft v\u1edbi nhi\u1ec1u Entity B v\u00e0 ng\u01b0\u1ee3c l\u1ea1i. Keys Keys trong DBMS - h\u1ec7 qu\u1ea3n tr\u1ecb c\u01a1 s\u1edf d\u1eef li\u1ec7u, l\u00e0 m\u1ed9t hay m\u1ed9t t\u1eadp h\u1ee3p c\u00e1c thu\u1ed9c t\u00ednh gi\u00fap x\u00e1c \u0111\u1ecbnh m\u1ed9t \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u ( row-col /data records) trong m\u1ed9t quan h\u1ec7 ( table /collections). C\u00e1c Keys cho ph\u00e9p t\u00ecm ki\u1ebfm m\u1ed1i quan h\u1ec7 gi\u1eefa hai table /collections v\u1edbi nhau v\u00e0 t\u00ecm ki\u1ebfm d\u1eef li\u1ec7u d\u1ef1a tr\u00ean c\u00e1c m\u1ed1i quan h\u1ec7 n\u00e0y. Types of Keys Super key Primary key Candidate key Alternate key Foreign key Composite key Trong \u0111\u00f3, Primary key v\u00e0 Foreign key l\u00e0 hai kh\u00f3a ph\u1ed5 bi\u1ebfn v\u00e0 quan tr\u1ecdng nh\u1ea5t. Primary key - Kh\u00f3a ch\u00ednh : L\u00e0 m\u1ed9t c\u1ed9t ho\u1eb7c nh\u00f3m c\u00e1c c\u1ed9t trong b\u1ea3ng x\u00e1c \u0111\u1ecbnh duy nh\u1ea5t m\u1ed7i h\u00e0ng trong b\u1ea3ng. Kh\u00f3a ch\u00ednh kh\u00f4ng \u0111\u01b0\u1ee3c ph\u00e9p tr\u00f9ng l\u1eb7p v\u00e0 gi\u00e1 tr\u1ecb c\u1ee7a kh\u00f3a ch\u00ednh kh\u00f4ng \u0111\u01b0\u1ee3c c\u00f3 gi\u00e1 tr\u1ecb NULL . M\u1ed9t b\u1ea3ng ch\u1ec9 duy nh\u1ea5t m\u1ed9t kh\u00f3a ch\u00ednh . V\u00ed d\u1ee5: Trong b\u1ea3ng h\u1ecdc sinh b\u00ean d\u01b0\u1edbi, ID ch\u00ednh l\u00e0 kh\u00f3a ch\u00ednh c\u1ee7a b\u1ea3ng. ID T\u00ean H\u1ecd L\u1edbp 1 A Nguy\u1ec5n 1 2 B Tr\u1ea7n 1 3 C Ho\u00e0ng 3 4 D L\u00ea 4 Foreign keys - Kh\u00f3a ph\u1ee5 : l\u00e0 m\u1ed9t thu\u1ed9c t\u00ednh trong m\u1ed9t b\u1ea3ng tham chi\u1ebfu \u0111\u1ebfn kh\u00f3a ch\u00ednh trong m\u1ed9t b\u1ea3ng kh\u00e1c HO\u1eb6C c\u00f3 th\u1ec3 l\u00e0 gi\u00e1 tr\u1ecb NULL. C\u1ea3 Foreign keys v\u00e0 Primary key ph\u1ea3i c\u00f3 c\u00f9ng ki\u1ec3u d\u1eef li\u1ec7u. V\u00ed d\u1ee5: Trong b\u1ea3ng h\u1ecdc sinh b\u00ean tr\u00ean, ID l\u00e0 Primary key v\u00e0 trong b\u1ea3ng 1 b\u00ean d\u01b0\u1edbi, Email l\u00e0 Primary key . X\u00e9t b\u1ea3ng 2 b\u00ean d\u01b0\u1edbi, ID l\u00e0 Primary key v\u00e0 Email l\u00e0 Foreign key , d\u00f9ng \u0111\u1ec3 tham chi\u1ebfu \u0111\u1ebfn kh\u00f3a ch\u00ednh c\u1ee7a b\u1ea3ng 1. Table 1 Email S\u1ed1 \u0111i\u1ec7n tho\u1ea1i T\u00ean Anguyen@gmail.com 0123456789 A Btran@gmail.com 9876543210 B Choang@gmail.com 0321456790 C Dle@gmail.com 0321456790 D Table 2 ID Email T\u00ean H\u1ecd L\u1edbp 1 Anguyen@gmail.com A Nguy\u1ec5n 1 2 Btran@gmail.com B Tr\u1ea7n 1 3 Choang@gmail.com C Ho\u00e0ng 3 4 Dle@gmail.com D L\u00ea 4 Cascading Cascade : L\u00e0 m\u1ed9t optional trong vi\u1ec7c thi\u1ebft l\u1eadp c\u00e1c Primary/Foreign keys trong table. N\u1ebfu ch\u1ecdn option n\u00e0y, v\u1edbi v\u00ed d\u1ee5 tr\u00ean, khi ta c\u1eadp nh\u1eadt - ON UPDATE gi\u00e1 tr\u1ecb c\u1ee7a c\u1ed9t Email c\u1ee7a Table 1 , th\u00ec gi\u00e1 tr\u1ecb \u0111\u00f3 b\u00ean b\u1ea3ng Table 2 s\u1ebd t\u1ef1 \u0111\u1ed9ng \u0111\u01b0\u1ee3c c\u1eadp nh\u1eadt theo. Tr\u01b0\u1eddng h\u1ee3p khi ta x\u00f3a - ON DELETE 1 email b\u00ean Table 1 th\u00ec gi\u00e1 tr\u1ecb \u0111\u00f3 b\u00ean Table 2 s\u1ebd b\u1ecb x\u00f3a. Trong SQL, c\u00f3 5 option cho vi\u1ec7c s\u1eed d\u1ee5ng ON DELETE , ON UPDATE trong Cascade, \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 referential actions . G\u1ecdi A l\u00e0 table tham chi\u1ebfu \u0111\u1ebfn table B, khi \u0111\u00f3 A l\u00e0 referenced/parent table , B l\u00e0 referencing/children table ,ta c\u00f3: ON DELETE CASCADE | ON UPDATE CASCADE : N\u1ebfu 1 h\u00e0ng trong A b\u1ecb x\u00f3a hay c\u1eadp nh\u1eadt, th\u00ec t\u1ea5t c\u1ea3 c\u00e1c h\u00e0ng \u1edf b\u00ean B m\u00e0 matching v\u1edbi c\u00e1i h\u00e0ng b\u1ecb x\u00f3a \u0111\u00f3 s\u1ebd b\u1ecb x\u00f3a, c\u1eadp nh\u1eadt theo. ON DELETE SET NULL | ON UPDATE SET NULL : T\u01b0\u01a1ng t\u1ef1 nh\u01b0 tr\u00ean, x\u00f3a 1 h\u00e0ng b\u00ean A \u0111i, nh\u01b0ng thay v\u00ec c\u00e1c h\u00e0ng matching \u1edf b\u00ean B b\u1ecb x\u00f3a hay c\u1eadp nh\u1eadt theo b\u00ean A, th\u00ec \u1edf \u0111\u00e2y s\u1ebd set cho n\u00f3 gi\u00e1 tr\u1ecb null ON DELETE SET DEFAULT | ON UPDATE SET DEFAULT : D\u1eef li\u1ec7u b\u00ean B s\u1ebd \u0111\u01b0\u1ee3c set gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh n\u1ebfu d\u1eef li\u1ec7u b\u00ean A b\u1ecb x\u00f3a, c\u1eadp nh\u1eadt. ON DELETE RESTRICT | ON UPDATE RESTRICT : kh\u00f4ng \u0111\u01b0\u1ee3c x\u00f3a, c\u1eadp nh\u1eadt d\u1eef li\u1ec7u b\u00ean B n\u1ebfu d\u1eef li\u1ec7u \u0111\u00f3 matching t\u1edbi b\u1ea3ng A. ON DELETE NO ACTION | ON UPDATE NO ACTION , (the default): kh\u00f4ng c\u00f3 action n\u00e0o t\u1eeb b\u00ean B n\u1ebfu thay \u0111\u1ed5i d\u1eef li\u1ec7u \u1edf b\u00ean A, th\u01b0\u1eddng d\u00f9ng \u0111\u1ec3 constraint check. Reference Introduction to database Chapter 8 - Entity Relationship Model - opentextbc What is the degree of relation in DBMS Structural Constraints of Relationships in ER Model","title":"Relationship, Keys, Cascade"},{"location":"Database/Relationship-Keys-Cascade/#relationship-keys-cascade","text":"Relationship: Concepts, Degrees of Relationship Types, Structural Constraints of Relationships in ER Model Keys: Types of Keys - Primary/Foreign keys Cascade Database l\u00e0 m\u1ed9t t\u1eadp h\u1ee3p c\u1ee7a d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c t\u1ed5 ch\u1ee9c sao cho d\u1ec5 d\u00e0ng truy c\u1eadp c\u0169ng nh\u01b0 c\u1eadp nh\u1eadt, ch\u1ec9nh s\u1eeda. M\u1ed9t c\u01a1 s\u1edf d\u1eef li\u1ec7u th\u01b0\u1eddng s\u1ebd \u0111\u01b0\u1ee3c t\u1ed5 ch\u1ee9c th\u00e0nh c\u00e1c b\u1ea3ng, c\u00e1c b\u1ea3ng l\u01b0u tr\u1eef th\u00f4ng tin theo c\u1ea5u tr\u00fac ri\u00eang c\u1ee7a n\u00f3.","title":"Relationship, Keys, Cascade"},{"location":"Database/Relationship-Keys-Cascade/#relationship","text":"Relationship : D\u00f9ng \u0111\u1ec3 ch\u1ec9 m\u1ed1i quan h\u1ec7 gi\u1eefa hai hay nhi\u1ec1u Entity (Entity) kh\u00e1c nhau. V\u00ed d\u1ee5: Student (A) tham gia kh\u00f3a h\u1ecdc (X). Nh\u1eefng Relationship c\u00f3 c\u00f9ng m\u1ed9t ki\u1ec3u \u0111\u01b0\u1ee3c nh\u00f3m l\u1ea1i g\u1ecdi l\u00e0 ki\u1ec3u RelationshipType Trong ER Model, ng\u01b0\u1eddi ta s\u1eed d\u1ee5ng h\u00ecnh thoi v\u00e0 b\u00ean trong ghi t\u00ean ki\u1ec3u Relationship \u0111\u1ec3 k\u00fd hi\u1ec7u ki\u1ec3u Relationship.","title":"Relationship"},{"location":"Database/Relationship-Keys-Cascade/#degrees-of-relationship-types","text":"Degrees of Relationship Types Th\u1ec3 hi\u1ec7n s\u1ed1 l\u01b0\u1ee3ng c\u00e1c ki\u1ec3u Entity c\u00f3 c\u00f9ng Relationship. C\u00f3 c\u00e1c m\u1ee9c \u0111\u1ed9 sau: The Unary (recursive) relationship type - b\u1eadc 1: M\u1ed1i quan h\u1ec7 gi\u1eefa c\u00f9ng 1 Entity. The Binary relationship type b\u1eadc 2 - M\u1ed1i quan h\u1ec7 gi\u1eefa 2 Entity v\u1edbi nhau The Ternary relationship type - b\u1eadc 3: M\u1ed1i quan h\u1ec7 gi\u1eefa 3 Entity N-ary (n degree) - b\u1eadc n: M\u1ed1i quan h\u1ec7 gi\u1eefa N Entity.","title":"Degrees of Relationship Types"},{"location":"Database/Relationship-Keys-Cascade/#structural-constraints-of-relationships-in-er-model","text":"Relationships th\u01b0\u1eddng c\u00f3 m\u1ed9t s\u1ed1 r\u00e0ng bu\u1ed9c ( Constraints ) n\u00e0o \u0111\u00f3 v\u1ec1 c\u00e1c Entity \u0111\u1ec3 th\u1ec3 hi\u1ec7n c\u00e1c Entity c\u00f3 th\u1ec3 k\u1ebft h\u1ee3p v\u1edbi nhau th\u00f4ng qua m\u1ed9t s\u1ed1 r\u00e0ng bu\u1ed9c nh\u1ea5t \u0111\u1ecbnh. C\u00e1c r\u00e0ng bu\u1ed9c n\u00e0y \u0111\u01b0\u1ee3c x\u00e1c \u0111\u1ecbnh t\u1eeb c\u00e1c t\u00ecnh hu\u1ed1ng th\u1ef1c t\u1ebf c\u1ee7a m\u1ed1i quan h\u1ec7 gi\u1eefa c\u00e1c Entity v\u1edbi nhau. One to one (1:1) relationship : M\u1ed9t Entity A c\u00f3 li\u00ean k\u1ebft v\u1edbi m\u1ed9t Entity B v\u00e0 ng\u01b0\u1ee3c l\u1ea1i. One to many (1:N) relationship : M\u1ed9t Entity A c\u00f3 li\u00ean k\u1ebft v\u1edbi nhi\u1ec1u Entity B1, B2, B3, B.... Nh\u01b0ng ng\u01b0\u1ee3c l\u1ea1i m\u1ed9t Entity B1, B2 B ch\u1ea5m ch\u1ea5m \u0111\u00f3 l\u1ea1i c\u00f3 li\u00ean k\u1ebft duy nh\u1ea5t v\u1edbi Entity A. Many-to-one (N:1) relationship : Nhi\u1ec1u Entity A1, A2, A3, A... c\u00f3 c\u00f9ng m\u1ed1i quan h\u1ec7 v\u1edbi duy nh\u1ea5t m\u1ed9t Entity B. Many to many (N:N) relationships : M\u1ed9t Entity A c\u00f3 li\u00ean k\u1ebft v\u1edbi nhi\u1ec1u Entity B v\u00e0 ng\u01b0\u1ee3c l\u1ea1i.","title":"Structural Constraints of Relationships in ER Model"},{"location":"Database/Relationship-Keys-Cascade/#keys","text":"Keys trong DBMS - h\u1ec7 qu\u1ea3n tr\u1ecb c\u01a1 s\u1edf d\u1eef li\u1ec7u, l\u00e0 m\u1ed9t hay m\u1ed9t t\u1eadp h\u1ee3p c\u00e1c thu\u1ed9c t\u00ednh gi\u00fap x\u00e1c \u0111\u1ecbnh m\u1ed9t \u0111\u01a1n v\u1ecb d\u1eef li\u1ec7u ( row-col /data records) trong m\u1ed9t quan h\u1ec7 ( table /collections). C\u00e1c Keys cho ph\u00e9p t\u00ecm ki\u1ebfm m\u1ed1i quan h\u1ec7 gi\u1eefa hai table /collections v\u1edbi nhau v\u00e0 t\u00ecm ki\u1ebfm d\u1eef li\u1ec7u d\u1ef1a tr\u00ean c\u00e1c m\u1ed1i quan h\u1ec7 n\u00e0y.","title":"Keys"},{"location":"Database/Relationship-Keys-Cascade/#types-of-keys","text":"Super key Primary key Candidate key Alternate key Foreign key Composite key Trong \u0111\u00f3, Primary key v\u00e0 Foreign key l\u00e0 hai kh\u00f3a ph\u1ed5 bi\u1ebfn v\u00e0 quan tr\u1ecdng nh\u1ea5t. Primary key - Kh\u00f3a ch\u00ednh : L\u00e0 m\u1ed9t c\u1ed9t ho\u1eb7c nh\u00f3m c\u00e1c c\u1ed9t trong b\u1ea3ng x\u00e1c \u0111\u1ecbnh duy nh\u1ea5t m\u1ed7i h\u00e0ng trong b\u1ea3ng. Kh\u00f3a ch\u00ednh kh\u00f4ng \u0111\u01b0\u1ee3c ph\u00e9p tr\u00f9ng l\u1eb7p v\u00e0 gi\u00e1 tr\u1ecb c\u1ee7a kh\u00f3a ch\u00ednh kh\u00f4ng \u0111\u01b0\u1ee3c c\u00f3 gi\u00e1 tr\u1ecb NULL . M\u1ed9t b\u1ea3ng ch\u1ec9 duy nh\u1ea5t m\u1ed9t kh\u00f3a ch\u00ednh . V\u00ed d\u1ee5: Trong b\u1ea3ng h\u1ecdc sinh b\u00ean d\u01b0\u1edbi, ID ch\u00ednh l\u00e0 kh\u00f3a ch\u00ednh c\u1ee7a b\u1ea3ng. ID T\u00ean H\u1ecd L\u1edbp 1 A Nguy\u1ec5n 1 2 B Tr\u1ea7n 1 3 C Ho\u00e0ng 3 4 D L\u00ea 4 Foreign keys - Kh\u00f3a ph\u1ee5 : l\u00e0 m\u1ed9t thu\u1ed9c t\u00ednh trong m\u1ed9t b\u1ea3ng tham chi\u1ebfu \u0111\u1ebfn kh\u00f3a ch\u00ednh trong m\u1ed9t b\u1ea3ng kh\u00e1c HO\u1eb6C c\u00f3 th\u1ec3 l\u00e0 gi\u00e1 tr\u1ecb NULL. C\u1ea3 Foreign keys v\u00e0 Primary key ph\u1ea3i c\u00f3 c\u00f9ng ki\u1ec3u d\u1eef li\u1ec7u. V\u00ed d\u1ee5: Trong b\u1ea3ng h\u1ecdc sinh b\u00ean tr\u00ean, ID l\u00e0 Primary key v\u00e0 trong b\u1ea3ng 1 b\u00ean d\u01b0\u1edbi, Email l\u00e0 Primary key . X\u00e9t b\u1ea3ng 2 b\u00ean d\u01b0\u1edbi, ID l\u00e0 Primary key v\u00e0 Email l\u00e0 Foreign key , d\u00f9ng \u0111\u1ec3 tham chi\u1ebfu \u0111\u1ebfn kh\u00f3a ch\u00ednh c\u1ee7a b\u1ea3ng 1. Table 1 Email S\u1ed1 \u0111i\u1ec7n tho\u1ea1i T\u00ean Anguyen@gmail.com 0123456789 A Btran@gmail.com 9876543210 B Choang@gmail.com 0321456790 C Dle@gmail.com 0321456790 D Table 2 ID Email T\u00ean H\u1ecd L\u1edbp 1 Anguyen@gmail.com A Nguy\u1ec5n 1 2 Btran@gmail.com B Tr\u1ea7n 1 3 Choang@gmail.com C Ho\u00e0ng 3 4 Dle@gmail.com D L\u00ea 4","title":"Types of Keys"},{"location":"Database/Relationship-Keys-Cascade/#cascading","text":"Cascade : L\u00e0 m\u1ed9t optional trong vi\u1ec7c thi\u1ebft l\u1eadp c\u00e1c Primary/Foreign keys trong table. N\u1ebfu ch\u1ecdn option n\u00e0y, v\u1edbi v\u00ed d\u1ee5 tr\u00ean, khi ta c\u1eadp nh\u1eadt - ON UPDATE gi\u00e1 tr\u1ecb c\u1ee7a c\u1ed9t Email c\u1ee7a Table 1 , th\u00ec gi\u00e1 tr\u1ecb \u0111\u00f3 b\u00ean b\u1ea3ng Table 2 s\u1ebd t\u1ef1 \u0111\u1ed9ng \u0111\u01b0\u1ee3c c\u1eadp nh\u1eadt theo. Tr\u01b0\u1eddng h\u1ee3p khi ta x\u00f3a - ON DELETE 1 email b\u00ean Table 1 th\u00ec gi\u00e1 tr\u1ecb \u0111\u00f3 b\u00ean Table 2 s\u1ebd b\u1ecb x\u00f3a. Trong SQL, c\u00f3 5 option cho vi\u1ec7c s\u1eed d\u1ee5ng ON DELETE , ON UPDATE trong Cascade, \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 referential actions . G\u1ecdi A l\u00e0 table tham chi\u1ebfu \u0111\u1ebfn table B, khi \u0111\u00f3 A l\u00e0 referenced/parent table , B l\u00e0 referencing/children table ,ta c\u00f3: ON DELETE CASCADE | ON UPDATE CASCADE : N\u1ebfu 1 h\u00e0ng trong A b\u1ecb x\u00f3a hay c\u1eadp nh\u1eadt, th\u00ec t\u1ea5t c\u1ea3 c\u00e1c h\u00e0ng \u1edf b\u00ean B m\u00e0 matching v\u1edbi c\u00e1i h\u00e0ng b\u1ecb x\u00f3a \u0111\u00f3 s\u1ebd b\u1ecb x\u00f3a, c\u1eadp nh\u1eadt theo. ON DELETE SET NULL | ON UPDATE SET NULL : T\u01b0\u01a1ng t\u1ef1 nh\u01b0 tr\u00ean, x\u00f3a 1 h\u00e0ng b\u00ean A \u0111i, nh\u01b0ng thay v\u00ec c\u00e1c h\u00e0ng matching \u1edf b\u00ean B b\u1ecb x\u00f3a hay c\u1eadp nh\u1eadt theo b\u00ean A, th\u00ec \u1edf \u0111\u00e2y s\u1ebd set cho n\u00f3 gi\u00e1 tr\u1ecb null ON DELETE SET DEFAULT | ON UPDATE SET DEFAULT : D\u1eef li\u1ec7u b\u00ean B s\u1ebd \u0111\u01b0\u1ee3c set gi\u00e1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh n\u1ebfu d\u1eef li\u1ec7u b\u00ean A b\u1ecb x\u00f3a, c\u1eadp nh\u1eadt. ON DELETE RESTRICT | ON UPDATE RESTRICT : kh\u00f4ng \u0111\u01b0\u1ee3c x\u00f3a, c\u1eadp nh\u1eadt d\u1eef li\u1ec7u b\u00ean B n\u1ebfu d\u1eef li\u1ec7u \u0111\u00f3 matching t\u1edbi b\u1ea3ng A. ON DELETE NO ACTION | ON UPDATE NO ACTION , (the default): kh\u00f4ng c\u00f3 action n\u00e0o t\u1eeb b\u00ean B n\u1ebfu thay \u0111\u1ed5i d\u1eef li\u1ec7u \u1edf b\u00ean A, th\u01b0\u1eddng d\u00f9ng \u0111\u1ec3 constraint check.","title":"Cascading"},{"location":"Database/Relationship-Keys-Cascade/#reference","text":"Introduction to database Chapter 8 - Entity Relationship Model - opentextbc What is the degree of relation in DBMS Structural Constraints of Relationships in ER Model","title":"Reference"},{"location":"Database/Schema/","text":"Database Schema Overview Features Database schema types Database Schema Design Best Practices of Design Schema Relationships between Entities Schema Example: E-Commerce Transaction Overview Database Schema - L\u01b0\u1ee3c \u0111\u1ed3 c\u01a1 s\u1edf d\u1eef li\u1ec7u: Cho ch\u00fang ta bi\u1ebft database s\u1ebd c\u00f3 nh\u1eefng table n\u00e0o, c\u00f3 thu\u1ed9c t\u00ednh g\u00ec v\u00e0 m\u1ed1i quan h\u1ec7 c\u1ee7a nh\u1eefng table n\u00e0y ra sao. C\u00f3 th\u1ec3 coi Schema l\u00e0 m\u1ed9t namespace, d\u00f9ng \u0111\u1ec3 gom nh\u00f3m c\u00e1c table c\u00f3 chung m\u1ed9t \u0111\u1eb7c \u0111i\u1ec3m n\u00e0o \u0111\u00f3 l\u1ea1i v\u1edbi nhau \u0111\u1ec5 d\u1ec5 d\u00e0ng qu\u1ea3n l\u00fd. Trong SQL Server, n\u1ebfu kh\u00f4ng d\u00f9ng Schema trong CSDL th\u00ec n\u00f3 s\u1ebd l\u1ea5y Schema m\u1eb7c \u0111\u1ecbnh l\u00e0 dbo . Features Management : Khi ta nh\u00f3m c\u00e1c table l\u1ea1i th\u00ec s\u1ebd r\u1ea5t d\u1ec5 d\u00e0ng qu\u1ea3n l\u00fd c\u0169ng nh\u01b0 ta c\u00f3 th\u1ec3 ph\u00e2n quy\u1ec1n qu\u1ea3n l\u00fd t\u1eebng schema cho t\u1eebng user kh\u00e1c nhau, \u0111\u00e2y ch\u00ednh l\u00e0 \u0111i\u1ec3m m\u1ea1nh c\u1ee7a schema. Visualize : M\u1ed9t Database Schema \u0111\u1ee7 x\u1ecbn s\u1ebd cho ta bi\u1ebft \u0111\u01b0\u1ee3c trong relational database bao g\u1ed3m nh\u1eefng g\u00ec, schema \u0111\u1ecbnh ngh\u0129a tables , fields , relationships , views , indexes , packages , procedures , functions , queues , triggers , types , sequences , materialized views , synonyms , database links , directories , XML schemas , and other elements . Database Search Engine V\u00ed d\u1ee5 v\u1edbi chu\u1ed7i k\u00fd t\u1ef1 \u201cMoonlight\u201d , c\u00f3 th\u1ec3 hi\u1ec3u l\u00e0 \u0111ang \u0111\u1ec1 c\u1eadp \u0111\u1ebfn ngh\u0129a \u00e1nh tr\u0103ng ho\u1eb7c t\u00ean m\u1ed9t b\u1ed9 phim . T\u00f9y theo ng\u1eef c\u1ea3nh m\u00e0 t\u1eeb \u201cMoonlight\u201d s\u1ebd mang m\u1ed9t \u00fd ngh\u0129a kh\u00e1c. \u0110i\u1ec1u n\u00e0y s\u1ebd g\u00e2y c\u1ea3n tr\u1edf cho Search Engine khi ph\u1ea3i hi\u1ec3n th\u1ecb c\u00e1c k\u1ebft qu\u1ea3 li\u00ean quan cho ng\u01b0\u1eddi d\u00f9ng. Do \u0111\u00f3, \u0111\u1ec3 search engine hi\u1ec3u v\u00e0 ph\u00e2n lo\u1ea1i th\u00f4ng tin ch\u00ednh x\u00e1c h\u01a1n, ta c\u1ea7n s\u1eafp x\u1ebfp d\u1eef li\u1ec7u logic. V\u00e0 Schema ch\u00ednh l\u00e0 n\u01a1i cung c\u1ea5p nh\u1eefng c\u00f4ng c\u1ee5, d\u1eef li\u1ec7u c\u1ee5 th\u1ec3 \u0111\u1ec3 search engine hi\u1ec3u \u0111\u01b0\u1ee3c user \u0111ang mu\u1ed1n search n\u1ed9i dung g\u00ec, thu\u1ed9c th\u1ec3 lo\u1ea1i n\u00e0o, ch\u1ee7 \u0111\u1ec1 g\u00ec... SEO : Vi\u1ec7c s\u1eafp x\u1ebfp d\u1eef li\u1ec7u c\u00f3 c\u1ea5u tr\u00fac trong website \u0111em l\u1ea1i r\u1ea5t nhi\u1ec1u l\u1ee3i \u00edch khi SEO: C\u00f4ng c\u1ee5 t\u00ecm ki\u1ebfm hi\u1ec3u n\u1ed9i dung website d\u1ec5 d\u00e0ng h\u01a1n Website n\u1ed5i b\u1eadt h\u01a1n tr\u00ean trang k\u1ebft qu\u1ea3 t\u00ecm ki\u1ebfm Database schema types Database schemas \u0111\u01b0\u1ee3c chia th\u00e0nh 5 lo\u1ea1i, trong \u0111\u00f3 3 lo\u1ea1i \u0111\u1ea7u l\u00e0 ph\u1ed5 bi\u1ebfn nh\u1ea5t: Physical Database Schema : Th\u1ec3 hi\u1ec7n c\u00e1ch d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef tr\u00ean disk storage ho\u1eb7c data target, s\u1ef1 ph\u00e2n b\u1ed5 b\u1ed9 nh\u1edb (x\u00e1c \u0111\u1ecbnh theo GB ho\u1eb7c TB). \u0110\u00f3ng vai tr\u00f2 l\u00e0 n\u1ec1n t\u1ea3ng \u0111\u1ec3 c\u00e1c lo\u1ea1i l\u01b0\u1ee3c \u0111\u1ed3 kh\u00e1c t\u1ea1o ra c\u00e1c relationships v\u00e0 indexes. Logical Database Schema : x\u00e1c \u0111\u1ecbnh t\u1ea5t c\u1ea3 c\u00e1c r\u00e0ng bu\u1ed9c, logic c\u1ea7n \u0111\u01b0\u1ee3c \u00e1p d\u1ee5ng cho vi\u1ec7c l\u01b0u tr\u1eef d\u1eef li\u1ec7u. N\u00f3 \u0111\u1ecbnh ngh\u0129a c\u00e1c table, views v\u00e0 c\u00e1c constraints gi\u1eefa ch\u00fang v\u1edbi nhau. View Database Schema : l\u00e0 b\u1ea3n design c\u1ee7a database t\u1ea1i view level. M\u00f4 t\u1ea3 chung v\u1ec1 t\u01b0\u01a1ng t\u00e1c c\u1ee7a end user v\u1edbi Database. \u1ede view level n\u00e0y, user c\u00f3 th\u1ec3 t\u01b0\u01a1ng t\u00e1c v\u1edbi h\u1ec7 th\u1ed1ng b\u1eb1ng giao di\u1ec7n. Star Schema : l\u00e0 m\u1ed9t m\u00f4 h\u00ecnh \u0111a chi\u1ec1u \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong data warehouses \u0111\u1ec3 h\u1ed7 tr\u1ee3 ph\u00e2n t\u00edch n\u00e2ng cao. \u1ede gi\u1eefa ng\u00f4i sao l\u00e0 m\u1ed9t b\u1ea3ng d\u1eef li\u1ec7u trung t\u00e2m \u0111\u01b0\u1ee3c k\u1ebft n\u1ed1i v\u1edbi n b\u1ea3ng - t\u01b0\u01a1ng \u1ee9ng v\u1edbi n chi\u1ec1u. Chi\u1ebfm r\u1ea5t nhi\u1ec1u kh\u00f4ng gian, h\u1ea1n ch\u1ebf kh\u1ea3 n\u0103ng m\u1edf r\u1ed9ng c\u1ee7a d\u1eef li\u1ec7u. Snowflake Schema : T\u01b0\u01a1ng t\u1ef1 nh\u01b0 Star Schema , Snowflake c\u0169ng l\u00e0 m\u1ed9t Schema \u0111a chi\u1ec1u \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong data warehouses \u0111\u1ec3 h\u1ed7 tr\u1ee3 c\u00e1c ph\u00e2n t\u00edch n\u00e2ng cao. \u01afu \u0111i\u1ec3m c\u1ee7a Snowflake Schema l\u00e0 l\u01b0u tr\u1eef \u00edt d\u1eef li\u1ec7u tr\u00f9ng l\u1eb7p h\u01a1n so v\u1edbi Star Schema. Database Schema Design Vi\u1ec7c Design m\u1ed9t Database Schema chu\u1ea9n l\u00e0 c\u1ef1c k\u1ef3 quan trong. M\u1ed9t Schema t\u1ed1t c\u1ea7n t\u1ed5 ch\u1ee9c d\u1eef li\u1ec7u th\u00e0nh c\u00e1c Table v\u1edbi c\u00e1c Attributes th\u00edch h\u1ee3p, hi\u1ec3n th\u1ecb \u0111\u01b0\u1ee3c m\u1ed1i quan h\u1ec7 qua l\u1ea1i gi\u1eefa Table v\u00e0 Columns, \u0111\u1ed3ng th\u1eddi \u00e1p \u0111\u1eb7t c\u00e1c constraints nh\u01b0 Data types. T\u1eeb \u0111\u00f3 gi\u00fap c\u00e1c nh\u00e0 ph\u00e1t tri\u1ec3n l\u00e0m vi\u1ec7c v\u1edbi Database d\u1ec5 d\u00e0ng h\u01a1n Ng\u01b0\u1ee3c l\u1ea1i, m\u1ed9t Schema thi\u1ebfu s\u00f3t nhi\u1ec1u th\u1ee9 s\u1ebd \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn vi\u1ec7c ph\u00e2n t\u00edch d\u1eef li\u1ec7u, ph\u1ea3i th\u1ef1c hi\u1ec7n th\u00eam m\u00f4 h\u00ecnh h\u00f3a v\u00e0 truy v\u1ea5n t\u1ed1n nhi\u1ec1u th\u1eddi gian v\u00e0 t\u00e0i nguy\u00ean h\u1ec7 th\u1ed1ng h\u01a1n, l\u00e0m t\u0103ng chi ph\u00ed v\u00e0 kh\u00f3 l\u1ea5y s\u1ed1 li\u1ec7u ph\u00e2n t\u00edch. Qu\u00e1 tr\u00ecnh Design m\u1ed9t Database Schema tr\u1ea3i qua c\u00e1c b\u01b0\u1edbc c\u01a1 b\u1ea3n sau: Determine the purpose of your database : X\u00e1c \u0111\u1ecbnh m\u1ee5c \u0111\u00edch c\u1ee7a database gi\u00fap ta chu\u1ea9n b\u1ecb cho c\u00e1c b\u01b0\u1edbc c\u00f2n l\u1ea1i t\u1ed1t h\u01a1n Find and organize the information required : Thu th\u1eadp t\u1ea5t c\u1ea3 c\u00e1c lo\u1ea1i th\u00f4ng tin c\u1ea7n thi\u1ebft ghi l\u1ea1i trong database Divide the information into tables : Chia c\u00e1 th\u00f4ng tin m\u00ecnh thu th\u1eadp \u0111\u01b0\u1ee3c th\u00e0nh c\u00e1c major entities or subjects, t\u1eeb \u0111\u00f3 x\u00e1c \u0111\u1ecbnh c\u00e1c Table trong database. Turn information items into columns : Quy\u1ebft \u0111\u1ecbnh th\u00f4ng tin g\u00ec c\u1ea7n l\u01b0u tr\u1eef trong m\u1ed7i Table. M\u1ed7i th\u00f4ng tin s\u1ebd tr\u1edf th\u00e0nh m\u1ed9t field v\u00e0 \u0111\u01b0\u1ee3c hi\u1ec3n th\u1ecb d\u01b0\u1edbi d\u1ea1ng m\u1ed9t Column trong Table. Specify primary keys : Ch\u1ecdn primary key v\u00e0 c\u00e1c keys kh\u00e1c cho t\u1eebng table Set up the table relationships : T\u1ea1o c\u00e1c relationships cho c\u00e1c table Refine your design : Ph\u00e2n t\u00edch b\u1ea3n Design \u0111\u1ec3 t\u00ecm l\u1ed7i. T\u1ea1o b\u1ea3ng v\u00e0 th\u00eam m\u1ed9t v\u00e0i record d\u1eef li\u1ec7u m\u1eabu xem li\u1ec7u m\u00ecnh c\u00f3 th\u1ec3 nh\u1eadn \u0111\u01b0\u1ee3c k\u1ebft qu\u1ea3 mong mu\u1ed1n hay kh\u00f4ng. Th\u1ef1c hi\u1ec7n c\u00e1c \u0111i\u1ec1u ch\u1ec9nh \u0111\u1ed1i v\u1edbi design n\u1ebfu c\u1ea7n. Apply the normalization rules : \u00c1p d\u1ee5ng c\u00e1c quy t\u1eafc chu\u1ea9n h\u00f3a d\u1eef li\u1ec7u \u0111\u1ec3 xem li\u1ec7u c\u00e1c Table c\u1ee7a m\u00ecnh c\u00f3 c\u1ea5u tr\u00fac ch\u00ednh x\u00e1c hay kh\u00f4ng. Th\u1ef1c hi\u1ec7n c\u00e1c \u0111i\u1ec1u ch\u1ec9nh \u0111\u1ed1i v\u1edbi table n\u1ebfu c\u1ea7n. Best Practices of Design Schema Vi\u1ec7c t\u1ea1o ra m\u1ed9t Database Schema Design nh\u01b0 tr\u00ean c\u00f3 th\u1ec3 d\u00f9ng tool \u0111\u1ec3 gen ra Schema, tuy nhi\u00ean c\u1ea7n c\u00f3 m\u1ed9t s\u1ed1 Principles of Database Schema Design m\u00e0 m\u00ecnh c\u1ea7n n\u1eafm \u0111\u01b0\u1ee3c: 1. Have Good Naming Standards : \u0110\u1eb7t t\u00ean ph\u00f9 h\u1ee3p gi\u00fap cho c\u00e1c Database Schema tr\u1edf n\u00ean hi\u1ec7u qu\u1ea3 nh\u1ea5t c\u00f3 th\u1ec3. T\u00ean cho ph\u00e9p b\u1ea1n x\u00e1c \u0111\u1ecbnh m\u1ee5c \u0111\u00edch c\u1ee7a entities v\u00e0 \u0111\u01a1n gi\u1ea3n h\u00f3a vi\u1ec7c truy c\u1eadp t\u1edbi entity \u0111\u00f3. M\u1ed9t s\u1ed1 nguy\u00ean t\u1eafc: T\u00ean c\u1ee7a c\u00e1c b\u1ea3ng ph\u1ea3i th\u1ed1ng nh\u1ea5t v\u1edbi nhau v\u1ec1 c\u1ea5u tr\u00fac. C\u1ed1 g\u1eafng kh\u00f4ng s\u1eed d\u1ee5ng c\u00e1c t\u1eeb d\u00e0nh ri\u00eang cho SQL Server trong t\u00ean b\u1ea3ng, t\u00ean c\u1ed9t v\u00e0 tr\u01b0\u1eddng v\u00ec n\u00f3 c\u00f3 th\u1ec3 d\u1eabn \u0111\u1ebfn l\u1ed7i c\u00fa ph\u00e1p. Kh\u00f4ng s\u1eed d\u1ee5ng d\u1ea5u g\u1ea1ch ngang, d\u1ea5u ngo\u1eb7c k\u00e9p, d\u1ea5u c\u00e1ch v\u00e0 c\u00e1c k\u00fd t\u1ef1 \u0111\u1eb7c bi\u1ec7t v\u00ec n\u00f3 kh\u00f4ng h\u1ee3p l\u1ec7. Tr\u00e1nh c\u00e1c ti\u1ec1n t\u1ed1 ho\u1eb7c h\u1eadu t\u1ed1 kh\u00f4ng c\u1ea7n thi\u1ebft cho t\u00ean c\u1ee7a b\u1ea3ng 2. Use Normalization to Tackle Redundancy Redundancy l\u00e0 \u0111i\u1ec1u th\u01b0\u1eddng th\u1ea5y trong c\u00e1c thi\u1ebft k\u1ebf c\u01a1 s\u1edf d\u1eef li\u1ec7u. Ph\u1ea7n kh\u00f3 \u1edf \u0111\u00e2y l\u00e0 nh\u1eefng ph\u1ea7n d\u01b0 th\u1eeba n\u00e0y c\u00f3 th\u1ec3 t\u1ed1t ho\u1eb7c x\u1ea5u t\u00f9y thu\u1ed9c v\u00e0o tr\u01b0\u1eddng h\u1ee3p s\u1eed d\u1ee5ng. \u0110\u00e2y l\u00e0 l\u00fac s\u1eed d\u1ee5ng Normalization to Tackle Redundancy . Vi\u1ec7c chu\u1ea9n h\u00f3a c\u01a1 s\u1edf d\u1eef li\u1ec7u l\u00e0 qu\u00e1 tr\u00ecnh x\u00e2y d\u1ef1ng c\u01a1 s\u1edf d\u1eef li\u1ec7u d\u01b0\u1edbi m\u1ed9t lo\u1ea1t c\u00e1c h\u00ecnh th\u1ee9c Normalization \u0111\u1ec3 gi\u1ea3m thi\u1ec3u vi\u1ec7c d\u01b0 th\u1eeba d\u1eef li\u1ec7u.Vi\u1ec7c quy\u1ebft \u0111\u1ecbnh s\u1ebd duy tr\u00ec ho\u1eb7c lo\u1ea1i b\u1ecf c\u00e1c d\u1eef li\u1ec7u d\u01b0 th\u1eeba, kh\u00f4ng quan tr\u1ecdng \u0111\u01b0\u1ee3c quy\u1ebft \u0111\u1ecbnh b\u1eb1ng c\u00e1ch so s\u00e1nh cost of operations v\u00e0 dung l\u01b0\u1ee3ng l\u01b0u tr\u1eef d\u1eef li\u1ec7u \u0111\u00f3. 3. Fix the Right Number of Tables T\u1ed1i \u01b0u h\u00f3a s\u1ed1 l\u01b0\u1ee3ng b\u1ea3ng trong m\u1ed9t Database, vi\u1ec7c gi\u1eef s\u1ed1 l\u01b0\u1ee3ng c\u00e1c b\u1ea3ng \u1edf m\u1ee9c \u0111\u1ed9 1 b\u1ea3ng \u0111\u1ea1i di\u1ec7n cho m\u1ed9t \"th\u1ee9\" \u0111\u01b0\u1ee3c coi l\u00e0 c\u00f3 hi\u1ec7u qu\u1ea3 nh\u1ea5t. 4. Avoid Nulls Tr\u00e1nh vi\u1ec7c cho ph\u00e9p data c\u00f3 gi\u00e1 tr\u1ecb null, ch\u1ec9 s\u1eed d\u1ee5ng ch\u00fang khi th\u1ef1c s\u1ef1 c\u1ea7n thi\u1ebft. 5. Have Proper Documentation Documentation gi\u00fap cho vi\u1ec7c c\u1ed9ng t\u00e1c gi\u1eefa c\u00e1c nh\u00f3m hi\u1ec7u qu\u1ea3 h\u01a1n v\u00e0 h\u1ed7 tr\u1ee3 c\u00e1c th\u00e0nh vi\u00ean m\u1edbi tham gia d\u1ef1 \u00e1n d\u1ec5 d\u00e0ng. Documentation t\u1ed1t bao g\u1ed3m c\u00e1c \u0111\u1ecbnh ngh\u0129a tr\u00ean b\u1ea3ng, c\u1ed9t, m\u1ed1i quan h\u1ec7 v\u00e0 c\u1ea3 c\u00e1c r\u00e0ng bu\u1ed9c. 6. Protect Data Integrity C\u00e1c quy t\u1eafc kinh doanh c\u01a1 b\u1ea3n n\u00ean \u0111\u01b0\u1ee3c \u00e1p d\u1ee5ng trong c\u01a1 s\u1edf d\u1eef li\u1ec7u hay C\u00e1c quy t\u1eafc nh\u01b0 t\u00ednh nullability, \u0111\u1ed9 d\u00e0i chu\u1ed7i, g\u00e1n kh\u00f3a ngo\u1ea1i, v.v., t\u1ea5t c\u1ea3 \u0111\u1ec1u ph\u1ea3i \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong c\u01a1 s\u1edf d\u1eef li\u1ec7u. Khi c\u00e1c quy t\u1eafc tr\u00ean \u0111\u01b0\u1ee3c x\u00e1c \u0111\u1ecbnh r\u00f5 r\u00e0ng, ch\u00fang kh\u00f4ng bao gi\u1edd b\u1ecb b\u1ecf qua v\u00e0 c\u00e1c truy v\u1ea5n c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c vi\u1ebft m\u00e0 kh\u00f4ng bao gi\u1edd ph\u1ea3i lo l\u1eafng li\u1ec7u d\u1eef li\u1ec7u c\u00f3 tu\u00e2n th\u1ee7 c\u00e1c quy t\u1eafc nghi\u1ec7p v\u1ee5 hay kh\u00f4ng. 7. Use Stored Procedures to Access Data C\u00e1c Procedures n\u00e0y cung c\u1ea5p cho c\u00e1c chuy\u00ean gia ph\u00e2n t\u00edch c\u01a1 s\u1edf d\u1eef li\u1ec7u kh\u1ea3 n\u0103ng thay \u0111\u1ed5i c\u00e1c \u0111\u1eb7c t\u00ednh c\u1ee7a m\u00e3 c\u01a1 s\u1edf d\u1eef li\u1ec7u m\u00e0 kh\u00f4ng t\u1ed1n nhi\u1ec1u chi ph\u00ed. Ngo\u00e0i ra, h\u1ecd c\u0169ng c\u00f3 th\u1ec3 cung c\u1ea5p quy\u1ec1n truy c\u1eadp chi ti\u1ebft v\u00e0o h\u1ec7 th\u1ed1ng Relationships between Entities One to One Relationship One to Many Relationship Many to Many Relationship Multi-dimensional Data Trong nhi\u1ec1u tr\u01b0\u1eddng h\u1ee3p c\u00f3 th\u1ec3 c\u1ea7n truy c\u1eadp nhi\u1ec1u dimensions c\u1ee7a m\u1ed9t lo\u1ea1i d\u1eef li\u1ec7u. V\u00ed d\u1ee5, ta c\u1ea7n bi\u1ebft v\u1ec1 Values of sale theo Customer , Country v\u00e0 Year . C\u00e1ch gi\u1ea3i quy\u1ebft l\u00e0 x\u00e2y d\u1ef1ng m\u1ed9t b\u1ea3ng core table m\u00e0 c\u00e1c b\u1ea3ng Customer , Year v\u00e0 Country c\u00f3 th\u1ec3 tham chi\u1ebfu t\u1edbi nh\u01b0 sau: Schema Example: E-Commerce Transaction Reference What are database schemas - educative What is a database schema - lucidchart Database design basics - Microsoft 5 Database Design Schema Examples: Critical Practices and Designs - hevodata Database Schema Design: Best Practices for Integration and Analysis - fivetran","title":"Database Schema"},{"location":"Database/Schema/#database-schema","text":"Overview Features Database schema types Database Schema Design Best Practices of Design Schema Relationships between Entities Schema Example: E-Commerce Transaction","title":"Database Schema"},{"location":"Database/Schema/#overview","text":"Database Schema - L\u01b0\u1ee3c \u0111\u1ed3 c\u01a1 s\u1edf d\u1eef li\u1ec7u: Cho ch\u00fang ta bi\u1ebft database s\u1ebd c\u00f3 nh\u1eefng table n\u00e0o, c\u00f3 thu\u1ed9c t\u00ednh g\u00ec v\u00e0 m\u1ed1i quan h\u1ec7 c\u1ee7a nh\u1eefng table n\u00e0y ra sao. C\u00f3 th\u1ec3 coi Schema l\u00e0 m\u1ed9t namespace, d\u00f9ng \u0111\u1ec3 gom nh\u00f3m c\u00e1c table c\u00f3 chung m\u1ed9t \u0111\u1eb7c \u0111i\u1ec3m n\u00e0o \u0111\u00f3 l\u1ea1i v\u1edbi nhau \u0111\u1ec5 d\u1ec5 d\u00e0ng qu\u1ea3n l\u00fd. Trong SQL Server, n\u1ebfu kh\u00f4ng d\u00f9ng Schema trong CSDL th\u00ec n\u00f3 s\u1ebd l\u1ea5y Schema m\u1eb7c \u0111\u1ecbnh l\u00e0 dbo .","title":"Overview"},{"location":"Database/Schema/#features","text":"Management : Khi ta nh\u00f3m c\u00e1c table l\u1ea1i th\u00ec s\u1ebd r\u1ea5t d\u1ec5 d\u00e0ng qu\u1ea3n l\u00fd c\u0169ng nh\u01b0 ta c\u00f3 th\u1ec3 ph\u00e2n quy\u1ec1n qu\u1ea3n l\u00fd t\u1eebng schema cho t\u1eebng user kh\u00e1c nhau, \u0111\u00e2y ch\u00ednh l\u00e0 \u0111i\u1ec3m m\u1ea1nh c\u1ee7a schema. Visualize : M\u1ed9t Database Schema \u0111\u1ee7 x\u1ecbn s\u1ebd cho ta bi\u1ebft \u0111\u01b0\u1ee3c trong relational database bao g\u1ed3m nh\u1eefng g\u00ec, schema \u0111\u1ecbnh ngh\u0129a tables , fields , relationships , views , indexes , packages , procedures , functions , queues , triggers , types , sequences , materialized views , synonyms , database links , directories , XML schemas , and other elements . Database Search Engine V\u00ed d\u1ee5 v\u1edbi chu\u1ed7i k\u00fd t\u1ef1 \u201cMoonlight\u201d , c\u00f3 th\u1ec3 hi\u1ec3u l\u00e0 \u0111ang \u0111\u1ec1 c\u1eadp \u0111\u1ebfn ngh\u0129a \u00e1nh tr\u0103ng ho\u1eb7c t\u00ean m\u1ed9t b\u1ed9 phim . T\u00f9y theo ng\u1eef c\u1ea3nh m\u00e0 t\u1eeb \u201cMoonlight\u201d s\u1ebd mang m\u1ed9t \u00fd ngh\u0129a kh\u00e1c. \u0110i\u1ec1u n\u00e0y s\u1ebd g\u00e2y c\u1ea3n tr\u1edf cho Search Engine khi ph\u1ea3i hi\u1ec3n th\u1ecb c\u00e1c k\u1ebft qu\u1ea3 li\u00ean quan cho ng\u01b0\u1eddi d\u00f9ng. Do \u0111\u00f3, \u0111\u1ec3 search engine hi\u1ec3u v\u00e0 ph\u00e2n lo\u1ea1i th\u00f4ng tin ch\u00ednh x\u00e1c h\u01a1n, ta c\u1ea7n s\u1eafp x\u1ebfp d\u1eef li\u1ec7u logic. V\u00e0 Schema ch\u00ednh l\u00e0 n\u01a1i cung c\u1ea5p nh\u1eefng c\u00f4ng c\u1ee5, d\u1eef li\u1ec7u c\u1ee5 th\u1ec3 \u0111\u1ec3 search engine hi\u1ec3u \u0111\u01b0\u1ee3c user \u0111ang mu\u1ed1n search n\u1ed9i dung g\u00ec, thu\u1ed9c th\u1ec3 lo\u1ea1i n\u00e0o, ch\u1ee7 \u0111\u1ec1 g\u00ec... SEO : Vi\u1ec7c s\u1eafp x\u1ebfp d\u1eef li\u1ec7u c\u00f3 c\u1ea5u tr\u00fac trong website \u0111em l\u1ea1i r\u1ea5t nhi\u1ec1u l\u1ee3i \u00edch khi SEO: C\u00f4ng c\u1ee5 t\u00ecm ki\u1ebfm hi\u1ec3u n\u1ed9i dung website d\u1ec5 d\u00e0ng h\u01a1n Website n\u1ed5i b\u1eadt h\u01a1n tr\u00ean trang k\u1ebft qu\u1ea3 t\u00ecm ki\u1ebfm","title":"Features"},{"location":"Database/Schema/#database-schema-types","text":"Database schemas \u0111\u01b0\u1ee3c chia th\u00e0nh 5 lo\u1ea1i, trong \u0111\u00f3 3 lo\u1ea1i \u0111\u1ea7u l\u00e0 ph\u1ed5 bi\u1ebfn nh\u1ea5t: Physical Database Schema : Th\u1ec3 hi\u1ec7n c\u00e1ch d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef tr\u00ean disk storage ho\u1eb7c data target, s\u1ef1 ph\u00e2n b\u1ed5 b\u1ed9 nh\u1edb (x\u00e1c \u0111\u1ecbnh theo GB ho\u1eb7c TB). \u0110\u00f3ng vai tr\u00f2 l\u00e0 n\u1ec1n t\u1ea3ng \u0111\u1ec3 c\u00e1c lo\u1ea1i l\u01b0\u1ee3c \u0111\u1ed3 kh\u00e1c t\u1ea1o ra c\u00e1c relationships v\u00e0 indexes. Logical Database Schema : x\u00e1c \u0111\u1ecbnh t\u1ea5t c\u1ea3 c\u00e1c r\u00e0ng bu\u1ed9c, logic c\u1ea7n \u0111\u01b0\u1ee3c \u00e1p d\u1ee5ng cho vi\u1ec7c l\u01b0u tr\u1eef d\u1eef li\u1ec7u. N\u00f3 \u0111\u1ecbnh ngh\u0129a c\u00e1c table, views v\u00e0 c\u00e1c constraints gi\u1eefa ch\u00fang v\u1edbi nhau. View Database Schema : l\u00e0 b\u1ea3n design c\u1ee7a database t\u1ea1i view level. M\u00f4 t\u1ea3 chung v\u1ec1 t\u01b0\u01a1ng t\u00e1c c\u1ee7a end user v\u1edbi Database. \u1ede view level n\u00e0y, user c\u00f3 th\u1ec3 t\u01b0\u01a1ng t\u00e1c v\u1edbi h\u1ec7 th\u1ed1ng b\u1eb1ng giao di\u1ec7n. Star Schema : l\u00e0 m\u1ed9t m\u00f4 h\u00ecnh \u0111a chi\u1ec1u \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong data warehouses \u0111\u1ec3 h\u1ed7 tr\u1ee3 ph\u00e2n t\u00edch n\u00e2ng cao. \u1ede gi\u1eefa ng\u00f4i sao l\u00e0 m\u1ed9t b\u1ea3ng d\u1eef li\u1ec7u trung t\u00e2m \u0111\u01b0\u1ee3c k\u1ebft n\u1ed1i v\u1edbi n b\u1ea3ng - t\u01b0\u01a1ng \u1ee9ng v\u1edbi n chi\u1ec1u. Chi\u1ebfm r\u1ea5t nhi\u1ec1u kh\u00f4ng gian, h\u1ea1n ch\u1ebf kh\u1ea3 n\u0103ng m\u1edf r\u1ed9ng c\u1ee7a d\u1eef li\u1ec7u. Snowflake Schema : T\u01b0\u01a1ng t\u1ef1 nh\u01b0 Star Schema , Snowflake c\u0169ng l\u00e0 m\u1ed9t Schema \u0111a chi\u1ec1u \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong data warehouses \u0111\u1ec3 h\u1ed7 tr\u1ee3 c\u00e1c ph\u00e2n t\u00edch n\u00e2ng cao. \u01afu \u0111i\u1ec3m c\u1ee7a Snowflake Schema l\u00e0 l\u01b0u tr\u1eef \u00edt d\u1eef li\u1ec7u tr\u00f9ng l\u1eb7p h\u01a1n so v\u1edbi Star Schema.","title":"Database schema types"},{"location":"Database/Schema/#database-schema-design","text":"Vi\u1ec7c Design m\u1ed9t Database Schema chu\u1ea9n l\u00e0 c\u1ef1c k\u1ef3 quan trong. M\u1ed9t Schema t\u1ed1t c\u1ea7n t\u1ed5 ch\u1ee9c d\u1eef li\u1ec7u th\u00e0nh c\u00e1c Table v\u1edbi c\u00e1c Attributes th\u00edch h\u1ee3p, hi\u1ec3n th\u1ecb \u0111\u01b0\u1ee3c m\u1ed1i quan h\u1ec7 qua l\u1ea1i gi\u1eefa Table v\u00e0 Columns, \u0111\u1ed3ng th\u1eddi \u00e1p \u0111\u1eb7t c\u00e1c constraints nh\u01b0 Data types. T\u1eeb \u0111\u00f3 gi\u00fap c\u00e1c nh\u00e0 ph\u00e1t tri\u1ec3n l\u00e0m vi\u1ec7c v\u1edbi Database d\u1ec5 d\u00e0ng h\u01a1n Ng\u01b0\u1ee3c l\u1ea1i, m\u1ed9t Schema thi\u1ebfu s\u00f3t nhi\u1ec1u th\u1ee9 s\u1ebd \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn vi\u1ec7c ph\u00e2n t\u00edch d\u1eef li\u1ec7u, ph\u1ea3i th\u1ef1c hi\u1ec7n th\u00eam m\u00f4 h\u00ecnh h\u00f3a v\u00e0 truy v\u1ea5n t\u1ed1n nhi\u1ec1u th\u1eddi gian v\u00e0 t\u00e0i nguy\u00ean h\u1ec7 th\u1ed1ng h\u01a1n, l\u00e0m t\u0103ng chi ph\u00ed v\u00e0 kh\u00f3 l\u1ea5y s\u1ed1 li\u1ec7u ph\u00e2n t\u00edch. Qu\u00e1 tr\u00ecnh Design m\u1ed9t Database Schema tr\u1ea3i qua c\u00e1c b\u01b0\u1edbc c\u01a1 b\u1ea3n sau: Determine the purpose of your database : X\u00e1c \u0111\u1ecbnh m\u1ee5c \u0111\u00edch c\u1ee7a database gi\u00fap ta chu\u1ea9n b\u1ecb cho c\u00e1c b\u01b0\u1edbc c\u00f2n l\u1ea1i t\u1ed1t h\u01a1n Find and organize the information required : Thu th\u1eadp t\u1ea5t c\u1ea3 c\u00e1c lo\u1ea1i th\u00f4ng tin c\u1ea7n thi\u1ebft ghi l\u1ea1i trong database Divide the information into tables : Chia c\u00e1 th\u00f4ng tin m\u00ecnh thu th\u1eadp \u0111\u01b0\u1ee3c th\u00e0nh c\u00e1c major entities or subjects, t\u1eeb \u0111\u00f3 x\u00e1c \u0111\u1ecbnh c\u00e1c Table trong database. Turn information items into columns : Quy\u1ebft \u0111\u1ecbnh th\u00f4ng tin g\u00ec c\u1ea7n l\u01b0u tr\u1eef trong m\u1ed7i Table. M\u1ed7i th\u00f4ng tin s\u1ebd tr\u1edf th\u00e0nh m\u1ed9t field v\u00e0 \u0111\u01b0\u1ee3c hi\u1ec3n th\u1ecb d\u01b0\u1edbi d\u1ea1ng m\u1ed9t Column trong Table. Specify primary keys : Ch\u1ecdn primary key v\u00e0 c\u00e1c keys kh\u00e1c cho t\u1eebng table Set up the table relationships : T\u1ea1o c\u00e1c relationships cho c\u00e1c table Refine your design : Ph\u00e2n t\u00edch b\u1ea3n Design \u0111\u1ec3 t\u00ecm l\u1ed7i. T\u1ea1o b\u1ea3ng v\u00e0 th\u00eam m\u1ed9t v\u00e0i record d\u1eef li\u1ec7u m\u1eabu xem li\u1ec7u m\u00ecnh c\u00f3 th\u1ec3 nh\u1eadn \u0111\u01b0\u1ee3c k\u1ebft qu\u1ea3 mong mu\u1ed1n hay kh\u00f4ng. Th\u1ef1c hi\u1ec7n c\u00e1c \u0111i\u1ec1u ch\u1ec9nh \u0111\u1ed1i v\u1edbi design n\u1ebfu c\u1ea7n. Apply the normalization rules : \u00c1p d\u1ee5ng c\u00e1c quy t\u1eafc chu\u1ea9n h\u00f3a d\u1eef li\u1ec7u \u0111\u1ec3 xem li\u1ec7u c\u00e1c Table c\u1ee7a m\u00ecnh c\u00f3 c\u1ea5u tr\u00fac ch\u00ednh x\u00e1c hay kh\u00f4ng. Th\u1ef1c hi\u1ec7n c\u00e1c \u0111i\u1ec1u ch\u1ec9nh \u0111\u1ed1i v\u1edbi table n\u1ebfu c\u1ea7n.","title":"Database Schema Design"},{"location":"Database/Schema/#best-practices-of-design-schema","text":"Vi\u1ec7c t\u1ea1o ra m\u1ed9t Database Schema Design nh\u01b0 tr\u00ean c\u00f3 th\u1ec3 d\u00f9ng tool \u0111\u1ec3 gen ra Schema, tuy nhi\u00ean c\u1ea7n c\u00f3 m\u1ed9t s\u1ed1 Principles of Database Schema Design m\u00e0 m\u00ecnh c\u1ea7n n\u1eafm \u0111\u01b0\u1ee3c:","title":"Best Practices of Design Schema"},{"location":"Database/Schema/#1-have-good-naming-standards","text":"\u0110\u1eb7t t\u00ean ph\u00f9 h\u1ee3p gi\u00fap cho c\u00e1c Database Schema tr\u1edf n\u00ean hi\u1ec7u qu\u1ea3 nh\u1ea5t c\u00f3 th\u1ec3. T\u00ean cho ph\u00e9p b\u1ea1n x\u00e1c \u0111\u1ecbnh m\u1ee5c \u0111\u00edch c\u1ee7a entities v\u00e0 \u0111\u01a1n gi\u1ea3n h\u00f3a vi\u1ec7c truy c\u1eadp t\u1edbi entity \u0111\u00f3. M\u1ed9t s\u1ed1 nguy\u00ean t\u1eafc: T\u00ean c\u1ee7a c\u00e1c b\u1ea3ng ph\u1ea3i th\u1ed1ng nh\u1ea5t v\u1edbi nhau v\u1ec1 c\u1ea5u tr\u00fac. C\u1ed1 g\u1eafng kh\u00f4ng s\u1eed d\u1ee5ng c\u00e1c t\u1eeb d\u00e0nh ri\u00eang cho SQL Server trong t\u00ean b\u1ea3ng, t\u00ean c\u1ed9t v\u00e0 tr\u01b0\u1eddng v\u00ec n\u00f3 c\u00f3 th\u1ec3 d\u1eabn \u0111\u1ebfn l\u1ed7i c\u00fa ph\u00e1p. Kh\u00f4ng s\u1eed d\u1ee5ng d\u1ea5u g\u1ea1ch ngang, d\u1ea5u ngo\u1eb7c k\u00e9p, d\u1ea5u c\u00e1ch v\u00e0 c\u00e1c k\u00fd t\u1ef1 \u0111\u1eb7c bi\u1ec7t v\u00ec n\u00f3 kh\u00f4ng h\u1ee3p l\u1ec7. Tr\u00e1nh c\u00e1c ti\u1ec1n t\u1ed1 ho\u1eb7c h\u1eadu t\u1ed1 kh\u00f4ng c\u1ea7n thi\u1ebft cho t\u00ean c\u1ee7a b\u1ea3ng","title":"1. Have Good Naming Standards:"},{"location":"Database/Schema/#2-use-normalization-to-tackle-redundancy","text":"Redundancy l\u00e0 \u0111i\u1ec1u th\u01b0\u1eddng th\u1ea5y trong c\u00e1c thi\u1ebft k\u1ebf c\u01a1 s\u1edf d\u1eef li\u1ec7u. Ph\u1ea7n kh\u00f3 \u1edf \u0111\u00e2y l\u00e0 nh\u1eefng ph\u1ea7n d\u01b0 th\u1eeba n\u00e0y c\u00f3 th\u1ec3 t\u1ed1t ho\u1eb7c x\u1ea5u t\u00f9y thu\u1ed9c v\u00e0o tr\u01b0\u1eddng h\u1ee3p s\u1eed d\u1ee5ng. \u0110\u00e2y l\u00e0 l\u00fac s\u1eed d\u1ee5ng Normalization to Tackle Redundancy . Vi\u1ec7c chu\u1ea9n h\u00f3a c\u01a1 s\u1edf d\u1eef li\u1ec7u l\u00e0 qu\u00e1 tr\u00ecnh x\u00e2y d\u1ef1ng c\u01a1 s\u1edf d\u1eef li\u1ec7u d\u01b0\u1edbi m\u1ed9t lo\u1ea1t c\u00e1c h\u00ecnh th\u1ee9c Normalization \u0111\u1ec3 gi\u1ea3m thi\u1ec3u vi\u1ec7c d\u01b0 th\u1eeba d\u1eef li\u1ec7u.Vi\u1ec7c quy\u1ebft \u0111\u1ecbnh s\u1ebd duy tr\u00ec ho\u1eb7c lo\u1ea1i b\u1ecf c\u00e1c d\u1eef li\u1ec7u d\u01b0 th\u1eeba, kh\u00f4ng quan tr\u1ecdng \u0111\u01b0\u1ee3c quy\u1ebft \u0111\u1ecbnh b\u1eb1ng c\u00e1ch so s\u00e1nh cost of operations v\u00e0 dung l\u01b0\u1ee3ng l\u01b0u tr\u1eef d\u1eef li\u1ec7u \u0111\u00f3.","title":"2. Use Normalization to Tackle Redundancy"},{"location":"Database/Schema/#3-fix-the-right-number-of-tables","text":"T\u1ed1i \u01b0u h\u00f3a s\u1ed1 l\u01b0\u1ee3ng b\u1ea3ng trong m\u1ed9t Database, vi\u1ec7c gi\u1eef s\u1ed1 l\u01b0\u1ee3ng c\u00e1c b\u1ea3ng \u1edf m\u1ee9c \u0111\u1ed9 1 b\u1ea3ng \u0111\u1ea1i di\u1ec7n cho m\u1ed9t \"th\u1ee9\" \u0111\u01b0\u1ee3c coi l\u00e0 c\u00f3 hi\u1ec7u qu\u1ea3 nh\u1ea5t.","title":"3. Fix the Right Number of Tables"},{"location":"Database/Schema/#4-avoid-nulls","text":"Tr\u00e1nh vi\u1ec7c cho ph\u00e9p data c\u00f3 gi\u00e1 tr\u1ecb null, ch\u1ec9 s\u1eed d\u1ee5ng ch\u00fang khi th\u1ef1c s\u1ef1 c\u1ea7n thi\u1ebft.","title":"4. Avoid Nulls"},{"location":"Database/Schema/#5-have-proper-documentation","text":"Documentation gi\u00fap cho vi\u1ec7c c\u1ed9ng t\u00e1c gi\u1eefa c\u00e1c nh\u00f3m hi\u1ec7u qu\u1ea3 h\u01a1n v\u00e0 h\u1ed7 tr\u1ee3 c\u00e1c th\u00e0nh vi\u00ean m\u1edbi tham gia d\u1ef1 \u00e1n d\u1ec5 d\u00e0ng. Documentation t\u1ed1t bao g\u1ed3m c\u00e1c \u0111\u1ecbnh ngh\u0129a tr\u00ean b\u1ea3ng, c\u1ed9t, m\u1ed1i quan h\u1ec7 v\u00e0 c\u1ea3 c\u00e1c r\u00e0ng bu\u1ed9c.","title":"5. Have Proper Documentation"},{"location":"Database/Schema/#6-protect-data-integrity","text":"C\u00e1c quy t\u1eafc kinh doanh c\u01a1 b\u1ea3n n\u00ean \u0111\u01b0\u1ee3c \u00e1p d\u1ee5ng trong c\u01a1 s\u1edf d\u1eef li\u1ec7u hay C\u00e1c quy t\u1eafc nh\u01b0 t\u00ednh nullability, \u0111\u1ed9 d\u00e0i chu\u1ed7i, g\u00e1n kh\u00f3a ngo\u1ea1i, v.v., t\u1ea5t c\u1ea3 \u0111\u1ec1u ph\u1ea3i \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong c\u01a1 s\u1edf d\u1eef li\u1ec7u. Khi c\u00e1c quy t\u1eafc tr\u00ean \u0111\u01b0\u1ee3c x\u00e1c \u0111\u1ecbnh r\u00f5 r\u00e0ng, ch\u00fang kh\u00f4ng bao gi\u1edd b\u1ecb b\u1ecf qua v\u00e0 c\u00e1c truy v\u1ea5n c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c vi\u1ebft m\u00e0 kh\u00f4ng bao gi\u1edd ph\u1ea3i lo l\u1eafng li\u1ec7u d\u1eef li\u1ec7u c\u00f3 tu\u00e2n th\u1ee7 c\u00e1c quy t\u1eafc nghi\u1ec7p v\u1ee5 hay kh\u00f4ng.","title":"6. Protect Data Integrity"},{"location":"Database/Schema/#7-use-stored-procedures-to-access-data","text":"C\u00e1c Procedures n\u00e0y cung c\u1ea5p cho c\u00e1c chuy\u00ean gia ph\u00e2n t\u00edch c\u01a1 s\u1edf d\u1eef li\u1ec7u kh\u1ea3 n\u0103ng thay \u0111\u1ed5i c\u00e1c \u0111\u1eb7c t\u00ednh c\u1ee7a m\u00e3 c\u01a1 s\u1edf d\u1eef li\u1ec7u m\u00e0 kh\u00f4ng t\u1ed1n nhi\u1ec1u chi ph\u00ed. Ngo\u00e0i ra, h\u1ecd c\u0169ng c\u00f3 th\u1ec3 cung c\u1ea5p quy\u1ec1n truy c\u1eadp chi ti\u1ebft v\u00e0o h\u1ec7 th\u1ed1ng","title":"7. Use Stored Procedures to Access Data"},{"location":"Database/Schema/#relationships-between-entities","text":"One to One Relationship One to Many Relationship Many to Many Relationship Multi-dimensional Data Trong nhi\u1ec1u tr\u01b0\u1eddng h\u1ee3p c\u00f3 th\u1ec3 c\u1ea7n truy c\u1eadp nhi\u1ec1u dimensions c\u1ee7a m\u1ed9t lo\u1ea1i d\u1eef li\u1ec7u. V\u00ed d\u1ee5, ta c\u1ea7n bi\u1ebft v\u1ec1 Values of sale theo Customer , Country v\u00e0 Year . C\u00e1ch gi\u1ea3i quy\u1ebft l\u00e0 x\u00e2y d\u1ef1ng m\u1ed9t b\u1ea3ng core table m\u00e0 c\u00e1c b\u1ea3ng Customer , Year v\u00e0 Country c\u00f3 th\u1ec3 tham chi\u1ebfu t\u1edbi nh\u01b0 sau:","title":"Relationships between Entities"},{"location":"Database/Schema/#schema-example-e-commerce-transaction","text":"","title":"Schema Example: E-Commerce Transaction"},{"location":"Database/Schema/#reference","text":"What are database schemas - educative What is a database schema - lucidchart Database design basics - Microsoft 5 Database Design Schema Examples: Critical Practices and Designs - hevodata Database Schema Design: Best Practices for Integration and Analysis - fivetran","title":"Reference"},{"location":"Database/Time%20stamp/","text":"Time stamp Time Concepts moment : Th\u1eddi gian tuy\u1ec7t \u0111\u1ed1i. Khi n\u00f3i v\u1ec1 th\u1eddi gian tuy\u1ec7t \u0111\u1ed1i, c\u1ea7n c\u00f3 \u0111\u1ee7 hai th\u00e0nh ph\u1ea7n: ng\u00e0y gi\u1edd + ng\u1eef c\u1ea3nh . Ng\u1eef c\u1ea3nh \u1edf \u0111\u00e2y ch\u00ednh l\u00e0 m\u00fai gi\u1edd ( zone ). C\u00e1c m\u00fai gi\u1edd \u0111\u01b0\u1ee3c \u0111\u1eb7c tr\u01b0ng b\u1edfi m\u1ed9t \u0111\u1ed9 l\u1ec7ch th\u1eddi gian (offset) so v\u1edbi gi\u1edd qu\u1ed1c t\u1ebf UTC - Coordinated Universal Time . \u0110\u1ed9 l\u1ec7ch \u0111\u01b0\u1ee3c bi\u1ec3u di\u1ec5n d\u01b0\u1edbi d\u1ea1ng \u00b1hh:mm . Trong m\u00e1y t\u00ednh, moment \u0111\u01b0\u1ee3c bi\u1ec3u di\u1ec5n d\u01b0\u1edbi d\u1ea1ng Epoch Seconds , Unixtime - s\u1ed1 gi\u00e2y tr\u00f4i qua k\u1ec3 t\u1eeb 00:00:00 ng\u00e0y 1 th\u00e1ng 1 n\u0103m 1970 theo gi\u1edd UTC. rtime - relative/represent time: th\u1eddi gian t\u01b0\u01a1ng \u0111\u1ed1i, kh\u00f4ng bao g\u1ed3m ng\u1eef c\u1ea3nh m\u00fai gi\u1edd. offset : \u0111\u1ed9 l\u1ec7ch zone : m\u00fai gi\u1edd \u2192 moment = rtime + (zone or offset) ISO 8601 \u2014 Date and time format : \u0110\u01b0\u1ee3c c\u00f4ng b\u1ed1 v\u00e0o n\u0103m 1988, ISO-8601 l\u00e0 m\u1ed9t ti\u00eau chu\u1ea9n qu\u1ed1c t\u1ebf m\u00f4 t\u1ea3 m\u1ed9t quy t\u1eafc chung \u0111\u1ec3 vi\u1ebft ng\u00e0y gi\u1edd, ti\u1ec7n cho vi\u1ec7c li\u00ean l\u1ea1c & trao \u0111\u1ed5i th\u00f4ng tin li\u00ean quan \u0111\u1ebfn th\u1eddi gian. D\u01b0\u1edbi \u0111\u00e2y l\u00e0 m\u1ed9t moment \u0111\u01b0\u1ee3c vi\u1ebft theo ti\u00eau chu\u1ea9n ISO-8601, bao g\u1ed3m ng\u00e0y, gi\u1edd v\u00e0 offset IANA Time Zone Database : G\u1ecdi t\u1eaft l\u00e0 tz database , l\u00e0 m\u1ed9t b\u1ed9 database t\u1ed5ng h\u1ee3p th\u00f4ng tin c\u1ee7a to\u00e0n b\u1ed9 m\u00fai gi\u1edd tr\u00ean th\u1ebf gi\u1edbi, \u0111\u01b0\u1ee3c qu\u1ea3n l\u00fd b\u1edfi t\u1ed5 ch\u1ee9c ICANN . Trong tz database, m\u1ed9t m\u00fai gi\u1edd s\u1ebd c\u00f3 t\u00ean g\u1ecdi d\u1ef1a tr\u00ean v\u1ecb tr\u00ed \u0111\u1ecba l\u00fd c\u1ee7a n\u00f3, theo d\u1ea1ng Area/Location , trong \u0111\u00f3 area l\u00e0 t\u00ean c\u1ee7a l\u1ee5c \u0111\u1ecba ho\u1eb7c \u0111\u1ea1i d\u01b0\u01a1ng, location l\u00e0 t\u00ean c\u1ee7a th\u00e0nh ph\u1ed1 ho\u1eb7c h\u00f2n \u0111\u1ea3o. Chu\u1ea9n h\u00f3a l\u1ea1i t\u00ean g\u1ecdi c\u1ee7a c\u00e1c m\u00fai gi\u1edd (c\u00e1c m\u00fai gi\u1edd lu\u00f4n vi\u1ebft t\u1eaft, \u0111i\u1ec1u n\u00e0y c\u00f3 th\u1ec3 g\u00e2y hi\u1ec3u nh\u1ea7m - AST l\u00e0 Arabia Standard Time, Arabia Summer Time hay Atlantic Standard Time?) M\u1ed7i m\u00fai gi\u1edd s\u1ebd ch\u1ee9a 2 offset , m\u1ed9t d\u00e0nh cho \u0111\u1ed9 l\u1ec7ch chu\u1ea9n th\u00f4ng th\u01b0\u1eddn g, m\u1ed9t d\u00e0nh cho th\u1eddi \u0111i\u1ec3m Daylight Saving Time - DST . N\u1ebfu m\u1ed9t m\u00fai gi\u1edd kh\u00f4ng s\u1eed d\u1ee5ng Daylight Saving, 2 offset n\u00e0y c\u00f3 gi\u00e1 tr\u1ecb b\u1eb1ng nhau. Unix timestamp: L\u00e0 h\u1ec7 th\u1ed1ng di\u1ec5n t\u1ea3 m\u1ed9t \u0111i\u1ec3m tr\u00ean tr\u1ee5c th\u1eddi gian Unix. Tr\u1ee5c th\u1eddi gian s\u1eed d\u1ee5ng s\u1ed1 gi\u00e2y k\u1ec3 \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh th\u1eddi \u0111i\u1ec3m, v\u1edbi \u0111i\u1ec3m g\u1ed1c t\u1eeb th\u1eddi \u0111i\u1ec3m 00:00:00 ng\u00e0y 1/1/1970 (UTC) . V\u00ed d\u1ee5 l\u00fac 00:00:00 - 1/1/2017 c\u00f3 gi\u00e1 tr\u1ecb timestamp l\u00e0 1483228800 ; C\u00f3 ngh\u0129a l\u00e0 t\u00ednh t\u1eeb 00h:00m:00s ng\u00e0y 1/1/1970 \u0111\u1ebfn 00h:00m:00s ng\u00e0y 1/1/2017 l\u00e0 1483228800 gi\u00e2y. DATETIME and TIMESTAMP Ki\u1ec3u d\u1eef li\u1ec7u DATETIME \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng khi ta c\u1ea7n l\u01b0u tr\u1eef c\u1ea3 hai th\u00f4ng tin ng\u00e0y th\u00e1ng v\u00e0 th\u1eddi gian. DATETIME th\u01b0\u1eddng s\u1ebd \u0111\u01b0\u1ee3c hi\u1ec3n th\u1ecb theo \u0111\u1ecbnh d\u1ea1ng YYYY-MM-DD HH:MM:SS . H\u1ed7 tr\u1ee3 ph\u1ea1m vi t\u1eeb 1000-01-01 00:00:00 t\u1edbi 9999-12-31 23:59:59 . Ki\u1ec3u d\u1eef li\u1ec7u TIMESTAMP c\u0169ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng khi ta mu\u1ed1n l\u01b0u tr\u1eef c\u1ea3 hai th\u00f4ng tin ng\u00e0y th\u00e1ng v\u00e0 th\u1eddi gian. TIMESTAMP c\u00f3 ph\u1ea1m vi 1970-01-01 00:00:01 UTC t\u1edbi 2038-01-19 03:14:07 UTC S\u1ef1 kh\u00e1c bi\u1ec7t ch\u00ednh c\u1ee7a DATETIME v\u00e0 TIMESTAMP l\u00e0 gi\u00e1 tr\u1ecb c\u1ee7a TIMESTAMP \u0111\u01b0\u1ee3c chuy\u1ec3n \u0111\u1ed5i t\u1eeb m\u00fai gi\u1edd hi\u1ec7n t\u1ea1i sang UTC trong khi l\u01b0u tr\u1eef, v\u00e0 chuy\u1ec3n ng\u01b0\u1ee3c tr\u1edf l\u1ea1i t\u1eeb UTC sang m\u00fai gi\u1edd hi\u1ec7n t\u1ea1i trong l\u00fac l\u1ea5y ra. C\u00f2n ki\u1ec3u d\u1eef li\u1ec7u DATETIME th\u00ec kh\u00f4ng c\u00f3 g\u00ec thay \u0111\u1ed5i. TIMESTAMP in Database \u1ee8ng v\u1edbi m\u1ed7i Database Provider (Postgres, MySQL...), ch\u00fang ta ph\u1ea3i tu\u00e2n theo m\u1ed9t ki\u1ec3u mapping c\u00e1c data types kh\u00e1c nhau. M\u1eb7c d\u00f9 v\u1eady, vi\u1ec7c \u0111\u01b0a v\u1ec1 h\u1ec7 quy chi\u1ebfu rtime/moment nh\u01b0 tr\u00ean l\u00e0 t\u01b0\u01a1ng \u0111\u1ed1i d\u1ec5. X\u00e9t 2 v\u00ed d\u1ee5 v\u1edbi Postgres v\u00e0 MySQL. Postgres: TIMESTAMP / TIMESTAMPZ Postgres cung c\u1ea5p 2 ki\u1ec3u timestamp l\u00e0 c\u00f3 timezone ( TIMESTAMPZ ) v\u00e0 kh\u00f4ng timezone ( TIMESTAMP ). Tho\u1ea1t nh\u00ecn ch\u00fang ta s\u1ebd cho r\u1eb1ng timestamp lu\u00f4n l\u00e0 moment. Tuy nhi\u00ean, Postgres Tutorial gi\u1ea3i th\u00edch: TIMESTAMP : Khi m\u1ed9t moment \u0111\u01b0\u1ee3c l\u01b0u xu\u1ed1ng, Postgres s\u1ebd lo\u1ea1i b\u1ecf ph\u1ea7n timezone v\u00e0 ch\u1ec9 l\u01b0u ph\u1ea7n hi\u1ec3n th\u1ecb (ng\u00e0y v\u00e0 gi\u1edd). N\u1ebfu thay \u0111\u1ed5i timezone c\u1ee7a database-server, gi\u00e1 tr\u1ecb timestamp lu\u00f4n gi\u1eef nguy\u00ean kh\u00f4ng thay \u0111\u1ed5i. TIMESTAMPZ : l\u00e0 m\u1ed9t zone-aware timestamp Khi m\u1ed9t moment \u0111\u01b0\u1ee3c l\u01b0u xu\u1ed1ng, Postgres s\u1ebd convert v\u1ec1 gi\u1edd UTC ( t\u1ee9c convert v\u1ec1 timezone c\u1ee7a App backend) v\u00e0 l\u01b0u nh\u01b0 ki\u1ec3u TIMESTAMP \u1edf tr\u00ean, ngh\u0129a l\u00e0 ch\u1ec9 l\u01b0u ph\u1ea7n rtime (\u0111\u00e2y l\u00e0 l\u00fd do c\u1ea3 2 ki\u1ec3u d\u1eef li\u1ec7u \u0111\u1ec1u ch\u1ec9 chi\u1ebfm 8 bytes b\u1ed9 nh\u1edb). Tuy nhi\u00ean, nh\u1edd thao t\u00e1c convert v\u1ec1 UTC, n\u00ean c\u00f3 th\u1ec3 xem \u0111\u00e2y l\u00e0 m\u1ed9t moment \u1edf timezone UTC. Khi \u0111\u1ecdc l\u00ean, Postgres l\u00e0m thao t\u00e1c ng\u01b0\u1ee3c l\u1ea1i: gi\u00e1 tr\u1ecb timestamp \u0111\u01b0\u1ee3c convert t\u1eeb UTC v\u1ec1 timezone c\u1ee7a database-server v\u00e0 tr\u1ea3 v\u1ec1 cho backend m\u1ed9t moment ho\u00e0n ch\u1ec9nh. T\u00f3m l\u1ea1i, khi l\u01b0u xu\u1ed1ng ng\u00e0y-gi\u1edd \u1edf timezone n\u00e0o th\u00ec \u0111\u1ecdc l\u00ean v\u1eabn l\u00e0 ng\u00e0y-gi\u1edd \u0111\u00f3, \u1edf timezone \u0111\u00f3. \u2192 TIMESTAMP ch\u00ednh l\u00e0 rtime , c\u00f2n TIMESTAMPZ ch\u00ednh l\u00e0 moment . MySQL: DateTime / Timestamp Timestamp c\u1ee7a MySQL v\u00e0 Postgres kh\u00f4ng gi\u1ed1ng nhau. T\u00e0i li\u1ec7u c\u1ee7a MySQL m\u00f4 t\u1ea3: Khi l\u01b0u Timestamp, gi\u00e1 tr\u1ecb s\u1ebd \u0111\u01b0\u1ee3c convert t\u1eeb timezone hi\u1ec7n t\u1ea1i v\u1ec1 UTC. Khi \u0111\u1ecdc l\u00ean s\u1ebd \u0111i qua b\u01b0\u1edbc ng\u01b0\u1ee3c l\u1ea1i. Quy tr\u00ecnh n\u00e0y kh\u00f4ng \u00e1p d\u1ee5ng \u0111\u1ed1i v\u1edbi ki\u1ec3u DateTime. \u2192 Nh\u01b0 v\u1eady c\u00f3 th\u1ec3 k\u1ebft lu\u1eadn, DateTime ch\u00ednh l\u00e0 rtime , c\u00f2n Timestamp l\u00e0 moment . Gi\u1edbi h\u1ea1n l\u01b0u tr\u1eef c\u1ee7a Timestamp trong MySQL l\u00e0 2038-01-19 03:14:07.999999 , \u0111\u01b0\u1ee3c bi\u1ebft \u0111\u1ebfn v\u1edbi t\u00ean g\u1ecdi S\u1ef1 c\u1ed1 n\u0103m 2038 - Year 2038 Problem, l\u00e0 v\u1ea5n \u0111\u1ec1 x\u1ea3y ra khi ch\u00fang ta l\u01b0u moment d\u1ea1ng Epoch Time b\u1eb1ng m\u1ed9t s\u1ed1 nguy\u00ean 32-bit (v\u1ea5n \u0111\u1ec1 n\u00e0y kh\u00f4ng g\u1eb7p \u1edf Postgres). S\u1ef1 c\u1ed1 \"n\u0103m 2038\" l\u00e0 m\u1ed9t v\u1ea5n \u0111\u1ec1 k\u1ef9 thu\u1eadt c\u1ee7a h\u1ea7u h\u1ebft c\u00e1c thi\u1ebft b\u1ecb x\u1eed l\u00fd, t\u00ednh to\u00e1n \u0111\u1ed3ng h\u1ed3 th\u1eddi gian d\u01b0\u1edbi d\u1ea1ng s\u1ed1 nh\u1ecb ph\u00e2n 32-bit. N\u00f3i m\u1ed9t c\u00e1ch kh\u00e1i qu\u00e1t, th\u1eddi gian hi\u1ec3n th\u1ecb tr\u00ean h\u1ec7 th\u1ed1ng \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a theo d\u1ea1ng \u0111\u1ed3ng h\u1ed3 UNIX, d\u01b0\u1edbi d\u1ea1ng c\u00e1c s\u1ed1 nguy\u00ean v\u00e0 s\u1ed1 nh\u1ecb ph\u00e2n. S\u1ed1 nguy\u00ean l\u1edbn nh\u1ea5t h\u1ec7 th\u1ed1ng c\u00f3 th\u1ec3 x\u1eed l\u00fd l\u00e0 2.147.483.647, t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi s\u1ed1 nh\u1ecb ph\u00e2n l\u00e0 01111111 11111111 11111111 11111111 v\u00e0 ng\u00e0y th\u00e1ng th\u1ef1c l\u00e0 03:14:07 UTC, 19/01/2038. Do \u0111\u00f3, khi b\u01b0\u1edbc sang gi\u00e2y th\u1ee9 08, h\u1ec7 th\u1ed1ng \u0111\u1ed3ng h\u1ed3 s\u1ebd t\u1ef1 \u0111\u1ed9ng tr\u1edf v\u1ec1 0, t\u1ee9c l\u00e0 quay l\u1ea1i th\u1eddi \u0111i\u1ec3m 00:00:00 UTC ng\u00e0y 1/1/1970. S\u1ef1 c\u1ed1 n\u00e0y \u0111\u00e3 tr\u1edf th\u00e0nh v\u1ea5n \u0111\u1ec1 nan gi\u1ea3i v\u1edbi ng\u00e0nh C\u00f4ng ngh\u1ec7 th\u00f4ng tin to\u00e0n c\u1ea7u. Hi\u1ec7n t\u1ea1i v\u1eabn ch\u01b0a c\u00f3 b\u1ea5t k\u1ef3 gi\u1ea3i ph\u00e1p tri\u1ec7t \u0111\u1ec3 n\u00e0o cho s\u1ef1 c\u1ed1 \"n\u0103m 2038\".[c\u1ea7n d\u1eabn ngu\u1ed3n] tr\u00edch t\u1eeb wikipedia Reference PostgreSQL \u2013 Timestamp Data Type - geeksforgeeks MySQL TIMESTAMP - mysqltutorial Datetime - viblo Datetime - dev.mysql","title":"Time stamp"},{"location":"Database/Time%20stamp/#time-stamp","text":"","title":"Time stamp"},{"location":"Database/Time%20stamp/#time-concepts","text":"moment : Th\u1eddi gian tuy\u1ec7t \u0111\u1ed1i. Khi n\u00f3i v\u1ec1 th\u1eddi gian tuy\u1ec7t \u0111\u1ed1i, c\u1ea7n c\u00f3 \u0111\u1ee7 hai th\u00e0nh ph\u1ea7n: ng\u00e0y gi\u1edd + ng\u1eef c\u1ea3nh . Ng\u1eef c\u1ea3nh \u1edf \u0111\u00e2y ch\u00ednh l\u00e0 m\u00fai gi\u1edd ( zone ). C\u00e1c m\u00fai gi\u1edd \u0111\u01b0\u1ee3c \u0111\u1eb7c tr\u01b0ng b\u1edfi m\u1ed9t \u0111\u1ed9 l\u1ec7ch th\u1eddi gian (offset) so v\u1edbi gi\u1edd qu\u1ed1c t\u1ebf UTC - Coordinated Universal Time . \u0110\u1ed9 l\u1ec7ch \u0111\u01b0\u1ee3c bi\u1ec3u di\u1ec5n d\u01b0\u1edbi d\u1ea1ng \u00b1hh:mm . Trong m\u00e1y t\u00ednh, moment \u0111\u01b0\u1ee3c bi\u1ec3u di\u1ec5n d\u01b0\u1edbi d\u1ea1ng Epoch Seconds , Unixtime - s\u1ed1 gi\u00e2y tr\u00f4i qua k\u1ec3 t\u1eeb 00:00:00 ng\u00e0y 1 th\u00e1ng 1 n\u0103m 1970 theo gi\u1edd UTC. rtime - relative/represent time: th\u1eddi gian t\u01b0\u01a1ng \u0111\u1ed1i, kh\u00f4ng bao g\u1ed3m ng\u1eef c\u1ea3nh m\u00fai gi\u1edd. offset : \u0111\u1ed9 l\u1ec7ch zone : m\u00fai gi\u1edd \u2192 moment = rtime + (zone or offset) ISO 8601 \u2014 Date and time format : \u0110\u01b0\u1ee3c c\u00f4ng b\u1ed1 v\u00e0o n\u0103m 1988, ISO-8601 l\u00e0 m\u1ed9t ti\u00eau chu\u1ea9n qu\u1ed1c t\u1ebf m\u00f4 t\u1ea3 m\u1ed9t quy t\u1eafc chung \u0111\u1ec3 vi\u1ebft ng\u00e0y gi\u1edd, ti\u1ec7n cho vi\u1ec7c li\u00ean l\u1ea1c & trao \u0111\u1ed5i th\u00f4ng tin li\u00ean quan \u0111\u1ebfn th\u1eddi gian. D\u01b0\u1edbi \u0111\u00e2y l\u00e0 m\u1ed9t moment \u0111\u01b0\u1ee3c vi\u1ebft theo ti\u00eau chu\u1ea9n ISO-8601, bao g\u1ed3m ng\u00e0y, gi\u1edd v\u00e0 offset IANA Time Zone Database : G\u1ecdi t\u1eaft l\u00e0 tz database , l\u00e0 m\u1ed9t b\u1ed9 database t\u1ed5ng h\u1ee3p th\u00f4ng tin c\u1ee7a to\u00e0n b\u1ed9 m\u00fai gi\u1edd tr\u00ean th\u1ebf gi\u1edbi, \u0111\u01b0\u1ee3c qu\u1ea3n l\u00fd b\u1edfi t\u1ed5 ch\u1ee9c ICANN . Trong tz database, m\u1ed9t m\u00fai gi\u1edd s\u1ebd c\u00f3 t\u00ean g\u1ecdi d\u1ef1a tr\u00ean v\u1ecb tr\u00ed \u0111\u1ecba l\u00fd c\u1ee7a n\u00f3, theo d\u1ea1ng Area/Location , trong \u0111\u00f3 area l\u00e0 t\u00ean c\u1ee7a l\u1ee5c \u0111\u1ecba ho\u1eb7c \u0111\u1ea1i d\u01b0\u01a1ng, location l\u00e0 t\u00ean c\u1ee7a th\u00e0nh ph\u1ed1 ho\u1eb7c h\u00f2n \u0111\u1ea3o. Chu\u1ea9n h\u00f3a l\u1ea1i t\u00ean g\u1ecdi c\u1ee7a c\u00e1c m\u00fai gi\u1edd (c\u00e1c m\u00fai gi\u1edd lu\u00f4n vi\u1ebft t\u1eaft, \u0111i\u1ec1u n\u00e0y c\u00f3 th\u1ec3 g\u00e2y hi\u1ec3u nh\u1ea7m - AST l\u00e0 Arabia Standard Time, Arabia Summer Time hay Atlantic Standard Time?) M\u1ed7i m\u00fai gi\u1edd s\u1ebd ch\u1ee9a 2 offset , m\u1ed9t d\u00e0nh cho \u0111\u1ed9 l\u1ec7ch chu\u1ea9n th\u00f4ng th\u01b0\u1eddn g, m\u1ed9t d\u00e0nh cho th\u1eddi \u0111i\u1ec3m Daylight Saving Time - DST . N\u1ebfu m\u1ed9t m\u00fai gi\u1edd kh\u00f4ng s\u1eed d\u1ee5ng Daylight Saving, 2 offset n\u00e0y c\u00f3 gi\u00e1 tr\u1ecb b\u1eb1ng nhau. Unix timestamp: L\u00e0 h\u1ec7 th\u1ed1ng di\u1ec5n t\u1ea3 m\u1ed9t \u0111i\u1ec3m tr\u00ean tr\u1ee5c th\u1eddi gian Unix. Tr\u1ee5c th\u1eddi gian s\u1eed d\u1ee5ng s\u1ed1 gi\u00e2y k\u1ec3 \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh th\u1eddi \u0111i\u1ec3m, v\u1edbi \u0111i\u1ec3m g\u1ed1c t\u1eeb th\u1eddi \u0111i\u1ec3m 00:00:00 ng\u00e0y 1/1/1970 (UTC) . V\u00ed d\u1ee5 l\u00fac 00:00:00 - 1/1/2017 c\u00f3 gi\u00e1 tr\u1ecb timestamp l\u00e0 1483228800 ; C\u00f3 ngh\u0129a l\u00e0 t\u00ednh t\u1eeb 00h:00m:00s ng\u00e0y 1/1/1970 \u0111\u1ebfn 00h:00m:00s ng\u00e0y 1/1/2017 l\u00e0 1483228800 gi\u00e2y.","title":"Time Concepts"},{"location":"Database/Time%20stamp/#datetime-and-timestamp","text":"Ki\u1ec3u d\u1eef li\u1ec7u DATETIME \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng khi ta c\u1ea7n l\u01b0u tr\u1eef c\u1ea3 hai th\u00f4ng tin ng\u00e0y th\u00e1ng v\u00e0 th\u1eddi gian. DATETIME th\u01b0\u1eddng s\u1ebd \u0111\u01b0\u1ee3c hi\u1ec3n th\u1ecb theo \u0111\u1ecbnh d\u1ea1ng YYYY-MM-DD HH:MM:SS . H\u1ed7 tr\u1ee3 ph\u1ea1m vi t\u1eeb 1000-01-01 00:00:00 t\u1edbi 9999-12-31 23:59:59 . Ki\u1ec3u d\u1eef li\u1ec7u TIMESTAMP c\u0169ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng khi ta mu\u1ed1n l\u01b0u tr\u1eef c\u1ea3 hai th\u00f4ng tin ng\u00e0y th\u00e1ng v\u00e0 th\u1eddi gian. TIMESTAMP c\u00f3 ph\u1ea1m vi 1970-01-01 00:00:01 UTC t\u1edbi 2038-01-19 03:14:07 UTC S\u1ef1 kh\u00e1c bi\u1ec7t ch\u00ednh c\u1ee7a DATETIME v\u00e0 TIMESTAMP l\u00e0 gi\u00e1 tr\u1ecb c\u1ee7a TIMESTAMP \u0111\u01b0\u1ee3c chuy\u1ec3n \u0111\u1ed5i t\u1eeb m\u00fai gi\u1edd hi\u1ec7n t\u1ea1i sang UTC trong khi l\u01b0u tr\u1eef, v\u00e0 chuy\u1ec3n ng\u01b0\u1ee3c tr\u1edf l\u1ea1i t\u1eeb UTC sang m\u00fai gi\u1edd hi\u1ec7n t\u1ea1i trong l\u00fac l\u1ea5y ra. C\u00f2n ki\u1ec3u d\u1eef li\u1ec7u DATETIME th\u00ec kh\u00f4ng c\u00f3 g\u00ec thay \u0111\u1ed5i.","title":"DATETIME and TIMESTAMP"},{"location":"Database/Time%20stamp/#timestamp-in-database","text":"\u1ee8ng v\u1edbi m\u1ed7i Database Provider (Postgres, MySQL...), ch\u00fang ta ph\u1ea3i tu\u00e2n theo m\u1ed9t ki\u1ec3u mapping c\u00e1c data types kh\u00e1c nhau. M\u1eb7c d\u00f9 v\u1eady, vi\u1ec7c \u0111\u01b0a v\u1ec1 h\u1ec7 quy chi\u1ebfu rtime/moment nh\u01b0 tr\u00ean l\u00e0 t\u01b0\u01a1ng \u0111\u1ed1i d\u1ec5. X\u00e9t 2 v\u00ed d\u1ee5 v\u1edbi Postgres v\u00e0 MySQL.","title":"TIMESTAMP in Database"},{"location":"Database/Time%20stamp/#postgres-timestamp-timestampz","text":"Postgres cung c\u1ea5p 2 ki\u1ec3u timestamp l\u00e0 c\u00f3 timezone ( TIMESTAMPZ ) v\u00e0 kh\u00f4ng timezone ( TIMESTAMP ). Tho\u1ea1t nh\u00ecn ch\u00fang ta s\u1ebd cho r\u1eb1ng timestamp lu\u00f4n l\u00e0 moment. Tuy nhi\u00ean, Postgres Tutorial gi\u1ea3i th\u00edch: TIMESTAMP : Khi m\u1ed9t moment \u0111\u01b0\u1ee3c l\u01b0u xu\u1ed1ng, Postgres s\u1ebd lo\u1ea1i b\u1ecf ph\u1ea7n timezone v\u00e0 ch\u1ec9 l\u01b0u ph\u1ea7n hi\u1ec3n th\u1ecb (ng\u00e0y v\u00e0 gi\u1edd). N\u1ebfu thay \u0111\u1ed5i timezone c\u1ee7a database-server, gi\u00e1 tr\u1ecb timestamp lu\u00f4n gi\u1eef nguy\u00ean kh\u00f4ng thay \u0111\u1ed5i. TIMESTAMPZ : l\u00e0 m\u1ed9t zone-aware timestamp Khi m\u1ed9t moment \u0111\u01b0\u1ee3c l\u01b0u xu\u1ed1ng, Postgres s\u1ebd convert v\u1ec1 gi\u1edd UTC ( t\u1ee9c convert v\u1ec1 timezone c\u1ee7a App backend) v\u00e0 l\u01b0u nh\u01b0 ki\u1ec3u TIMESTAMP \u1edf tr\u00ean, ngh\u0129a l\u00e0 ch\u1ec9 l\u01b0u ph\u1ea7n rtime (\u0111\u00e2y l\u00e0 l\u00fd do c\u1ea3 2 ki\u1ec3u d\u1eef li\u1ec7u \u0111\u1ec1u ch\u1ec9 chi\u1ebfm 8 bytes b\u1ed9 nh\u1edb). Tuy nhi\u00ean, nh\u1edd thao t\u00e1c convert v\u1ec1 UTC, n\u00ean c\u00f3 th\u1ec3 xem \u0111\u00e2y l\u00e0 m\u1ed9t moment \u1edf timezone UTC. Khi \u0111\u1ecdc l\u00ean, Postgres l\u00e0m thao t\u00e1c ng\u01b0\u1ee3c l\u1ea1i: gi\u00e1 tr\u1ecb timestamp \u0111\u01b0\u1ee3c convert t\u1eeb UTC v\u1ec1 timezone c\u1ee7a database-server v\u00e0 tr\u1ea3 v\u1ec1 cho backend m\u1ed9t moment ho\u00e0n ch\u1ec9nh. T\u00f3m l\u1ea1i, khi l\u01b0u xu\u1ed1ng ng\u00e0y-gi\u1edd \u1edf timezone n\u00e0o th\u00ec \u0111\u1ecdc l\u00ean v\u1eabn l\u00e0 ng\u00e0y-gi\u1edd \u0111\u00f3, \u1edf timezone \u0111\u00f3. \u2192 TIMESTAMP ch\u00ednh l\u00e0 rtime , c\u00f2n TIMESTAMPZ ch\u00ednh l\u00e0 moment .","title":"Postgres: TIMESTAMP / TIMESTAMPZ"},{"location":"Database/Time%20stamp/#mysql-datetime-timestamp","text":"Timestamp c\u1ee7a MySQL v\u00e0 Postgres kh\u00f4ng gi\u1ed1ng nhau. T\u00e0i li\u1ec7u c\u1ee7a MySQL m\u00f4 t\u1ea3: Khi l\u01b0u Timestamp, gi\u00e1 tr\u1ecb s\u1ebd \u0111\u01b0\u1ee3c convert t\u1eeb timezone hi\u1ec7n t\u1ea1i v\u1ec1 UTC. Khi \u0111\u1ecdc l\u00ean s\u1ebd \u0111i qua b\u01b0\u1edbc ng\u01b0\u1ee3c l\u1ea1i. Quy tr\u00ecnh n\u00e0y kh\u00f4ng \u00e1p d\u1ee5ng \u0111\u1ed1i v\u1edbi ki\u1ec3u DateTime. \u2192 Nh\u01b0 v\u1eady c\u00f3 th\u1ec3 k\u1ebft lu\u1eadn, DateTime ch\u00ednh l\u00e0 rtime , c\u00f2n Timestamp l\u00e0 moment . Gi\u1edbi h\u1ea1n l\u01b0u tr\u1eef c\u1ee7a Timestamp trong MySQL l\u00e0 2038-01-19 03:14:07.999999 , \u0111\u01b0\u1ee3c bi\u1ebft \u0111\u1ebfn v\u1edbi t\u00ean g\u1ecdi S\u1ef1 c\u1ed1 n\u0103m 2038 - Year 2038 Problem, l\u00e0 v\u1ea5n \u0111\u1ec1 x\u1ea3y ra khi ch\u00fang ta l\u01b0u moment d\u1ea1ng Epoch Time b\u1eb1ng m\u1ed9t s\u1ed1 nguy\u00ean 32-bit (v\u1ea5n \u0111\u1ec1 n\u00e0y kh\u00f4ng g\u1eb7p \u1edf Postgres). S\u1ef1 c\u1ed1 \"n\u0103m 2038\" l\u00e0 m\u1ed9t v\u1ea5n \u0111\u1ec1 k\u1ef9 thu\u1eadt c\u1ee7a h\u1ea7u h\u1ebft c\u00e1c thi\u1ebft b\u1ecb x\u1eed l\u00fd, t\u00ednh to\u00e1n \u0111\u1ed3ng h\u1ed3 th\u1eddi gian d\u01b0\u1edbi d\u1ea1ng s\u1ed1 nh\u1ecb ph\u00e2n 32-bit. N\u00f3i m\u1ed9t c\u00e1ch kh\u00e1i qu\u00e1t, th\u1eddi gian hi\u1ec3n th\u1ecb tr\u00ean h\u1ec7 th\u1ed1ng \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a theo d\u1ea1ng \u0111\u1ed3ng h\u1ed3 UNIX, d\u01b0\u1edbi d\u1ea1ng c\u00e1c s\u1ed1 nguy\u00ean v\u00e0 s\u1ed1 nh\u1ecb ph\u00e2n. S\u1ed1 nguy\u00ean l\u1edbn nh\u1ea5t h\u1ec7 th\u1ed1ng c\u00f3 th\u1ec3 x\u1eed l\u00fd l\u00e0 2.147.483.647, t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi s\u1ed1 nh\u1ecb ph\u00e2n l\u00e0 01111111 11111111 11111111 11111111 v\u00e0 ng\u00e0y th\u00e1ng th\u1ef1c l\u00e0 03:14:07 UTC, 19/01/2038. Do \u0111\u00f3, khi b\u01b0\u1edbc sang gi\u00e2y th\u1ee9 08, h\u1ec7 th\u1ed1ng \u0111\u1ed3ng h\u1ed3 s\u1ebd t\u1ef1 \u0111\u1ed9ng tr\u1edf v\u1ec1 0, t\u1ee9c l\u00e0 quay l\u1ea1i th\u1eddi \u0111i\u1ec3m 00:00:00 UTC ng\u00e0y 1/1/1970. S\u1ef1 c\u1ed1 n\u00e0y \u0111\u00e3 tr\u1edf th\u00e0nh v\u1ea5n \u0111\u1ec1 nan gi\u1ea3i v\u1edbi ng\u00e0nh C\u00f4ng ngh\u1ec7 th\u00f4ng tin to\u00e0n c\u1ea7u. Hi\u1ec7n t\u1ea1i v\u1eabn ch\u01b0a c\u00f3 b\u1ea5t k\u1ef3 gi\u1ea3i ph\u00e1p tri\u1ec7t \u0111\u1ec3 n\u00e0o cho s\u1ef1 c\u1ed1 \"n\u0103m 2038\".[c\u1ea7n d\u1eabn ngu\u1ed3n] tr\u00edch t\u1eeb wikipedia","title":"MySQL: DateTime / Timestamp"},{"location":"Database/Time%20stamp/#reference","text":"PostgreSQL \u2013 Timestamp Data Type - geeksforgeeks MySQL TIMESTAMP - mysqltutorial Datetime - viblo Datetime - dev.mysql","title":"Reference"},{"location":"Database/Transactions-ACID/","text":"Transactions, ACID Transactions Definition of DBMS Transaction Processing DBMS Transaction Processing l\u00e0 m\u1ed9t unit of data processing c\u1ee7a Database trong process x\u1eed l\u00fd c\u00e1c ho\u1ea1t \u0111\u1ed9ng truy c\u1eadp t\u1edbi database. C\u00f3 th\u1ec3 hi\u1ec3u Transaction nh\u01b0 m\u1ed9t ph\u01b0\u01a1ng ti\u1ec7n ph\u00e2n ph\u1ed1i qu\u00e1 tr\u00ecnh x\u1eed l\u00fd th\u00f4ng tin . Qu\u00e1 tr\u00ecnh x\u1eed l\u00fd th\u00f4ng tin n\u00e0y l\u00e0 m\u1ed9t t\u1eadp h\u1ee3p c\u00e1c thao t\u00e1c v\u1edbi d\u1eef li\u1ec7u (group of Database Operations ), ch\u1ee9a m\u1ed9t ho\u1eb7c nhi\u1ec1u database actions nh\u01b0 retrieve , insert , update . Note Transaction l\u00e0 m\u1ed9t t\u1eadp h\u1ee3p c\u00e1c operations . M\u1ed9t Transaction \u0111\u1ea1i di\u1ec7n cho s\u1ef1 truy c\u1eadp, thay \u0111\u1ed5i d\u1eef li\u1ec7u trong database. Transactions ch\u1ec9 cho ra hai k\u1ebft qu\u1ea3: ho\u1eb7c l\u00e0 t\u1ea5t c\u1ea3 c\u00e1c operations \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n th\u00e0nh c\u00f4ng; ho\u1eb7c l\u00e0 kh\u00f4ng m\u1ed9t operations n\u00e0o \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n th\u00e0nh c\u00f4ng c\u1ea3 - All or nothing Transaction ho\u1ea1t \u0111\u1ed9ng v\u1edbi database d\u1ef1a tr\u00ean 3 thao t\u00e1c ch\u00ednh : Read , Write , Commit . Operations \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n trong RAM ho\u1eb7c CPU \u2192 performance c\u1ee7a m\u1ed9t transaction ph\u1ee5 thu\u1ed9c v\u00e0o c\u00e1c process c\u1ee7a RAM , CPU . Concurrency in Transactions Vi\u1ec7c truy c\u1eadp t\u1edbi resource c\u1ee7a database d\u1ef1a tr\u00ean c\u01a1 ch\u1ebf shared resource , t\u1ee9c l\u00e0 c\u00e1c resource s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng b\u1edfi nhi\u1ec1u ng\u01b0\u1eddi d\u00f9ng v\u00e0 x\u1eed l\u00fd \u0111\u1ed3ng th\u1eddi. V\u00ed d\u1ee5 nh\u01b0 h\u1ec7 th\u1ed1ng ng\u00e2n h\u00e0ng, h\u1ec7 th\u1ed1ng \u0111\u1eb7t ch\u1ed7 \u0111\u01b0\u1eddng s\u1eaft v\u00e0 \u0111\u01b0\u1eddng h\u00e0ng kh\u00f4ng, gi\u00e1m s\u00e1t th\u1ecb tr\u01b0\u1eddng ch\u1ee9ng kho\u00e1n, ki\u1ec3m k\u00ea si\u00eau th\u1ecb v\u00e0 thanh to\u00e1n, v.v. N\u1ebfu kh\u00f4ng qu\u1ea3n l\u00fd quy\u1ec1n concurrent access trong t\u1eebng Transactions c\u1ee7a database c\u00f3 th\u1ec3 t\u1ea1o ra c\u00e1c v\u1ea5n \u0111\u1ec1 nh\u01b0: L\u1ed7i ph\u1ea7n c\u1ee9ng v\u00e0 s\u1ef1 c\u1ed1 h\u1ec7 th\u1ed1ng Th\u1ef1c hi\u1ec7n \u0111\u1ed3ng th\u1eddi c\u00f9ng m\u1ed9t giao d\u1ecbch, deadlock ho\u1eb7c hi\u1ec7u su\u1ea5t ch\u1eadm States of Transactions \u0110\u1ec3 d\u1ec5 h\u00ecnh d\u00f9ng qu\u00e1 tr\u00ecnh chuy\u1ec3n State c\u1ee7a Transactions, ta c\u00f3 th\u1ec3 tham kh\u1ea3o diagram d\u01b0\u1edbi \u0111\u00e2y: Khi b\u1eaft \u0111\u1ea7u m\u1ed9t Transaction, Transaction s\u1ebd \u0111\u01b0\u1ee3c th\u1ef1c thi v\u00e0 n\u1eb1m trong tr\u1ea1ng th\u00e1i Active State . Trong tr\u1ea1ng th\u00e1i n\u00e0y, c\u00e1c READ or WRITE operation c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n. Khi c\u00e1c Operation th\u1ef1c thi xong, transaction s\u1ebd chuy\u1ec3n sang tr\u1ea1ng th\u00e1i n\u00e0y C\u01a1 ch\u1ebf recovery ho\u1ea1t \u0111\u1ed9ng \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o l\u1ed7i h\u1ec7 th\u1ed1ng s\u1ebd kh\u00f4ng d\u1eabn \u0111\u1ebfn vi\u1ec7c v\u0129nh vi\u1ec5n kh\u00f4ng th\u1ec3 ghi l\u1ea1i c\u00e1c thay \u0111\u1ed5i trong transaction. N\u1ebfu recovery cho k\u1ebft qu\u1ea3 success , transaction s\u1ebd \u0111\u01b0\u1ee3c commit v\u00e0 chuy\u1ec3n sang Committed State Trong tr\u01b0\u1eddng h\u1ee3p recovery cho k\u1ebft qu\u1ea3 fail , transaction th\u1ea5t b\u1ea1i v\u00e0 s\u1ebd \u0111\u01b0\u1ee3c chuy\u1ec3n sang Failed State . Trong tr\u01b0\u1eddng h\u1ee3p m\u1ed9t transaction \u0111ang \u1edf Active State v\u00e0 \u0111ang th\u1ef1c thi c\u00e1c operations, nh\u01b0ng b\u1ecb cancel b\u1edfi h\u1ec7 th\u1ed1ng hay b\u1ea5t c\u1ee9 l\u00fd do g\u00ec th\u00ec s\u1ebd \u0111\u01b0\u1ee3c chuy\u1ec3n sang Failed State (ho\u1eb7c g\u1ecdi l\u00e0 Rollback ). Transaction r\u1eddi kh\u1ecfi h\u1ec7 th\u1ed1ng, k\u1ebft th\u00fac m\u1ed9t Transaction. T\u00f3m l\u1ea1i State Description Active State B\u1eaft \u0111\u1ea7u m\u1ed9t Transaction, trong tr\u1ea1ng th\u00e1i n\u00e0y, c\u00e1c READ or WRITE operation c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n. Partially Committed Transaction s\u1ebd chuy\u1ec3n sang tr\u1ea1ng th\u00e1i n\u00e0y sau khi k\u1ebft th\u00fac qu\u00e1 tr\u00ecnh th\u1ef1c thi c\u00e1c Operations. Committed State N\u1ebfu c\u00e1c Operations \u0111\u01b0\u1ee3c th\u1ef1c thi TH\u00c0NH C\u00d4NG, transaction s\u1ebd chuy\u1ec3n sang tr\u1ea1ng th\u00e1i n\u00e0y. T\u1ea5t c\u1ea3 c\u00e1c thay \u0111\u1ed5i c\u1ee7a Operations \u0111\u01b0\u1ee3c ghi l\u1ea1i v\u0129nh vi\u1ec5n v\u00e0o c\u01a1 s\u1edf d\u1eef li\u1ec7u. Failed State N\u1ebfu c\u00e1c Operations \u0111\u01b0\u1ee3c th\u1ef1c thi TH\u1ea4T B\u1ea0I, ho\u1eb7c m\u1ed9t transaction b\u1ecb cancel khi \u0111ang \u1edf Active State, transaction s\u1ebd chuy\u1ec3n sang tr\u1ea1ng th\u00e1i n\u00e0y Terminated State Ch\u1ea5m d\u1ee9t Transaction. ACID ACID l\u00e0 1 t\u1eadp h\u1ee3p c\u00e1c thu\u1ed9c t\u00ednh m\u00e0 1 transaction thao t\u00e1c v\u1edbi database ph\u1ea3i \u0111\u1ea1t \u0111\u01b0\u1ee3c nh\u1eb1m b\u1ea3o \u0111\u1ea3m t\u00ednh to\u00e0n v\u1eb9n , h\u1ee3p l\u1ec7 , an to\u00e0n , t\u00ednh b\u1ec1n v\u1eefng \u2026 c\u1ee7a d\u1eef li\u1ec7u \u1edf database. N\u1ebfu 1 transaction kh\u00f4ng tho\u1ea3 m\u1ea3n 1 trong c\u00e1c thu\u1ed9c t\u00ednh n\u00e0y th\u00ec s\u1ebd kh\u00f4ng th\u1ec3 thao t\u00e1c v\u1edbi database th\u00e0nh c\u00f4ng, b\u1ecb rollback ngay l\u1eadp t\u1ee9c. ACID l\u00e0 c\u1ee5m t\u1eeb vi\u1ebft t\u1eaft c\u1ee7a 4 thu\u1ed9c t\u00ednh sau: A tomicity, C onsistency, I solation v\u00e0 D urability: A tomicity Atomicity - T\u00ednh b\u1ea3o to\u00e0n?\ud83d\ude00: D\u1ef1a v\u00e0o rule All or nothing k\u1ec3 tr\u00ean, khi m\u1ed9t chu\u1ed7i c\u00e1c operations l\u1ea7n l\u01b0\u1ee3t thao t\u00e1c v\u1edbi database trong 1 transaction, n\u1ebfu 1 operation \u0111ang trong x\u1eed l\u00fd m\u00e0 x\u1ea3y l\u1ed7i \u1edf database, hay crash h\u1ec7 th\u1ed1ng, v.v\u2026 th\u00ec to\u00e0n b\u1ed9 transaction s\u1ebd b\u1ecb h\u1ee7y b\u1ecf v\u00e0 b\u1ecb rollback, d\u1eef li\u1ec7u \u1edf database v\u1eabn gi\u1eef nh\u01b0 c\u0169 tr\u01b0\u1edbc khi c\u00f3 s\u1ef1 thay \u0111\u1ed5i. N\u1ebfu nh\u01b0 kh\u00f4ng x\u1ea3y ra l\u1ed7i hay v\u1ea5n \u0111\u1ec1 g\u00ec trong qu\u00e1 tr\u00ecnh x\u1eed l\u00fd c\u00e1c operations th\u00ec transaction \u0111\u00f3 s\u1ebd commit th\u00e0nh c\u00f4ng, d\u1eef li\u1ec7u ph\u00eda database c\u0169ng \u0111\u01b0\u1ee3c c\u1eadp nh\u1eadt th\u00e0nh c\u00f4ng lu\u00f4n. Theo State Transaction Diagram \u1edf tr\u00ean, m\u1ed9t transaction ch\u1ec9 c\u00f3 2 k\u1ebft qu\u1ea3: Abort : T\u1ea5t c\u1ea3 c\u00e1c thay \u0111\u1ed5i c\u1ee7a transaction s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1ed3ng b\u1ed9 xu\u1ed1ng database. Commit : T\u1ea5t c\u1ea3 c\u00e1c thay \u0111\u1ed5i c\u1ee7a transaction \u0111\u01b0\u1ee3c \u0111\u1ed3ng b\u1ed9 xu\u1ed1ng database. L\u1ea5y v\u00ed d\u1ee5 ch\u00fang ta c\u00f3 m\u1ed9t giao d\u1ecbch c\u1ee7a ng\u00e2n h\u00e0ng chuy\u1ec3n 100tr \u0111\u1ed3ng t\u1eeb t\u00e0i kho\u1ea3ng X sang t\u00e0i kho\u1ea3n Y. N\u1ebfu transaction th\u1ef1c thi th\u00e0nh c\u00f4ng t\u1ea1i b\u01b0\u1edbc T1 nh\u01b0ng khi \u0111\u1ebfn b\u01b0\u1edbc T2 th\u00ec h\u1ec7 th\u1ed1ng b\u1ecb l\u1ed7i. L\u00fac n\u00e0y n\u1ebfu nh\u1eefng thay \u0111\u1ed5i n\u00e0y \u0111\u01b0\u1ee3c \u0111\u1ed3ng b\u1ed9 xu\u1ed1ng database th\u00ec v\u00f4 t\u00ecnh t\u00e0i kho\u1ea3n X b\u1ecb m\u1ea5t 100tr \u0111\u1ed3ng m\u00e0 t\u00e0i kho\u1ea3n Y l\u1ea1i kh\u00f4ng nh\u1eadn \u0111\u01b0\u1ee3c \u0111\u1ed3ng n\u00e0o. \u0110\u00e2y l\u00e0 v\u00ed d\u1ee5 kinh \u0111i\u1ec3n m\u00e0 Atomicity c\u00f3 th\u1ec3 \u0111\u1ea3m b\u1ea3o c\u00e1c h\u1ec7 th\u1ed1ng s\u1ebd kh\u00f4ng x\u1ea3y ra sai x\u00f3t nh\u01b0 tr\u00ean. Consistency Consistency - T\u00ednh nh\u1ea5t qu\u00e1n: M\u1ed9t transaction ph\u1ea3i \u0111\u1ea3m b\u1ea3o t\u00ednh h\u1ee3p l\u1ec7 c\u1ee7a d\u1eef li\u1ec7u khi c\u1eadp nh\u1eadt v\u00e0o database. N\u1ebfu d\u1eef li\u1ec7u \u0111\u01b0a v\u00e0o database m\u00e0 nh\u01b0 ki\u1ec5u d\u1eef li\u1ec7u kh\u00f4ng ph\u00f9 h\u1ee3p, kh\u00f4ng th\u1ecfa m\u00e3n constraint, rule, trigger, query nh\u1ea7m table,\u2026 th\u00ec transaction \u0111\u00f3 s\u1ebd b\u1ecb rollback, d\u1eef li\u1ec7u \u1edf database v\u1eabn \u0111\u01b0\u1ee3c gi\u1eef nguy\u00ean l\u00fac ch\u01b0a thay \u0111\u1ed5i. Ch\u00ednh v\u00ec v\u1eady d\u1eef li\u1ec7u t\u1eeb transaction ph\u1ea3i h\u1ee3p l\u1ec7, \u0111\u00fang \u0111\u1eafn, nh\u1ea5t qu\u00e1n v\u1edbi nh\u1eefng constraint, c\u1ea5u tr\u00fac table, rule\u2026 \u0111\u00e3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a hay khai b\u00e1o t\u1eeb ph\u00eda database. Isolation Isolation - T\u00ednh c\u00f4 l\u1eadp: M\u1ecdi thao t\u00e1c c\u1ee7a 1 transaction \u0111\u1ec1u ph\u1ea3i \u0111\u01b0\u1ee3c c\u00f4 l\u1eadp, tr\u00e1nh s\u1ef1 t\u00e1c \u0111\u1ed9ng, ph\u1ee5 thu\u1ed9c hay \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn c\u00e1c transaction kh\u00e1c. M\u1ed9t transaction A th\u00ec kh\u00f4ng th\u1ec3 \u0111\u1ecdc d\u1eef li\u1ec7u \u1edf database trong khi transaction B \u0111ang update d\u1eef li\u1ec7u \u0111\u00f3. N\u1ebfu c\u00f3 2 transaction \u0111ang l\u00e0m vi\u1ec7c b\u1ea5t \u0111\u1ed3ng b\u1ed9 v\u1edbi nhau th\u00ec s\u1ebd c\u00f3 c\u01a1 ch\u1ebf chia session nh\u01b0 h\u00ecnh d\u01b0\u1edbi, \u0111\u1ec3 c\u00e1c transaction l\u00e0m vi\u1ec7c tu\u1ea7n t\u1ef1 v\u1edbi database theo t\u1eebng session, 1 transation n\u00e0y s\u1ebd ch\u1edd cho \u0111\u1ebfn khi transaction kia commit th\u00e0nh c\u00f4ng th\u00ec m\u1edbi b\u1eaft \u0111\u1ea7u l\u00e0m nhi\u1ec7m v\u1ee5 c\u1ee7a n\u00f3. Durability Durability - T\u00ednh b\u1ec1n b\u1ec9: Khi 1 transaction update d\u1eef li\u1ec7u th\u00e0nh c\u00f4ng, th\u00ec thay \u0111\u1ed5i c\u1ee7a d\u1eef li\u1ec7u \u0111\u00f3 ph\u1ea3i \u0111\u01b0\u1ee3c \u0111\u1ea3m b\u1ea3o l\u01b0u tr\u1eef \u1edf tr\u1ea1ng th\u00e1i b\u1ec1n v\u1eefng, v\u0129nh vi\u1ec5n,... V\u00e0 ngay c\u1ea3 khi database b\u1ecb crash, l\u1ed7i hay h\u1ec7 th\u1ed1ng restart th\u00ec d\u1eef li\u1ec7u \u1edf database v\u1eabn lu\u00f4n \u1edf tr\u1ea1ng th\u00e1i thay \u0111\u1ed5i m\u1edbi nh\u1ea5t, ch\u00ednh x\u00e1c. T\u00f3m l\u1ea1i: Reference ACID Properties in DBMS - geeksforgeeks Transaction Management in DBMS - guru99 What is ACID Property in Database - sqlauthority DBMS Transaction Processing - educba DBMS Transaction and ACID Properties - knowledgegrah","title":"Transactions, ACID"},{"location":"Database/Transactions-ACID/#transactions-acid","text":"","title":"Transactions, ACID"},{"location":"Database/Transactions-ACID/#transactions","text":"","title":"Transactions"},{"location":"Database/Transactions-ACID/#definition-of-dbms-transaction-processing","text":"DBMS Transaction Processing l\u00e0 m\u1ed9t unit of data processing c\u1ee7a Database trong process x\u1eed l\u00fd c\u00e1c ho\u1ea1t \u0111\u1ed9ng truy c\u1eadp t\u1edbi database. C\u00f3 th\u1ec3 hi\u1ec3u Transaction nh\u01b0 m\u1ed9t ph\u01b0\u01a1ng ti\u1ec7n ph\u00e2n ph\u1ed1i qu\u00e1 tr\u00ecnh x\u1eed l\u00fd th\u00f4ng tin . Qu\u00e1 tr\u00ecnh x\u1eed l\u00fd th\u00f4ng tin n\u00e0y l\u00e0 m\u1ed9t t\u1eadp h\u1ee3p c\u00e1c thao t\u00e1c v\u1edbi d\u1eef li\u1ec7u (group of Database Operations ), ch\u1ee9a m\u1ed9t ho\u1eb7c nhi\u1ec1u database actions nh\u01b0 retrieve , insert , update . Note Transaction l\u00e0 m\u1ed9t t\u1eadp h\u1ee3p c\u00e1c operations . M\u1ed9t Transaction \u0111\u1ea1i di\u1ec7n cho s\u1ef1 truy c\u1eadp, thay \u0111\u1ed5i d\u1eef li\u1ec7u trong database. Transactions ch\u1ec9 cho ra hai k\u1ebft qu\u1ea3: ho\u1eb7c l\u00e0 t\u1ea5t c\u1ea3 c\u00e1c operations \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n th\u00e0nh c\u00f4ng; ho\u1eb7c l\u00e0 kh\u00f4ng m\u1ed9t operations n\u00e0o \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n th\u00e0nh c\u00f4ng c\u1ea3 - All or nothing Transaction ho\u1ea1t \u0111\u1ed9ng v\u1edbi database d\u1ef1a tr\u00ean 3 thao t\u00e1c ch\u00ednh : Read , Write , Commit . Operations \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n trong RAM ho\u1eb7c CPU \u2192 performance c\u1ee7a m\u1ed9t transaction ph\u1ee5 thu\u1ed9c v\u00e0o c\u00e1c process c\u1ee7a RAM , CPU .","title":"Definition of DBMS Transaction Processing"},{"location":"Database/Transactions-ACID/#concurrency-in-transactions","text":"Vi\u1ec7c truy c\u1eadp t\u1edbi resource c\u1ee7a database d\u1ef1a tr\u00ean c\u01a1 ch\u1ebf shared resource , t\u1ee9c l\u00e0 c\u00e1c resource s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng b\u1edfi nhi\u1ec1u ng\u01b0\u1eddi d\u00f9ng v\u00e0 x\u1eed l\u00fd \u0111\u1ed3ng th\u1eddi. V\u00ed d\u1ee5 nh\u01b0 h\u1ec7 th\u1ed1ng ng\u00e2n h\u00e0ng, h\u1ec7 th\u1ed1ng \u0111\u1eb7t ch\u1ed7 \u0111\u01b0\u1eddng s\u1eaft v\u00e0 \u0111\u01b0\u1eddng h\u00e0ng kh\u00f4ng, gi\u00e1m s\u00e1t th\u1ecb tr\u01b0\u1eddng ch\u1ee9ng kho\u00e1n, ki\u1ec3m k\u00ea si\u00eau th\u1ecb v\u00e0 thanh to\u00e1n, v.v. N\u1ebfu kh\u00f4ng qu\u1ea3n l\u00fd quy\u1ec1n concurrent access trong t\u1eebng Transactions c\u1ee7a database c\u00f3 th\u1ec3 t\u1ea1o ra c\u00e1c v\u1ea5n \u0111\u1ec1 nh\u01b0: L\u1ed7i ph\u1ea7n c\u1ee9ng v\u00e0 s\u1ef1 c\u1ed1 h\u1ec7 th\u1ed1ng Th\u1ef1c hi\u1ec7n \u0111\u1ed3ng th\u1eddi c\u00f9ng m\u1ed9t giao d\u1ecbch, deadlock ho\u1eb7c hi\u1ec7u su\u1ea5t ch\u1eadm","title":"Concurrency in Transactions"},{"location":"Database/Transactions-ACID/#states-of-transactions","text":"\u0110\u1ec3 d\u1ec5 h\u00ecnh d\u00f9ng qu\u00e1 tr\u00ecnh chuy\u1ec3n State c\u1ee7a Transactions, ta c\u00f3 th\u1ec3 tham kh\u1ea3o diagram d\u01b0\u1edbi \u0111\u00e2y: Khi b\u1eaft \u0111\u1ea7u m\u1ed9t Transaction, Transaction s\u1ebd \u0111\u01b0\u1ee3c th\u1ef1c thi v\u00e0 n\u1eb1m trong tr\u1ea1ng th\u00e1i Active State . Trong tr\u1ea1ng th\u00e1i n\u00e0y, c\u00e1c READ or WRITE operation c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n. Khi c\u00e1c Operation th\u1ef1c thi xong, transaction s\u1ebd chuy\u1ec3n sang tr\u1ea1ng th\u00e1i n\u00e0y C\u01a1 ch\u1ebf recovery ho\u1ea1t \u0111\u1ed9ng \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o l\u1ed7i h\u1ec7 th\u1ed1ng s\u1ebd kh\u00f4ng d\u1eabn \u0111\u1ebfn vi\u1ec7c v\u0129nh vi\u1ec5n kh\u00f4ng th\u1ec3 ghi l\u1ea1i c\u00e1c thay \u0111\u1ed5i trong transaction. N\u1ebfu recovery cho k\u1ebft qu\u1ea3 success , transaction s\u1ebd \u0111\u01b0\u1ee3c commit v\u00e0 chuy\u1ec3n sang Committed State Trong tr\u01b0\u1eddng h\u1ee3p recovery cho k\u1ebft qu\u1ea3 fail , transaction th\u1ea5t b\u1ea1i v\u00e0 s\u1ebd \u0111\u01b0\u1ee3c chuy\u1ec3n sang Failed State . Trong tr\u01b0\u1eddng h\u1ee3p m\u1ed9t transaction \u0111ang \u1edf Active State v\u00e0 \u0111ang th\u1ef1c thi c\u00e1c operations, nh\u01b0ng b\u1ecb cancel b\u1edfi h\u1ec7 th\u1ed1ng hay b\u1ea5t c\u1ee9 l\u00fd do g\u00ec th\u00ec s\u1ebd \u0111\u01b0\u1ee3c chuy\u1ec3n sang Failed State (ho\u1eb7c g\u1ecdi l\u00e0 Rollback ). Transaction r\u1eddi kh\u1ecfi h\u1ec7 th\u1ed1ng, k\u1ebft th\u00fac m\u1ed9t Transaction. T\u00f3m l\u1ea1i State Description Active State B\u1eaft \u0111\u1ea7u m\u1ed9t Transaction, trong tr\u1ea1ng th\u00e1i n\u00e0y, c\u00e1c READ or WRITE operation c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n. Partially Committed Transaction s\u1ebd chuy\u1ec3n sang tr\u1ea1ng th\u00e1i n\u00e0y sau khi k\u1ebft th\u00fac qu\u00e1 tr\u00ecnh th\u1ef1c thi c\u00e1c Operations. Committed State N\u1ebfu c\u00e1c Operations \u0111\u01b0\u1ee3c th\u1ef1c thi TH\u00c0NH C\u00d4NG, transaction s\u1ebd chuy\u1ec3n sang tr\u1ea1ng th\u00e1i n\u00e0y. T\u1ea5t c\u1ea3 c\u00e1c thay \u0111\u1ed5i c\u1ee7a Operations \u0111\u01b0\u1ee3c ghi l\u1ea1i v\u0129nh vi\u1ec5n v\u00e0o c\u01a1 s\u1edf d\u1eef li\u1ec7u. Failed State N\u1ebfu c\u00e1c Operations \u0111\u01b0\u1ee3c th\u1ef1c thi TH\u1ea4T B\u1ea0I, ho\u1eb7c m\u1ed9t transaction b\u1ecb cancel khi \u0111ang \u1edf Active State, transaction s\u1ebd chuy\u1ec3n sang tr\u1ea1ng th\u00e1i n\u00e0y Terminated State Ch\u1ea5m d\u1ee9t Transaction.","title":"States of Transactions"},{"location":"Database/Transactions-ACID/#acid","text":"ACID l\u00e0 1 t\u1eadp h\u1ee3p c\u00e1c thu\u1ed9c t\u00ednh m\u00e0 1 transaction thao t\u00e1c v\u1edbi database ph\u1ea3i \u0111\u1ea1t \u0111\u01b0\u1ee3c nh\u1eb1m b\u1ea3o \u0111\u1ea3m t\u00ednh to\u00e0n v\u1eb9n , h\u1ee3p l\u1ec7 , an to\u00e0n , t\u00ednh b\u1ec1n v\u1eefng \u2026 c\u1ee7a d\u1eef li\u1ec7u \u1edf database. N\u1ebfu 1 transaction kh\u00f4ng tho\u1ea3 m\u1ea3n 1 trong c\u00e1c thu\u1ed9c t\u00ednh n\u00e0y th\u00ec s\u1ebd kh\u00f4ng th\u1ec3 thao t\u00e1c v\u1edbi database th\u00e0nh c\u00f4ng, b\u1ecb rollback ngay l\u1eadp t\u1ee9c. ACID l\u00e0 c\u1ee5m t\u1eeb vi\u1ebft t\u1eaft c\u1ee7a 4 thu\u1ed9c t\u00ednh sau: A tomicity, C onsistency, I solation v\u00e0 D urability:","title":"ACID"},{"location":"Database/Transactions-ACID/#atomicity","text":"Atomicity - T\u00ednh b\u1ea3o to\u00e0n?\ud83d\ude00: D\u1ef1a v\u00e0o rule All or nothing k\u1ec3 tr\u00ean, khi m\u1ed9t chu\u1ed7i c\u00e1c operations l\u1ea7n l\u01b0\u1ee3t thao t\u00e1c v\u1edbi database trong 1 transaction, n\u1ebfu 1 operation \u0111ang trong x\u1eed l\u00fd m\u00e0 x\u1ea3y l\u1ed7i \u1edf database, hay crash h\u1ec7 th\u1ed1ng, v.v\u2026 th\u00ec to\u00e0n b\u1ed9 transaction s\u1ebd b\u1ecb h\u1ee7y b\u1ecf v\u00e0 b\u1ecb rollback, d\u1eef li\u1ec7u \u1edf database v\u1eabn gi\u1eef nh\u01b0 c\u0169 tr\u01b0\u1edbc khi c\u00f3 s\u1ef1 thay \u0111\u1ed5i. N\u1ebfu nh\u01b0 kh\u00f4ng x\u1ea3y ra l\u1ed7i hay v\u1ea5n \u0111\u1ec1 g\u00ec trong qu\u00e1 tr\u00ecnh x\u1eed l\u00fd c\u00e1c operations th\u00ec transaction \u0111\u00f3 s\u1ebd commit th\u00e0nh c\u00f4ng, d\u1eef li\u1ec7u ph\u00eda database c\u0169ng \u0111\u01b0\u1ee3c c\u1eadp nh\u1eadt th\u00e0nh c\u00f4ng lu\u00f4n. Theo State Transaction Diagram \u1edf tr\u00ean, m\u1ed9t transaction ch\u1ec9 c\u00f3 2 k\u1ebft qu\u1ea3: Abort : T\u1ea5t c\u1ea3 c\u00e1c thay \u0111\u1ed5i c\u1ee7a transaction s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1ed3ng b\u1ed9 xu\u1ed1ng database. Commit : T\u1ea5t c\u1ea3 c\u00e1c thay \u0111\u1ed5i c\u1ee7a transaction \u0111\u01b0\u1ee3c \u0111\u1ed3ng b\u1ed9 xu\u1ed1ng database. L\u1ea5y v\u00ed d\u1ee5 ch\u00fang ta c\u00f3 m\u1ed9t giao d\u1ecbch c\u1ee7a ng\u00e2n h\u00e0ng chuy\u1ec3n 100tr \u0111\u1ed3ng t\u1eeb t\u00e0i kho\u1ea3ng X sang t\u00e0i kho\u1ea3n Y. N\u1ebfu transaction th\u1ef1c thi th\u00e0nh c\u00f4ng t\u1ea1i b\u01b0\u1edbc T1 nh\u01b0ng khi \u0111\u1ebfn b\u01b0\u1edbc T2 th\u00ec h\u1ec7 th\u1ed1ng b\u1ecb l\u1ed7i. L\u00fac n\u00e0y n\u1ebfu nh\u1eefng thay \u0111\u1ed5i n\u00e0y \u0111\u01b0\u1ee3c \u0111\u1ed3ng b\u1ed9 xu\u1ed1ng database th\u00ec v\u00f4 t\u00ecnh t\u00e0i kho\u1ea3n X b\u1ecb m\u1ea5t 100tr \u0111\u1ed3ng m\u00e0 t\u00e0i kho\u1ea3n Y l\u1ea1i kh\u00f4ng nh\u1eadn \u0111\u01b0\u1ee3c \u0111\u1ed3ng n\u00e0o. \u0110\u00e2y l\u00e0 v\u00ed d\u1ee5 kinh \u0111i\u1ec3n m\u00e0 Atomicity c\u00f3 th\u1ec3 \u0111\u1ea3m b\u1ea3o c\u00e1c h\u1ec7 th\u1ed1ng s\u1ebd kh\u00f4ng x\u1ea3y ra sai x\u00f3t nh\u01b0 tr\u00ean.","title":"Atomicity"},{"location":"Database/Transactions-ACID/#consistency","text":"Consistency - T\u00ednh nh\u1ea5t qu\u00e1n: M\u1ed9t transaction ph\u1ea3i \u0111\u1ea3m b\u1ea3o t\u00ednh h\u1ee3p l\u1ec7 c\u1ee7a d\u1eef li\u1ec7u khi c\u1eadp nh\u1eadt v\u00e0o database. N\u1ebfu d\u1eef li\u1ec7u \u0111\u01b0a v\u00e0o database m\u00e0 nh\u01b0 ki\u1ec5u d\u1eef li\u1ec7u kh\u00f4ng ph\u00f9 h\u1ee3p, kh\u00f4ng th\u1ecfa m\u00e3n constraint, rule, trigger, query nh\u1ea7m table,\u2026 th\u00ec transaction \u0111\u00f3 s\u1ebd b\u1ecb rollback, d\u1eef li\u1ec7u \u1edf database v\u1eabn \u0111\u01b0\u1ee3c gi\u1eef nguy\u00ean l\u00fac ch\u01b0a thay \u0111\u1ed5i. Ch\u00ednh v\u00ec v\u1eady d\u1eef li\u1ec7u t\u1eeb transaction ph\u1ea3i h\u1ee3p l\u1ec7, \u0111\u00fang \u0111\u1eafn, nh\u1ea5t qu\u00e1n v\u1edbi nh\u1eefng constraint, c\u1ea5u tr\u00fac table, rule\u2026 \u0111\u00e3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a hay khai b\u00e1o t\u1eeb ph\u00eda database.","title":"Consistency"},{"location":"Database/Transactions-ACID/#isolation","text":"Isolation - T\u00ednh c\u00f4 l\u1eadp: M\u1ecdi thao t\u00e1c c\u1ee7a 1 transaction \u0111\u1ec1u ph\u1ea3i \u0111\u01b0\u1ee3c c\u00f4 l\u1eadp, tr\u00e1nh s\u1ef1 t\u00e1c \u0111\u1ed9ng, ph\u1ee5 thu\u1ed9c hay \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn c\u00e1c transaction kh\u00e1c. M\u1ed9t transaction A th\u00ec kh\u00f4ng th\u1ec3 \u0111\u1ecdc d\u1eef li\u1ec7u \u1edf database trong khi transaction B \u0111ang update d\u1eef li\u1ec7u \u0111\u00f3. N\u1ebfu c\u00f3 2 transaction \u0111ang l\u00e0m vi\u1ec7c b\u1ea5t \u0111\u1ed3ng b\u1ed9 v\u1edbi nhau th\u00ec s\u1ebd c\u00f3 c\u01a1 ch\u1ebf chia session nh\u01b0 h\u00ecnh d\u01b0\u1edbi, \u0111\u1ec3 c\u00e1c transaction l\u00e0m vi\u1ec7c tu\u1ea7n t\u1ef1 v\u1edbi database theo t\u1eebng session, 1 transation n\u00e0y s\u1ebd ch\u1edd cho \u0111\u1ebfn khi transaction kia commit th\u00e0nh c\u00f4ng th\u00ec m\u1edbi b\u1eaft \u0111\u1ea7u l\u00e0m nhi\u1ec7m v\u1ee5 c\u1ee7a n\u00f3.","title":"Isolation"},{"location":"Database/Transactions-ACID/#durability","text":"Durability - T\u00ednh b\u1ec1n b\u1ec9: Khi 1 transaction update d\u1eef li\u1ec7u th\u00e0nh c\u00f4ng, th\u00ec thay \u0111\u1ed5i c\u1ee7a d\u1eef li\u1ec7u \u0111\u00f3 ph\u1ea3i \u0111\u01b0\u1ee3c \u0111\u1ea3m b\u1ea3o l\u01b0u tr\u1eef \u1edf tr\u1ea1ng th\u00e1i b\u1ec1n v\u1eefng, v\u0129nh vi\u1ec5n,... V\u00e0 ngay c\u1ea3 khi database b\u1ecb crash, l\u1ed7i hay h\u1ec7 th\u1ed1ng restart th\u00ec d\u1eef li\u1ec7u \u1edf database v\u1eabn lu\u00f4n \u1edf tr\u1ea1ng th\u00e1i thay \u0111\u1ed5i m\u1edbi nh\u1ea5t, ch\u00ednh x\u00e1c. T\u00f3m l\u1ea1i:","title":"Durability"},{"location":"Database/Transactions-ACID/#reference","text":"ACID Properties in DBMS - geeksforgeeks Transaction Management in DBMS - guru99 What is ACID Property in Database - sqlauthority DBMS Transaction Processing - educba DBMS Transaction and ACID Properties - knowledgegrah","title":"Reference"},{"location":"Docker/Docker-Architecture/","text":"Docker Architecture Overview Docker architecture: daemon, client, desktop registries Overview Docker l\u00e0 m\u1ed9t d\u1ef1 \u00e1n open-source , cho ph\u00e9p t\u1ef1 \u0111\u1ed9ng h\u00f3a vi\u1ec7c tri\u1ec3n khai c\u00e1c \u1ee9ng d\u1ee5ng b\u00ean trong c\u00e1c Container (Linux), cung nh\u01b0 cung c\u1ea5p ch\u1ee9c n\u0103ng \u0111\u00f3ng g\u00f3i c\u00e1c th\u00e0nh ph\u1ea7n c\u1ea7n \u0111\u1ec3 ch\u1ea1y \u1ee9ng d\u1ee5ng b\u00ean trong Container. Docker cung c\u1ea5p c\u00f4ng c\u1ee5 CLI (Command Line Interface) \u0111\u1ec3 qu\u1ea3n l\u00fd v\u00f2ng \u0111\u1eddi c\u1ee7a c\u00e1c container. S\u1eed d\u1ee5ng Docker l\u00e0 c\u00e1ch nhanh ch\u00f3ng \u0111\u1ec3 ph\u00e1t tri\u1ec3n, tri\u1ec3n khai, b\u1ea3o tr\u00ec c\u00e1c \u1ee9ng d\u1ee5ng. Containers v\u00e0 Virtual machines c\u00f3 s\u1ef1 c\u00e1ch ly v\u00e0 ph\u00e2n b\u1ed5 t\u00e0i nguy\u00ean t\u01b0\u01a1ng t\u1ef1 nhau, nh\u01b0ng c\u00f3 ch\u1ee9c n\u0103ng kh\u00e1c v\u00ec c\u00e1c container \u1ea3o h\u00f3a h\u1ec7 \u0111i\u1ec1u h\u00e0nh thay v\u00ec ph\u1ea7n c\u1ee9ng. C\u00e1c container c\u00f3 t\u00ednh portable v\u00e0 hi\u1ec7u qu\u1ea3 h\u01a1n. Container l\u00e0 m\u1ed9t s\u1ef1 tr\u1eebu t\u01b0\u1ee3ng h\u00f3a \u1edf l\u1edbp \u1ee9ng d\u1ee5ng v\u00e0 code ph\u1ee5 thu\u1ed9c v\u00e0o nhau. Nhi\u1ec1u container c\u00f3 th\u1ec3 ch\u1ea1y tr\u00ean c\u00f9ng m\u1ed9t m\u00e1y v\u00e0 chia s\u1ebb kernel c\u1ee7a h\u1ec7 \u0111i\u1ec1u h\u00e0nh v\u1edbi c\u00e1c container kh\u00e1c, m\u1ed7i m\u00e1y \u0111\u1ec1u ch\u1ea1y nh\u01b0 c\u00e1c qu\u00e1 tr\u00ecnh b\u1ecb c\u00f4 l\u1eadp trong kh\u00f4ng gian ng\u01b0\u1eddi d\u00f9ng. C\u00e1c container chi\u1ebfm \u00edt kh\u00f4ng gian h\u01a1n c\u00e1c m\u00e1y \u1ea3o (container image th\u01b0\u1eddng c\u00f3 v\u00e0i tr\u0103m th\u1eadm ch\u00ed l\u00e0 v\u00e0i MB), v\u00e0 start g\u1ea7n nh\u01b0 ngay l\u1eadp t\u1ee9c. M\u00e1y \u1ea3o (VM) l\u00e0 m\u1ed9t s\u1ef1 tr\u1eebu t\u01b0\u1ee3ng c\u1ee7a ph\u1ea7n c\u1ee9ng v\u1eadt l\u00fd chuy\u1ec3n ti\u1ebfp t\u1eeb m\u1ed9t m\u00e1y ch\u1ee7 sang nhi\u1ec1u m\u00e1y ch\u1ee7. Hypervisor cho ph\u00e9p nhi\u1ec1u m\u00e1y \u1ea3o ch\u1ea1y tr\u00ean m\u1ed9t m\u00e1y duy nh\u1ea5t. M\u1ed7i m\u00e1y \u1ea3o bao g\u1ed3m m\u1ed9t b\u1ea3n sao \u0111\u1ea7y \u0111\u1ee7 c\u1ee7a m\u1ed9t h\u1ec7 \u0111i\u1ec1u h\u00e0nh, m\u1ed9t ho\u1eb7c nhi\u1ec1u \u1ee9ng d\u1ee5ng, c\u00e1c ch\u01b0\u01a1ng tr\u00ecnh v\u00e0 th\u01b0 vi\u1ec7n c\u1ea7n thi\u1ebft - chi\u1ebfm h\u00e0ng ch\u1ee5c GB. M\u00e1y \u1ea3o c\u0169ng c\u00f3 th\u1ec3 kh\u1edfi \u0111\u1ed9ng ch\u1eadm. M\u1ed9t s\u1ed1 \u01b0u \u0111i\u1ec3m c\u1ee7a Docker Container so v\u1edbi c\u00f4ng ngh\u1ec7 \u1ea3o h\u00f3a: T\u1ea1o v\u00e0 h\u1ee7y container r\u1ea5t nhanh v\u00e0 d\u1ec5 d\u00e0ng, M\u00e1y \u00e1o th\u00ec c\u1ea7n c\u00e0i \u0111\u1eb7t \u0111\u1ea7y \u0111\u1ee7 m\u1ecdi th\u1ee9 v\u00e0 c\u1ea7n nhi\u1ec1u t\u00e0i nguy\u00ean h\u1ec7 th\u1ed1ng h\u01a1n. Container nh\u1ecf g\u1ecdn, v\u00ec v\u1eady m\u00e0 tr\u00ean m\u1ed9t m\u00e1y Host s\u1ed1 container ch\u1ea1y song song v\u1edbi nhau nhi\u1ec1u h\u01a1n s\u1ed1 m\u00e1y \u00e1o ch\u1ea1y song song. L\u1ee3i \u00edch c\u1ee7a Docker bao g\u1ed3m: S\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c tr\u00ean: Windows, Linux v\u00e0 Mac OS. Very Fast trong vi\u1ec7c tri\u1ec3n khai, di chuy\u1ec3n, kh\u1edfi \u0111\u1ed9ng container B\u1ea3o m\u1eadt Lightweight (ti\u1ebft ki\u1ec7m disk & CPU) M\u00e3 ngu\u1ed3n m\u1edf H\u1ed7 tr\u1ee3 APIs \u0111\u1ec3 giao ti\u1ebfp v\u1edbi container Ph\u00f9 h\u1ee3p trong m\u00f4i tr\u01b0\u1eddng l\u00e0m vi\u1ec7c \u0111\u00f2i h\u00f2i ph\u1ea3i CIDI (Continuous Integration \u2013 Continuous Delivery) c\u00e1c d\u1ecbch v\u1ee5, ph\u00e1t tri\u1ec3n c\u1ee5c b\u1ed9, c\u00e1c \u1ee9ng d\u1ee5ng microservices. Docker architecture Docker s\u1eed d\u1ee5ng ki\u1ebfn tr\u00fac client-server . Docker client s\u1ebd giao ti\u1ebfp v\u1edbi Docker daemon \u0111\u1ec3 th\u1ef1c hi\u1ec7n c\u00e1c c\u00f4ng vi\u1ec7c building , running v\u00e0 distributing c\u00e1c Docker Container . Docker client v\u00e0 Docker daemon c\u00f3 th\u1ec3 ch\u1ea1y c\u00f9ng tr\u00ean m\u1ed9t h\u1ec7 th\u1ed1ng ho\u1eb7c ta c\u00f3 th\u1ec3 k\u1ebft n\u1ed1i m\u1ed9t Docker client t\u1edbi m\u1ed9t remote Docker daemon. Docker client v\u00e0 Docker daemon li\u00ean l\u1ea1c v\u1edbi nhau b\u1eb1ng vi\u1ec7c s\u1eed d\u1ee5ng REST API th\u00f4ng qua UNIX sockets ho\u1eb7c network interfaces . M\u1ed9t Docker client kh\u00e1c l\u00e0 Docker Compose , cho ph\u00e9p ta \u0111\u1ecbnh ngh\u0129a v\u00e0 run multi-container cho Docker application Docker daemon Docker daemon (dockerd ) s\u1ebd listens c\u00e1c request t\u1eeb Docker API v\u00e0 qu\u1ea3n l\u00fd Docker objects bao g\u1ed3m images , containers , networks v\u00e0 volumes . M\u1ed9t Docker daemon c\u0169ng c\u00f3 th\u1ec3 li\u00ean l\u1ea1c v\u1edbi c\u00e1c daemons kh\u00e1c \u0111\u1ec3 qu\u1ea3n l\u00fd Docker services . Docker client Docker client (docker ) l\u00e0 n\u01a1i \u0111\u1ec3 Docker users t\u01b0\u01a1ng t\u00e1c, giao ti\u1ebfp, l\u00e0m vi\u1ec7c v\u1edbi Docker. Khi s\u1eed d\u1ee5ng m\u1ed9 c\u00e2u l\u1ec7nh ch\u1eb3ng h\u1ea1n nh\u01b0 docker run th\u00ec client s\u1ebd g\u1eedi c\u00e2u l\u1ec7nh t\u1edbi dockerd \u0111\u1ec3 th\u1ef1c hi\u1ec7n c\u00e2u l\u1ec7nh \u0111\u00f3. C\u00e1c c\u00e2u l\u1ec7nh t\u1eeb Docker client s\u1eed d\u1ee5ng Docker API v\u00e0 c\u00f3 th\u1ec3 giao ti\u1ebfp v\u1edbi nhi\u1ec1u Docker daemon . Docker desktop Docker Desktop l\u00e0 m\u1ed9t \u1ee9ng d\u1ee5ng cho m\u00f4i tr\u01b0\u1eddng Mac ho\u1eb7c Windows, cho ph\u00e9p x\u00e2y d\u1ef1ng v\u00e0 chia s\u1ebb c\u00e1c containerized applications v\u00e0 microservices . Docker Desktop bao g\u1ed3m Docker daemon (dockerd), Docker client (docker), Docker Compose, Docker Content Trust, Kubernetes v\u00e0 Credential Helper. Docker registries Docker Registry l\u00e0 n\u01a1i l\u01b0u tr\u1eef c\u00e1c Docker Image, n\u00f3 c\u00f3 th\u1ec3 l\u00e0 m\u00e1y ch\u1ee7 online \u0111\u01b0\u1ee3c cung c\u1ea5p b\u1edfi c\u00e1c nh\u00e0 cung c\u1ea5p ho\u1eb7c do ch\u00ednh c\u00e1c c\u00f4ng ty t\u1ef1 d\u1ef1ng v\u00e0 \u0111\u1ec1u \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef tr\u00ean DockerHub v\u1edbi hai ch\u1ebf \u0111\u1ed9 l\u00e0 private v\u00e0 public . L\u00e0 n\u01a1i cho ph\u00e9p chia s\u1ebb c\u00e1c image template \u0111\u1ec3 s\u1eed d\u1ee5ng trong qu\u00e1 tr\u00ecnh l\u00e0m vi\u1ec7c v\u1edbi Docker. C\u1ee5 th\u1ec3, khi s\u1eed d\u1ee5ng l\u1ec7nh docker pull ho\u1eb7c docker run , c\u00e1c image c\u1ea7n thi\u1ebft s\u1ebd \u0111\u01b0\u1ee3c pull v\u1ec1 t\u1eeb Docker Registry. V\u00e0 khi s\u1eed d\u1ee5ng l\u1ec7nh docker push , images\u1ebd \u0111\u01b0\u1ee3c push l\u00ean Docker Registry. Reference Docker overview Difference between VM vs Docker","title":"Docker Architecture"},{"location":"Docker/Docker-Architecture/#docker-architecture","text":"Overview Docker architecture: daemon, client, desktop registries","title":"Docker Architecture"},{"location":"Docker/Docker-Architecture/#overview","text":"Docker l\u00e0 m\u1ed9t d\u1ef1 \u00e1n open-source , cho ph\u00e9p t\u1ef1 \u0111\u1ed9ng h\u00f3a vi\u1ec7c tri\u1ec3n khai c\u00e1c \u1ee9ng d\u1ee5ng b\u00ean trong c\u00e1c Container (Linux), cung nh\u01b0 cung c\u1ea5p ch\u1ee9c n\u0103ng \u0111\u00f3ng g\u00f3i c\u00e1c th\u00e0nh ph\u1ea7n c\u1ea7n \u0111\u1ec3 ch\u1ea1y \u1ee9ng d\u1ee5ng b\u00ean trong Container. Docker cung c\u1ea5p c\u00f4ng c\u1ee5 CLI (Command Line Interface) \u0111\u1ec3 qu\u1ea3n l\u00fd v\u00f2ng \u0111\u1eddi c\u1ee7a c\u00e1c container. S\u1eed d\u1ee5ng Docker l\u00e0 c\u00e1ch nhanh ch\u00f3ng \u0111\u1ec3 ph\u00e1t tri\u1ec3n, tri\u1ec3n khai, b\u1ea3o tr\u00ec c\u00e1c \u1ee9ng d\u1ee5ng. Containers v\u00e0 Virtual machines c\u00f3 s\u1ef1 c\u00e1ch ly v\u00e0 ph\u00e2n b\u1ed5 t\u00e0i nguy\u00ean t\u01b0\u01a1ng t\u1ef1 nhau, nh\u01b0ng c\u00f3 ch\u1ee9c n\u0103ng kh\u00e1c v\u00ec c\u00e1c container \u1ea3o h\u00f3a h\u1ec7 \u0111i\u1ec1u h\u00e0nh thay v\u00ec ph\u1ea7n c\u1ee9ng. C\u00e1c container c\u00f3 t\u00ednh portable v\u00e0 hi\u1ec7u qu\u1ea3 h\u01a1n. Container l\u00e0 m\u1ed9t s\u1ef1 tr\u1eebu t\u01b0\u1ee3ng h\u00f3a \u1edf l\u1edbp \u1ee9ng d\u1ee5ng v\u00e0 code ph\u1ee5 thu\u1ed9c v\u00e0o nhau. Nhi\u1ec1u container c\u00f3 th\u1ec3 ch\u1ea1y tr\u00ean c\u00f9ng m\u1ed9t m\u00e1y v\u00e0 chia s\u1ebb kernel c\u1ee7a h\u1ec7 \u0111i\u1ec1u h\u00e0nh v\u1edbi c\u00e1c container kh\u00e1c, m\u1ed7i m\u00e1y \u0111\u1ec1u ch\u1ea1y nh\u01b0 c\u00e1c qu\u00e1 tr\u00ecnh b\u1ecb c\u00f4 l\u1eadp trong kh\u00f4ng gian ng\u01b0\u1eddi d\u00f9ng. C\u00e1c container chi\u1ebfm \u00edt kh\u00f4ng gian h\u01a1n c\u00e1c m\u00e1y \u1ea3o (container image th\u01b0\u1eddng c\u00f3 v\u00e0i tr\u0103m th\u1eadm ch\u00ed l\u00e0 v\u00e0i MB), v\u00e0 start g\u1ea7n nh\u01b0 ngay l\u1eadp t\u1ee9c. M\u00e1y \u1ea3o (VM) l\u00e0 m\u1ed9t s\u1ef1 tr\u1eebu t\u01b0\u1ee3ng c\u1ee7a ph\u1ea7n c\u1ee9ng v\u1eadt l\u00fd chuy\u1ec3n ti\u1ebfp t\u1eeb m\u1ed9t m\u00e1y ch\u1ee7 sang nhi\u1ec1u m\u00e1y ch\u1ee7. Hypervisor cho ph\u00e9p nhi\u1ec1u m\u00e1y \u1ea3o ch\u1ea1y tr\u00ean m\u1ed9t m\u00e1y duy nh\u1ea5t. M\u1ed7i m\u00e1y \u1ea3o bao g\u1ed3m m\u1ed9t b\u1ea3n sao \u0111\u1ea7y \u0111\u1ee7 c\u1ee7a m\u1ed9t h\u1ec7 \u0111i\u1ec1u h\u00e0nh, m\u1ed9t ho\u1eb7c nhi\u1ec1u \u1ee9ng d\u1ee5ng, c\u00e1c ch\u01b0\u01a1ng tr\u00ecnh v\u00e0 th\u01b0 vi\u1ec7n c\u1ea7n thi\u1ebft - chi\u1ebfm h\u00e0ng ch\u1ee5c GB. M\u00e1y \u1ea3o c\u0169ng c\u00f3 th\u1ec3 kh\u1edfi \u0111\u1ed9ng ch\u1eadm. M\u1ed9t s\u1ed1 \u01b0u \u0111i\u1ec3m c\u1ee7a Docker Container so v\u1edbi c\u00f4ng ngh\u1ec7 \u1ea3o h\u00f3a: T\u1ea1o v\u00e0 h\u1ee7y container r\u1ea5t nhanh v\u00e0 d\u1ec5 d\u00e0ng, M\u00e1y \u00e1o th\u00ec c\u1ea7n c\u00e0i \u0111\u1eb7t \u0111\u1ea7y \u0111\u1ee7 m\u1ecdi th\u1ee9 v\u00e0 c\u1ea7n nhi\u1ec1u t\u00e0i nguy\u00ean h\u1ec7 th\u1ed1ng h\u01a1n. Container nh\u1ecf g\u1ecdn, v\u00ec v\u1eady m\u00e0 tr\u00ean m\u1ed9t m\u00e1y Host s\u1ed1 container ch\u1ea1y song song v\u1edbi nhau nhi\u1ec1u h\u01a1n s\u1ed1 m\u00e1y \u00e1o ch\u1ea1y song song. L\u1ee3i \u00edch c\u1ee7a Docker bao g\u1ed3m: S\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c tr\u00ean: Windows, Linux v\u00e0 Mac OS. Very Fast trong vi\u1ec7c tri\u1ec3n khai, di chuy\u1ec3n, kh\u1edfi \u0111\u1ed9ng container B\u1ea3o m\u1eadt Lightweight (ti\u1ebft ki\u1ec7m disk & CPU) M\u00e3 ngu\u1ed3n m\u1edf H\u1ed7 tr\u1ee3 APIs \u0111\u1ec3 giao ti\u1ebfp v\u1edbi container Ph\u00f9 h\u1ee3p trong m\u00f4i tr\u01b0\u1eddng l\u00e0m vi\u1ec7c \u0111\u00f2i h\u00f2i ph\u1ea3i CIDI (Continuous Integration \u2013 Continuous Delivery) c\u00e1c d\u1ecbch v\u1ee5, ph\u00e1t tri\u1ec3n c\u1ee5c b\u1ed9, c\u00e1c \u1ee9ng d\u1ee5ng microservices.","title":"Overview"},{"location":"Docker/Docker-Architecture/#docker-architecture_1","text":"Docker s\u1eed d\u1ee5ng ki\u1ebfn tr\u00fac client-server . Docker client s\u1ebd giao ti\u1ebfp v\u1edbi Docker daemon \u0111\u1ec3 th\u1ef1c hi\u1ec7n c\u00e1c c\u00f4ng vi\u1ec7c building , running v\u00e0 distributing c\u00e1c Docker Container . Docker client v\u00e0 Docker daemon c\u00f3 th\u1ec3 ch\u1ea1y c\u00f9ng tr\u00ean m\u1ed9t h\u1ec7 th\u1ed1ng ho\u1eb7c ta c\u00f3 th\u1ec3 k\u1ebft n\u1ed1i m\u1ed9t Docker client t\u1edbi m\u1ed9t remote Docker daemon. Docker client v\u00e0 Docker daemon li\u00ean l\u1ea1c v\u1edbi nhau b\u1eb1ng vi\u1ec7c s\u1eed d\u1ee5ng REST API th\u00f4ng qua UNIX sockets ho\u1eb7c network interfaces . M\u1ed9t Docker client kh\u00e1c l\u00e0 Docker Compose , cho ph\u00e9p ta \u0111\u1ecbnh ngh\u0129a v\u00e0 run multi-container cho Docker application","title":"Docker architecture"},{"location":"Docker/Docker-Architecture/#docker-daemon","text":"Docker daemon (dockerd ) s\u1ebd listens c\u00e1c request t\u1eeb Docker API v\u00e0 qu\u1ea3n l\u00fd Docker objects bao g\u1ed3m images , containers , networks v\u00e0 volumes . M\u1ed9t Docker daemon c\u0169ng c\u00f3 th\u1ec3 li\u00ean l\u1ea1c v\u1edbi c\u00e1c daemons kh\u00e1c \u0111\u1ec3 qu\u1ea3n l\u00fd Docker services .","title":"Docker daemon"},{"location":"Docker/Docker-Architecture/#docker-client","text":"Docker client (docker ) l\u00e0 n\u01a1i \u0111\u1ec3 Docker users t\u01b0\u01a1ng t\u00e1c, giao ti\u1ebfp, l\u00e0m vi\u1ec7c v\u1edbi Docker. Khi s\u1eed d\u1ee5ng m\u1ed9 c\u00e2u l\u1ec7nh ch\u1eb3ng h\u1ea1n nh\u01b0 docker run th\u00ec client s\u1ebd g\u1eedi c\u00e2u l\u1ec7nh t\u1edbi dockerd \u0111\u1ec3 th\u1ef1c hi\u1ec7n c\u00e2u l\u1ec7nh \u0111\u00f3. C\u00e1c c\u00e2u l\u1ec7nh t\u1eeb Docker client s\u1eed d\u1ee5ng Docker API v\u00e0 c\u00f3 th\u1ec3 giao ti\u1ebfp v\u1edbi nhi\u1ec1u Docker daemon .","title":"Docker client"},{"location":"Docker/Docker-Architecture/#docker-desktop","text":"Docker Desktop l\u00e0 m\u1ed9t \u1ee9ng d\u1ee5ng cho m\u00f4i tr\u01b0\u1eddng Mac ho\u1eb7c Windows, cho ph\u00e9p x\u00e2y d\u1ef1ng v\u00e0 chia s\u1ebb c\u00e1c containerized applications v\u00e0 microservices . Docker Desktop bao g\u1ed3m Docker daemon (dockerd), Docker client (docker), Docker Compose, Docker Content Trust, Kubernetes v\u00e0 Credential Helper.","title":"Docker desktop"},{"location":"Docker/Docker-Architecture/#docker-registries","text":"Docker Registry l\u00e0 n\u01a1i l\u01b0u tr\u1eef c\u00e1c Docker Image, n\u00f3 c\u00f3 th\u1ec3 l\u00e0 m\u00e1y ch\u1ee7 online \u0111\u01b0\u1ee3c cung c\u1ea5p b\u1edfi c\u00e1c nh\u00e0 cung c\u1ea5p ho\u1eb7c do ch\u00ednh c\u00e1c c\u00f4ng ty t\u1ef1 d\u1ef1ng v\u00e0 \u0111\u1ec1u \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef tr\u00ean DockerHub v\u1edbi hai ch\u1ebf \u0111\u1ed9 l\u00e0 private v\u00e0 public . L\u00e0 n\u01a1i cho ph\u00e9p chia s\u1ebb c\u00e1c image template \u0111\u1ec3 s\u1eed d\u1ee5ng trong qu\u00e1 tr\u00ecnh l\u00e0m vi\u1ec7c v\u1edbi Docker. C\u1ee5 th\u1ec3, khi s\u1eed d\u1ee5ng l\u1ec7nh docker pull ho\u1eb7c docker run , c\u00e1c image c\u1ea7n thi\u1ebft s\u1ebd \u0111\u01b0\u1ee3c pull v\u1ec1 t\u1eeb Docker Registry. V\u00e0 khi s\u1eed d\u1ee5ng l\u1ec7nh docker push , images\u1ebd \u0111\u01b0\u1ee3c push l\u00ean Docker Registry.","title":"Docker registries"},{"location":"Docker/Docker-Architecture/#reference","text":"Docker overview Difference between VM vs Docker","title":"Reference"},{"location":"Docker/Docker-Compose/","text":"Docker Compose Overview Common Use Case Benefits Features Overview Docker Compose l\u00e0 m\u1ed9t c\u00f4ng c\u1ee5 \u0111\u1ec3 defining v\u00e0 running multi-container Docker applications . Docker-compose gi\u00fap t\u1ea1o ra c\u00e1c service m\u1ed9t c\u00e1ch t\u1ef1 \u0111\u1ed9ng, d\u00f9ng cho development, testing, staging environments, v\u00e0 c\u00f2n \u1ee9ng d\u1ee5ng trong CICD workflows. Vi\u1ec7c s\u1eed d\u1ee5ng Docker Compose \u0111\u01b0\u1ee3c t\u00f3m l\u01b0\u1ee3c trong 3 b\u01b0\u1edbc c\u01a1 b\u1ea3n sau: Khai b\u00e1o app\u2019s environment v\u1edbi Dockerfile . Khai b\u00e1o c\u00e1c services c\u1ea7n thi\u1ebft \u0111\u1ec3 ch\u1ea1y app trong docker-compose.yml . Run docker-compose up \u0111\u1ec3 Compose start v\u00e0 run app. D\u01b0\u1edbi \u0111\u00e2y l\u00e0 m\u1ed9t v\u00ed d\u1ee5 v\u1ec1 file docker-compose.yml : version: \"3.9\" # optional since v1.27.0 services: web: build: . ports: - \"5000:5000\" volumes: - .:/code - logvolume01:/var/log links: - redis redis: image: redis volumes: logvolume01: {} M\u1ed9t s\u1ed1 guidelines, syntax hay file format v\u1ec1 docker-compose.yml c\u00f3 th\u1ec3 xem full t\u1ea1i Compose file docs Compose c\u00f3 c\u00e1c commands d\u00f9ng cho vi\u1ec7c qu\u1ea3n l\u00fd lifecycle c\u1ee7a application: start , stop , v\u00e0 rebuild services view t\u1ea5t c\u1ea3 status c\u1ee7a c\u00e1c services \u0111ang ho\u1ea1t \u0111\u1ed9ng Output steam cho vi\u1ec7c ghi log c\u00e1c services \u0111ang ho\u1ea1t \u0111\u1ed9ng M\u1ed7i service ch\u1ec9 c\u1ea7n ch\u1ea1y command m\u1ed9t l\u1ea7n Common Use Cases Automated testing environments : Compose h\u1ed7 tr\u1ee3 ki\u1ec3m th\u1eed t\u1ef1 \u0111\u1ed9ng, l\u00e0 m\u1ed9t ph\u1ea7n thi\u1ebft y\u1ebfu c\u1ee7a CICD workflows v\u00ec n\u00f3 c\u00f3 th\u1ec3 d\u1ec5 d\u00e0ng create v\u00e0 destroy m\u00f4i tr\u01b0\u1eddng ki\u1ec3m th\u1eed. Development Environments. Compose l\u00e0 m\u1ed9t c\u00e1ch nhanh ch\u00f3ng v\u00e0 \u0111\u01a1n gi\u1ea3n \u0111\u1ec3 t\u1ea1o ra c\u00e1c m\u00f4i tr\u01b0\u1eddng development \u0111\u1ec3 b\u1eaft \u0111\u1ea7u ph\u00e1t tri\u1ec3n c\u00e1c d\u1ef1 \u00e1n Benefits of Docker Compose Fast and simple configuration : Nh\u1edd c\u1ea5u h\u00ecnh d\u1ef1a tr\u00ean YAML file v\u00e0 c\u00e1c bi\u1ebfn m\u00f4i tr\u01b0\u1eddng, b\u1ea1n c\u00f3 th\u1ec3 d\u1ec5 d\u00e0ng \u0111\u1ecbnh c\u1ea5u h\u00ecnh ho\u1eb7c s\u1eeda \u0111\u1ed5i c\u00e1c service c\u1ee7a \u1ee9ng d\u1ee5ng. Secure internal communication. Compose t\u1ea1o ra m\u1ed9t m\u1ea1ng cho t\u1ea5t c\u1ea3 c\u00e1c service c\u00f9ng nhau chia s\u1ebb resource. \u0110i\u1ec1u n\u00e0y b\u1ed5 sung m\u1ed9t l\u1edbp b\u1ea3o m\u1eadt chung cho \u1ee9ng d\u1ee5ng v\u00ec kh\u00f4ng th\u1ec3 truy c\u1eadp c\u00e1c service t\u1eeb b\u00ean ngo\u00e0i. Portability and CI/CD support V\u00ec t\u1ea5t c\u1ea3 c\u00e1c service \u0111\u1ec1u \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong Docker-Compose file, c\u00e1c nh\u00e0 ph\u00e1t tri\u1ec3n c\u00f3 th\u1ec3 d\u1ec5 d\u00e0ng truy c\u1eadp v\u00e0 chia s\u1ebb to\u00e0n b\u1ed9 c\u1ea5u h\u00ecnh c\u1ee7a \u1ee9ng d\u1ee5ng, g\u00f3p ph\u1ea7n thi\u1ebft l\u1eadp v\u00e0 k\u00edch ho\u1ea1t CI/CD hi\u1ec7u qu\u1ea3. Efficient use of resources Docker Compose cho ph\u00e9p l\u01b0u tr\u1eef nhi\u1ec1u m\u00f4i tr\u01b0\u1eddng bi\u1ec7t l\u1eadp tr\u00ean m\u1ed9t m\u00e1y ch\u1ee7. Ch\u1ea1y m\u1ecdi th\u1ee9 tr\u00ean m\u1ed9t ph\u1ea7n c\u1ee9ng duy nh\u1ea5t, t\u1eeb \u0111\u00f3 gi\u00fap ta ti\u1ebft ki\u1ec7m r\u1ea5t nhi\u1ec1u t\u00e0i nguy\u00ean. Ngo\u00e0i ra, t\u00ednh n\u0103ng cho ph\u00e9p l\u01b0u v\u00e0o b\u1ed9 nh\u1edb cache c\u00e1c c\u1ea5u h\u00ecnh v\u00e0 s\u1eed d\u1ee5ng l\u1ea1i c\u00e1c container hi\u1ec7n c\u00f3 c\u0169ng g\u00f3p ph\u1ea7n v\u00e0o hi\u1ec7u qu\u1ea3 s\u1eed d\u1ee5ng t\u00e0i nguy\u00ean. Features Multiple isolated environments on a single host - T\u1ea1o ra nhi\u1ec1u m\u00f4i tr\u01b0\u1eddng \u0111\u1ed9c l\u1eadp (isolated environments) trong m\u1ed9t host: Compose c\u00f4 l\u1eadp m\u00f4i tr\u01b0\u1eddng c\u1ee7a c\u00e1c project \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o ch\u00fang kh\u00f4ng b\u1ecb xung \u0111\u1ed9t l\u1eabn nhau, c\u0169ng nh\u01b0 d\u1ec5 d\u00e0ng t\u1ea1o nh\u1eefng b\u1ea3n sao c\u1ee7a m\u1ed9t m\u00f4i tr\u01b0\u1eddng n\u00e0o \u0111\u00f3. Only recreate containers that have changed - Ch\u1ec9 t\u1ea1o l\u1ea1i c\u00e1c container \u0111\u00e3 thay \u0111\u1ed5i: Compose s\u1ebd nh\u1eadn bi\u1ebft \u0111\u01b0\u1ee3c c\u00e1c service ch\u01b0a thay \u0111\u1ed5i v\u00e0 s\u1eed d\u1ee5ng l\u1ea1i c\u00e1c container t\u01b0\u01a1ng \u1ee9ng v\u1edbi service \u0111\u00f3. Preserve volume data when containers are created - B\u1ea3o to\u00e0n d\u1eef li\u1ec7u khi c\u00e1c container \u0111\u01b0\u1ee3c t\u1ea1o: Compose l\u01b0u gi\u1eef t\u1ea5t c\u1ea3 c\u00e1c volume \u0111ang \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng. Khi ch\u1ea1y l\u1ec7nh docker-compose up , n\u1ebfu Compose t\u00ecm th\u1ea5y c\u00e1c container t\u1eeb c\u00e1c l\u1ea7n ch\u1ea1y tr\u01b0\u1edbc, n\u00f3 s\u1ebd sao ch\u00e9p c\u00e1c volume t\u1eeb container c\u0169 sang container m\u1edbi. Qu\u00e1 tr\u00ecnh n\u00e0y \u0111\u1ea3m b\u1ea3o b\u1ea5t k\u1ef3 d\u1eef li\u1ec7u n\u00e0o \u0111\u01b0\u1ee3c t\u1ea1o trong c\u00e1c l\u1ea7n ch\u1ea1y tr\u01b0\u1edbc s\u1ebd kh\u00f4ng b\u1ecb m\u1ea5t. Variables and moving a composition between environments \u0110i\u1ec1u ch\u1ec9nh c\u00e1c bi\u1ebfn s\u1eed d\u1ee5ng cho c\u00e1c m\u00f4i tr\u01b0\u1eddng: Compose s\u1eed d\u1ee5ng c\u00e1c bi\u1ebfn trong Compose file \u0111\u1ec3 \u0111\u1ecbnh ngh\u0129a c\u00e1c m\u00f4i tr\u01b0\u1eddng. V\u00ec v\u1eady v\u1edbi m\u00f4i tr\u01b0\u1eddng hay ng\u01b0\u1eddi d\u00f9ng kh\u00e1c nhau, c\u00f3 th\u1ec3 \u0111i\u1ec1u ch\u1ec9nh c\u00e1c bi\u1ebfn khi s\u1eed d\u1ee5ng Compose \u0111\u1ec3 thi\u1ebft l\u1eadp c\u00e1c service. Reference Overview of Docker Compose Compose file docs What is Docker Compose","title":"Docker Compose"},{"location":"Docker/Docker-Compose/#docker-compose","text":"Overview Common Use Case Benefits Features","title":"Docker Compose"},{"location":"Docker/Docker-Compose/#overview","text":"Docker Compose l\u00e0 m\u1ed9t c\u00f4ng c\u1ee5 \u0111\u1ec3 defining v\u00e0 running multi-container Docker applications . Docker-compose gi\u00fap t\u1ea1o ra c\u00e1c service m\u1ed9t c\u00e1ch t\u1ef1 \u0111\u1ed9ng, d\u00f9ng cho development, testing, staging environments, v\u00e0 c\u00f2n \u1ee9ng d\u1ee5ng trong CICD workflows. Vi\u1ec7c s\u1eed d\u1ee5ng Docker Compose \u0111\u01b0\u1ee3c t\u00f3m l\u01b0\u1ee3c trong 3 b\u01b0\u1edbc c\u01a1 b\u1ea3n sau: Khai b\u00e1o app\u2019s environment v\u1edbi Dockerfile . Khai b\u00e1o c\u00e1c services c\u1ea7n thi\u1ebft \u0111\u1ec3 ch\u1ea1y app trong docker-compose.yml . Run docker-compose up \u0111\u1ec3 Compose start v\u00e0 run app. D\u01b0\u1edbi \u0111\u00e2y l\u00e0 m\u1ed9t v\u00ed d\u1ee5 v\u1ec1 file docker-compose.yml : version: \"3.9\" # optional since v1.27.0 services: web: build: . ports: - \"5000:5000\" volumes: - .:/code - logvolume01:/var/log links: - redis redis: image: redis volumes: logvolume01: {} M\u1ed9t s\u1ed1 guidelines, syntax hay file format v\u1ec1 docker-compose.yml c\u00f3 th\u1ec3 xem full t\u1ea1i Compose file docs Compose c\u00f3 c\u00e1c commands d\u00f9ng cho vi\u1ec7c qu\u1ea3n l\u00fd lifecycle c\u1ee7a application: start , stop , v\u00e0 rebuild services view t\u1ea5t c\u1ea3 status c\u1ee7a c\u00e1c services \u0111ang ho\u1ea1t \u0111\u1ed9ng Output steam cho vi\u1ec7c ghi log c\u00e1c services \u0111ang ho\u1ea1t \u0111\u1ed9ng M\u1ed7i service ch\u1ec9 c\u1ea7n ch\u1ea1y command m\u1ed9t l\u1ea7n","title":"Overview"},{"location":"Docker/Docker-Compose/#common-use-cases","text":"Automated testing environments : Compose h\u1ed7 tr\u1ee3 ki\u1ec3m th\u1eed t\u1ef1 \u0111\u1ed9ng, l\u00e0 m\u1ed9t ph\u1ea7n thi\u1ebft y\u1ebfu c\u1ee7a CICD workflows v\u00ec n\u00f3 c\u00f3 th\u1ec3 d\u1ec5 d\u00e0ng create v\u00e0 destroy m\u00f4i tr\u01b0\u1eddng ki\u1ec3m th\u1eed. Development Environments. Compose l\u00e0 m\u1ed9t c\u00e1ch nhanh ch\u00f3ng v\u00e0 \u0111\u01a1n gi\u1ea3n \u0111\u1ec3 t\u1ea1o ra c\u00e1c m\u00f4i tr\u01b0\u1eddng development \u0111\u1ec3 b\u1eaft \u0111\u1ea7u ph\u00e1t tri\u1ec3n c\u00e1c d\u1ef1 \u00e1n","title":"Common Use Cases"},{"location":"Docker/Docker-Compose/#benefits-of-docker-compose","text":"Fast and simple configuration : Nh\u1edd c\u1ea5u h\u00ecnh d\u1ef1a tr\u00ean YAML file v\u00e0 c\u00e1c bi\u1ebfn m\u00f4i tr\u01b0\u1eddng, b\u1ea1n c\u00f3 th\u1ec3 d\u1ec5 d\u00e0ng \u0111\u1ecbnh c\u1ea5u h\u00ecnh ho\u1eb7c s\u1eeda \u0111\u1ed5i c\u00e1c service c\u1ee7a \u1ee9ng d\u1ee5ng. Secure internal communication. Compose t\u1ea1o ra m\u1ed9t m\u1ea1ng cho t\u1ea5t c\u1ea3 c\u00e1c service c\u00f9ng nhau chia s\u1ebb resource. \u0110i\u1ec1u n\u00e0y b\u1ed5 sung m\u1ed9t l\u1edbp b\u1ea3o m\u1eadt chung cho \u1ee9ng d\u1ee5ng v\u00ec kh\u00f4ng th\u1ec3 truy c\u1eadp c\u00e1c service t\u1eeb b\u00ean ngo\u00e0i. Portability and CI/CD support V\u00ec t\u1ea5t c\u1ea3 c\u00e1c service \u0111\u1ec1u \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong Docker-Compose file, c\u00e1c nh\u00e0 ph\u00e1t tri\u1ec3n c\u00f3 th\u1ec3 d\u1ec5 d\u00e0ng truy c\u1eadp v\u00e0 chia s\u1ebb to\u00e0n b\u1ed9 c\u1ea5u h\u00ecnh c\u1ee7a \u1ee9ng d\u1ee5ng, g\u00f3p ph\u1ea7n thi\u1ebft l\u1eadp v\u00e0 k\u00edch ho\u1ea1t CI/CD hi\u1ec7u qu\u1ea3. Efficient use of resources Docker Compose cho ph\u00e9p l\u01b0u tr\u1eef nhi\u1ec1u m\u00f4i tr\u01b0\u1eddng bi\u1ec7t l\u1eadp tr\u00ean m\u1ed9t m\u00e1y ch\u1ee7. Ch\u1ea1y m\u1ecdi th\u1ee9 tr\u00ean m\u1ed9t ph\u1ea7n c\u1ee9ng duy nh\u1ea5t, t\u1eeb \u0111\u00f3 gi\u00fap ta ti\u1ebft ki\u1ec7m r\u1ea5t nhi\u1ec1u t\u00e0i nguy\u00ean. Ngo\u00e0i ra, t\u00ednh n\u0103ng cho ph\u00e9p l\u01b0u v\u00e0o b\u1ed9 nh\u1edb cache c\u00e1c c\u1ea5u h\u00ecnh v\u00e0 s\u1eed d\u1ee5ng l\u1ea1i c\u00e1c container hi\u1ec7n c\u00f3 c\u0169ng g\u00f3p ph\u1ea7n v\u00e0o hi\u1ec7u qu\u1ea3 s\u1eed d\u1ee5ng t\u00e0i nguy\u00ean.","title":"Benefits of Docker Compose"},{"location":"Docker/Docker-Compose/#features","text":"Multiple isolated environments on a single host - T\u1ea1o ra nhi\u1ec1u m\u00f4i tr\u01b0\u1eddng \u0111\u1ed9c l\u1eadp (isolated environments) trong m\u1ed9t host: Compose c\u00f4 l\u1eadp m\u00f4i tr\u01b0\u1eddng c\u1ee7a c\u00e1c project \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o ch\u00fang kh\u00f4ng b\u1ecb xung \u0111\u1ed9t l\u1eabn nhau, c\u0169ng nh\u01b0 d\u1ec5 d\u00e0ng t\u1ea1o nh\u1eefng b\u1ea3n sao c\u1ee7a m\u1ed9t m\u00f4i tr\u01b0\u1eddng n\u00e0o \u0111\u00f3. Only recreate containers that have changed - Ch\u1ec9 t\u1ea1o l\u1ea1i c\u00e1c container \u0111\u00e3 thay \u0111\u1ed5i: Compose s\u1ebd nh\u1eadn bi\u1ebft \u0111\u01b0\u1ee3c c\u00e1c service ch\u01b0a thay \u0111\u1ed5i v\u00e0 s\u1eed d\u1ee5ng l\u1ea1i c\u00e1c container t\u01b0\u01a1ng \u1ee9ng v\u1edbi service \u0111\u00f3. Preserve volume data when containers are created - B\u1ea3o to\u00e0n d\u1eef li\u1ec7u khi c\u00e1c container \u0111\u01b0\u1ee3c t\u1ea1o: Compose l\u01b0u gi\u1eef t\u1ea5t c\u1ea3 c\u00e1c volume \u0111ang \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng. Khi ch\u1ea1y l\u1ec7nh docker-compose up , n\u1ebfu Compose t\u00ecm th\u1ea5y c\u00e1c container t\u1eeb c\u00e1c l\u1ea7n ch\u1ea1y tr\u01b0\u1edbc, n\u00f3 s\u1ebd sao ch\u00e9p c\u00e1c volume t\u1eeb container c\u0169 sang container m\u1edbi. Qu\u00e1 tr\u00ecnh n\u00e0y \u0111\u1ea3m b\u1ea3o b\u1ea5t k\u1ef3 d\u1eef li\u1ec7u n\u00e0o \u0111\u01b0\u1ee3c t\u1ea1o trong c\u00e1c l\u1ea7n ch\u1ea1y tr\u01b0\u1edbc s\u1ebd kh\u00f4ng b\u1ecb m\u1ea5t. Variables and moving a composition between environments \u0110i\u1ec1u ch\u1ec9nh c\u00e1c bi\u1ebfn s\u1eed d\u1ee5ng cho c\u00e1c m\u00f4i tr\u01b0\u1eddng: Compose s\u1eed d\u1ee5ng c\u00e1c bi\u1ebfn trong Compose file \u0111\u1ec3 \u0111\u1ecbnh ngh\u0129a c\u00e1c m\u00f4i tr\u01b0\u1eddng. V\u00ec v\u1eady v\u1edbi m\u00f4i tr\u01b0\u1eddng hay ng\u01b0\u1eddi d\u00f9ng kh\u00e1c nhau, c\u00f3 th\u1ec3 \u0111i\u1ec1u ch\u1ec9nh c\u00e1c bi\u1ebfn khi s\u1eed d\u1ee5ng Compose \u0111\u1ec3 thi\u1ebft l\u1eadp c\u00e1c service.","title":"Features"},{"location":"Docker/Docker-Compose/#reference","text":"Overview of Docker Compose Compose file docs What is Docker Compose","title":"Reference"},{"location":"Docker/Docker-Objects/","text":"Docker Objects Docker Image and Dockerfile Docker Container Docker Images and Dockerfile An image is a read-only template with instructions for creating a Docker container. Often, an image is based on another image, with some additional customization D\u00f9ng \u0111\u1ec3 instructions cho vi\u1ec7c t\u1ea1o n\u00ean m\u1ed9t Docker Container . Th\u00f4ng th\u01b0\u1eddng, m\u1ed9t Docker Image s\u1ebd d\u1ef1a tr\u00ean m\u1ed9t Docker Image kh\u00e1c c\u1ed9ng v\u1edbi m\u1ed9t s\u1ed1 t\u00f9y ch\u1ec9nh v\u1ec1 c\u1ea5u h\u00ecnh. N\u00f3i ng\u1eafn g\u1ecdn l\u00e0 ch\u00fang ta c\u00f3 th\u1ec3 g\u00f3i c\u00e1c c\u00e0i \u0111\u1eb7t m\u00f4i tr\u01b0\u1eddng, OS, package, source code, libraries, dependencies, tools v\u00e0 c\u00e1c files kh\u00e1c c\u1ea7n thi\u1ebft cho m\u1ed9t \u1ee9ng d\u1ee5ng \u0111\u1ec3 ch\u1ea1y l\u1ea1i th\u00e0nh 1 c\u1ee5c duy nh\u1ea5t - m\u1ed9t file b\u1ea5t bi\u1ebfn, \u0111\u00f3 ch\u00ednh l\u00e0 Docker Image. Docker Image \u0111\u1ea1i di\u1ec7n cho m\u1ed9t application v\u00e0 virtual environment c\u1ee7a n\u00f3 t\u1ea1i m\u1ed9t th\u1eddi \u0111i\u1ec3m c\u1ee5 th\u1ec3. Khi \u0111\u00e3 c\u00f3 Docker image, ta c\u00f3 th\u1ec3 kh\u1edfi t\u1ea1o m\u1ed9t ho\u1eb7c nhi\u1ec1u cDocker container c\u00f3 m\u00f4i tr\u01b0\u1eddng b\u00ean trong ch\u00fang gi\u1ed1ng h\u1ec7t nhau t\u1eeb Docker Image n\u00e0y. Docker Image l\u01b0u tr\u1eef d\u01b0\u1edbi d\u1ea1ng read-only template , do t\u00ednh ch\u1ea5t read-only c\u1ee7a ch\u00fang, nh\u1eefng images n\u00e0y \u0111\u00f4i khi \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 snapshots Docker Image \u0111\u01b0\u1ee3c t\u1ea1o ra b\u1eb1ng c\u00e1ch vi\u1ebft v\u00e0 build Dockerfile . Dockerfile l\u00e0 m\u1ed9t script, trong \u0111\u00f3 ch\u1ee9a c\u00e1c d\u00f2ng l\u1ec7nh g\u1ed3m c\u00e1c instruction \u0111\u1ec3 Docker \u0111\u1ecdc v\u00e0 ch\u1ea1y theo c\u00e1c l\u1ec7nh \u0111\u00f3 v\u00e0 build ra Docker Image theo t\u1eebng layers Image sau \u0111\u00f3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng nh\u01b0 1 template \u0111\u1ec3 ch\u1ea1y \u1ee9ng d\u1ee5ng. \u1ee8ng d\u1ee5ng c\u1ea7n 1 m\u00f4i tr\u01b0\u1eddng \u0111\u1ed9c l\u1eadp \u0111\u1ec3 ch\u1ea1y container. M\u00f4i tr\u01b0\u1eddng n\u00e0y kh\u00f4ng ch\u1ec9 l\u00e0 1 virtual \"space\". N\u00f3 ho\u00e0n to\u00e0n d\u1ef1a tr\u00ean image t\u1ea1o ra n\u00f3. Source code, files, dependencies, v\u00e0 binary libraries, t\u1ea5t c\u1ea3 \u0111\u1ec1u \u0111\u01b0\u1ee3c ch\u1ee9a trong Docker image, t\u1eeb Docker Image n\u00e0y s\u1ebd t\u1ea1o n\u00ean c\u00e1c Docker container . Image \u0111\u00e3 \u0111\u01b0\u1ee3c build c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c push l\u00ean DockerHub . T\u1eeb DockerHub n\u00e0y, ta c\u00f3 th\u1ec3 pull \u0111\u1ebfn n\u01a1i mong mu\u1ed1n deploy Docker Image n\u00e0y. Docker Container Docker Container l\u00e0 m\u1ed9t th\u1ec3 hi\u1ec7n c\u1ee7a Docker Image nh\u01b0 m\u1ed9t run-time environment , users c\u00f3 th\u1ec3 ch\u1ea1y \u1ee9ng d\u1ee5ng v\u1edbi nh\u1eefng thao t\u00e1c c\u01a1 b\u1ea3n qua CLI nh\u01b0 start , stop , restart hay delete , ... Nh\u1eefng container n\u00e0y r\u1ea5t g\u1ecdn nh\u1eb9 v\u00e0 ch\u1ea1y \u1ee9ng d\u1ee5ng trong \u0111\u00f3 r\u1ea5t nhanh ch\u00f3ng v\u00e0 d\u1ec5 d\u00e0ng. C\u00e1c container \u0111\u00f3ng vai tr\u00f2 quan tr\u1ecdng trong vi\u1ec7c tri\u1ec3n khai h\u1ec7 th\u1ed1ng microservice nh\u1edd nh\u1eefng \u0111\u1eb7c \u0111i\u1ec3m sau c\u1ee7a m\u1ed9t Docker Container: Easy : D\u1ec5 t\u1ea1o, d\u1ec5 h\u1ee7y. C\u00e1c container d\u1ec5 d\u00e0ng t\u1ea1o, d\u1eebng , h\u1ee7y, t\u1ea1o l\u1ea1i , hay tri\u1ec3n khai l\u1ea1i v\u1edbi \u00edt b\u01b0\u1edbc thi\u1ebft l\u1eadp v\u00e0 c\u00e0i \u0111\u1eb7t nh\u1ea5t. Fast : C\u00e1c container c\u00f3 th\u1eddi gian kh\u1edfi \u0111\u1ed9ng c\u1ef1c k\u00ec nhanh n\u1ebfu t\u1ed1i \u01b0u h\u00f3a \u0111\u01b0\u1ee3c c\u00e1c service b\u00ean trong n\u00f3. Portable : Docker t\u1ea1o ra nh\u1eefng ti\u00eau chu\u1ea9n cho c\u00e1c container \u0111\u1ec3 ch\u00fang c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u1edf m\u1ecdi n\u01a1i Lightweight : C\u00e1c container d\u00f9ng chung kernel v\u1edbi m\u00e1y ch\u1ee7 do v\u1eady c\u00e1c \u1ee9ng d\u1ee5ng trong m\u1ed7i container kh\u00f4ng \u0111\u00f2i h\u1ecfi m\u1ed9t h\u1ec7 \u0111i\u1ec1u h\u00e0nh ri\u00eang, qua \u0111\u00f3 t\u0103ng hi\u1ec7u qu\u1ea3 s\u1eed d\u1ee5ng server, ti\u00eau t\u1ed1n \u00edt t\u00e0i nguy\u00ean ph\u1ea7n c\u1ee9ng h\u01a1n n\u00ean gi\u1ea3m \u0111\u01b0\u1ee3c s\u1ed1 l\u01b0\u1ee3ng server v\u00e0 gi\u1ea3m gi\u00e1 th\u00e0nh c\u1ee7a vi\u1ec7c mua license cho c\u00e1c server. Secure : Docker cung c\u1ea5p kh\u1ea3 n\u0103ng c\u00f4 l\u1eadp m\u1ea1nh m\u1ebd gi\u1eefa c\u00e1c \u1ee9ng d\u1ee5ng ch\u1ea1y b\u00ean trong v\u00e0 ngo\u00e0i docker container, do v\u1eady gi\u00fap c\u00e1c \u1ee9ng d\u1ee5ng an to\u00e0n h\u01a1n khi ch\u1ea1y b\u00ean trong c\u00e1c container. Scalable C\u00e1c container \u0111\u01b0\u1ee3c ch\u1ea1y t\u1eeb m\u1ed9t docker image l\u00e0 ho\u00e0n to\u00e0n gi\u1ed1ng nhau, do v\u1eady h\u1ec7 th\u1ed1ng microservice c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c m\u1edf r\u1ed9ng b\u1eb1ng c\u00e1ch kh\u1edfi ch\u1ea1y th\u00eam c\u00e1c container t\u1eeb docker image. H\u00ecnh d\u01b0\u1edbi \u0111\u00e2y m\u00f4 t\u1ea3 Docker life cycle , t\u1eeb l\u00fac create , run cho \u0111\u1ebfn delete : Created : Container \u0111\u01b0\u1ee3c t\u1ea1o nh\u01b0ng ch\u01b0a \u0111\u01b0\u1ee3c kh\u1edfi ch\u1ea1y Running : Container ch\u1ea1y t\u1ea5t c\u1ea3 processes b\u00ean trong n\u00f3 Paused : Container t\u1ea1m ng\u01b0ng c\u00e1c processes Stopped : Container ng\u01b0ng h\u1eb3n c\u00e1c processes nh\u01b0ng ch\u01b0a b\u1ecb x\u00f3a Deleted : Container b\u1ecb khai t\u1eed Reference Docker Objects A Beginner\u2019s Guide to Understanding and Building Docker Images Docker Container Lifecycle Management","title":"Docker Objects"},{"location":"Docker/Docker-Objects/#docker-objects","text":"Docker Image and Dockerfile Docker Container","title":"Docker Objects"},{"location":"Docker/Docker-Objects/#docker-images-and-dockerfile","text":"An image is a read-only template with instructions for creating a Docker container. Often, an image is based on another image, with some additional customization D\u00f9ng \u0111\u1ec3 instructions cho vi\u1ec7c t\u1ea1o n\u00ean m\u1ed9t Docker Container . Th\u00f4ng th\u01b0\u1eddng, m\u1ed9t Docker Image s\u1ebd d\u1ef1a tr\u00ean m\u1ed9t Docker Image kh\u00e1c c\u1ed9ng v\u1edbi m\u1ed9t s\u1ed1 t\u00f9y ch\u1ec9nh v\u1ec1 c\u1ea5u h\u00ecnh. N\u00f3i ng\u1eafn g\u1ecdn l\u00e0 ch\u00fang ta c\u00f3 th\u1ec3 g\u00f3i c\u00e1c c\u00e0i \u0111\u1eb7t m\u00f4i tr\u01b0\u1eddng, OS, package, source code, libraries, dependencies, tools v\u00e0 c\u00e1c files kh\u00e1c c\u1ea7n thi\u1ebft cho m\u1ed9t \u1ee9ng d\u1ee5ng \u0111\u1ec3 ch\u1ea1y l\u1ea1i th\u00e0nh 1 c\u1ee5c duy nh\u1ea5t - m\u1ed9t file b\u1ea5t bi\u1ebfn, \u0111\u00f3 ch\u00ednh l\u00e0 Docker Image. Docker Image \u0111\u1ea1i di\u1ec7n cho m\u1ed9t application v\u00e0 virtual environment c\u1ee7a n\u00f3 t\u1ea1i m\u1ed9t th\u1eddi \u0111i\u1ec3m c\u1ee5 th\u1ec3. Khi \u0111\u00e3 c\u00f3 Docker image, ta c\u00f3 th\u1ec3 kh\u1edfi t\u1ea1o m\u1ed9t ho\u1eb7c nhi\u1ec1u cDocker container c\u00f3 m\u00f4i tr\u01b0\u1eddng b\u00ean trong ch\u00fang gi\u1ed1ng h\u1ec7t nhau t\u1eeb Docker Image n\u00e0y. Docker Image l\u01b0u tr\u1eef d\u01b0\u1edbi d\u1ea1ng read-only template , do t\u00ednh ch\u1ea5t read-only c\u1ee7a ch\u00fang, nh\u1eefng images n\u00e0y \u0111\u00f4i khi \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 snapshots Docker Image \u0111\u01b0\u1ee3c t\u1ea1o ra b\u1eb1ng c\u00e1ch vi\u1ebft v\u00e0 build Dockerfile . Dockerfile l\u00e0 m\u1ed9t script, trong \u0111\u00f3 ch\u1ee9a c\u00e1c d\u00f2ng l\u1ec7nh g\u1ed3m c\u00e1c instruction \u0111\u1ec3 Docker \u0111\u1ecdc v\u00e0 ch\u1ea1y theo c\u00e1c l\u1ec7nh \u0111\u00f3 v\u00e0 build ra Docker Image theo t\u1eebng layers Image sau \u0111\u00f3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng nh\u01b0 1 template \u0111\u1ec3 ch\u1ea1y \u1ee9ng d\u1ee5ng. \u1ee8ng d\u1ee5ng c\u1ea7n 1 m\u00f4i tr\u01b0\u1eddng \u0111\u1ed9c l\u1eadp \u0111\u1ec3 ch\u1ea1y container. M\u00f4i tr\u01b0\u1eddng n\u00e0y kh\u00f4ng ch\u1ec9 l\u00e0 1 virtual \"space\". N\u00f3 ho\u00e0n to\u00e0n d\u1ef1a tr\u00ean image t\u1ea1o ra n\u00f3. Source code, files, dependencies, v\u00e0 binary libraries, t\u1ea5t c\u1ea3 \u0111\u1ec1u \u0111\u01b0\u1ee3c ch\u1ee9a trong Docker image, t\u1eeb Docker Image n\u00e0y s\u1ebd t\u1ea1o n\u00ean c\u00e1c Docker container . Image \u0111\u00e3 \u0111\u01b0\u1ee3c build c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c push l\u00ean DockerHub . T\u1eeb DockerHub n\u00e0y, ta c\u00f3 th\u1ec3 pull \u0111\u1ebfn n\u01a1i mong mu\u1ed1n deploy Docker Image n\u00e0y.","title":"Docker Images and Dockerfile"},{"location":"Docker/Docker-Objects/#docker-container","text":"Docker Container l\u00e0 m\u1ed9t th\u1ec3 hi\u1ec7n c\u1ee7a Docker Image nh\u01b0 m\u1ed9t run-time environment , users c\u00f3 th\u1ec3 ch\u1ea1y \u1ee9ng d\u1ee5ng v\u1edbi nh\u1eefng thao t\u00e1c c\u01a1 b\u1ea3n qua CLI nh\u01b0 start , stop , restart hay delete , ... Nh\u1eefng container n\u00e0y r\u1ea5t g\u1ecdn nh\u1eb9 v\u00e0 ch\u1ea1y \u1ee9ng d\u1ee5ng trong \u0111\u00f3 r\u1ea5t nhanh ch\u00f3ng v\u00e0 d\u1ec5 d\u00e0ng. C\u00e1c container \u0111\u00f3ng vai tr\u00f2 quan tr\u1ecdng trong vi\u1ec7c tri\u1ec3n khai h\u1ec7 th\u1ed1ng microservice nh\u1edd nh\u1eefng \u0111\u1eb7c \u0111i\u1ec3m sau c\u1ee7a m\u1ed9t Docker Container: Easy : D\u1ec5 t\u1ea1o, d\u1ec5 h\u1ee7y. C\u00e1c container d\u1ec5 d\u00e0ng t\u1ea1o, d\u1eebng , h\u1ee7y, t\u1ea1o l\u1ea1i , hay tri\u1ec3n khai l\u1ea1i v\u1edbi \u00edt b\u01b0\u1edbc thi\u1ebft l\u1eadp v\u00e0 c\u00e0i \u0111\u1eb7t nh\u1ea5t. Fast : C\u00e1c container c\u00f3 th\u1eddi gian kh\u1edfi \u0111\u1ed9ng c\u1ef1c k\u00ec nhanh n\u1ebfu t\u1ed1i \u01b0u h\u00f3a \u0111\u01b0\u1ee3c c\u00e1c service b\u00ean trong n\u00f3. Portable : Docker t\u1ea1o ra nh\u1eefng ti\u00eau chu\u1ea9n cho c\u00e1c container \u0111\u1ec3 ch\u00fang c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u1edf m\u1ecdi n\u01a1i Lightweight : C\u00e1c container d\u00f9ng chung kernel v\u1edbi m\u00e1y ch\u1ee7 do v\u1eady c\u00e1c \u1ee9ng d\u1ee5ng trong m\u1ed7i container kh\u00f4ng \u0111\u00f2i h\u1ecfi m\u1ed9t h\u1ec7 \u0111i\u1ec1u h\u00e0nh ri\u00eang, qua \u0111\u00f3 t\u0103ng hi\u1ec7u qu\u1ea3 s\u1eed d\u1ee5ng server, ti\u00eau t\u1ed1n \u00edt t\u00e0i nguy\u00ean ph\u1ea7n c\u1ee9ng h\u01a1n n\u00ean gi\u1ea3m \u0111\u01b0\u1ee3c s\u1ed1 l\u01b0\u1ee3ng server v\u00e0 gi\u1ea3m gi\u00e1 th\u00e0nh c\u1ee7a vi\u1ec7c mua license cho c\u00e1c server. Secure : Docker cung c\u1ea5p kh\u1ea3 n\u0103ng c\u00f4 l\u1eadp m\u1ea1nh m\u1ebd gi\u1eefa c\u00e1c \u1ee9ng d\u1ee5ng ch\u1ea1y b\u00ean trong v\u00e0 ngo\u00e0i docker container, do v\u1eady gi\u00fap c\u00e1c \u1ee9ng d\u1ee5ng an to\u00e0n h\u01a1n khi ch\u1ea1y b\u00ean trong c\u00e1c container. Scalable C\u00e1c container \u0111\u01b0\u1ee3c ch\u1ea1y t\u1eeb m\u1ed9t docker image l\u00e0 ho\u00e0n to\u00e0n gi\u1ed1ng nhau, do v\u1eady h\u1ec7 th\u1ed1ng microservice c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c m\u1edf r\u1ed9ng b\u1eb1ng c\u00e1ch kh\u1edfi ch\u1ea1y th\u00eam c\u00e1c container t\u1eeb docker image. H\u00ecnh d\u01b0\u1edbi \u0111\u00e2y m\u00f4 t\u1ea3 Docker life cycle , t\u1eeb l\u00fac create , run cho \u0111\u1ebfn delete : Created : Container \u0111\u01b0\u1ee3c t\u1ea1o nh\u01b0ng ch\u01b0a \u0111\u01b0\u1ee3c kh\u1edfi ch\u1ea1y Running : Container ch\u1ea1y t\u1ea5t c\u1ea3 processes b\u00ean trong n\u00f3 Paused : Container t\u1ea1m ng\u01b0ng c\u00e1c processes Stopped : Container ng\u01b0ng h\u1eb3n c\u00e1c processes nh\u01b0ng ch\u01b0a b\u1ecb x\u00f3a Deleted : Container b\u1ecb khai t\u1eed","title":"Docker Container"},{"location":"Docker/Docker-Objects/#reference","text":"Docker Objects A Beginner\u2019s Guide to Understanding and Building Docker Images Docker Container Lifecycle Management","title":"Reference"},{"location":"Docker/Environments/","text":"Environments Environment variables The .env file Environment variables Khi t\u1ea1o m\u1ed9t service b\u1ea5t k\u00ec, th\u00ec vi\u1ec7c s\u1eed d\u1ee5ng c\u00e1c environment variables l\u00e0 c\u1ea7n thi\u1ebft, gi\u00fap cho c\u00e1c service kh\u1edfi t\u1ea1o v\u00e0 ch\u1ea1y tr\u00ean environment n\u00e0o s\u1ebd s\u1eed d\u1ee5ng \u0111\u00fang environment variables \u0111\u00f3. Ch\u1eb3ng h\u1ea1n nh\u01b0 config database connection v\u1edbi c\u00e1c th\u00f4ng tin nh\u01b0 database name, user, hay thi\u1ebft l\u1eadp m\u00f4i tr\u01b0\u1eddng l\u00e0m vi\u1ec7c c\u1ee7a service \u0111\u00f3 l\u00e0 dev , test hay prod , ho\u1eb7c c\u00e1c config kh\u00e1c nh\u01b0 port, base url... th\u00ec vi\u1ec7c d\u00f9ng c\u00e1c environment variables \u0111\u1ec3 ch\u1ec9 \u0111\u1ecbnh trong c\u00e1c config service s\u1ebd s\u1eed d\u1ee5ng variables n\u00e0o. Trong Docker, environment variables c\u0169ng c\u1ea7n \u0111\u01b0\u1ee3c set khi ch\u1ea1y service trong docker container. \u0110\u1ec3 \u0111\u1ecbnh ngh\u0129a environment variables : docker run -d -t -i -e DB_NAME = 'foo' \\ -e DB_USER_NAME = 'bar' \\- e DB_PASSWORD = 'hidden' \\ -e : option \u0111\u1ec3 \u0111\u1ecbnh ngh\u0129a environment variables c\u00e1c options kh\u00e1c xem decs t\u1ea1i reference/run \u0110\u1ed1i v\u1edbi c\u00e1ch l\u00e0m n\u00e0y, l\u1ee3i \u00edch l\u00e0 gi\u00fap cho vi\u1ec7c b\u1ea3o m\u1eadt c\u00e1c variables quan tr\u1ecdng th\u00f4ng qua vi\u1ec7c ch\u1ec9 khai b\u00e1o n\u00f3 b\u1eb1ng command. Nh\u01b0ng command d\u00e0i, Docker cung c\u1ea5p c\u00e1c option \u0111\u1ec3 ch\u00fang ta d\u1ec5 d\u00e0ng \u0111\u1ecbnh ngh\u0129a c\u00e1c variable c\u1ea7n thi\u1ebft. \u0110\u00f3 l\u00e0 arg v\u00e0 environment (v\u1edbi dockerfile th\u00ec l\u00e0 ARG v\u00e0 ENV). Tuy nhi\u00ean th\u00ec c\u00f3 s\u1ef1 kh\u00e1c nhau r\u1ea5t l\u1edbn gi\u1eefa arg v\u00e0 environment \u0111\u00f3 ch\u00ednh l\u00e0 scope c\u1ee7a ch\u00fang. arg \u0111\u1ecbnh ngh\u0129a c\u00e1c bi\u1ebfn d\u00f9ng khi build image, trong khi \u0111\u00f3 environment d\u00f9ng cho l\u00fac kh\u1edfi ch\u1ea1y container. Th\u00f4ng th\u01b0\u1eddng ta s\u1eed d\u1ee5ng ARG trong dockerfile \u0111\u1ec3 ch\u1ec9 \u0111\u1ecbnh local, test, prod... v\u00e0 environment trong docker-compose . Using Environment variables in Docker-Compose S\u1eed d\u1ee5ng environment trong docker-compose, l\u1ee3i \u00edch l\u1edbn nh\u1ea5t l\u00e0 d\u1ec5 d\u00e0ng qu\u1ea3n l\u00fd c\u00e1c environment variables. \u0110\u1ecbnh ngh\u0129a environment variables b\u1eb1ng Docker-Compose nh\u01b0 sau: version: '3.1' services: db: container_name: Mongo-db image: mongo:latest restart: always volumes: - ./myData:/data/db environment: - MONGO_INITDB_DATABASE=MyDatabase - MONGODB_USER=Nya - MONGODB_PASS=secretpassword ports: - 27020:27017 \u1ede \u0111\u00e2y MONGODB_PASS \u0111\u01b0\u1ee3c \u0111\u1eb7t l\u00e0 secretpassword nh\u01b0ng n\u00f3 ch\u01b0a th\u1ef1c s\u1ef1 secret , kh\u00e1 l\u00e0 risk. Docker cho ph\u00e9p ch\u00fang ta kh\u00f4ng c\u1ea7n ch\u1ec9 \u0111\u1ecbnh value cho c\u00e1c environment variables. \u0110i\u1ec1u n\u00e0y r\u1ea5t h\u1eefu \u00edch cho vi\u1ec7c b\u1ea3o m\u1eadt nh\u1eefng th\u00f4ng tin quan tr\u1ecdng. V\u1edbi nh\u1eefng g\u00ec kh\u00f4ng c\u1ea7n thi\u1ebft, ch\u00fang ta c\u1ee9 set value c\u00f2n nh\u1eefng g\u00ec quan tr\u1ecdng, ch\u00fang ta s\u1ebd gi\u1ea5u \u0111i: environment: MONGO_INITDB_DATABASE=MyDatabase MONGODB_USER MONGODB_PASS V\u1edbi vi\u1ec7c setting nh\u01b0 th\u1ebf n\u00e0y, n\u1ebfu ai c\u00f3 \u0111\u01b0\u1ee3c docker compose file c\u0169ng kh\u00f4ng th\u1ec3 connect t\u1edbi DB v\u00ec thi\u1ebfu th\u00f4ng tin user v\u00e0 password. L\u00fac n\u00e0y compose s\u1ebd l\u1ea5y value c\u1ee7a c\u00e1c key MONGODB_USER v\u00e0 MONGODB_PASS t\u1eeb command line: docker run -e MONGODB_USER MONGODB_PASS ... V\u1edbi c\u00e1ch l\u00e0m n\u00e0y, bi\u1ebfn MONGODB_USER v\u00e0 MONGODB_PASS \u0111\u1ec1u ph\u1ea3i tr\u00f9ng t\u00ean v\u1edbi host variables tr\u00ean command, n\u1ebfu kh\u00f4ng Docker s\u1ebd ko l\u1ea5y \u0111\u01b0\u1ee3c value c\u1ee7a n\u00f3. Ngo\u00e0i ra, Docker cung c\u1ea5p m\u1ed9t syntax \u0111\u1ec5 d\u1ec5 d\u00e0ng ch\u1ec9 \u0111\u1ecbnh variables trong compose file h\u01a1n, nh\u00ecn chuy\u00ean nghi\u1ec7p h\u01a1n. \u0110\u00f3 l\u00e0 ${VARIABLE_NAME} . L\u00fac n\u00e0y config c\u1ee7a Docker-Compose nh\u01b0 sau: environment: MONGO_INITDB_DATABASE=MyDatabase MONGODB_USER=${USER} MONGODB_PASS=${PASS} V\u1edbi c\u00e1ch config n\u00e0y, ta c\u00f3 th\u1ec3 ch\u1ec9 \u0111\u1ecbnh b\u1ea5t c\u1ee9 host variable n\u00e0o m\u00e0 kh\u00f4ng c\u1ea7n ph\u1ea3i s\u1eed d\u1ee5ng bi\u1ebfn c\u00f9ng t\u00ean n\u1eefa. T\u1eeb \u0111\u00f3 t\u0103ng t\u00ednh linh \u0111\u1ed9ng cho m\u1ed9t s\u1ed1 config, ch\u1eb3ng h\u1ea1n nh\u01b0 image version. The .env file Vi\u1ec7c s\u1eed d\u1ee5ng environment option c\u0169ng c\u00f3 c\u00e1c downside, \u0111i\u1ec3n h\u00ecnh l\u00e0 config d\u00e0i d\u00f2ng, n\u1ebfu c\u00f3 nhi\u1ec1u Docker-compose file, m\u00ecnh \u0111\u1ed5i variables 1 ph\u00e1t l\u00e0 ph\u1ea3i l\u00f4i Docker-compose file h\u1ebft ra \u0111\u1ec3 edit. Docker cung c\u1ea5p cho ch\u00fang ta m\u1ed9t c\u00e1ch setting d\u1ec5 d\u00e0ng h\u01a1n l\u00e0 s\u1eed d\u1ee5ng .env file \u0111\u1ec3 thay th\u1ebf cho host variable. Docker compose m\u1eb7c \u0111\u1ecbnh s\u1ebd t\u1ef1 \u0111\u1ed9ng t\u00ecm ki\u1ebfm c\u00e1c key-value pair trong file .env \u1edf c\u00f9ng th\u01b0 m\u1ee5c v\u1edbi compose file. V\u00ed d\u1ee5 v\u1ec1 .env file: MONGO_INITDB_DATABASE=MyDatabase MONGODB_USER=Nya MONGODB_PASS=secretpassword KEY=value C\u00e1c bi\u1ebfn n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong Docker-Compose file th\u00f4ng qua syntax ${VARIABLE} nh\u01b0 \u0111\u00e3 \u0111\u1ec1 c\u1eadp \u1edf tr\u00ean Syntax khi t\u1ea1o c\u00e1c variables trong .env file: M\u1ed7i variable s\u1ebd t\u01b0\u01a1ng \u1ee9ng v\u1edbi 1 d\u00f2ng v\u00e0 ph\u1ea3i theo format KEY=value . KEY kh\u00f4ng b\u1eaft bu\u1ed9c ph\u1ea3i l\u00e0 uppercase, n\u00ean ghi uppercase cho tr\u01b0\u1eddng h\u1ee3p bi\u1ebfn \u0111\u00f3 l\u00e0 m\u1ed9t constant. S\u1ebd kh\u00f4ng c\u00f3 space n\u00e0o gi\u1eefa = v\u00e0 value . N\u1ebfu c\u00f3 th\u00ec d\u1ea5u space s\u1ebd l\u00e0 m\u1ed9t ph\u1ea7n c\u1ee7a value. T\u01b0\u01a1ng t\u1ef1 s\u1ebd kh\u00f4ng c\u00f3 x\u1eed l\u00fd \u0111\u1eb7c bi\u1ec7t n\u00e0o cho quote mark - ' hay double quotes - \" . N\u00f3 c\u0169ng s\u1ebd \u0111\u01b0\u1ee3c t\u00ednh l\u00e0 m\u1ed9t ph\u1ea7n c\u1ee7a value lu\u00f4n. N\u1ebfu mu\u1ed1n th\u00eam comment th\u00ec t\u1ea1o d\u00f2ng m\u1edbi b\u1eaft \u0111\u1ea7u b\u1eb1ng d\u1ea5u #. D\u00f2ng tr\u1ed1ng s\u1ebd t\u1ef1 \u0111\u1ed9ng b\u1ecf qua. Theo m\u1eb7c \u0111\u1ecbnh, Docker-Compose s\u1ebd ch\u1ec9 \u0111\u1ecdc th\u00f4ng tin t\u1eeb file .env \u1edf c\u00f9ng th\u01b0 m\u1ee5c v\u1edbi compose file. Trong tr\u01b0\u1eddng h\u1ee3 ta c\u00f3 nhi\u1ec1u file environment nh\u01b0 .env.ci , .env.dev , .env.prod hay db.env , microservices.env th\u00ec kh\u00f4ng th\u1ec3 d\u00f9ng chung m\u1ed9t .env file cho nhi\u1ec1u m\u00f4i tr\u01b0\u1eddng \u0111\u01b0\u1ee3c. Docker cung c\u1ea5p option l\u00e0 env_file \u0111\u1ec3 ch\u1ec9 \u0111\u1ecbnh c\u00e1c file environment c\u1ea7n s\u1eed d\u1ee5ng d\u00f9ng n\u00f3 \u1edf command nh\u01b0 sau: docker-compose --env-file ./config/.env.dev up Reference Docker ARG vs ENV Using variables in Docker-Compose Declare default environment variables in file Environment variables in Compose","title":"Environments"},{"location":"Docker/Environments/#environments","text":"Environment variables The .env file","title":"Environments"},{"location":"Docker/Environments/#environment-variables","text":"Khi t\u1ea1o m\u1ed9t service b\u1ea5t k\u00ec, th\u00ec vi\u1ec7c s\u1eed d\u1ee5ng c\u00e1c environment variables l\u00e0 c\u1ea7n thi\u1ebft, gi\u00fap cho c\u00e1c service kh\u1edfi t\u1ea1o v\u00e0 ch\u1ea1y tr\u00ean environment n\u00e0o s\u1ebd s\u1eed d\u1ee5ng \u0111\u00fang environment variables \u0111\u00f3. Ch\u1eb3ng h\u1ea1n nh\u01b0 config database connection v\u1edbi c\u00e1c th\u00f4ng tin nh\u01b0 database name, user, hay thi\u1ebft l\u1eadp m\u00f4i tr\u01b0\u1eddng l\u00e0m vi\u1ec7c c\u1ee7a service \u0111\u00f3 l\u00e0 dev , test hay prod , ho\u1eb7c c\u00e1c config kh\u00e1c nh\u01b0 port, base url... th\u00ec vi\u1ec7c d\u00f9ng c\u00e1c environment variables \u0111\u1ec3 ch\u1ec9 \u0111\u1ecbnh trong c\u00e1c config service s\u1ebd s\u1eed d\u1ee5ng variables n\u00e0o. Trong Docker, environment variables c\u0169ng c\u1ea7n \u0111\u01b0\u1ee3c set khi ch\u1ea1y service trong docker container. \u0110\u1ec3 \u0111\u1ecbnh ngh\u0129a environment variables : docker run -d -t -i -e DB_NAME = 'foo' \\ -e DB_USER_NAME = 'bar' \\- e DB_PASSWORD = 'hidden' \\ -e : option \u0111\u1ec3 \u0111\u1ecbnh ngh\u0129a environment variables c\u00e1c options kh\u00e1c xem decs t\u1ea1i reference/run \u0110\u1ed1i v\u1edbi c\u00e1ch l\u00e0m n\u00e0y, l\u1ee3i \u00edch l\u00e0 gi\u00fap cho vi\u1ec7c b\u1ea3o m\u1eadt c\u00e1c variables quan tr\u1ecdng th\u00f4ng qua vi\u1ec7c ch\u1ec9 khai b\u00e1o n\u00f3 b\u1eb1ng command. Nh\u01b0ng command d\u00e0i, Docker cung c\u1ea5p c\u00e1c option \u0111\u1ec3 ch\u00fang ta d\u1ec5 d\u00e0ng \u0111\u1ecbnh ngh\u0129a c\u00e1c variable c\u1ea7n thi\u1ebft. \u0110\u00f3 l\u00e0 arg v\u00e0 environment (v\u1edbi dockerfile th\u00ec l\u00e0 ARG v\u00e0 ENV). Tuy nhi\u00ean th\u00ec c\u00f3 s\u1ef1 kh\u00e1c nhau r\u1ea5t l\u1edbn gi\u1eefa arg v\u00e0 environment \u0111\u00f3 ch\u00ednh l\u00e0 scope c\u1ee7a ch\u00fang. arg \u0111\u1ecbnh ngh\u0129a c\u00e1c bi\u1ebfn d\u00f9ng khi build image, trong khi \u0111\u00f3 environment d\u00f9ng cho l\u00fac kh\u1edfi ch\u1ea1y container. Th\u00f4ng th\u01b0\u1eddng ta s\u1eed d\u1ee5ng ARG trong dockerfile \u0111\u1ec3 ch\u1ec9 \u0111\u1ecbnh local, test, prod... v\u00e0 environment trong docker-compose .","title":"Environment variables"},{"location":"Docker/Environments/#using-environment-variables-in-docker-compose","text":"S\u1eed d\u1ee5ng environment trong docker-compose, l\u1ee3i \u00edch l\u1edbn nh\u1ea5t l\u00e0 d\u1ec5 d\u00e0ng qu\u1ea3n l\u00fd c\u00e1c environment variables. \u0110\u1ecbnh ngh\u0129a environment variables b\u1eb1ng Docker-Compose nh\u01b0 sau: version: '3.1' services: db: container_name: Mongo-db image: mongo:latest restart: always volumes: - ./myData:/data/db environment: - MONGO_INITDB_DATABASE=MyDatabase - MONGODB_USER=Nya - MONGODB_PASS=secretpassword ports: - 27020:27017 \u1ede \u0111\u00e2y MONGODB_PASS \u0111\u01b0\u1ee3c \u0111\u1eb7t l\u00e0 secretpassword nh\u01b0ng n\u00f3 ch\u01b0a th\u1ef1c s\u1ef1 secret , kh\u00e1 l\u00e0 risk. Docker cho ph\u00e9p ch\u00fang ta kh\u00f4ng c\u1ea7n ch\u1ec9 \u0111\u1ecbnh value cho c\u00e1c environment variables. \u0110i\u1ec1u n\u00e0y r\u1ea5t h\u1eefu \u00edch cho vi\u1ec7c b\u1ea3o m\u1eadt nh\u1eefng th\u00f4ng tin quan tr\u1ecdng. V\u1edbi nh\u1eefng g\u00ec kh\u00f4ng c\u1ea7n thi\u1ebft, ch\u00fang ta c\u1ee9 set value c\u00f2n nh\u1eefng g\u00ec quan tr\u1ecdng, ch\u00fang ta s\u1ebd gi\u1ea5u \u0111i: environment: MONGO_INITDB_DATABASE=MyDatabase MONGODB_USER MONGODB_PASS V\u1edbi vi\u1ec7c setting nh\u01b0 th\u1ebf n\u00e0y, n\u1ebfu ai c\u00f3 \u0111\u01b0\u1ee3c docker compose file c\u0169ng kh\u00f4ng th\u1ec3 connect t\u1edbi DB v\u00ec thi\u1ebfu th\u00f4ng tin user v\u00e0 password. L\u00fac n\u00e0y compose s\u1ebd l\u1ea5y value c\u1ee7a c\u00e1c key MONGODB_USER v\u00e0 MONGODB_PASS t\u1eeb command line: docker run -e MONGODB_USER MONGODB_PASS ... V\u1edbi c\u00e1ch l\u00e0m n\u00e0y, bi\u1ebfn MONGODB_USER v\u00e0 MONGODB_PASS \u0111\u1ec1u ph\u1ea3i tr\u00f9ng t\u00ean v\u1edbi host variables tr\u00ean command, n\u1ebfu kh\u00f4ng Docker s\u1ebd ko l\u1ea5y \u0111\u01b0\u1ee3c value c\u1ee7a n\u00f3. Ngo\u00e0i ra, Docker cung c\u1ea5p m\u1ed9t syntax \u0111\u1ec5 d\u1ec5 d\u00e0ng ch\u1ec9 \u0111\u1ecbnh variables trong compose file h\u01a1n, nh\u00ecn chuy\u00ean nghi\u1ec7p h\u01a1n. \u0110\u00f3 l\u00e0 ${VARIABLE_NAME} . L\u00fac n\u00e0y config c\u1ee7a Docker-Compose nh\u01b0 sau: environment: MONGO_INITDB_DATABASE=MyDatabase MONGODB_USER=${USER} MONGODB_PASS=${PASS} V\u1edbi c\u00e1ch config n\u00e0y, ta c\u00f3 th\u1ec3 ch\u1ec9 \u0111\u1ecbnh b\u1ea5t c\u1ee9 host variable n\u00e0o m\u00e0 kh\u00f4ng c\u1ea7n ph\u1ea3i s\u1eed d\u1ee5ng bi\u1ebfn c\u00f9ng t\u00ean n\u1eefa. T\u1eeb \u0111\u00f3 t\u0103ng t\u00ednh linh \u0111\u1ed9ng cho m\u1ed9t s\u1ed1 config, ch\u1eb3ng h\u1ea1n nh\u01b0 image version.","title":"Using Environment variables in Docker-Compose"},{"location":"Docker/Environments/#the-env-file","text":"Vi\u1ec7c s\u1eed d\u1ee5ng environment option c\u0169ng c\u00f3 c\u00e1c downside, \u0111i\u1ec3n h\u00ecnh l\u00e0 config d\u00e0i d\u00f2ng, n\u1ebfu c\u00f3 nhi\u1ec1u Docker-compose file, m\u00ecnh \u0111\u1ed5i variables 1 ph\u00e1t l\u00e0 ph\u1ea3i l\u00f4i Docker-compose file h\u1ebft ra \u0111\u1ec3 edit. Docker cung c\u1ea5p cho ch\u00fang ta m\u1ed9t c\u00e1ch setting d\u1ec5 d\u00e0ng h\u01a1n l\u00e0 s\u1eed d\u1ee5ng .env file \u0111\u1ec3 thay th\u1ebf cho host variable. Docker compose m\u1eb7c \u0111\u1ecbnh s\u1ebd t\u1ef1 \u0111\u1ed9ng t\u00ecm ki\u1ebfm c\u00e1c key-value pair trong file .env \u1edf c\u00f9ng th\u01b0 m\u1ee5c v\u1edbi compose file. V\u00ed d\u1ee5 v\u1ec1 .env file: MONGO_INITDB_DATABASE=MyDatabase MONGODB_USER=Nya MONGODB_PASS=secretpassword KEY=value C\u00e1c bi\u1ebfn n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong Docker-Compose file th\u00f4ng qua syntax ${VARIABLE} nh\u01b0 \u0111\u00e3 \u0111\u1ec1 c\u1eadp \u1edf tr\u00ean Syntax khi t\u1ea1o c\u00e1c variables trong .env file: M\u1ed7i variable s\u1ebd t\u01b0\u01a1ng \u1ee9ng v\u1edbi 1 d\u00f2ng v\u00e0 ph\u1ea3i theo format KEY=value . KEY kh\u00f4ng b\u1eaft bu\u1ed9c ph\u1ea3i l\u00e0 uppercase, n\u00ean ghi uppercase cho tr\u01b0\u1eddng h\u1ee3p bi\u1ebfn \u0111\u00f3 l\u00e0 m\u1ed9t constant. S\u1ebd kh\u00f4ng c\u00f3 space n\u00e0o gi\u1eefa = v\u00e0 value . N\u1ebfu c\u00f3 th\u00ec d\u1ea5u space s\u1ebd l\u00e0 m\u1ed9t ph\u1ea7n c\u1ee7a value. T\u01b0\u01a1ng t\u1ef1 s\u1ebd kh\u00f4ng c\u00f3 x\u1eed l\u00fd \u0111\u1eb7c bi\u1ec7t n\u00e0o cho quote mark - ' hay double quotes - \" . N\u00f3 c\u0169ng s\u1ebd \u0111\u01b0\u1ee3c t\u00ednh l\u00e0 m\u1ed9t ph\u1ea7n c\u1ee7a value lu\u00f4n. N\u1ebfu mu\u1ed1n th\u00eam comment th\u00ec t\u1ea1o d\u00f2ng m\u1edbi b\u1eaft \u0111\u1ea7u b\u1eb1ng d\u1ea5u #. D\u00f2ng tr\u1ed1ng s\u1ebd t\u1ef1 \u0111\u1ed9ng b\u1ecf qua. Theo m\u1eb7c \u0111\u1ecbnh, Docker-Compose s\u1ebd ch\u1ec9 \u0111\u1ecdc th\u00f4ng tin t\u1eeb file .env \u1edf c\u00f9ng th\u01b0 m\u1ee5c v\u1edbi compose file. Trong tr\u01b0\u1eddng h\u1ee3 ta c\u00f3 nhi\u1ec1u file environment nh\u01b0 .env.ci , .env.dev , .env.prod hay db.env , microservices.env th\u00ec kh\u00f4ng th\u1ec3 d\u00f9ng chung m\u1ed9t .env file cho nhi\u1ec1u m\u00f4i tr\u01b0\u1eddng \u0111\u01b0\u1ee3c. Docker cung c\u1ea5p option l\u00e0 env_file \u0111\u1ec3 ch\u1ec9 \u0111\u1ecbnh c\u00e1c file environment c\u1ea7n s\u1eed d\u1ee5ng d\u00f9ng n\u00f3 \u1edf command nh\u01b0 sau: docker-compose --env-file ./config/.env.dev up","title":"The .env file"},{"location":"Docker/Environments/#reference","text":"Docker ARG vs ENV Using variables in Docker-Compose Declare default environment variables in file Environment variables in Compose","title":"Reference"},{"location":"Docker/Network/","text":"Network Network and Network drivers Networking with standalone containers Port Network Docker network s\u1ebd \u0111\u1ea3m nhi\u1ec7m nhi\u1ec7m v\u1ee5 k\u1ebft n\u1ed1i m\u1ea1ng gi\u1eefa c\u00e1c container v\u1edbi nhau, k\u1ebft n\u1ed1i gi\u1eefa container v\u1edbi b\u00ean ngo\u00e0i, c\u0169ng nh\u01b0 k\u1ebft n\u1ed1i gi\u1eefa c\u00e1c c\u1ee5m (swarm) docker containers. Khi c\u00e1c container c\u00f3 c\u00f9ng m\u1ed9t network, ch\u00fang c\u00f3 th\u1ec3 li\u00ean l\u1ea1c v\u1edbi nhau qua name c\u1ee7a container v\u00e0 port c\u1ee7a container tr\u00ean network \u0111\u00f3. Network drivers H\u1ec7 th\u1ed1ng Docker Network l\u00e0 d\u1ea1ng plugable , s\u1eed d\u1ee5ng drivers . H\u1ea7u h\u1ebft c\u00e1c driver \u0111\u01b0\u1ee3c cung c\u1ea5p m\u1eb7c \u0111\u1ecbnh, v\u00e0 c\u00e1c drivers n\u00e0y c\u00f3 th\u1ec3 cung c\u1ea5p h\u1ea7u h\u1ebft c\u00e1c ch\u1ee9c n\u0103ng m\u00e0 m\u1ed9t h\u1ec7 th\u1ed1ng m\u1ea1ng b\u00ecnh th\u01b0\u1eddng c\u1ea7n c\u00f3: bridge : \u0110\u00e2y l\u00e0 driver m\u1ea1ng default c\u1ee7a Docker. N\u1ebfu kh\u00f4ng ch\u1ec9 \u0111\u1ecbnh driver th\u00ec bridge s\u1ebd l\u00e0 driver m\u1ea1ng m\u1eb7c \u0111\u1ecbnh khi kh\u1edfi t\u1ea1o. Bridge l\u00e0 driver t\u1ed1t nh\u1ea5t cho vi\u1ec7c giao ti\u1ebfp multiple containers \u1edf m\u1ed9t host \u0111\u01a1n host : D\u00f9ng khi container c\u1ea7n giao ti\u1ebfp v\u1edbi host v\u00e0 s\u1eed d\u1ee5ng lu\u00f4n m\u1ea1ng \u1edf host, v\u00ec s\u1eed d\u1ee5ng m\u1ea1ng c\u1ee7a m\u00e1y ch\u1ee7 \u0111ang ch\u1ea1y n\u00ean kh\u00f4ng c\u00f2n l\u1edbp m\u1ea1ng n\u00e0o gi\u1eefa container v\u1edbi Docker Host ph\u00f9 h\u1ee3p khi c\u1ea7n connect t\u1eeb container ra th\u1eb3ng ngo\u00e0i host overlay : Overlay network t\u1ea1o m\u1ed9t m\u1ea1ng ph\u00e2n t\u00e1n gi\u1eefa nhi\u1ec1u m\u00e1y ch\u1ee7 Docker. K\u1ebft n\u1ed1i nhi\u1ec1u Docker daemons v\u1edbi nhau v\u00e0 cho ph\u00e9p c\u00e1c c\u1ee5m services giao ti\u1ebfp v\u1edbi nhau. Ch\u00fang ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng overlay network \u0111\u1ec3 giao ti\u1ebfp d\u1ec5 d\u00e0ng gi\u1eefa c\u1ee5m c\u00e1c services v\u1edbi m\u1ed9t container \u0111\u1ed9c l\u1eadp, hay gi\u1eefa 2 container v\u1edbi nhau \u1edf kh\u00e1c m\u00e1y ch\u1ee7 Docker daemons. ipvlan : Cung c\u1ea5p to\u00e0n quy\u1ec1n ki\u1ec3m so\u00e1t \u0111\u1ed1i v\u1edbi c\u1ea3 \u0111\u1ecba ch\u1ec9 IPv4 v\u00e0 IPv6. macvlan : Cho ph\u00e9p g\u00e1n \u0111\u1ecba ch\u1ec9 MAC cho container, \u0111i\u1ec1u n\u00e0y l\u00e0m cho m\u1ed7i container nh\u01b0 l\u00e0 m\u1ed9t thi\u1ebft b\u1ecb v\u1eadt l\u00fd trong m\u1ea1ng. Docker daemon \u0111\u1ecbnh tuy\u1ebfn truy c\u1eadp t\u1edbi container b\u1edfi \u0111\u1ecba ch\u1ec9 MAC. S\u1eed d\u1ee5ng driver macvlan l\u00e0 l\u1ef1a chon t\u1ed1t khi c\u00e1c \u1ee9ng d\u1ee5ng kh\u00e1c c\u1ea7n ph\u1ea3i connect \u0111\u1ebfn theo \u0111\u1ecba ch\u1ec9 v\u1eadt l\u00fd h\u01a1n l\u00e0 th\u00f4ng qua c\u00e1c l\u1edbp m\u1ea1ng c\u1ee7a m\u00e1y ch\u1ee7. none : V\u1edbi container kh\u00f4ng c\u1ea7n networking ho\u1eb7c c\u1ea7n disable \u0111i t\u1ea5t c\u1ea3 m\u1ecdi networking, ch\u00fang ta s\u1ebd ch\u1ecdn driver n\u00e0y. Networking with standalone containers Communicate Between Docker Containers Tr\u00ean c\u00f9ng m\u1ed9t host, c\u00e1c container c\u00f3 th\u1ec3 communicate v\u1edbi nhau. Th\u00f4ng th\u01b0\u1eddng ta d\u00f9ng \u0111\u1ecba ch\u1ec9 IP \u0111\u1ec3 network routing c\u00e1c g\u00f3i tin gi\u1eefa c\u00e1c m\u00e1y v\u1edbi nhay. Tuy nhi\u00ean, c\u00e1c container \u0111\u01b0\u1ee3c c\u1ea5p ip \u0111\u1ed9ng n\u00ean n\u00f3 c\u00f3 th\u1ec3 thay \u0111\u1ed5i, d\u1eabn \u0111\u1ebfn nhi\u1ec1u kh\u00f3 kh\u0103n. V\u00ec v\u1eady, thay v\u00ec d\u00f9ng \u0111\u1ecba ch\u1ec9 ip, ta c\u00f3 th\u1ec3 d\u00f9ng name ho\u1eb7c id c\u1ee7a c\u00e1c container communicate v\u1edbi nhau. Trong tr\u01b0\u1eddng h\u1ee3p s\u1eed d\u1ee5ng default bridge network th\u00ec ta khai b\u00e1o th\u00eam l\u1ec7nh --link=name_container . Trong tr\u01b0\u1eddng h\u1ee3p s\u1eed d\u1ee5ng user-defined network th\u00ec ta kh\u00f4ng c\u1ea7n ph\u1ea3i link n\u1eefa m\u00e0 s\u1ebd t\u1ef1 config. Use the default bridge network Khi ch\u00fang ta c\u00e0i \u0111\u1eb7t Docker, nh\u1eefng thi\u1ebft l\u1eadp sau s\u1ebd \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n: - Virtual bridge docker0 s\u1ebd \u0111\u01b0\u1ee3c t\u1ea1o ra - Docker t\u00ecm m\u1ed9t subnet ch\u01b0a \u0111\u01b0\u1ee3c d\u00f9ng tr\u00ean host v\u00e0 g\u00e1n m\u1ed9t \u0111\u1ecba ch\u1ec9 cho docker0 Sau \u0111\u00f3, khi ch\u00fang ta kh\u1edfi \u0111\u1ed9ng m\u1ed9t container (v\u1edbi bridge network), m\u1ed9t veth (Virtual Ethernet) s\u1ebd \u0111\u01b0\u1ee3c t\u1ea1o ra n\u1ed1i 1 \u0111\u1ea7u v\u1edbi docker0 v\u00e0 m\u1ed9t \u0111\u1ea7u s\u1ebd \u0111\u01b0\u1ee3c n\u1ed1i v\u1edbi interface eth0 tr\u00ean container. \u0110\u1ec3 li\u1ec7t k\u00ea c\u00e1c network \u0111ang c\u00f3, ta c\u00f3 th\u1ec3 d\u00f9ng l\u1ec7nh docker network ls root@adk:/# docker network ls NETWORK ID NAME DRIVER SCOPE 1d8aa8d520a2 bridge bridge local a8ddedeecca8 host host local ad1c5f949ef2 none null local root@adk:/# M\u1eb7c \u0111\u1ecbnh khi t\u1ea1o container m\u00e0 ta kh\u00f4ng ch\u1ec9 \u0111\u1ecbnh d\u00f9ng network n\u00e0o, th\u00ec docker s\u1ebd d\u00f9ng bridge . V\u1edbi bridge , Docker s\u1ebd t\u1ea1o ra m\u1ed9t switch \u1ea3o. Khi container \u0111\u01b0\u1ee3c t\u1ea1o ra, interface c\u1ee7a container s\u1ebd \u0111\u01b0\u1ee3c g\u1eafn v\u00e0o switch \u1ea3o n\u00e0y v\u00e0 k\u1ebft n\u1ed1i v\u1edbi interface c\u1ee7a host. User-defined networks Ngo\u00e0i vi\u1ec7c s\u1eed d\u1ee5ng c\u00e1c network m\u1eb7c \u0111\u1ecbnh do docker cung c\u1ea5p. Ta c\u00f3 th\u1ec3 t\u1ef1 \u0111\u1ecbnh ngh\u0129a ra c\u00e1c d\u1ea3i network ph\u00f9 h\u1ee3p v\u1edbi c\u00f4ng vi\u1ec7c c\u1ee7a m\u00ecnh, g\u1ecdi l\u00e0 User-defined networks . \u0110\u1ec3 t\u1ea1o network, ta d\u00f9ng l\u1ec7nh docker network create --driver bridge --subnet 192 .168.1.0/24 bridgexxx Trong \u0111\u00f3: - --driver bridge : Ch\u1ec9 \u0111\u1ecbnh d\u1ea3i m\u1ea1ng m\u1edbi \u0111\u01b0\u1ee3c t\u1ea1o ra s\u1ebd thu\u1ed9c ki\u1ec3u n\u00e0o: bridge, host, hay none. - --subnet : Ch\u1ec9 \u0111\u1ecbnh \u0111\u1ecba \u0111\u1ecba ch\u1ec9 m\u1ea1ng. - bridgexxx : T\u00ean c\u1ee7a d\u1ea3i m\u1ea1ng m\u1edbi. Khi ch\u1ea1y container ch\u1ec9 \u0111\u1ecbnh s\u1eed d\u1ee5ng 1 d\u1ea3i m\u1ea1ng \u0111\u1eb7c bi\u1ec7t, ta d\u00f9ng l\u1ec7nh docker run --network = bridgexxx -itd --name = container3 busybox Trong \u0111\u00f3: - --network=bridgexxx: Ch\u1ec9 \u0111\u1ecbnh ra d\u1ea3i m\u1ea1ng bridgexxx s\u1ebd k\u1ebft n\u1ed1i v\u1edbi container. Container n\u00e0o ch\u1ea1y tr\u00ean network n\u00e0y \u0111\u1ec1u ph\u1ea3i thu\u1ed9c v\u1ec1 c\u00f9ng m\u1ed9t Docker host. M\u1ed7i container trong network c\u00f3 th\u1ec3 communicate v\u1edbi c\u00e1c containers kh\u00e1c trong c\u00f9ng network. Port C\u00e1c k\u1ebft n\u1ed1i m\u1ea1ng \u0111\u1ec1u \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n th\u00f4ng qua port , \u1edf \u0111\u00e2y c\u00f3 2 lo\u1ea1i port : public-port v\u00e0 target-port s\u1eed d\u1ee5ng giao th\u1ee9c tpc udp . Khi run container, ta c\u1ea7n thi\u1ebft l\u1eadp port cho n\u00f3, \u0111\u1ec3 Docker expose c\u00e1i port n\u00e0y ra ngo\u00e0i public, t\u1eeb public s\u1ebd access t\u1edbi c\u00e1i port n\u00e0y \u0111\u1ec3 k\u1ebft n\u1ed1i t\u1edbi container. C\u00fa ph\u00e1p ki\u1ec3u: docker run -p public-port:target-port/protocol ... public-port : c\u1ed5ng public ra ngo\u00e0i (v\u00ed d\u1ee5 80, 8080 ...), c\u00e1c k\u1ebft n\u1ed1i KH\u00d4NG c\u00f9ng network \u0111\u1ebfn container ph\u1ea3i th\u00f4ng qua c\u1ed5ng n\u00e0y. target-port : c\u1ed5ng b\u00ean trong container, c\u1ed5ng public-port s\u1ebd \u00e1nh x\u1ea1 v\u00e0o c\u1ed5ng n\u00e0y. N\u1ebfu c\u00e1c container c\u00f9ng network c\u00f3 th\u1ec3 k\u1ebft n\u1ed1i v\u1edbi nhau th\u00f4ng qua c\u1ed5ng n\u00e0y. Reference Docker - Network Networking with standalone containers Docker port Docker Manage Ports","title":"Network"},{"location":"Docker/Network/#network","text":"Network and Network drivers Networking with standalone containers Port","title":"Network"},{"location":"Docker/Network/#network_1","text":"Docker network s\u1ebd \u0111\u1ea3m nhi\u1ec7m nhi\u1ec7m v\u1ee5 k\u1ebft n\u1ed1i m\u1ea1ng gi\u1eefa c\u00e1c container v\u1edbi nhau, k\u1ebft n\u1ed1i gi\u1eefa container v\u1edbi b\u00ean ngo\u00e0i, c\u0169ng nh\u01b0 k\u1ebft n\u1ed1i gi\u1eefa c\u00e1c c\u1ee5m (swarm) docker containers. Khi c\u00e1c container c\u00f3 c\u00f9ng m\u1ed9t network, ch\u00fang c\u00f3 th\u1ec3 li\u00ean l\u1ea1c v\u1edbi nhau qua name c\u1ee7a container v\u00e0 port c\u1ee7a container tr\u00ean network \u0111\u00f3.","title":"Network"},{"location":"Docker/Network/#network-drivers","text":"H\u1ec7 th\u1ed1ng Docker Network l\u00e0 d\u1ea1ng plugable , s\u1eed d\u1ee5ng drivers . H\u1ea7u h\u1ebft c\u00e1c driver \u0111\u01b0\u1ee3c cung c\u1ea5p m\u1eb7c \u0111\u1ecbnh, v\u00e0 c\u00e1c drivers n\u00e0y c\u00f3 th\u1ec3 cung c\u1ea5p h\u1ea7u h\u1ebft c\u00e1c ch\u1ee9c n\u0103ng m\u00e0 m\u1ed9t h\u1ec7 th\u1ed1ng m\u1ea1ng b\u00ecnh th\u01b0\u1eddng c\u1ea7n c\u00f3: bridge : \u0110\u00e2y l\u00e0 driver m\u1ea1ng default c\u1ee7a Docker. N\u1ebfu kh\u00f4ng ch\u1ec9 \u0111\u1ecbnh driver th\u00ec bridge s\u1ebd l\u00e0 driver m\u1ea1ng m\u1eb7c \u0111\u1ecbnh khi kh\u1edfi t\u1ea1o. Bridge l\u00e0 driver t\u1ed1t nh\u1ea5t cho vi\u1ec7c giao ti\u1ebfp multiple containers \u1edf m\u1ed9t host \u0111\u01a1n host : D\u00f9ng khi container c\u1ea7n giao ti\u1ebfp v\u1edbi host v\u00e0 s\u1eed d\u1ee5ng lu\u00f4n m\u1ea1ng \u1edf host, v\u00ec s\u1eed d\u1ee5ng m\u1ea1ng c\u1ee7a m\u00e1y ch\u1ee7 \u0111ang ch\u1ea1y n\u00ean kh\u00f4ng c\u00f2n l\u1edbp m\u1ea1ng n\u00e0o gi\u1eefa container v\u1edbi Docker Host ph\u00f9 h\u1ee3p khi c\u1ea7n connect t\u1eeb container ra th\u1eb3ng ngo\u00e0i host overlay : Overlay network t\u1ea1o m\u1ed9t m\u1ea1ng ph\u00e2n t\u00e1n gi\u1eefa nhi\u1ec1u m\u00e1y ch\u1ee7 Docker. K\u1ebft n\u1ed1i nhi\u1ec1u Docker daemons v\u1edbi nhau v\u00e0 cho ph\u00e9p c\u00e1c c\u1ee5m services giao ti\u1ebfp v\u1edbi nhau. Ch\u00fang ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng overlay network \u0111\u1ec3 giao ti\u1ebfp d\u1ec5 d\u00e0ng gi\u1eefa c\u1ee5m c\u00e1c services v\u1edbi m\u1ed9t container \u0111\u1ed9c l\u1eadp, hay gi\u1eefa 2 container v\u1edbi nhau \u1edf kh\u00e1c m\u00e1y ch\u1ee7 Docker daemons. ipvlan : Cung c\u1ea5p to\u00e0n quy\u1ec1n ki\u1ec3m so\u00e1t \u0111\u1ed1i v\u1edbi c\u1ea3 \u0111\u1ecba ch\u1ec9 IPv4 v\u00e0 IPv6. macvlan : Cho ph\u00e9p g\u00e1n \u0111\u1ecba ch\u1ec9 MAC cho container, \u0111i\u1ec1u n\u00e0y l\u00e0m cho m\u1ed7i container nh\u01b0 l\u00e0 m\u1ed9t thi\u1ebft b\u1ecb v\u1eadt l\u00fd trong m\u1ea1ng. Docker daemon \u0111\u1ecbnh tuy\u1ebfn truy c\u1eadp t\u1edbi container b\u1edfi \u0111\u1ecba ch\u1ec9 MAC. S\u1eed d\u1ee5ng driver macvlan l\u00e0 l\u1ef1a chon t\u1ed1t khi c\u00e1c \u1ee9ng d\u1ee5ng kh\u00e1c c\u1ea7n ph\u1ea3i connect \u0111\u1ebfn theo \u0111\u1ecba ch\u1ec9 v\u1eadt l\u00fd h\u01a1n l\u00e0 th\u00f4ng qua c\u00e1c l\u1edbp m\u1ea1ng c\u1ee7a m\u00e1y ch\u1ee7. none : V\u1edbi container kh\u00f4ng c\u1ea7n networking ho\u1eb7c c\u1ea7n disable \u0111i t\u1ea5t c\u1ea3 m\u1ecdi networking, ch\u00fang ta s\u1ebd ch\u1ecdn driver n\u00e0y.","title":"Network drivers"},{"location":"Docker/Network/#networking-with-standalone-containers","text":"","title":"Networking with standalone containers"},{"location":"Docker/Network/#communicate-between-docker-containers","text":"Tr\u00ean c\u00f9ng m\u1ed9t host, c\u00e1c container c\u00f3 th\u1ec3 communicate v\u1edbi nhau. Th\u00f4ng th\u01b0\u1eddng ta d\u00f9ng \u0111\u1ecba ch\u1ec9 IP \u0111\u1ec3 network routing c\u00e1c g\u00f3i tin gi\u1eefa c\u00e1c m\u00e1y v\u1edbi nhay. Tuy nhi\u00ean, c\u00e1c container \u0111\u01b0\u1ee3c c\u1ea5p ip \u0111\u1ed9ng n\u00ean n\u00f3 c\u00f3 th\u1ec3 thay \u0111\u1ed5i, d\u1eabn \u0111\u1ebfn nhi\u1ec1u kh\u00f3 kh\u0103n. V\u00ec v\u1eady, thay v\u00ec d\u00f9ng \u0111\u1ecba ch\u1ec9 ip, ta c\u00f3 th\u1ec3 d\u00f9ng name ho\u1eb7c id c\u1ee7a c\u00e1c container communicate v\u1edbi nhau. Trong tr\u01b0\u1eddng h\u1ee3p s\u1eed d\u1ee5ng default bridge network th\u00ec ta khai b\u00e1o th\u00eam l\u1ec7nh --link=name_container . Trong tr\u01b0\u1eddng h\u1ee3p s\u1eed d\u1ee5ng user-defined network th\u00ec ta kh\u00f4ng c\u1ea7n ph\u1ea3i link n\u1eefa m\u00e0 s\u1ebd t\u1ef1 config.","title":"Communicate Between Docker Containers"},{"location":"Docker/Network/#use-the-default-bridge-network","text":"Khi ch\u00fang ta c\u00e0i \u0111\u1eb7t Docker, nh\u1eefng thi\u1ebft l\u1eadp sau s\u1ebd \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n: - Virtual bridge docker0 s\u1ebd \u0111\u01b0\u1ee3c t\u1ea1o ra - Docker t\u00ecm m\u1ed9t subnet ch\u01b0a \u0111\u01b0\u1ee3c d\u00f9ng tr\u00ean host v\u00e0 g\u00e1n m\u1ed9t \u0111\u1ecba ch\u1ec9 cho docker0 Sau \u0111\u00f3, khi ch\u00fang ta kh\u1edfi \u0111\u1ed9ng m\u1ed9t container (v\u1edbi bridge network), m\u1ed9t veth (Virtual Ethernet) s\u1ebd \u0111\u01b0\u1ee3c t\u1ea1o ra n\u1ed1i 1 \u0111\u1ea7u v\u1edbi docker0 v\u00e0 m\u1ed9t \u0111\u1ea7u s\u1ebd \u0111\u01b0\u1ee3c n\u1ed1i v\u1edbi interface eth0 tr\u00ean container. \u0110\u1ec3 li\u1ec7t k\u00ea c\u00e1c network \u0111ang c\u00f3, ta c\u00f3 th\u1ec3 d\u00f9ng l\u1ec7nh docker network ls root@adk:/# docker network ls NETWORK ID NAME DRIVER SCOPE 1d8aa8d520a2 bridge bridge local a8ddedeecca8 host host local ad1c5f949ef2 none null local root@adk:/# M\u1eb7c \u0111\u1ecbnh khi t\u1ea1o container m\u00e0 ta kh\u00f4ng ch\u1ec9 \u0111\u1ecbnh d\u00f9ng network n\u00e0o, th\u00ec docker s\u1ebd d\u00f9ng bridge . V\u1edbi bridge , Docker s\u1ebd t\u1ea1o ra m\u1ed9t switch \u1ea3o. Khi container \u0111\u01b0\u1ee3c t\u1ea1o ra, interface c\u1ee7a container s\u1ebd \u0111\u01b0\u1ee3c g\u1eafn v\u00e0o switch \u1ea3o n\u00e0y v\u00e0 k\u1ebft n\u1ed1i v\u1edbi interface c\u1ee7a host.","title":"Use the default bridge network"},{"location":"Docker/Network/#user-defined-networks","text":"Ngo\u00e0i vi\u1ec7c s\u1eed d\u1ee5ng c\u00e1c network m\u1eb7c \u0111\u1ecbnh do docker cung c\u1ea5p. Ta c\u00f3 th\u1ec3 t\u1ef1 \u0111\u1ecbnh ngh\u0129a ra c\u00e1c d\u1ea3i network ph\u00f9 h\u1ee3p v\u1edbi c\u00f4ng vi\u1ec7c c\u1ee7a m\u00ecnh, g\u1ecdi l\u00e0 User-defined networks . \u0110\u1ec3 t\u1ea1o network, ta d\u00f9ng l\u1ec7nh docker network create --driver bridge --subnet 192 .168.1.0/24 bridgexxx Trong \u0111\u00f3: - --driver bridge : Ch\u1ec9 \u0111\u1ecbnh d\u1ea3i m\u1ea1ng m\u1edbi \u0111\u01b0\u1ee3c t\u1ea1o ra s\u1ebd thu\u1ed9c ki\u1ec3u n\u00e0o: bridge, host, hay none. - --subnet : Ch\u1ec9 \u0111\u1ecbnh \u0111\u1ecba \u0111\u1ecba ch\u1ec9 m\u1ea1ng. - bridgexxx : T\u00ean c\u1ee7a d\u1ea3i m\u1ea1ng m\u1edbi. Khi ch\u1ea1y container ch\u1ec9 \u0111\u1ecbnh s\u1eed d\u1ee5ng 1 d\u1ea3i m\u1ea1ng \u0111\u1eb7c bi\u1ec7t, ta d\u00f9ng l\u1ec7nh docker run --network = bridgexxx -itd --name = container3 busybox Trong \u0111\u00f3: - --network=bridgexxx: Ch\u1ec9 \u0111\u1ecbnh ra d\u1ea3i m\u1ea1ng bridgexxx s\u1ebd k\u1ebft n\u1ed1i v\u1edbi container. Container n\u00e0o ch\u1ea1y tr\u00ean network n\u00e0y \u0111\u1ec1u ph\u1ea3i thu\u1ed9c v\u1ec1 c\u00f9ng m\u1ed9t Docker host. M\u1ed7i container trong network c\u00f3 th\u1ec3 communicate v\u1edbi c\u00e1c containers kh\u00e1c trong c\u00f9ng network.","title":"User-defined networks"},{"location":"Docker/Network/#port","text":"C\u00e1c k\u1ebft n\u1ed1i m\u1ea1ng \u0111\u1ec1u \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n th\u00f4ng qua port , \u1edf \u0111\u00e2y c\u00f3 2 lo\u1ea1i port : public-port v\u00e0 target-port s\u1eed d\u1ee5ng giao th\u1ee9c tpc udp . Khi run container, ta c\u1ea7n thi\u1ebft l\u1eadp port cho n\u00f3, \u0111\u1ec3 Docker expose c\u00e1i port n\u00e0y ra ngo\u00e0i public, t\u1eeb public s\u1ebd access t\u1edbi c\u00e1i port n\u00e0y \u0111\u1ec3 k\u1ebft n\u1ed1i t\u1edbi container. C\u00fa ph\u00e1p ki\u1ec3u: docker run -p public-port:target-port/protocol ... public-port : c\u1ed5ng public ra ngo\u00e0i (v\u00ed d\u1ee5 80, 8080 ...), c\u00e1c k\u1ebft n\u1ed1i KH\u00d4NG c\u00f9ng network \u0111\u1ebfn container ph\u1ea3i th\u00f4ng qua c\u1ed5ng n\u00e0y. target-port : c\u1ed5ng b\u00ean trong container, c\u1ed5ng public-port s\u1ebd \u00e1nh x\u1ea1 v\u00e0o c\u1ed5ng n\u00e0y. N\u1ebfu c\u00e1c container c\u00f9ng network c\u00f3 th\u1ec3 k\u1ebft n\u1ed1i v\u1edbi nhau th\u00f4ng qua c\u1ed5ng n\u00e0y.","title":"Port"},{"location":"Docker/Network/#reference","text":"Docker - Network Networking with standalone containers Docker port Docker Manage Ports","title":"Reference"},{"location":"Docker/Practice/","text":"Practice with docker Image Container Xem Docker version: docker --version v\u00e0 Docker info: docker info Practice with docker images: build, pull, push, tag Pull an image \u0110\u1ea7u ti\u00ean, \u0111\u1ec3 c\u00f3 image n\u00e0o \u0111\u00f3, ta c\u00f3 th\u1ec3 pull v\u1ec1 t\u1eeb DockerHub , d\u00f9ng l\u1ec7nh: docker pull <imagename>:tag N\u1ebfu kh\u00f4ng c\u00f3 tag th\u00ec m\u1eb7c \u0111\u1ecbnh l\u00e0 latest . T\u00ecm ki\u1ebfm m\u1ed9t image t\u1eeb Docker Hub: docker search <imagename> Sau khi pull image v\u1ec1, xem c\u00e1c image \u0111ang c\u00f3: docker images -a - Xem chi ti\u1ebft th\u00f4ng tin v\u1ec1 image: docker image inspect <imagename> C\u00e1ch tra c\u1ee9u c\u00fa ph\u00e1p c\u00e1c command v\u1ec1 image: docker [ command ] --help Build an image Init m\u1ed9t NodeJS App v\u1edbi c\u00e1c config sau: package.json { \"name\" : \"docker_web_app\" , \"version\" : \"1.0.0\" , \"description\" : \"Node.js on Docker\" , \"author\" : \"First Last <first.last@example.com>\" , \"main\" : \"server.js\" , \"scripts\" : { \"start\" : \"node server.js\" }, \"dependencies\" : { \"express\" : \"^4.16.1\" } } - server.js 'use strict'; const express = require('express'); // Constants const PORT = 8080; const HOST = '0.0.0.0'; // App const app = express(); app.get('/', (req, res) => { res.send('Hello World'); }); app.listen(PORT, HOST); console.log(`Running on http://${HOST}:${PORT}`); Dockerfile FROM node:16 # Create app directory WORKDIR /usr/src/app # Install app dependencies # A wildcard is used to ensure both package.json AND package-lock.json are copied # where available (npm@5+) COPY package*.json ./ RUN npm install # If you are building your code for production # RUN npm ci --only=production # Bundle app source COPY . . EXPOSE 8080 CMD [ \"node\", \"server.js\" ] .dockerignore node_modules npm-debug.log Build NodeJS App n\u00e0y th\u00e0nh Image d\u1ef1a tr\u00ean Dockerfile b\u1eb1ng command: docker build . -t <your username>/node-web-app Docker build Image th\u00e0nh nhi\u1ec1u layers v\u00e0 ghi log ra nh\u01b0 sau: D\u00f9ng l\u1ec7nh docker images \u0111\u1ec3 xem image \u0111\u00e3 build Run your image as a Container Run the image Run image m\u00ecnh m\u1edbi build b\u1eb1ng c\u00e2u l\u1ec7nh: ```sh docker run -p 3000:8080 -d <your-username>/node-web-app ``` -d l\u00e0 run container tr\u00ean detached mode , container s\u1ebd ch\u1ea1y ng\u1ea7m v\u00e0 kh\u00f4ng log output ra terminal -p l\u00e0 \u00e1nh x\u1ea1 port 8080 trong Docker ra port 3000 \u1edf localhost K\u1ebft qu\u1ea3: exec, stop, start, and name containers M\u1ed9t s\u1ed1 c\u00e2u l\u1ec7nh ph\u1ed5 bi\u1ebfn \u0111\u1ec3 t\u01b0\u01a1ng t\u00e1c v\u1edbi container \u0111ang ch\u1ea1y: docker exec -it containerid command : Ch\u1ea1y m\u1ed9t l\u1ec7nh command tr\u00ean container \u0111ang ho\u1ea1t \u0111\u1ed9ng docker stop containerid : D\u1eebng ho\u1ea1t \u0111\u1ed9ng m\u1ed9t container d\u1ef1a tr\u00ean id docker start -i containerid : Ch\u1ea1y m\u1ed9t container docker restart containerid : Kh\u1edfi \u0111\u1ed9ng l\u1ea1i container docker rm containerid : X\u00f3a container docker logs containerid : Xem logs c\u1ee7a container \u0111ang ch\u1ea1y Push the Image L\u00ean DockerHub t\u1ea1o m\u1ed9t Repo m\u1edbi, \u0111\u1eb7t t\u00ean repo l\u00e0 t\u00ean c\u1ee7a Image c\u1ea7n push: Sau khi t\u1ea1o repo xong th\u00ec run command: docker push kienthiet/dockerizing-node:tagname L\u01b0u \u00fd l\u00e0 tr\u01b0\u1edbc khi push ph\u1ea3i login v\u00e0o Docker \u1edf local, n\u1ebfu kh\u00f4ng s\u1ebd: denied: requested access to the resource is denied . Run l\u1ec7nh push \u1edf tr\u00ean, Docker s\u1ebd ti\u1ebfn h\u00e0nh push Image l\u00ean DockerHub theo t\u1eebng layers, output logs nh\u01b0 sau: C\u00f3 th\u1ec3 l\u00ean DockerHub \u0111\u1ec3 check:","title":"Practice with docker"},{"location":"Docker/Practice/#practice-with-docker","text":"Image Container Xem Docker version: docker --version v\u00e0 Docker info: docker info","title":"Practice with docker"},{"location":"Docker/Practice/#practice-with-docker-images-build-pull-push-tag","text":"","title":"Practice with docker images: build, pull, push, tag"},{"location":"Docker/Practice/#pull-an-image","text":"\u0110\u1ea7u ti\u00ean, \u0111\u1ec3 c\u00f3 image n\u00e0o \u0111\u00f3, ta c\u00f3 th\u1ec3 pull v\u1ec1 t\u1eeb DockerHub , d\u00f9ng l\u1ec7nh: docker pull <imagename>:tag N\u1ebfu kh\u00f4ng c\u00f3 tag th\u00ec m\u1eb7c \u0111\u1ecbnh l\u00e0 latest . T\u00ecm ki\u1ebfm m\u1ed9t image t\u1eeb Docker Hub: docker search <imagename> Sau khi pull image v\u1ec1, xem c\u00e1c image \u0111ang c\u00f3: docker images -a - Xem chi ti\u1ebft th\u00f4ng tin v\u1ec1 image: docker image inspect <imagename> C\u00e1ch tra c\u1ee9u c\u00fa ph\u00e1p c\u00e1c command v\u1ec1 image: docker [ command ] --help","title":"Pull an image"},{"location":"Docker/Practice/#build-an-image","text":"Init m\u1ed9t NodeJS App v\u1edbi c\u00e1c config sau: package.json { \"name\" : \"docker_web_app\" , \"version\" : \"1.0.0\" , \"description\" : \"Node.js on Docker\" , \"author\" : \"First Last <first.last@example.com>\" , \"main\" : \"server.js\" , \"scripts\" : { \"start\" : \"node server.js\" }, \"dependencies\" : { \"express\" : \"^4.16.1\" } } - server.js 'use strict'; const express = require('express'); // Constants const PORT = 8080; const HOST = '0.0.0.0'; // App const app = express(); app.get('/', (req, res) => { res.send('Hello World'); }); app.listen(PORT, HOST); console.log(`Running on http://${HOST}:${PORT}`); Dockerfile FROM node:16 # Create app directory WORKDIR /usr/src/app # Install app dependencies # A wildcard is used to ensure both package.json AND package-lock.json are copied # where available (npm@5+) COPY package*.json ./ RUN npm install # If you are building your code for production # RUN npm ci --only=production # Bundle app source COPY . . EXPOSE 8080 CMD [ \"node\", \"server.js\" ] .dockerignore node_modules npm-debug.log Build NodeJS App n\u00e0y th\u00e0nh Image d\u1ef1a tr\u00ean Dockerfile b\u1eb1ng command: docker build . -t <your username>/node-web-app Docker build Image th\u00e0nh nhi\u1ec1u layers v\u00e0 ghi log ra nh\u01b0 sau: D\u00f9ng l\u1ec7nh docker images \u0111\u1ec3 xem image \u0111\u00e3 build","title":"Build an image"},{"location":"Docker/Practice/#run-your-image-as-a-container","text":"","title":"Run your image as a Container"},{"location":"Docker/Practice/#run-the-image","text":"Run image m\u00ecnh m\u1edbi build b\u1eb1ng c\u00e2u l\u1ec7nh: ```sh docker run -p 3000:8080 -d <your-username>/node-web-app ``` -d l\u00e0 run container tr\u00ean detached mode , container s\u1ebd ch\u1ea1y ng\u1ea7m v\u00e0 kh\u00f4ng log output ra terminal -p l\u00e0 \u00e1nh x\u1ea1 port 8080 trong Docker ra port 3000 \u1edf localhost K\u1ebft qu\u1ea3:","title":"Run the image"},{"location":"Docker/Practice/#exec-stop-start-and-name-containers","text":"M\u1ed9t s\u1ed1 c\u00e2u l\u1ec7nh ph\u1ed5 bi\u1ebfn \u0111\u1ec3 t\u01b0\u01a1ng t\u00e1c v\u1edbi container \u0111ang ch\u1ea1y: docker exec -it containerid command : Ch\u1ea1y m\u1ed9t l\u1ec7nh command tr\u00ean container \u0111ang ho\u1ea1t \u0111\u1ed9ng docker stop containerid : D\u1eebng ho\u1ea1t \u0111\u1ed9ng m\u1ed9t container d\u1ef1a tr\u00ean id docker start -i containerid : Ch\u1ea1y m\u1ed9t container docker restart containerid : Kh\u1edfi \u0111\u1ed9ng l\u1ea1i container docker rm containerid : X\u00f3a container docker logs containerid : Xem logs c\u1ee7a container \u0111ang ch\u1ea1y","title":"exec, stop, start, and name containers"},{"location":"Docker/Practice/#push-the-image","text":"L\u00ean DockerHub t\u1ea1o m\u1ed9t Repo m\u1edbi, \u0111\u1eb7t t\u00ean repo l\u00e0 t\u00ean c\u1ee7a Image c\u1ea7n push: Sau khi t\u1ea1o repo xong th\u00ec run command: docker push kienthiet/dockerizing-node:tagname L\u01b0u \u00fd l\u00e0 tr\u01b0\u1edbc khi push ph\u1ea3i login v\u00e0o Docker \u1edf local, n\u1ebfu kh\u00f4ng s\u1ebd: denied: requested access to the resource is denied . Run l\u1ec7nh push \u1edf tr\u00ean, Docker s\u1ebd ti\u1ebfn h\u00e0nh push Image l\u00ean DockerHub theo t\u1eebng layers, output logs nh\u01b0 sau: C\u00f3 th\u1ec3 l\u00ean DockerHub \u0111\u1ec3 check:","title":"Push the Image"},{"location":"Docker/Volumes-PersistentData/","text":"Volumes, Persistent Data Manage data in Docker Volumes, Persistent data Manage data in Docker Docker h\u1ed7 tr\u1ee3 3 c\u00e1ch \u0111\u1ec3 l\u01b0u tr\u1eef d\u1eef li\u1ec7u c\u1ee7a Docker container l\u00e0: volumes , bind mounts v\u00e0 tmpfs mounts (Docker on Linux). Volumes th\u01b0\u1eddng l\u00e0 best choice S\u1ef1 kh\u00e1c bi\u1ec7t gi\u1eefa volumes , bind mounts v\u00e0 tmpfs mounts ch\u1ec9 \u0111\u01a1n gi\u1ea3n l\u00e0 kh\u00e1c nhau v\u1ec1 v\u1ecb tr\u00ed l\u01b0u tr\u1eef d\u1eef li\u1ec7u tr\u00ean Docker host. volumes \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef nh\u01b0 m\u1ed9t ph\u1ea7n c\u1ee7a filesystem tr\u00ean Docker host v\u00e0 \u0111\u01b0\u1ee3c qu\u1ea3n l\u00fd b\u1edfi Docker (ch\u1ee9a trong folder /var/lib/docker/volumes tr\u00ean Linux). \u0110\u00e2y \u0111\u01b0\u1ee3c xem l\u00e0 c\u00e1ch t\u1ed1t nh\u1ea5t \u0111\u1ec3 duy tr\u00ec d\u1eef li\u1ec7u trong Docker bind mounts cho ph\u00e9p l\u01b0u tr\u1eef b\u1ea5t c\u1ee9 \u0111\u00e2u trong host system. tmpfs mounts cho ph\u00e9p l\u01b0u tr\u1eef t\u1ea1m th\u1eddi d\u1eef li\u1ec7u v\u00e0o b\u1ed9 nh\u1edb c\u1ee7a Docker host, kh\u00f4ng bao gi\u1edd ghi v\u00e0o filesystem c\u1ee7a Docker host. Docker Volumes, Persistent data Persistence Data - l\u00e0 m\u1ed9t kh\u00e1i ni\u1ec7m trong ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng \u0111\u1ec1 c\u1eadp \u0111\u1ebfn v\u1ea5n \u0111\u1ec1 \"N\u1ebfu d\u1eef li\u1ec7u kh\u00f4ng \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef khi h\u1ec7 th\u1ed1ng ng\u01b0ng ho\u1ea1t \u0111\u1ed9ng, cho \u0111\u1ebfn khi h\u1ec7 th\u1ed1ng ho\u1ea1t \u0111\u1ed9ng l\u1ea1i th\u00ec t\u1ea5t c\u1ea3 c\u00e1c d\u1eef li\u1ec7u ph\u1ea3i \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o v\u00e0 x\u1eed l\u00fd l\u1ea1i t\u1eeb \u0111\u1ea7u\". Volume trong Docker l\u00e0 m\u1ed9t c\u01a1 ch\u1ebf \u0111\u01b0\u1ee3c Docker s\u1eed d\u1ee5ng \u0111\u1ec3 cung c\u1ea5p kh\u1ea3 n\u0103ng l\u01b0u tr\u1eef li\u00ean t\u1ee5c ( persistent data storage ). Ch\u00fang mang l\u1ea1i nh\u1eefng l\u1ee3i \u00edch \u0111\u00e1ng k\u1ec3 trong qu\u00e1 tr\u00ecnh ph\u00e1t tri\u1ec3n v\u00e0 tri\u1ec3n khai \u1ee9ng d\u1ee5ng tr\u00ean Docker. C\u01a1 ch\u1ebf duy tr\u00ec d\u1eef li\u1ec7u - persistent data trong c\u00e1c services v\u00e0 containers ch\u1ea1y tr\u00ean Docker b\u1eb1ng volumes : Ta c\u00f3 th\u1ec3 t\u1ea1o volumes v\u1edbi c\u00e2u l\u1ec7nh docker volume create ho\u1eb7c t\u1ea1o volumes trong khi t\u1ea1o containers, ... Khi t\u1ea1o ra volumes, n\u00f3 s\u1ebd \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef trong m\u1ed9t th\u01b0 m\u1ee5c tr\u00ean Docker host. Khi ta th\u1ef1c hi\u1ec7n mount volumes v\u00e0o container th\u00ec th\u01b0 m\u1ee5c n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c mount v\u00e0o container lu\u00f4n. bind mounts c\u0169ng ho\u1ea1t \u0111\u1ed9ng t\u01b0\u01a1ng t\u1ef1, kh\u00e1c ch\u1ed7 l\u01b0u data th\u00f4i. volumes c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c mount v\u00e0o nhi\u1ec3u containers c\u00f9ng m\u1ed9t l\u00fac. Khi kh\u00f4ng c\u00f3 containers n\u00e0o s\u1eed d\u1ee5ng volumes th\u00ec volumes v\u1eabn \u1edf tr\u1ea1ng th\u00e1i cho ph\u00e9p mount v\u00e0o containers v\u00e0 kh\u00f4ng b\u1ecb x\u00f3a m\u1ed9t c\u00e1ch t\u1ef1 \u0111\u1ed9ng. volumes h\u1ed7 tr\u1ee3 volume drivers , do \u0111\u00f3 ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u1ec3 l\u01b0u tr\u1eef d\u1eef li\u1ec7u t\u1eeb remote hosts ho\u1eb7c cloud providers . M\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p s\u1eed d\u1ee5ng volumes : Chia s\u1ebb d\u1eef li\u1ec7u v\u1edbi nhi\u1ec1u containers \u0111ang ch\u1ea1y. D\u1eef li\u1ec7u y\u00eau c\u1ea7u ph\u1ea3i t\u1ed3n t\u1ea1i k\u1ec3 c\u1ea3 khi d\u1eebng ho\u1eb7c lo\u1ea1i b\u1ecf containers. Khi Docker host c\u00f3 c\u1ea5u tr\u00fac filesystem kh\u00f4ng th\u1ed1ng nh\u1ea5t, \u1ed5n \u0111\u1ecbnh, th\u01b0\u1eddng xuy\u00ean thay \u0111\u1ed5i. Khi mu\u1ed1n l\u01b0u tr\u1eef d\u1eef li\u1ec7u containers tr\u00ean remote hosts, cloud thay v\u00ec Docker host. Khi c\u00f3 nhu c\u1ea7u sao l\u01b0u, backup ho\u1eb7c migrate d\u1eef li\u1ec7u t\u1edbi Docker host kh\u00e1c th\u00ec volumes l\u00e0 m\u1ed9t s\u1ef1 l\u1ef1a t\u1ed1t. Ta c\u1ea7n ph\u1ea3i d\u1eebng containers s\u1eed d\u1ee5ng volumes sau \u0111\u00f3 th\u1ef1c hi\u1ec7n backup t\u1ea1i \u0111\u01b0\u1eddng d\u1eabn /var/lib/docker/volumes/<volume-name> Reference Manage data in Docker Use Volumes Manage data in Docker","title":"Volumes, Persistent Data"},{"location":"Docker/Volumes-PersistentData/#volumes-persistent-data","text":"Manage data in Docker Volumes, Persistent data","title":"Volumes, Persistent Data"},{"location":"Docker/Volumes-PersistentData/#manage-data-in-docker","text":"Docker h\u1ed7 tr\u1ee3 3 c\u00e1ch \u0111\u1ec3 l\u01b0u tr\u1eef d\u1eef li\u1ec7u c\u1ee7a Docker container l\u00e0: volumes , bind mounts v\u00e0 tmpfs mounts (Docker on Linux). Volumes th\u01b0\u1eddng l\u00e0 best choice S\u1ef1 kh\u00e1c bi\u1ec7t gi\u1eefa volumes , bind mounts v\u00e0 tmpfs mounts ch\u1ec9 \u0111\u01a1n gi\u1ea3n l\u00e0 kh\u00e1c nhau v\u1ec1 v\u1ecb tr\u00ed l\u01b0u tr\u1eef d\u1eef li\u1ec7u tr\u00ean Docker host. volumes \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef nh\u01b0 m\u1ed9t ph\u1ea7n c\u1ee7a filesystem tr\u00ean Docker host v\u00e0 \u0111\u01b0\u1ee3c qu\u1ea3n l\u00fd b\u1edfi Docker (ch\u1ee9a trong folder /var/lib/docker/volumes tr\u00ean Linux). \u0110\u00e2y \u0111\u01b0\u1ee3c xem l\u00e0 c\u00e1ch t\u1ed1t nh\u1ea5t \u0111\u1ec3 duy tr\u00ec d\u1eef li\u1ec7u trong Docker bind mounts cho ph\u00e9p l\u01b0u tr\u1eef b\u1ea5t c\u1ee9 \u0111\u00e2u trong host system. tmpfs mounts cho ph\u00e9p l\u01b0u tr\u1eef t\u1ea1m th\u1eddi d\u1eef li\u1ec7u v\u00e0o b\u1ed9 nh\u1edb c\u1ee7a Docker host, kh\u00f4ng bao gi\u1edd ghi v\u00e0o filesystem c\u1ee7a Docker host.","title":"Manage data in Docker"},{"location":"Docker/Volumes-PersistentData/#docker-volumes-persistent-data","text":"Persistence Data - l\u00e0 m\u1ed9t kh\u00e1i ni\u1ec7m trong ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng \u0111\u1ec1 c\u1eadp \u0111\u1ebfn v\u1ea5n \u0111\u1ec1 \"N\u1ebfu d\u1eef li\u1ec7u kh\u00f4ng \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef khi h\u1ec7 th\u1ed1ng ng\u01b0ng ho\u1ea1t \u0111\u1ed9ng, cho \u0111\u1ebfn khi h\u1ec7 th\u1ed1ng ho\u1ea1t \u0111\u1ed9ng l\u1ea1i th\u00ec t\u1ea5t c\u1ea3 c\u00e1c d\u1eef li\u1ec7u ph\u1ea3i \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o v\u00e0 x\u1eed l\u00fd l\u1ea1i t\u1eeb \u0111\u1ea7u\". Volume trong Docker l\u00e0 m\u1ed9t c\u01a1 ch\u1ebf \u0111\u01b0\u1ee3c Docker s\u1eed d\u1ee5ng \u0111\u1ec3 cung c\u1ea5p kh\u1ea3 n\u0103ng l\u01b0u tr\u1eef li\u00ean t\u1ee5c ( persistent data storage ). Ch\u00fang mang l\u1ea1i nh\u1eefng l\u1ee3i \u00edch \u0111\u00e1ng k\u1ec3 trong qu\u00e1 tr\u00ecnh ph\u00e1t tri\u1ec3n v\u00e0 tri\u1ec3n khai \u1ee9ng d\u1ee5ng tr\u00ean Docker. C\u01a1 ch\u1ebf duy tr\u00ec d\u1eef li\u1ec7u - persistent data trong c\u00e1c services v\u00e0 containers ch\u1ea1y tr\u00ean Docker b\u1eb1ng volumes : Ta c\u00f3 th\u1ec3 t\u1ea1o volumes v\u1edbi c\u00e2u l\u1ec7nh docker volume create ho\u1eb7c t\u1ea1o volumes trong khi t\u1ea1o containers, ... Khi t\u1ea1o ra volumes, n\u00f3 s\u1ebd \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef trong m\u1ed9t th\u01b0 m\u1ee5c tr\u00ean Docker host. Khi ta th\u1ef1c hi\u1ec7n mount volumes v\u00e0o container th\u00ec th\u01b0 m\u1ee5c n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c mount v\u00e0o container lu\u00f4n. bind mounts c\u0169ng ho\u1ea1t \u0111\u1ed9ng t\u01b0\u01a1ng t\u1ef1, kh\u00e1c ch\u1ed7 l\u01b0u data th\u00f4i. volumes c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c mount v\u00e0o nhi\u1ec3u containers c\u00f9ng m\u1ed9t l\u00fac. Khi kh\u00f4ng c\u00f3 containers n\u00e0o s\u1eed d\u1ee5ng volumes th\u00ec volumes v\u1eabn \u1edf tr\u1ea1ng th\u00e1i cho ph\u00e9p mount v\u00e0o containers v\u00e0 kh\u00f4ng b\u1ecb x\u00f3a m\u1ed9t c\u00e1ch t\u1ef1 \u0111\u1ed9ng. volumes h\u1ed7 tr\u1ee3 volume drivers , do \u0111\u00f3 ta c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u1ec3 l\u01b0u tr\u1eef d\u1eef li\u1ec7u t\u1eeb remote hosts ho\u1eb7c cloud providers . M\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p s\u1eed d\u1ee5ng volumes : Chia s\u1ebb d\u1eef li\u1ec7u v\u1edbi nhi\u1ec1u containers \u0111ang ch\u1ea1y. D\u1eef li\u1ec7u y\u00eau c\u1ea7u ph\u1ea3i t\u1ed3n t\u1ea1i k\u1ec3 c\u1ea3 khi d\u1eebng ho\u1eb7c lo\u1ea1i b\u1ecf containers. Khi Docker host c\u00f3 c\u1ea5u tr\u00fac filesystem kh\u00f4ng th\u1ed1ng nh\u1ea5t, \u1ed5n \u0111\u1ecbnh, th\u01b0\u1eddng xuy\u00ean thay \u0111\u1ed5i. Khi mu\u1ed1n l\u01b0u tr\u1eef d\u1eef li\u1ec7u containers tr\u00ean remote hosts, cloud thay v\u00ec Docker host. Khi c\u00f3 nhu c\u1ea7u sao l\u01b0u, backup ho\u1eb7c migrate d\u1eef li\u1ec7u t\u1edbi Docker host kh\u00e1c th\u00ec volumes l\u00e0 m\u1ed9t s\u1ef1 l\u1ef1a t\u1ed1t. Ta c\u1ea7n ph\u1ea3i d\u1eebng containers s\u1eed d\u1ee5ng volumes sau \u0111\u00f3 th\u1ef1c hi\u1ec7n backup t\u1ea1i \u0111\u01b0\u1eddng d\u1eabn /var/lib/docker/volumes/<volume-name>","title":"Docker Volumes, Persistent data"},{"location":"Docker/Volumes-PersistentData/#reference","text":"Manage data in Docker Use Volumes Manage data in Docker","title":"Reference"},{"location":"Elasticsearch/Elasticsearch/","text":"Elasticsearch","title":"Elasticsearch"},{"location":"Elasticsearch/Elasticsearch/#elasticsearch","text":"","title":"Elasticsearch"},{"location":"Linux/commands/","text":"Linux Commands Basic file and directory management & permission commands \u0110i\u1ec1u h\u01b0\u1edbng file system \u0110i\u1ec1u h\u01b0\u1edbng t\u1edbi th\u01b0 m\u1ee5c ch\u1ec9 \u0111\u1ecbnh $ cd ~/.ssh/ \u0110i\u1ec1u h\u01b0\u1edbng quay l\u1ea1i th\u01b0 m\u1ee5c cha $ cd ../Documents T\u1ea1o file m\u1edbi $ touch hello.txt Copy file ho\u1eb7c directory $ cp hello.txt hello.txt Rename file $ mv hello.txt bonjour.txt Remove file $ rm ciao.txt Femove files kh\u00f4ng c\u1ea7n x\u00e1c nh\u1eadn v\u00e0 remove c\u00e1c file con c\u1ee7a n\u00f3 $ rm -rf ~/Downloads Xem list c\u00e1c file trong th\u01b0 m\u1ee5c hi\u1ec7n t\u1ea1i $ ls ~/Downloads cat , grep , v\u00e0 piping Concatenate file, ho\u1eb7c d\u00f9ng \u0111\u1ec3 xem n\u1ed9i dung file $ cat hello.txt cat k\u1ebft h\u1ee3p v\u1edbi grep \u0111\u1ec3 search $ cat guest_list.txt | grep Lucy $ cat /var/log/messages | grep '500 Internal Server Error' D\u00f9ng grep \u0111\u1ec3 t\u00ecm object (any kind of output, not just file contents) $ docker ps | grep my-awesome-container L\u01b0u output c\u1ee7a b\u1ea5t k\u1ef3 l\u1ec7nh n\u00e0o v\u00e0o m\u1ed9t t\u1ec7p b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng redirection (>) $ echo \"Linux was created by Linus Torvalds\" > bio.txt find T\u00ecm th\u01b0 m\u1ee5c b\u1eb1ng name $ find . -name CS101 File permissions v\u00e0 ownership M\u1ecdi t\u1ec7p v\u00e0 th\u01b0 m\u1ee5c trong File system c\u1ee7a Linux \u0111\u1ec1u c\u00f3 permissions v\u00e0 owner . \u0110\u1ec3 xem th\u00f4ng tin v\u1ec1 permissions v\u00e0 owner c\u1ee7a m\u1ed9t file: -rw-r--r-- \u0110\u1ed5i onwer $ su sudo \u0110\u1ed5i permissions $ chmod u=rwx,g=rx,o=r hello.txt Set permissions $ chmod 766 hello.txt $ chown <your_user>:<your_group> hello.txt reverse-i-search reverse-i-search l\u00e0 m\u1ed9t ti\u1ec7n \u00edch d\u00f9ng \u0111\u1ec3 t\u00ecm ki\u1ebfm l\u1ea1i l\u1ecbch s\u1eed l\u1ec7nh v\u00e0 ch\u1ea1y l\u1ea1i l\u1ec7nh tr\u01b0\u1edbc \u0111\u00f3, d\u00f9ng Ctrl + R Package install/remove commands Li\u1ec7t k\u00ea t\u1ea5t c\u1ea3 available packages $ apt-cache pkgnames T\u00ecm Package Name and Description c\u1ee7a Software $ apt-cache search vsftpd Xem th\u00f4ng tin c\u1ee7a Package $ apt-cache show netcat Xem Dependencies c\u1ee7a Specific Packages $ apt-cache showpkg vsftpd Xem statistics c\u1ee7a Cache $ apt-cache stats Update System Packages $ sudo apt-get update Upgrade Software Packages $ sudo apt-get upgrade Install ho\u1eb7c Upgrade Specific Packages $ sudo apt-get install netcat Install Multiple Packages $ sudo apt-get install nethogs goaccess Install Several Packages s\u1eed d\u1ee5ng Wildcard $ sudo apt-get install '*name*' '*name*' ki\u1ec3u string, t\u00ean c\u1ee7a package-name . Install Packages kh\u00f4ng c\u1ea7n Upgrading $ sudo apt-get install packageName --no-upgrade Ch\u1ec9 Upgrade Specific Packages $ sudo apt-get install packageName --only-upgrade Install Specific Package theo Version $ sudo apt-get install vsftpd=2.3.5-3ubuntu1 Remove Packages kh\u00f4ng c\u1ea7n c\u1ea5u h\u00ecnh $ sudo apt-get remove vsftpd Remove ho\u00e0n to\u00e0n Packages $ sudo apt-get purge vsftpd D\u1ecdn d\u1eb9p Disk Space $ sudo apt-get clean Download m\u1ed7i Source Code c\u1ee7a Package $ sudo apt-get --download-only source vsftpd Download sau \u0111\u00f3 Unpack th\u1eb1ng Package $ sudo apt-get source vsftpd Download r\u1ed3i Unpack xong Compile th\u1eb1ng Package $ sudo apt-get --compile source goaccess Download Package m\u00e0 kh\u00f4ng c\u00e0i \u0111\u1eb7t n\u00f3 $ sudo apt-get download nethogs Xem Change Log c\u1ee7a Package $ sudo apt-get changelog vsftpd Xem Broken Dependencies $ sudo apt-get check Search v\u00e0 Build Dependencies $ sudo apt-get build-dep netcat Auto clean Apt-Get Cache $ sudo apt-get autoclean Auto remove Installed Packages $ sudo apt-get autoremove vsftpd Reference 25 Useful Basic Commands of APT-GET and APT-CACHE for Package Management 37 Important Linux Commands You Should Know 10 Things Every Linux Beginner Should Know","title":"Linux Commands"},{"location":"Linux/commands/#linux-commands","text":"","title":"Linux Commands"},{"location":"Linux/commands/#basic-file-and-directory-management-permission-commands","text":"\u0110i\u1ec1u h\u01b0\u1edbng file system \u0110i\u1ec1u h\u01b0\u1edbng t\u1edbi th\u01b0 m\u1ee5c ch\u1ec9 \u0111\u1ecbnh $ cd ~/.ssh/ \u0110i\u1ec1u h\u01b0\u1edbng quay l\u1ea1i th\u01b0 m\u1ee5c cha $ cd ../Documents T\u1ea1o file m\u1edbi $ touch hello.txt Copy file ho\u1eb7c directory $ cp hello.txt hello.txt Rename file $ mv hello.txt bonjour.txt Remove file $ rm ciao.txt Femove files kh\u00f4ng c\u1ea7n x\u00e1c nh\u1eadn v\u00e0 remove c\u00e1c file con c\u1ee7a n\u00f3 $ rm -rf ~/Downloads Xem list c\u00e1c file trong th\u01b0 m\u1ee5c hi\u1ec7n t\u1ea1i $ ls ~/Downloads cat , grep , v\u00e0 piping Concatenate file, ho\u1eb7c d\u00f9ng \u0111\u1ec3 xem n\u1ed9i dung file $ cat hello.txt cat k\u1ebft h\u1ee3p v\u1edbi grep \u0111\u1ec3 search $ cat guest_list.txt | grep Lucy $ cat /var/log/messages | grep '500 Internal Server Error' D\u00f9ng grep \u0111\u1ec3 t\u00ecm object (any kind of output, not just file contents) $ docker ps | grep my-awesome-container L\u01b0u output c\u1ee7a b\u1ea5t k\u1ef3 l\u1ec7nh n\u00e0o v\u00e0o m\u1ed9t t\u1ec7p b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng redirection (>) $ echo \"Linux was created by Linus Torvalds\" > bio.txt find T\u00ecm th\u01b0 m\u1ee5c b\u1eb1ng name $ find . -name CS101 File permissions v\u00e0 ownership M\u1ecdi t\u1ec7p v\u00e0 th\u01b0 m\u1ee5c trong File system c\u1ee7a Linux \u0111\u1ec1u c\u00f3 permissions v\u00e0 owner . \u0110\u1ec3 xem th\u00f4ng tin v\u1ec1 permissions v\u00e0 owner c\u1ee7a m\u1ed9t file: -rw-r--r-- \u0110\u1ed5i onwer $ su sudo \u0110\u1ed5i permissions $ chmod u=rwx,g=rx,o=r hello.txt Set permissions $ chmod 766 hello.txt $ chown <your_user>:<your_group> hello.txt reverse-i-search reverse-i-search l\u00e0 m\u1ed9t ti\u1ec7n \u00edch d\u00f9ng \u0111\u1ec3 t\u00ecm ki\u1ebfm l\u1ea1i l\u1ecbch s\u1eed l\u1ec7nh v\u00e0 ch\u1ea1y l\u1ea1i l\u1ec7nh tr\u01b0\u1edbc \u0111\u00f3, d\u00f9ng Ctrl + R","title":"Basic file and directory management &amp; permission commands"},{"location":"Linux/commands/#package-installremove-commands","text":"Li\u1ec7t k\u00ea t\u1ea5t c\u1ea3 available packages $ apt-cache pkgnames T\u00ecm Package Name and Description c\u1ee7a Software $ apt-cache search vsftpd Xem th\u00f4ng tin c\u1ee7a Package $ apt-cache show netcat Xem Dependencies c\u1ee7a Specific Packages $ apt-cache showpkg vsftpd Xem statistics c\u1ee7a Cache $ apt-cache stats Update System Packages $ sudo apt-get update Upgrade Software Packages $ sudo apt-get upgrade Install ho\u1eb7c Upgrade Specific Packages $ sudo apt-get install netcat Install Multiple Packages $ sudo apt-get install nethogs goaccess Install Several Packages s\u1eed d\u1ee5ng Wildcard $ sudo apt-get install '*name*' '*name*' ki\u1ec3u string, t\u00ean c\u1ee7a package-name . Install Packages kh\u00f4ng c\u1ea7n Upgrading $ sudo apt-get install packageName --no-upgrade Ch\u1ec9 Upgrade Specific Packages $ sudo apt-get install packageName --only-upgrade Install Specific Package theo Version $ sudo apt-get install vsftpd=2.3.5-3ubuntu1 Remove Packages kh\u00f4ng c\u1ea7n c\u1ea5u h\u00ecnh $ sudo apt-get remove vsftpd Remove ho\u00e0n to\u00e0n Packages $ sudo apt-get purge vsftpd D\u1ecdn d\u1eb9p Disk Space $ sudo apt-get clean Download m\u1ed7i Source Code c\u1ee7a Package $ sudo apt-get --download-only source vsftpd Download sau \u0111\u00f3 Unpack th\u1eb1ng Package $ sudo apt-get source vsftpd Download r\u1ed3i Unpack xong Compile th\u1eb1ng Package $ sudo apt-get --compile source goaccess Download Package m\u00e0 kh\u00f4ng c\u00e0i \u0111\u1eb7t n\u00f3 $ sudo apt-get download nethogs Xem Change Log c\u1ee7a Package $ sudo apt-get changelog vsftpd Xem Broken Dependencies $ sudo apt-get check Search v\u00e0 Build Dependencies $ sudo apt-get build-dep netcat Auto clean Apt-Get Cache $ sudo apt-get autoclean Auto remove Installed Packages $ sudo apt-get autoremove vsftpd","title":"Package install/remove commands"},{"location":"Linux/commands/#reference","text":"25 Useful Basic Commands of APT-GET and APT-CACHE for Package Management 37 Important Linux Commands You Should Know 10 Things Every Linux Beginner Should Know","title":"Reference"},{"location":"Message-Brokers/Message-Brokers/","text":"Message-Brokers Overview Advantages and Disadvantages of using Message broker Use case Overview Message broker - c\u00f2n g\u1ecdi l\u00e0 integration broker ho\u1eb7c interface engine : L\u00e0 m\u1ed9t m\u00f4 h\u00ecnh ki\u1ebfn tr\u00fac (architentural pattern ), \u0111\u00f3ng vai tr\u00f2 l\u00e0 trung gian gi\u1eefa c\u00e1c \u1ee9ng d\u1ee5ng v\u1edbi nhau, l\u00e0m nhi\u1ec7m v\u1ee5 ki\u1ec3m tra, trung chuy\u1ec3n v\u00e0 \u0111i\u1ec1u h\u01b0\u1edbng message t\u1eeb b\u00ean g\u1eedi \u0111\u1ebfn b\u00ean nh\u1eadn, t\u1ed1i gi\u1ea3n h\u00f3a giao ti\u1ebfp gi\u1eefa c\u00e1c \u1ee9ng d\u1ee5ng. Message broker c\u00f3 th\u1ec3 x\u00e1c nh\u1eadn, l\u01b0u tr\u1eef, \u0111\u1ecbnh tuy\u1ebfn v\u00e0 g\u1eedi message \u0111\u1ebfn c\u00e1c target th\u00edch h\u1ee3p. Ch\u00fang \u0111\u00f3ng vai tr\u00f2 trung gian gi\u1eefa c\u00e1c \u1ee9ng d\u1ee5ng kh\u00e1c, cho ph\u00e9p ng\u01b0\u1eddi g\u1eedi \u0111\u01b0a ra message m\u00e0 kh\u00f4ng c\u1ea7n bi\u1ebft ng\u01b0\u1eddi nh\u1eadn \u0111ang \u1edf \u0111\u00e2u, c\u00f3 bao nhi\u00eau ng\u01b0\u1eddi nh\u1eadn v\u00e0 c\u00f3 \u0111ang ho\u1ea1t \u0111\u1ed9ng hay kh\u00f4ng . \u0110i\u1ec1u n\u00e0y t\u1ea1o \u0111i\u1ec1u ki\u1ec7n thu\u1eadn l\u1ee3i cho vi\u1ec7c t\u00e1ch c\u00e1c quy tr\u00ecnh v\u00e0 d\u1ecbch v\u1ee5 trong h\u1ec7 th\u1ed1ng. Message Broker pattern sequence diagram : Service1 v\u00e0 Service2 kh\u00f4ng b\u1ecb ph\u1ee5 thu\u1ed9c v\u1edbi nhau, giao ti\u1ebfp trung gian qua Broker n\u00ean d\u00f9 c\u00f3 kh\u00e1c nhau v\u1ec1 ki\u1ebfn tr\u00fac, c\u00f4ng ngh\u1ec7 v.vv th\u00ec v\u1eabn giao ti\u1ebfp \u0111\u01b0\u1ee3c. Service1 ch\u1ec9 vi\u1ec7c g\u1eedi message \u0111\u1ebfn proxy, r\u1ed3i t\u1eeb \u0111\u00f3 proxy s\u1ebd forward message \u0111\u1ebfn Broker . R\u1ed3i t\u1eeb \u0111\u00f3 Broker s\u1ebd forward message \u0111\u1ebfn Service2 . C\u00f3 th\u1ec3 setup c\u01a1 ch\u1ebf b\u1ea5t \u0111\u1ed3ng b\u1ed9 ( asynchronous ): \u0110\u1ea3m b\u1ea3o c\u00e1c message s\u1ebd \u0111\u01b0\u1ee3c g\u1eedi m\u1ed9t l\u1ea7n duy nh\u1ea5t, cho ph\u00e9p c\u00e1c h\u1ec7 th\u1ed1ng ti\u1ebfp t\u1ee5c ho\u1ea1t \u0111\u1ed9ng khi g\u1eb7p t\u00ecnh tr\u1ea1ng \u0111\u1ed9 tr\u1ec5 cao ho\u1eb7c k\u1ebft n\u1ed1i kh\u00f4ng li\u00ean t\u1ee5c. Message broker models Message broker cung c\u1ea5p hai ki\u1ec3u m\u00f4 h\u00ecnh ph\u00e2n ph\u1ed1i message c\u01a1 b\u1ea3n: Point-to-point messaging : \u0110\u00e2y l\u00e0 d\u1ea1ng m\u00f4 h\u00ecnh ph\u00e2n ph\u1ed1i message s\u1eed d\u1ee5ng trong h\u00e0ng \u0111\u1ee3i queue , c\u00f3 m\u1ed1i quan h\u1ec7 1-1 gi\u1eefa ng\u01b0\u1eddi g\u1eedi v\u00e0 ng\u01b0\u1eddi nh\u1eadn. M\u1ed7i message trong queue ch\u1ec9 \u0111\u01b0\u1ee3c g\u1eedi \u0111\u1ebfn m\u1ed9t ng\u01b0\u1eddi nh\u1eadn v\u00e0 ch\u1ec9 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng m\u1ed9t l\u1ea7n . D\u00f9ng trong c\u00e1c tr\u01b0\u1eddng h\u1ee3p giao d\u1ecbch t\u00e0i ch\u00ednh , c\u1ea3 ng\u01b0\u1eddi g\u1eedi v\u00e0 ng\u01b0\u1eddi nh\u1eadn \u0111\u1ec1u c\u1ea7n \u0111\u1ea3m b\u1ea3o m\u1ed7i giao d\u1ecbch ch\u1ec9 \u0111\u01b0\u1ee3c g\u1eedi m\u1ed9t l\u1ea7n duy nh\u1ea5t. Publish/subscribe messaging : M\u00f4 h\u00ecnh ph\u00e2n ph\u1ed1i message n\u00e0y t\u01b0\u01a1ng t\u1ef1 Pub/Sub trong Redis, publisher s\u1ebd xu\u1ea5t b\u1ea3n c\u00e1c message theo d\u1ea1ng topic v\u00e0 subscriber s\u1ebd \u0111\u0103ng k\u00fd c\u00e1c message h\u1ecd c\u1ea7n nh\u1eadn d\u1ef1a tr\u00ean c\u00e1c topic n\u00e0y. T\u1eeb 2 m\u00f4 h\u00ecnh tr\u00ean, ta \u0111\u00fac k\u1ebft l\u1ea1i m\u1ed9t Message Broker c\u00f3 4 components: Producer - Publishers \u2013 N\u01a1i g\u1eedi message. Consumer \u2013 Subscribers - N\u01a1i nh\u1eadn message Queue - Topic \u2013 L\u00e0 m\u1ed9t folder trong filesystem. Message broker d\u00f9ng n\u00f3 \u0111\u1ec3 qu\u1ea3n l\u00fd, ph\u00e2n ph\u1ed1i messages . Messages - C\u00f3 th\u1ec3 l\u00e0 content trong headers hay metadata. ho\u1eb7c message body content nh\u01b0 binary, JSON, XML, plain text v.vvvv Advantages and Disadvantages of using Message broker Advantages Cung c\u1ea5p m\u1ed9t communication gi\u1eefa c\u00e1c services m\u00e0 kh\u00f4ng c\u1ea7n c\u00e1c services n\u00e0y ph\u1ea3i ch\u1ea1y c\u00f9ng m\u1ed9t th\u1eddi \u0111i\u1ec3m v\u1edbi nhau. C\u1ea3i thi\u1ec7n hi\u1ec7u su\u1ea5t h\u1ec7 th\u1ed1ng b\u1eb1ng c\u00e1ch x\u1eed l\u00fd b\u1ea5t \u0111\u1ed3ng b\u1ed9. C\u00e1c t\u00e1c v\u1ee5 ti\u00eau t\u1ed1n nhi\u1ec1u t\u00e0i nguy\u00ean c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c ph\u00e2n ph\u1ed1i cho c\u00e1c quy tr\u00ecnh x\u1eed l\u00fd ri\u00eang bi\u1ec7t, t\u0103ng t\u1ed1c \u0111\u1ed9 response c\u1ee7a \u1ee9ng d\u1ee5ng v\u00e0 t\u0103ng tr\u1ea3i nghi\u1ec7m ng\u01b0\u1eddi d\u00f9ng. T\u0103ng \u0111\u1ed9 tin c\u1eady b\u1eb1ng c\u00e1ch \u0111\u1ea3m b\u1ea3o vi\u1ec7c truy\u1ec1n t\u1ea3i message l\u00e0 b\u1ea3o m\u1eadt. Ngo\u00e0i ra Message brokers cung c\u1ea5p c\u01a1 ch\u1ebf dead-letter mechanism , trong tr\u01b0\u1eddng h\u1ee3p l\u1ed7i c\u1ee7a ng\u01b0\u1eddi nh\u1eadn, n\u00f3 c\u00f3 th\u1ec3 g\u1eedi l\u1ea1i message ngay l\u1eadp t\u1ee9c ho\u1eb7c sau m\u1ed9t th\u1eddi gian nh\u1ea5t \u0111\u1ecbnh v\u00e0 c\u0169ng h\u1ed7 tr\u1ee3 \u0111\u1ecbnh tuy\u1ebfn c\u00e1c message kh\u00f4ng \u0111\u01b0\u1ee3c g\u1eedi. Disadvantages T\u0103ng \u0111\u1ed9 ph\u1ee9c t\u1ea1p c\u1ee7a h\u1ec7 th\u1ed1ng v\u00e0 Debugging tr\u1edf n\u00ean kh\u00f3 kh\u0103n h\u01a1n. Common Use Case Long-running tasks and crucial API M\u1ed9t s\u1ed1 API c\u00f3 c\u00e1c actions t\u1ed1n th\u1eddi gian v\u00e0 t\u00e0i nguy\u00ean m\u00e0 kh\u00f4ng y\u00eau c\u1ea7u response l\u1ea1i k\u1ebft qu\u1ea3 l\u1eadp t\u1ee9c th\u00ec c\u00f3 th\u1ec3 d\u00f9ng Message Brokers nh\u01b0 m\u1ed9t gi\u1ea3i ph\u00e1p ti\u1ebfp nh\u1eadn v\u00e0 qu\u1ea3n l\u00fd, \u0111i\u1ec1u ph\u1ed1i c\u00e1c request, response gi\u1eefa API v\u1edbi Consumer c\u1ee7a n\u00f3. Microservices Trong th\u1ef1c t\u1ebf, Message Brokers gi\u1ea3i quy\u1ebft \u0111\u01b0\u1ee3c kh\u00e1 nhi\u1ec1u v\u1ea5n \u0111\u1ec1 cho Microservices. \u0110\u1ea3m b\u1ea3o duration/recovery : Do message \u0111\u00e3 \u0111\u01b0\u1ee3c Message Brokers l\u01b0u l\u1ea1i, khi 1 service \u0111ang x\u1eed l\u00fd nh\u01b0ng b\u1ecb crash ho\u1eb7c l\u1ed7i, ta kh\u00f4ng lo b\u1ecb m\u1ea5t d\u1eef li\u1ec7u v\u00ec c\u00f3 th\u1ec3 l\u1ea5y message t\u1eeb Message Brokers ra v\u00e0 ch\u1ea1y l\u1ea1i. Trong 1 h\u1ec7 th\u1ed1ng Microservices s\u1ebd c\u00f3 nhi\u1ec1u Consumer, n\u1ebfu 1, 2 consumer b\u1ecb crash c\u0169ng kh\u00f4ng l\u00e0m s\u1ee5p to\u00e0n h\u1ec7 th\u1ed1ng Ph\u00e2n t\u00e1ch h\u1ec7 th\u1ed1ng : Gi\u00fap ph\u00e2n t\u00e1ch h\u1ec7 th\u1ed1ng th\u00e0nh nhi\u1ec1u service nh\u1ecf h\u01a1n, m\u1ed7i service ch\u1ec9 x\u1eed l\u00fd 1 ch\u1ee9c n\u0103ng nh\u1ea5t \u0111\u1ecbnh H\u1ed7 tr\u1ee3 rate limit, batching : Trong nhi\u1ec1u tr\u01b0\u1eddng h\u1ee3p, n\u0103ng l\u1ef1c x\u1eed l\u00fd h\u1ec7 th\u1ed1ng c\u00f3 h\u1ea1n. V\u1edbi Message Brokers , ta c\u00f3 th\u1ec3 d\u1ea7n d\u1ea7n l\u1ea5y message trong Message Brokers ra x\u1eed l\u00fd m\u00e0 kh\u00f4ng s\u1ee3 t\u00ecnh tr\u1ea1ng nh\u1eadn nhi\u1ec1u message qu\u00e1 b\u1ecb qu\u00e1 t\u1ea3i. D\u1ec5 scaling h\u1ec7 th\u1ed1ng : V\u00e0o gi\u1edd cao \u0111i\u1ec3m, nhi\u1ec1u truy v\u1ea5n, ta c\u00f3 th\u1ec3 t\u0103ng s\u1ed1 l\u01b0\u1ee3ng consumer l\u00ean \u0111\u1ec3 x\u1eed l\u00fd \u0111\u01b0\u1ee3c nhi\u1ec1u messege h\u01a1n. Khi kh\u00f4ng c\u1ea7n ta c\u00f3 th\u1ec3 gi\u1ea3m l\u1ea1i. More Mobile applications Transactional systems Controlling data feeds SNS/SQS Work Queues Topics, Exchange, Channel Reference Message Brokers - IBM message-broker - tsh Blog","title":"Message-Brokers"},{"location":"Message-Brokers/Message-Brokers/#message-brokers","text":"Overview Advantages and Disadvantages of using Message broker Use case","title":"Message-Brokers"},{"location":"Message-Brokers/Message-Brokers/#overview","text":"Message broker - c\u00f2n g\u1ecdi l\u00e0 integration broker ho\u1eb7c interface engine : L\u00e0 m\u1ed9t m\u00f4 h\u00ecnh ki\u1ebfn tr\u00fac (architentural pattern ), \u0111\u00f3ng vai tr\u00f2 l\u00e0 trung gian gi\u1eefa c\u00e1c \u1ee9ng d\u1ee5ng v\u1edbi nhau, l\u00e0m nhi\u1ec7m v\u1ee5 ki\u1ec3m tra, trung chuy\u1ec3n v\u00e0 \u0111i\u1ec1u h\u01b0\u1edbng message t\u1eeb b\u00ean g\u1eedi \u0111\u1ebfn b\u00ean nh\u1eadn, t\u1ed1i gi\u1ea3n h\u00f3a giao ti\u1ebfp gi\u1eefa c\u00e1c \u1ee9ng d\u1ee5ng. Message broker c\u00f3 th\u1ec3 x\u00e1c nh\u1eadn, l\u01b0u tr\u1eef, \u0111\u1ecbnh tuy\u1ebfn v\u00e0 g\u1eedi message \u0111\u1ebfn c\u00e1c target th\u00edch h\u1ee3p. Ch\u00fang \u0111\u00f3ng vai tr\u00f2 trung gian gi\u1eefa c\u00e1c \u1ee9ng d\u1ee5ng kh\u00e1c, cho ph\u00e9p ng\u01b0\u1eddi g\u1eedi \u0111\u01b0a ra message m\u00e0 kh\u00f4ng c\u1ea7n bi\u1ebft ng\u01b0\u1eddi nh\u1eadn \u0111ang \u1edf \u0111\u00e2u, c\u00f3 bao nhi\u00eau ng\u01b0\u1eddi nh\u1eadn v\u00e0 c\u00f3 \u0111ang ho\u1ea1t \u0111\u1ed9ng hay kh\u00f4ng . \u0110i\u1ec1u n\u00e0y t\u1ea1o \u0111i\u1ec1u ki\u1ec7n thu\u1eadn l\u1ee3i cho vi\u1ec7c t\u00e1ch c\u00e1c quy tr\u00ecnh v\u00e0 d\u1ecbch v\u1ee5 trong h\u1ec7 th\u1ed1ng. Message Broker pattern sequence diagram : Service1 v\u00e0 Service2 kh\u00f4ng b\u1ecb ph\u1ee5 thu\u1ed9c v\u1edbi nhau, giao ti\u1ebfp trung gian qua Broker n\u00ean d\u00f9 c\u00f3 kh\u00e1c nhau v\u1ec1 ki\u1ebfn tr\u00fac, c\u00f4ng ngh\u1ec7 v.vv th\u00ec v\u1eabn giao ti\u1ebfp \u0111\u01b0\u1ee3c. Service1 ch\u1ec9 vi\u1ec7c g\u1eedi message \u0111\u1ebfn proxy, r\u1ed3i t\u1eeb \u0111\u00f3 proxy s\u1ebd forward message \u0111\u1ebfn Broker . R\u1ed3i t\u1eeb \u0111\u00f3 Broker s\u1ebd forward message \u0111\u1ebfn Service2 . C\u00f3 th\u1ec3 setup c\u01a1 ch\u1ebf b\u1ea5t \u0111\u1ed3ng b\u1ed9 ( asynchronous ): \u0110\u1ea3m b\u1ea3o c\u00e1c message s\u1ebd \u0111\u01b0\u1ee3c g\u1eedi m\u1ed9t l\u1ea7n duy nh\u1ea5t, cho ph\u00e9p c\u00e1c h\u1ec7 th\u1ed1ng ti\u1ebfp t\u1ee5c ho\u1ea1t \u0111\u1ed9ng khi g\u1eb7p t\u00ecnh tr\u1ea1ng \u0111\u1ed9 tr\u1ec5 cao ho\u1eb7c k\u1ebft n\u1ed1i kh\u00f4ng li\u00ean t\u1ee5c.","title":"Overview"},{"location":"Message-Brokers/Message-Brokers/#message-broker-models","text":"Message broker cung c\u1ea5p hai ki\u1ec3u m\u00f4 h\u00ecnh ph\u00e2n ph\u1ed1i message c\u01a1 b\u1ea3n: Point-to-point messaging : \u0110\u00e2y l\u00e0 d\u1ea1ng m\u00f4 h\u00ecnh ph\u00e2n ph\u1ed1i message s\u1eed d\u1ee5ng trong h\u00e0ng \u0111\u1ee3i queue , c\u00f3 m\u1ed1i quan h\u1ec7 1-1 gi\u1eefa ng\u01b0\u1eddi g\u1eedi v\u00e0 ng\u01b0\u1eddi nh\u1eadn. M\u1ed7i message trong queue ch\u1ec9 \u0111\u01b0\u1ee3c g\u1eedi \u0111\u1ebfn m\u1ed9t ng\u01b0\u1eddi nh\u1eadn v\u00e0 ch\u1ec9 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng m\u1ed9t l\u1ea7n . D\u00f9ng trong c\u00e1c tr\u01b0\u1eddng h\u1ee3p giao d\u1ecbch t\u00e0i ch\u00ednh , c\u1ea3 ng\u01b0\u1eddi g\u1eedi v\u00e0 ng\u01b0\u1eddi nh\u1eadn \u0111\u1ec1u c\u1ea7n \u0111\u1ea3m b\u1ea3o m\u1ed7i giao d\u1ecbch ch\u1ec9 \u0111\u01b0\u1ee3c g\u1eedi m\u1ed9t l\u1ea7n duy nh\u1ea5t. Publish/subscribe messaging : M\u00f4 h\u00ecnh ph\u00e2n ph\u1ed1i message n\u00e0y t\u01b0\u01a1ng t\u1ef1 Pub/Sub trong Redis, publisher s\u1ebd xu\u1ea5t b\u1ea3n c\u00e1c message theo d\u1ea1ng topic v\u00e0 subscriber s\u1ebd \u0111\u0103ng k\u00fd c\u00e1c message h\u1ecd c\u1ea7n nh\u1eadn d\u1ef1a tr\u00ean c\u00e1c topic n\u00e0y. T\u1eeb 2 m\u00f4 h\u00ecnh tr\u00ean, ta \u0111\u00fac k\u1ebft l\u1ea1i m\u1ed9t Message Broker c\u00f3 4 components: Producer - Publishers \u2013 N\u01a1i g\u1eedi message. Consumer \u2013 Subscribers - N\u01a1i nh\u1eadn message Queue - Topic \u2013 L\u00e0 m\u1ed9t folder trong filesystem. Message broker d\u00f9ng n\u00f3 \u0111\u1ec3 qu\u1ea3n l\u00fd, ph\u00e2n ph\u1ed1i messages . Messages - C\u00f3 th\u1ec3 l\u00e0 content trong headers hay metadata. ho\u1eb7c message body content nh\u01b0 binary, JSON, XML, plain text v.vvvv","title":"Message broker models"},{"location":"Message-Brokers/Message-Brokers/#advantages-and-disadvantages-of-using-message-broker","text":"","title":"Advantages and Disadvantages of using Message broker"},{"location":"Message-Brokers/Message-Brokers/#advantages","text":"Cung c\u1ea5p m\u1ed9t communication gi\u1eefa c\u00e1c services m\u00e0 kh\u00f4ng c\u1ea7n c\u00e1c services n\u00e0y ph\u1ea3i ch\u1ea1y c\u00f9ng m\u1ed9t th\u1eddi \u0111i\u1ec3m v\u1edbi nhau. C\u1ea3i thi\u1ec7n hi\u1ec7u su\u1ea5t h\u1ec7 th\u1ed1ng b\u1eb1ng c\u00e1ch x\u1eed l\u00fd b\u1ea5t \u0111\u1ed3ng b\u1ed9. C\u00e1c t\u00e1c v\u1ee5 ti\u00eau t\u1ed1n nhi\u1ec1u t\u00e0i nguy\u00ean c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c ph\u00e2n ph\u1ed1i cho c\u00e1c quy tr\u00ecnh x\u1eed l\u00fd ri\u00eang bi\u1ec7t, t\u0103ng t\u1ed1c \u0111\u1ed9 response c\u1ee7a \u1ee9ng d\u1ee5ng v\u00e0 t\u0103ng tr\u1ea3i nghi\u1ec7m ng\u01b0\u1eddi d\u00f9ng. T\u0103ng \u0111\u1ed9 tin c\u1eady b\u1eb1ng c\u00e1ch \u0111\u1ea3m b\u1ea3o vi\u1ec7c truy\u1ec1n t\u1ea3i message l\u00e0 b\u1ea3o m\u1eadt. Ngo\u00e0i ra Message brokers cung c\u1ea5p c\u01a1 ch\u1ebf dead-letter mechanism , trong tr\u01b0\u1eddng h\u1ee3p l\u1ed7i c\u1ee7a ng\u01b0\u1eddi nh\u1eadn, n\u00f3 c\u00f3 th\u1ec3 g\u1eedi l\u1ea1i message ngay l\u1eadp t\u1ee9c ho\u1eb7c sau m\u1ed9t th\u1eddi gian nh\u1ea5t \u0111\u1ecbnh v\u00e0 c\u0169ng h\u1ed7 tr\u1ee3 \u0111\u1ecbnh tuy\u1ebfn c\u00e1c message kh\u00f4ng \u0111\u01b0\u1ee3c g\u1eedi.","title":"Advantages"},{"location":"Message-Brokers/Message-Brokers/#disadvantages","text":"T\u0103ng \u0111\u1ed9 ph\u1ee9c t\u1ea1p c\u1ee7a h\u1ec7 th\u1ed1ng v\u00e0 Debugging tr\u1edf n\u00ean kh\u00f3 kh\u0103n h\u01a1n.","title":"Disadvantages"},{"location":"Message-Brokers/Message-Brokers/#common-use-case","text":"","title":"Common Use Case"},{"location":"Message-Brokers/Message-Brokers/#long-running-tasks-and-crucial-api","text":"M\u1ed9t s\u1ed1 API c\u00f3 c\u00e1c actions t\u1ed1n th\u1eddi gian v\u00e0 t\u00e0i nguy\u00ean m\u00e0 kh\u00f4ng y\u00eau c\u1ea7u response l\u1ea1i k\u1ebft qu\u1ea3 l\u1eadp t\u1ee9c th\u00ec c\u00f3 th\u1ec3 d\u00f9ng Message Brokers nh\u01b0 m\u1ed9t gi\u1ea3i ph\u00e1p ti\u1ebfp nh\u1eadn v\u00e0 qu\u1ea3n l\u00fd, \u0111i\u1ec1u ph\u1ed1i c\u00e1c request, response gi\u1eefa API v\u1edbi Consumer c\u1ee7a n\u00f3.","title":"Long-running tasks and crucial API"},{"location":"Message-Brokers/Message-Brokers/#microservices","text":"Trong th\u1ef1c t\u1ebf, Message Brokers gi\u1ea3i quy\u1ebft \u0111\u01b0\u1ee3c kh\u00e1 nhi\u1ec1u v\u1ea5n \u0111\u1ec1 cho Microservices. \u0110\u1ea3m b\u1ea3o duration/recovery : Do message \u0111\u00e3 \u0111\u01b0\u1ee3c Message Brokers l\u01b0u l\u1ea1i, khi 1 service \u0111ang x\u1eed l\u00fd nh\u01b0ng b\u1ecb crash ho\u1eb7c l\u1ed7i, ta kh\u00f4ng lo b\u1ecb m\u1ea5t d\u1eef li\u1ec7u v\u00ec c\u00f3 th\u1ec3 l\u1ea5y message t\u1eeb Message Brokers ra v\u00e0 ch\u1ea1y l\u1ea1i. Trong 1 h\u1ec7 th\u1ed1ng Microservices s\u1ebd c\u00f3 nhi\u1ec1u Consumer, n\u1ebfu 1, 2 consumer b\u1ecb crash c\u0169ng kh\u00f4ng l\u00e0m s\u1ee5p to\u00e0n h\u1ec7 th\u1ed1ng Ph\u00e2n t\u00e1ch h\u1ec7 th\u1ed1ng : Gi\u00fap ph\u00e2n t\u00e1ch h\u1ec7 th\u1ed1ng th\u00e0nh nhi\u1ec1u service nh\u1ecf h\u01a1n, m\u1ed7i service ch\u1ec9 x\u1eed l\u00fd 1 ch\u1ee9c n\u0103ng nh\u1ea5t \u0111\u1ecbnh H\u1ed7 tr\u1ee3 rate limit, batching : Trong nhi\u1ec1u tr\u01b0\u1eddng h\u1ee3p, n\u0103ng l\u1ef1c x\u1eed l\u00fd h\u1ec7 th\u1ed1ng c\u00f3 h\u1ea1n. V\u1edbi Message Brokers , ta c\u00f3 th\u1ec3 d\u1ea7n d\u1ea7n l\u1ea5y message trong Message Brokers ra x\u1eed l\u00fd m\u00e0 kh\u00f4ng s\u1ee3 t\u00ecnh tr\u1ea1ng nh\u1eadn nhi\u1ec1u message qu\u00e1 b\u1ecb qu\u00e1 t\u1ea3i. D\u1ec5 scaling h\u1ec7 th\u1ed1ng : V\u00e0o gi\u1edd cao \u0111i\u1ec3m, nhi\u1ec1u truy v\u1ea5n, ta c\u00f3 th\u1ec3 t\u0103ng s\u1ed1 l\u01b0\u1ee3ng consumer l\u00ean \u0111\u1ec3 x\u1eed l\u00fd \u0111\u01b0\u1ee3c nhi\u1ec1u messege h\u01a1n. Khi kh\u00f4ng c\u1ea7n ta c\u00f3 th\u1ec3 gi\u1ea3m l\u1ea1i.","title":"Microservices"},{"location":"Message-Brokers/Message-Brokers/#more","text":"Mobile applications Transactional systems Controlling data feeds","title":"More"},{"location":"Message-Brokers/Message-Brokers/#snssqs","text":"","title":"SNS/SQS"},{"location":"Message-Brokers/Message-Brokers/#work-queues","text":"","title":"Work Queues"},{"location":"Message-Brokers/Message-Brokers/#topics-exchange-channel","text":"","title":"Topics, Exchange, Channel"},{"location":"Message-Brokers/Message-Brokers/#reference","text":"Message Brokers - IBM message-broker - tsh Blog","title":"Reference"},{"location":"Message-Brokers/Publish-Subscribe/","text":"Publish-Subscriber M\u1ed9t message \u0111\u01b0\u1ee3c g\u1eedi t\u1edbi nhi\u1ec1u consumer kh\u00e1c nhau \u0111\u01b0\u1ee3c RabbitMQ ph\u00e2n ph\u1ed1i d\u1ef1a tr\u00ean Publish/Subscribe . Publish/subscribe messaging : M\u00f4 h\u00ecnh ph\u00e2n ph\u1ed1i message n\u00e0y t\u01b0\u01a1ng t\u1ef1 Pub/Sub trong Redis, publisher s\u1ebd xu\u1ea5t b\u1ea3n c\u00e1c message theo d\u1ea1ng topic v\u00e0 subscriber s\u1ebd \u0111\u0103ng k\u00fd c\u00e1c message h\u1ecd c\u1ea7n nh\u1eadn d\u1ef1a tr\u00ean c\u00e1c topic n\u00e0y. Trong v\u00ed d\u1ee5 v\u1ec1 Publish-Subscriber n\u00e0y, ta s\u1ebd x\u00e2y d\u1ef1ng m\u1ed9t h\u1ec7 th\u1ed1ng log \u0111\u01a1n gi\u1ea3n g\u1ed3m c\u00f3 2 th\u00e0nh ph\u1ea7n: M\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh s\u1ebd ph\u00e1t sinh ra log M\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh \u0111\u1ec3 nh\u1eadn log v\u00e0 in n\u00f3 ra m\u00e0n h\u00ecnh. T\u1ea1i m\u1ed9t th\u1eddi \u0111i\u1ec3m, ch\u00fang ta s\u1ebd t\u1ea1o ra log v\u00e0 d\u00f9ng m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh \u0111\u1ec3 ti\u1ebfp nh\u1eadn v\u00e0 ghi ra disk, m\u1ed9t m\u00e1y kh\u00e1c \u0111\u1ec3 l\u1ea5y l\u1ea1i nh\u1eefng log v\u00e0 hi\u1ec3n th\u1ecb n\u00f3 ra m\u00e0n h\u00ecnh. C\u00e1c b\u1ea3n tin log s\u1ebd \u0111\u01b0\u1ee3c g\u1eedi \u0111\u1ebfn t\u1ea5t c\u1ea3 c\u00e1c consumer . Exchange Trong v\u00ed d\u1ee5 n\u00e0y, ta d\u00f9ng fanout exchange channel . exchange_declare ( exchange = 'logs' , type = 'fanout' ) V\u1edbi fanout , khi m\u1ed9t message \u0111\u01b0\u1ee3c g\u1eedi \u0111i, n\u00f3 s\u1ebd \u0111\u1ea9y \u0111\u1ebfn t\u1ea5t c\u1ea3 c\u00e1c queue hi\u1ec7n c\u00f3. channel . basic_publish ( exchange = 'logs' , routing_key = '' , body = message ) Temporary queues C\u00e1c worker l\u00e0m vi\u1ec7c v\u1edbi nhau qua c\u00f9ng m\u1ed9t queue , v\u00ec th\u1ebf vi\u1ec7c \u0111\u1eb7t t\u00ean cho queue r\u1ea5t quan tr\u1ecdng, n\u00f3 gi\u00fap ch\u00fang ta \u0111\u1ecbnh h\u00ecnh \u0111\u01b0\u1ee3c c\u00f4ng vi\u1ec7c m\u00e0 ch\u00fang x\u1eed l\u00fd. Trong m\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p , ch\u00fang ta mu\u1ed1n l\u1eafng nghe t\u1ea5t c\u1ea3 c\u00e1c log message h\u00e3y l\u00e0m theo c\u00e1c b\u01b0\u1edbc sau: \u0110\u1ea7u ti\u00ean, m\u1ed7i khi k\u1ebft n\u1ed1i t\u1edbi RabbitMQ, ch\u00fang ta c\u1ea7n ph\u1ea3i l\u00e0m m\u1edbi c\u00e1c queue v\u00e0 t\u1ea1o ra m\u1ed9t queue v\u1edbi t\u00ean ng\u1eabu nhi\u00ean. \u0110\u1ec3 t\u1ea1o ra m\u1ed9t h\u00e0ng \u0111\u1ee3i t\u1ea1m th\u1eddi (temporary queues), ch\u00fang ta s\u1eed d\u1ee5ng code nh\u01b0 sau: result = channel . queue_declare () Khi th\u1ef1c thi, RabbitMQ s\u1ebd t\u1ea1o ra 1 queue c\u00f3 t\u00ean ng\u1eabu nhi\u00ean gi\u1ed1ng nh\u01b0 amq.gen-JzTY20BRgKO-HjmUJj0wLg Sau \u0111\u00f3, m\u1ed7i l\u1ea7n ng\u1eaft k\u1ebft n\u1ed1i queue s\u1ebd b\u1ecb x\u00f3a v\u1edbi t\u00f9y ch\u1ecdn exclusive : result = channel . queue_declare ( exclusive = True ) Bindings \u1ede ph\u1ea7n tr\u00ean, ch\u00fang ta \u0111\u00e3 t\u1ea1o ra m\u1ed9t exchange ki\u1ec3u fanout v\u00e0 m\u1ed9t queue . B\u00e2y gi\u1edd, ch\u00fang ta c\u1ea7n ph\u1ea3i \"ch\u1ec9\" cho exchange bi\u1ebft ph\u1ea3i g\u1eedi message cho queue nh\u01b0 th\u1ebf n\u00e0o b\u1eb1ng c\u00e1ch d\u00f9ng binding . channel . queue_bind ( exchange = 'logs' , queue = result . method . queue ) K\u1ebft qu\u1ea3 l\u00e0 implement m\u00f4 h\u00ecnh Publish-Subscriber theo s\u01a1 \u0111\u1ed3 sau: Ch\u1ea1y ch\u01b0\u01a1ng tr\u00ecnh: python emit_log.py K\u1ebft qu\u1ea3 ghi log: sudo rabbitmqctl list_bindings # => Listing bindings ... # => logs exchange amq.gen-JzTY20BRgKO-HjmUJj0wLg queue [] # => logs exchange amq.gen-vso0PVvyiRIL2WoV3i48Yg queue [] # => ...done. Source code emit_log.py receive_logs.py Reference rabbitmq - tutorial-three-python","title":"Publish-Subscriber"},{"location":"Message-Brokers/Publish-Subscribe/#publish-subscriber","text":"M\u1ed9t message \u0111\u01b0\u1ee3c g\u1eedi t\u1edbi nhi\u1ec1u consumer kh\u00e1c nhau \u0111\u01b0\u1ee3c RabbitMQ ph\u00e2n ph\u1ed1i d\u1ef1a tr\u00ean Publish/Subscribe . Publish/subscribe messaging : M\u00f4 h\u00ecnh ph\u00e2n ph\u1ed1i message n\u00e0y t\u01b0\u01a1ng t\u1ef1 Pub/Sub trong Redis, publisher s\u1ebd xu\u1ea5t b\u1ea3n c\u00e1c message theo d\u1ea1ng topic v\u00e0 subscriber s\u1ebd \u0111\u0103ng k\u00fd c\u00e1c message h\u1ecd c\u1ea7n nh\u1eadn d\u1ef1a tr\u00ean c\u00e1c topic n\u00e0y. Trong v\u00ed d\u1ee5 v\u1ec1 Publish-Subscriber n\u00e0y, ta s\u1ebd x\u00e2y d\u1ef1ng m\u1ed9t h\u1ec7 th\u1ed1ng log \u0111\u01a1n gi\u1ea3n g\u1ed3m c\u00f3 2 th\u00e0nh ph\u1ea7n: M\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh s\u1ebd ph\u00e1t sinh ra log M\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh \u0111\u1ec3 nh\u1eadn log v\u00e0 in n\u00f3 ra m\u00e0n h\u00ecnh. T\u1ea1i m\u1ed9t th\u1eddi \u0111i\u1ec3m, ch\u00fang ta s\u1ebd t\u1ea1o ra log v\u00e0 d\u00f9ng m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh \u0111\u1ec3 ti\u1ebfp nh\u1eadn v\u00e0 ghi ra disk, m\u1ed9t m\u00e1y kh\u00e1c \u0111\u1ec3 l\u1ea5y l\u1ea1i nh\u1eefng log v\u00e0 hi\u1ec3n th\u1ecb n\u00f3 ra m\u00e0n h\u00ecnh. C\u00e1c b\u1ea3n tin log s\u1ebd \u0111\u01b0\u1ee3c g\u1eedi \u0111\u1ebfn t\u1ea5t c\u1ea3 c\u00e1c consumer .","title":"Publish-Subscriber"},{"location":"Message-Brokers/Publish-Subscribe/#exchange","text":"Trong v\u00ed d\u1ee5 n\u00e0y, ta d\u00f9ng fanout exchange channel . exchange_declare ( exchange = 'logs' , type = 'fanout' ) V\u1edbi fanout , khi m\u1ed9t message \u0111\u01b0\u1ee3c g\u1eedi \u0111i, n\u00f3 s\u1ebd \u0111\u1ea9y \u0111\u1ebfn t\u1ea5t c\u1ea3 c\u00e1c queue hi\u1ec7n c\u00f3. channel . basic_publish ( exchange = 'logs' , routing_key = '' , body = message )","title":"Exchange"},{"location":"Message-Brokers/Publish-Subscribe/#temporary-queues","text":"C\u00e1c worker l\u00e0m vi\u1ec7c v\u1edbi nhau qua c\u00f9ng m\u1ed9t queue , v\u00ec th\u1ebf vi\u1ec7c \u0111\u1eb7t t\u00ean cho queue r\u1ea5t quan tr\u1ecdng, n\u00f3 gi\u00fap ch\u00fang ta \u0111\u1ecbnh h\u00ecnh \u0111\u01b0\u1ee3c c\u00f4ng vi\u1ec7c m\u00e0 ch\u00fang x\u1eed l\u00fd. Trong m\u1ed9t s\u1ed1 tr\u01b0\u1eddng h\u1ee3p , ch\u00fang ta mu\u1ed1n l\u1eafng nghe t\u1ea5t c\u1ea3 c\u00e1c log message h\u00e3y l\u00e0m theo c\u00e1c b\u01b0\u1edbc sau: \u0110\u1ea7u ti\u00ean, m\u1ed7i khi k\u1ebft n\u1ed1i t\u1edbi RabbitMQ, ch\u00fang ta c\u1ea7n ph\u1ea3i l\u00e0m m\u1edbi c\u00e1c queue v\u00e0 t\u1ea1o ra m\u1ed9t queue v\u1edbi t\u00ean ng\u1eabu nhi\u00ean. \u0110\u1ec3 t\u1ea1o ra m\u1ed9t h\u00e0ng \u0111\u1ee3i t\u1ea1m th\u1eddi (temporary queues), ch\u00fang ta s\u1eed d\u1ee5ng code nh\u01b0 sau: result = channel . queue_declare () Khi th\u1ef1c thi, RabbitMQ s\u1ebd t\u1ea1o ra 1 queue c\u00f3 t\u00ean ng\u1eabu nhi\u00ean gi\u1ed1ng nh\u01b0 amq.gen-JzTY20BRgKO-HjmUJj0wLg Sau \u0111\u00f3, m\u1ed7i l\u1ea7n ng\u1eaft k\u1ebft n\u1ed1i queue s\u1ebd b\u1ecb x\u00f3a v\u1edbi t\u00f9y ch\u1ecdn exclusive : result = channel . queue_declare ( exclusive = True )","title":"Temporary queues"},{"location":"Message-Brokers/Publish-Subscribe/#bindings","text":"\u1ede ph\u1ea7n tr\u00ean, ch\u00fang ta \u0111\u00e3 t\u1ea1o ra m\u1ed9t exchange ki\u1ec3u fanout v\u00e0 m\u1ed9t queue . B\u00e2y gi\u1edd, ch\u00fang ta c\u1ea7n ph\u1ea3i \"ch\u1ec9\" cho exchange bi\u1ebft ph\u1ea3i g\u1eedi message cho queue nh\u01b0 th\u1ebf n\u00e0o b\u1eb1ng c\u00e1ch d\u00f9ng binding . channel . queue_bind ( exchange = 'logs' , queue = result . method . queue ) K\u1ebft qu\u1ea3 l\u00e0 implement m\u00f4 h\u00ecnh Publish-Subscriber theo s\u01a1 \u0111\u1ed3 sau: Ch\u1ea1y ch\u01b0\u01a1ng tr\u00ecnh: python emit_log.py K\u1ebft qu\u1ea3 ghi log: sudo rabbitmqctl list_bindings # => Listing bindings ... # => logs exchange amq.gen-JzTY20BRgKO-HjmUJj0wLg queue [] # => logs exchange amq.gen-vso0PVvyiRIL2WoV3i48Yg queue [] # => ...done.","title":"Bindings"},{"location":"Message-Brokers/Publish-Subscribe/#source-code","text":"emit_log.py receive_logs.py","title":"Source code"},{"location":"Message-Brokers/Publish-Subscribe/#reference","text":"rabbitmq - tutorial-three-python","title":"Reference"},{"location":"Message-Brokers/RabbitMQ/","text":"RabbitMQ Overview Features Message flow in RabbitMQ Types of Exchanges Overview RabbitMQ l\u00e0 m\u1ed9t distributed Message broker , c\u00f3 c\u00e1c \u0111\u1eb7c tr\u01b0ng nh\u01b0 fast , scalable , v\u00e0 durable . RabbitMQ s\u1eed d\u1ee5ng giao th\u1ee9c AMQP - Advanced Message Queue Protocol - m\u1ed9t giao th\u1ee9c c\u00f3 d\u00e2y (wire-protocol), c\u00f3 kh\u1ea3 n\u0103ng bi\u1ec3u di\u1ec5n c\u00e1c message ph\u00f9 h\u1ee3p v\u1edbi \u0111\u1ecbnh d\u1ea1ng d\u1eef li\u1ec7u, vai tr\u00f2 giao th\u1ee9c trung gian cho vi\u1ec7c truy\u1ec1n c\u00e1c g\u00f3i tin trong Application Layer c\u1ee7a m\u00f4 h\u00ecnh OSI. RabbitMQ \u0111\u00f3ng vai tr\u00f2 nh\u01b0 m\u1ed9t ph\u1ea7n m\u1ec1m trung gian trong vi\u1ec7c trao \u0111\u1ed5i d\u1eef li\u1ec7u gi\u1eefa c\u00e1c process , application , system ho\u1eb7c server v\u1edbi nhau. RabbitMQ s\u1ebd nh\u1eadn message \u0111\u1ebfn t\u1eeb c\u00e1c th\u00e0nh ph\u1ea7n kh\u00e1c nhau trong h\u1ec7 th\u1ed1ng, l\u01b0u tr\u1eef message an to\u00e0n r\u1ed3i sau \u0111\u00f3 g\u1eedi message \u0111\u1ebfn target. RabbitMQ c\u00f3 th\u1ec3 ch\u1ea1y tr\u00ean nhi\u1ec1u OS, Cloud v\u00e0 cung c\u1ea5p m\u1ed9t lo\u1ea1t c\u00e1c c\u00f4ng c\u1ee5 d\u00e0nh cho nh\u00e0 ph\u00e1t tri\u1ec3n v\u1edbi h\u1ea7u h\u1ebft c\u00e1c ng\u00f4n ng\u1eef ph\u1ed5 bi\u1ebfn. \u0110\u00e2y l\u00e0 m\u1ed9t architecture c\u01a1 b\u1ea3n c\u1ee7a message queue.: Producer : l\u00e0 \u1ee9ng d\u1ee5ng client, t\u1ea1o message v\u00e0 publish t\u1edbi broker Broker - RabbitMQ: nh\u1eadn message t\u1eeb Producer , message \u0111\u01b0\u1ee3c \u0111\u01b0a v\u00e0o Exchange \u0111\u1ec3 \u0111\u1ecbnh tuy\u1ebfn n\u00f3 \u0111\u1ebfn 0 ho\u1eb7c nhi\u1ec1u Queue d\u1ef1a tr\u00ean c\u00e1c r\u00e0ng bu\u1ed9c ( binding ) v\u00e0 c\u00e1c kh\u00f3a \u0111\u1ecbnh tuy\u1ebfn ( routing key ). Consumer : l\u00e0 \u1ee9ng d\u1ee5ng client kh\u00e1c, k\u1ebft n\u1ed1i \u0111\u1ebfn queue , subscribe v\u00e0 consume message. Features Transparency : M\u1ed9t Producer kh\u00f4ng c\u1ea7n ph\u1ea3i bi\u1ebft Consumer . N\u00f3 ch\u1ec9 vi\u1ec7c g\u1eedi message \u0111\u1ebfn c\u00e1c queue trong Message broker . Consumer ch\u1ec9 vi\u1ec7c \u0111\u0103ng k\u00fd nh\u1eadn message t\u1eeb c\u00e1c queue n\u00e0y. Many Client : V\u00ec Producer giao ti\u1ebfp v\u1edbi Consumer trung gian qua Message broker n\u00ean d\u00f9 Producer v\u00e0 Consumer c\u00f3 kh\u00e1c bi\u1ec7t nhau v\u1ec1 ng\u00f4n ng\u1eef th\u00ec giao ti\u1ebfp n\u00e0y v\u1eabn ok. Hi\u1ec7n nay RabbitMQ \u0111\u00e3 h\u1ed7 tr\u1ee3 r\u1ea5t nhi\u1ec1u ng\u00f4n ng\u1eef kh\u00e1c nhau. Asynchronous : Producer kh\u00f4ng th\u1ec3 bi\u1ebft khi n\u00e0o message \u0111\u1ebfn \u0111\u01b0\u1ee3c Consumer hay khi n\u00e0o message \u0111\u01b0\u1ee3c Consumer x\u1eed l\u00fd xong. \u0110\u1ed1i v\u1edbi Producer , vi\u1ec7c push message \u0111\u1ebfn Message broker l\u00e0 xong vi\u1ec7c c\u1ee7a n\u00f3. Consumer s\u1ebd l\u1ea5y message v\u1ec1 khi n\u00f3 mu\u1ed1n. \u0110\u1eb7c \u0111i\u1ec3m n\u00e0y c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c t\u1eadn d\u1ee5ng \u0111\u1ec3 x\u00e2y d\u1ef1ng c\u00e1c h\u1ec7 th\u1ed1ng l\u01b0u tr\u1eef v\u00e0 x\u1eed l\u00fd log. Flexible Routing : message \u0111\u01b0\u1ee3c routing th\u00f4ng qua Exchange tr\u01b0\u1edbc khi \u0111\u1ebfn Queue . RabbitMQ cung c\u1ea5p m\u1ed9t s\u1ed1 lo\u1ea1i Exchange th\u01b0\u1eddng d\u00f9ng v\u00e0 ta c\u0169ng c\u00f3 th\u1ec3 \u0111\u1ecbnh ngh\u0129a ri\u00eang Exhange \u0111\u1ec3 ph\u00f9 h\u1ee3p v\u1edbi h\u1ec7 th\u1ed1ng c\u1ee7a m\u00ecnh. Lightweight : Nh\u1eb9, m\u1ed9t single instance c\u1ee7a RabbitMQ ch\u1ec9 chi\u1ebfm kho\u1ea3ng 40MB RAM. Multiple message protocol : AMQP, MQTT, STOMP, HTTP. Cluster : Ta c\u00f3 th\u1ec3 gom nhi\u1ec1u RabbitMQ instance v\u00e0o m\u1ed9t Cluster . M\u1ed9t q \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a tr\u00ean m\u1ed9t instance , khi \u0111\u00f3 \u0111\u1ec1u c\u00f3 th\u1ec3 truy xu\u1ea5t t\u1eeb c\u00e1c instance c\u00f2n l\u1ea1i. C\u00f3 th\u1ec3 t\u1eadn d\u1ee5ng \u0111\u1ec3 l\u00e0m load balancing . High availibilty : \u0110\u1eb7c tr\u01b0ng nh\u1ea5t c\u1ee7a m\u1ed9t Message Broker Reliability : C\u00f3 c\u01a1 ch\u1ebf ACK nh\u01b0 c\u1ee7a m\u00f4 h\u00ecnh client-server \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o message \u0111\u01b0\u1ee3c nh\u1eadn b\u1edfi Consumer \u0111\u00e3 \u0111\u01b0\u1ee3c x\u1eed l\u00fd, v\u00e0 l\u01b0u tr\u1eef (persistence) message . Extensibility : Cung c\u1ea5p h\u1ec7 th\u1ed1ng plugin linh ho\u1ea1t, d\u1ec5 d\u00e0ng t\u00edch h\u1ee3p c\u00e1c plugin c\u1ee7a third party. V\u00ed d\u1ee5: plugin l\u01b0u message v\u00e0o c\u01a1 s\u1edf d\u1eef li\u1ec7u. Cloud : D\u1ec5 d\u00e0ng tri\u1ec3n khai v\u1edbi h\u1ea1 t\u1ea7ng hi\u1ec7n c\u00f3 ho\u1eb7c Cloud. Management & Monitoring : cung c\u1ea5p HTTP API, command-line tool v\u00e0 UI \u0111\u1ec3 qu\u1ea3n l\u00fd v\u00e0 gi\u00e1m s\u00e1t. Tools support : Ho\u1ea1t \u0111\u1ed9ng v\u1edbi c\u00e1c c\u00f4ng c\u1ee5 CI/CD v\u00e0 c\u00f3 th\u1ec3 tri\u1ec3n khai v\u1edbi BOSH, Chef, Docker v\u00e0 Puppet. Concepts Ngo\u00e0i c\u00e1c kh\u00e1i ni\u1ec7m \u0111\u00e3 \u0111\u1ec1 c\u1eadp nh\u01b0 AMQP , Producer , Consumer , Queue , Message , ta c\u00f2n c\u00f3 m\u1ed9t s\u1ed1 kh\u00e1i ni\u1ec7m c\u1ea7n bi\u1ebft tr\u01b0\u1edbc khi t\u00ecm hi\u1ec3u qua c\u01a1 ch\u1ebf ho\u1ea1t \u0111\u1ed9ng c\u1ee7a RabbitMQ: Connection : M\u1ed9t k\u1ebft n\u1ed1i TCP gi\u1eefa \u1ee9ng d\u1ee5ng v\u00e0 RabbitMQ broker. Channel : M\u1ed9t k\u1ebft n\u1ed1i \u1ea3o trong m\u1ed9t Connection. Vi\u1ec7c publishing ho\u1eb7c consuming message t\u1eeb m\u1ed9t queue \u0111\u1ec1u \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n tr\u00ean channel. Exchange : L\u00e0 n\u01a1i nh\u1eadn message \u0111\u01b0\u1ee3c publish t\u1eeb Producer v\u00e0 \u0111\u1ea9y message v\u00e0o Queue d\u1ef1a v\u00e0o quy t\u1eafc c\u1ee7a t\u1eebng lo\u1ea1i Exchange. \u0110\u1ec3 nh\u1eadn \u0111\u01b0\u1ee3c message, queue ph\u1ea3i \u0111\u01b0\u1ee3c n\u1eb1m (binding) trong \u00edt nh\u1ea5t 1 Exchange. Binding : l\u00e0 quy t\u1eafc (rule) m\u00e0 Exchange s\u1eed d\u1ee5ng \u0111\u1ec3 \u0111\u1ecbnh tuy\u1ebfn Message \u0111\u1ebfn Queue. \u0110\u1ea3m nh\u1eadn nhi\u1ec7m v\u1ee5 li\u00ean k\u1ebft gi\u1eefa Exchange v\u00e0 Queue. Routing key : M\u1ed9t key m\u00e0 Exchange d\u1ef1a v\u00e0o \u0111\u00f3 \u0111\u1ec3 quy\u1ebft \u0111\u1ecbnh c\u00e1ch \u0111\u1ec3 \u0111\u1ecbnh tuy\u1ebfn message \u0111\u1ebfn queue. C\u00f3 th\u1ec3 hi\u1ec3u n\u00f4m na, Routing key l\u00e0 \u0111\u1ecba ch\u1ec9 d\u00e0nh cho message. User : \u0110\u1ec3 c\u00f3 th\u1ec3 truy c\u1eadp v\u00e0o RabbitMQ, ch\u00fang ta ph\u1ea3i c\u00f3 username v\u00e0 password. Trong RabbitMQ, m\u1ed7i user \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh v\u1edbi m\u1ed9t quy\u1ec1n h\u1ea1n n\u00e0o \u0111\u00f3. User c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c ph\u00e2n quy\u1ec1n \u0111\u1eb7c bi\u1ec7t cho m\u1ed9t Vhost n\u00e0o \u0111\u00f3. Virtual host/Vhost : Cung c\u1ea5p nh\u1eefng c\u00e1ch ri\u00eang bi\u1ec7t \u0111\u1ec3 c\u00e1c \u1ee9ng d\u1ee5ng d\u00f9ng chung m\u1ed9t RabbitMQ instance. Nh\u1eefng user kh\u00e1c nhau c\u00f3 th\u1ec3 c\u00f3 c\u00e1c quy\u1ec1n kh\u00e1c nhau \u0111\u1ed1i v\u1edbi vhost kh\u00e1c nhau. Queue v\u00e0 Exchange c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c t\u1ea1o, v\u00ec v\u1eady ch\u00fang ch\u1ec9 t\u1ed3n t\u1ea1i trong m\u1ed9t vhost. Message flow in RabbitMQ Producer g\u1eedi message \u0111\u1ebfn Broker v\u00e0 message \u0111\u01b0\u1ee3c push th\u1eb3ng v\u00e0o Exchange. Sau khi Exchange nh\u1eadn Message, n\u00f3 ch\u1ecbu tr\u00e1ch nhi\u1ec7m \u0111\u1ecbnh tuy\u1ebfn message. Exchange s\u1ebd ch\u1ecbu tr\u00e1ch nhi\u1ec7m v\u1ec1 c\u00e1c thu\u1ed9c t\u00ednh c\u1ee7a Message, v\u00ed d\u1ee5 routing key , type of Exchange . Vi\u1ec7c binding ph\u1ea3i \u0111\u01b0\u1ee3c t\u1ea1o t\u1eeb Exchange \u0111\u1ebfn Queue (h\u00e0ng \u0111\u1ee3i). Trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y, ta s\u1ebd c\u00f3 hai binding \u0111\u1ebfn hai h\u00e0ng \u0111\u1ee3i kh\u00e1c nhau t\u1eeb m\u1ed9t Exchange. Exchange s\u1ebd \u0111\u1ecbnh tuy\u1ebfn Message v\u00e0o c\u00e1c h\u00e0ng \u0111\u1ee3i d\u1ef1a tr\u00ean thu\u1ed9c t\u00ednh c\u1ee7a c\u1ee7a t\u1eebng Message. C\u00e1c Message n\u1eb1m \u1edf h\u00e0ng \u0111\u1ee3i \u0111\u1ebfn khi ch\u00fang \u0111\u01b0\u1ee3c x\u1eed l\u00fd b\u1edfi m\u1ed9t Consumer. Consumer x\u1eed l\u00fd Message nh\u1eadn t\u1eeb Queue. Types of Exchanges C\u00f3 4 lo\u1ea1i Exchange: Direct , Fanout , Topic , Headers . Vi\u1ec7c l\u1ef1a ch\u1ecdn c\u00e1c exchange type kh\u00e1c nhau s\u1ebd d\u1eabn \u0111\u1ebfn c\u00e1c x\u1eed l\u00fd kh\u00e1c nhau c\u1ee7a message broker v\u1edbi message nh\u1eadn \u0111\u01b0\u1ee3c t\u1eeb producer. Exchange s\u1ebd \u0111\u01b0\u1ee3c binding \u0111\u1ebfn m\u1ed9t s\u1ed1 Queue nh\u1ea5t \u0111\u1ecbnh. Direct Exchange : T\u00ean m\u1eb7c \u0111\u1ecbnh l\u00e0 Empty string - Default Exchange ho\u1eb7c amq.direct . \u0110\u1ecbnh tuy\u1ebfn message \u0111\u1ebfn Queue d\u1ef1a v\u00e0o routing key. Th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho vi\u1ec7c \u0111\u1ecbnh tuy\u1ebfn tin nh\u1eafn unicast-\u0111\u01a1n h\u01b0\u1edbng (m\u1eb7c d\u00f9 n\u00f3 c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng cho \u0111\u1ecbnh tuy\u1ebfn multicast-\u0111a h\u01b0\u1edbng) v\u00e0 h\u1eefu \u00edch khi mu\u1ed1n ph\u00e2n bi\u1ec7t c\u00e1c th\u00f4ng b\u00e1o \u0111\u01b0\u1ee3c publish cho c\u00f9ng m\u1ed9t exchange b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng m\u1ed9t m\u00e3 \u0111\u1ecbnh danh chu\u1ed7i \u0111\u01a1n gi\u1ea3n. Fanout Exchange - amq.fanout : Fanout exchange \u0111\u1ecbnh tuy\u1ebfn message (copy message) t\u1edbi t\u1ea5t c\u1ea3 queue m\u00e0 n\u00f3 \u0111\u01b0\u1ee3c bind, v\u1edbi b\u1ea5t k\u1ec3 m\u1ed9t routing key n\u00e0o. Gi\u1ea3 s\u1eed, n\u1ebfu n\u00f3 N queue \u0111\u01b0\u1ee3c bind b\u1edfi m\u1ed9t Fanout exchange, khi m\u1ed9t message m\u1edbi published, exchange s\u1ebd \u0111\u1ecbnh tuy\u1ebfn message \u0111\u00f3 t\u1edbi t\u1ea5t c\u1ea3 N queues. Fanout exchange \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho \u0111\u1ecbnh tuy\u1ebfn message broadcast. Topic Exchange - (Publish/Subscribe): Topic exchange \u0111\u1ecbnh tuy\u1ebfn message t\u1edbi m\u1ed9t ho\u1eb7c nhi\u1ec1u queue d\u1ef1a tr\u00ean s\u1ef1 tr\u00f9ng kh\u1edbp gi\u1eefa routing key v\u00e0 pattern. Topic exchange th\u01b0\u1eddng s\u1eed d\u1ee5ng \u0111\u1ec3 th\u1ef1c hi\u1ec7n \u0111\u1ecbnh tuy\u1ebfn th\u00f4ng \u0111i\u1ec7p multicast. Headers Exchange : Header exchange \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 \u0111\u1ecbnh tuy\u1ebfn v\u1edbi nhi\u1ec1u thu\u1ed9c t\u00ednh, \u0111\u1ec3 d\u00e0ng th\u1ef1c hi\u1ec7n d\u01b0\u1edbi d\u1ea1ng header c\u1ee7a message h\u01a1n l\u00e0 routing key. Header exchange b\u1ecf \u0111i routing key m\u00e0 thay v\u00e0o \u0111\u00f3 \u0111\u1ecbnh tuy\u1ebfn d\u1ef1a tr\u00ean header c\u1ee7a message. Headers Exchange r\u1ea5t gi\u1ed1ng v\u1edbi Topic Exchange, nh\u01b0ng n\u00f3 \u0111\u1ecbnh tuy\u1ebfn d\u1ef1a tr\u00ean c\u00e1c gi\u00e1 tr\u1ecb header thay v\u00ec routing key. Ngo\u00e0i Exchange type , Exchange c\u00f2n \u0111\u1ecbnh ngh\u0129a m\u1ed9t s\u1ed1 thu\u1ed9c t\u00ednh: Name : t\u00ean Exchange. Durability : th\u1eddi gian t\u1ed3n t\u1ea1i khi broker restart Auto-delete : Exchange s\u1ebd b\u1ecb x\u00f3a khi kh\u00f4ng c\u00f2n Queue binding t\u1eeb n\u00f3 n\u1eefa Arguments : C\u00e1c tham s\u1ed1 kh\u00f4ng b\u1eaft bu\u1ed9c, \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng b\u1edfi c\u00e1c plugin v\u00e0 c\u00e1c t\u00ednh n\u0103ng d\u00e0nh ri\u00eang cho broker. Reference AMQP concepts RabbitMQ - features RabbitMQ for beginners RabbitMQ Overview","title":"RabbitMQ"},{"location":"Message-Brokers/RabbitMQ/#rabbitmq","text":"Overview Features Message flow in RabbitMQ Types of Exchanges","title":"RabbitMQ"},{"location":"Message-Brokers/RabbitMQ/#overview","text":"RabbitMQ l\u00e0 m\u1ed9t distributed Message broker , c\u00f3 c\u00e1c \u0111\u1eb7c tr\u01b0ng nh\u01b0 fast , scalable , v\u00e0 durable . RabbitMQ s\u1eed d\u1ee5ng giao th\u1ee9c AMQP - Advanced Message Queue Protocol - m\u1ed9t giao th\u1ee9c c\u00f3 d\u00e2y (wire-protocol), c\u00f3 kh\u1ea3 n\u0103ng bi\u1ec3u di\u1ec5n c\u00e1c message ph\u00f9 h\u1ee3p v\u1edbi \u0111\u1ecbnh d\u1ea1ng d\u1eef li\u1ec7u, vai tr\u00f2 giao th\u1ee9c trung gian cho vi\u1ec7c truy\u1ec1n c\u00e1c g\u00f3i tin trong Application Layer c\u1ee7a m\u00f4 h\u00ecnh OSI. RabbitMQ \u0111\u00f3ng vai tr\u00f2 nh\u01b0 m\u1ed9t ph\u1ea7n m\u1ec1m trung gian trong vi\u1ec7c trao \u0111\u1ed5i d\u1eef li\u1ec7u gi\u1eefa c\u00e1c process , application , system ho\u1eb7c server v\u1edbi nhau. RabbitMQ s\u1ebd nh\u1eadn message \u0111\u1ebfn t\u1eeb c\u00e1c th\u00e0nh ph\u1ea7n kh\u00e1c nhau trong h\u1ec7 th\u1ed1ng, l\u01b0u tr\u1eef message an to\u00e0n r\u1ed3i sau \u0111\u00f3 g\u1eedi message \u0111\u1ebfn target. RabbitMQ c\u00f3 th\u1ec3 ch\u1ea1y tr\u00ean nhi\u1ec1u OS, Cloud v\u00e0 cung c\u1ea5p m\u1ed9t lo\u1ea1t c\u00e1c c\u00f4ng c\u1ee5 d\u00e0nh cho nh\u00e0 ph\u00e1t tri\u1ec3n v\u1edbi h\u1ea7u h\u1ebft c\u00e1c ng\u00f4n ng\u1eef ph\u1ed5 bi\u1ebfn. \u0110\u00e2y l\u00e0 m\u1ed9t architecture c\u01a1 b\u1ea3n c\u1ee7a message queue.: Producer : l\u00e0 \u1ee9ng d\u1ee5ng client, t\u1ea1o message v\u00e0 publish t\u1edbi broker Broker - RabbitMQ: nh\u1eadn message t\u1eeb Producer , message \u0111\u01b0\u1ee3c \u0111\u01b0a v\u00e0o Exchange \u0111\u1ec3 \u0111\u1ecbnh tuy\u1ebfn n\u00f3 \u0111\u1ebfn 0 ho\u1eb7c nhi\u1ec1u Queue d\u1ef1a tr\u00ean c\u00e1c r\u00e0ng bu\u1ed9c ( binding ) v\u00e0 c\u00e1c kh\u00f3a \u0111\u1ecbnh tuy\u1ebfn ( routing key ). Consumer : l\u00e0 \u1ee9ng d\u1ee5ng client kh\u00e1c, k\u1ebft n\u1ed1i \u0111\u1ebfn queue , subscribe v\u00e0 consume message.","title":"Overview"},{"location":"Message-Brokers/RabbitMQ/#features","text":"Transparency : M\u1ed9t Producer kh\u00f4ng c\u1ea7n ph\u1ea3i bi\u1ebft Consumer . N\u00f3 ch\u1ec9 vi\u1ec7c g\u1eedi message \u0111\u1ebfn c\u00e1c queue trong Message broker . Consumer ch\u1ec9 vi\u1ec7c \u0111\u0103ng k\u00fd nh\u1eadn message t\u1eeb c\u00e1c queue n\u00e0y. Many Client : V\u00ec Producer giao ti\u1ebfp v\u1edbi Consumer trung gian qua Message broker n\u00ean d\u00f9 Producer v\u00e0 Consumer c\u00f3 kh\u00e1c bi\u1ec7t nhau v\u1ec1 ng\u00f4n ng\u1eef th\u00ec giao ti\u1ebfp n\u00e0y v\u1eabn ok. Hi\u1ec7n nay RabbitMQ \u0111\u00e3 h\u1ed7 tr\u1ee3 r\u1ea5t nhi\u1ec1u ng\u00f4n ng\u1eef kh\u00e1c nhau. Asynchronous : Producer kh\u00f4ng th\u1ec3 bi\u1ebft khi n\u00e0o message \u0111\u1ebfn \u0111\u01b0\u1ee3c Consumer hay khi n\u00e0o message \u0111\u01b0\u1ee3c Consumer x\u1eed l\u00fd xong. \u0110\u1ed1i v\u1edbi Producer , vi\u1ec7c push message \u0111\u1ebfn Message broker l\u00e0 xong vi\u1ec7c c\u1ee7a n\u00f3. Consumer s\u1ebd l\u1ea5y message v\u1ec1 khi n\u00f3 mu\u1ed1n. \u0110\u1eb7c \u0111i\u1ec3m n\u00e0y c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c t\u1eadn d\u1ee5ng \u0111\u1ec3 x\u00e2y d\u1ef1ng c\u00e1c h\u1ec7 th\u1ed1ng l\u01b0u tr\u1eef v\u00e0 x\u1eed l\u00fd log. Flexible Routing : message \u0111\u01b0\u1ee3c routing th\u00f4ng qua Exchange tr\u01b0\u1edbc khi \u0111\u1ebfn Queue . RabbitMQ cung c\u1ea5p m\u1ed9t s\u1ed1 lo\u1ea1i Exchange th\u01b0\u1eddng d\u00f9ng v\u00e0 ta c\u0169ng c\u00f3 th\u1ec3 \u0111\u1ecbnh ngh\u0129a ri\u00eang Exhange \u0111\u1ec3 ph\u00f9 h\u1ee3p v\u1edbi h\u1ec7 th\u1ed1ng c\u1ee7a m\u00ecnh. Lightweight : Nh\u1eb9, m\u1ed9t single instance c\u1ee7a RabbitMQ ch\u1ec9 chi\u1ebfm kho\u1ea3ng 40MB RAM. Multiple message protocol : AMQP, MQTT, STOMP, HTTP. Cluster : Ta c\u00f3 th\u1ec3 gom nhi\u1ec1u RabbitMQ instance v\u00e0o m\u1ed9t Cluster . M\u1ed9t q \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a tr\u00ean m\u1ed9t instance , khi \u0111\u00f3 \u0111\u1ec1u c\u00f3 th\u1ec3 truy xu\u1ea5t t\u1eeb c\u00e1c instance c\u00f2n l\u1ea1i. C\u00f3 th\u1ec3 t\u1eadn d\u1ee5ng \u0111\u1ec3 l\u00e0m load balancing . High availibilty : \u0110\u1eb7c tr\u01b0ng nh\u1ea5t c\u1ee7a m\u1ed9t Message Broker Reliability : C\u00f3 c\u01a1 ch\u1ebf ACK nh\u01b0 c\u1ee7a m\u00f4 h\u00ecnh client-server \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o message \u0111\u01b0\u1ee3c nh\u1eadn b\u1edfi Consumer \u0111\u00e3 \u0111\u01b0\u1ee3c x\u1eed l\u00fd, v\u00e0 l\u01b0u tr\u1eef (persistence) message . Extensibility : Cung c\u1ea5p h\u1ec7 th\u1ed1ng plugin linh ho\u1ea1t, d\u1ec5 d\u00e0ng t\u00edch h\u1ee3p c\u00e1c plugin c\u1ee7a third party. V\u00ed d\u1ee5: plugin l\u01b0u message v\u00e0o c\u01a1 s\u1edf d\u1eef li\u1ec7u. Cloud : D\u1ec5 d\u00e0ng tri\u1ec3n khai v\u1edbi h\u1ea1 t\u1ea7ng hi\u1ec7n c\u00f3 ho\u1eb7c Cloud. Management & Monitoring : cung c\u1ea5p HTTP API, command-line tool v\u00e0 UI \u0111\u1ec3 qu\u1ea3n l\u00fd v\u00e0 gi\u00e1m s\u00e1t. Tools support : Ho\u1ea1t \u0111\u1ed9ng v\u1edbi c\u00e1c c\u00f4ng c\u1ee5 CI/CD v\u00e0 c\u00f3 th\u1ec3 tri\u1ec3n khai v\u1edbi BOSH, Chef, Docker v\u00e0 Puppet.","title":"Features"},{"location":"Message-Brokers/RabbitMQ/#concepts","text":"Ngo\u00e0i c\u00e1c kh\u00e1i ni\u1ec7m \u0111\u00e3 \u0111\u1ec1 c\u1eadp nh\u01b0 AMQP , Producer , Consumer , Queue , Message , ta c\u00f2n c\u00f3 m\u1ed9t s\u1ed1 kh\u00e1i ni\u1ec7m c\u1ea7n bi\u1ebft tr\u01b0\u1edbc khi t\u00ecm hi\u1ec3u qua c\u01a1 ch\u1ebf ho\u1ea1t \u0111\u1ed9ng c\u1ee7a RabbitMQ: Connection : M\u1ed9t k\u1ebft n\u1ed1i TCP gi\u1eefa \u1ee9ng d\u1ee5ng v\u00e0 RabbitMQ broker. Channel : M\u1ed9t k\u1ebft n\u1ed1i \u1ea3o trong m\u1ed9t Connection. Vi\u1ec7c publishing ho\u1eb7c consuming message t\u1eeb m\u1ed9t queue \u0111\u1ec1u \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n tr\u00ean channel. Exchange : L\u00e0 n\u01a1i nh\u1eadn message \u0111\u01b0\u1ee3c publish t\u1eeb Producer v\u00e0 \u0111\u1ea9y message v\u00e0o Queue d\u1ef1a v\u00e0o quy t\u1eafc c\u1ee7a t\u1eebng lo\u1ea1i Exchange. \u0110\u1ec3 nh\u1eadn \u0111\u01b0\u1ee3c message, queue ph\u1ea3i \u0111\u01b0\u1ee3c n\u1eb1m (binding) trong \u00edt nh\u1ea5t 1 Exchange. Binding : l\u00e0 quy t\u1eafc (rule) m\u00e0 Exchange s\u1eed d\u1ee5ng \u0111\u1ec3 \u0111\u1ecbnh tuy\u1ebfn Message \u0111\u1ebfn Queue. \u0110\u1ea3m nh\u1eadn nhi\u1ec7m v\u1ee5 li\u00ean k\u1ebft gi\u1eefa Exchange v\u00e0 Queue. Routing key : M\u1ed9t key m\u00e0 Exchange d\u1ef1a v\u00e0o \u0111\u00f3 \u0111\u1ec3 quy\u1ebft \u0111\u1ecbnh c\u00e1ch \u0111\u1ec3 \u0111\u1ecbnh tuy\u1ebfn message \u0111\u1ebfn queue. C\u00f3 th\u1ec3 hi\u1ec3u n\u00f4m na, Routing key l\u00e0 \u0111\u1ecba ch\u1ec9 d\u00e0nh cho message. User : \u0110\u1ec3 c\u00f3 th\u1ec3 truy c\u1eadp v\u00e0o RabbitMQ, ch\u00fang ta ph\u1ea3i c\u00f3 username v\u00e0 password. Trong RabbitMQ, m\u1ed7i user \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh v\u1edbi m\u1ed9t quy\u1ec1n h\u1ea1n n\u00e0o \u0111\u00f3. User c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c ph\u00e2n quy\u1ec1n \u0111\u1eb7c bi\u1ec7t cho m\u1ed9t Vhost n\u00e0o \u0111\u00f3. Virtual host/Vhost : Cung c\u1ea5p nh\u1eefng c\u00e1ch ri\u00eang bi\u1ec7t \u0111\u1ec3 c\u00e1c \u1ee9ng d\u1ee5ng d\u00f9ng chung m\u1ed9t RabbitMQ instance. Nh\u1eefng user kh\u00e1c nhau c\u00f3 th\u1ec3 c\u00f3 c\u00e1c quy\u1ec1n kh\u00e1c nhau \u0111\u1ed1i v\u1edbi vhost kh\u00e1c nhau. Queue v\u00e0 Exchange c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c t\u1ea1o, v\u00ec v\u1eady ch\u00fang ch\u1ec9 t\u1ed3n t\u1ea1i trong m\u1ed9t vhost.","title":"Concepts"},{"location":"Message-Brokers/RabbitMQ/#message-flow-in-rabbitmq","text":"Producer g\u1eedi message \u0111\u1ebfn Broker v\u00e0 message \u0111\u01b0\u1ee3c push th\u1eb3ng v\u00e0o Exchange. Sau khi Exchange nh\u1eadn Message, n\u00f3 ch\u1ecbu tr\u00e1ch nhi\u1ec7m \u0111\u1ecbnh tuy\u1ebfn message. Exchange s\u1ebd ch\u1ecbu tr\u00e1ch nhi\u1ec7m v\u1ec1 c\u00e1c thu\u1ed9c t\u00ednh c\u1ee7a Message, v\u00ed d\u1ee5 routing key , type of Exchange . Vi\u1ec7c binding ph\u1ea3i \u0111\u01b0\u1ee3c t\u1ea1o t\u1eeb Exchange \u0111\u1ebfn Queue (h\u00e0ng \u0111\u1ee3i). Trong tr\u01b0\u1eddng h\u1ee3p n\u00e0y, ta s\u1ebd c\u00f3 hai binding \u0111\u1ebfn hai h\u00e0ng \u0111\u1ee3i kh\u00e1c nhau t\u1eeb m\u1ed9t Exchange. Exchange s\u1ebd \u0111\u1ecbnh tuy\u1ebfn Message v\u00e0o c\u00e1c h\u00e0ng \u0111\u1ee3i d\u1ef1a tr\u00ean thu\u1ed9c t\u00ednh c\u1ee7a c\u1ee7a t\u1eebng Message. C\u00e1c Message n\u1eb1m \u1edf h\u00e0ng \u0111\u1ee3i \u0111\u1ebfn khi ch\u00fang \u0111\u01b0\u1ee3c x\u1eed l\u00fd b\u1edfi m\u1ed9t Consumer. Consumer x\u1eed l\u00fd Message nh\u1eadn t\u1eeb Queue.","title":"Message flow in RabbitMQ"},{"location":"Message-Brokers/RabbitMQ/#types-of-exchanges","text":"C\u00f3 4 lo\u1ea1i Exchange: Direct , Fanout , Topic , Headers . Vi\u1ec7c l\u1ef1a ch\u1ecdn c\u00e1c exchange type kh\u00e1c nhau s\u1ebd d\u1eabn \u0111\u1ebfn c\u00e1c x\u1eed l\u00fd kh\u00e1c nhau c\u1ee7a message broker v\u1edbi message nh\u1eadn \u0111\u01b0\u1ee3c t\u1eeb producer. Exchange s\u1ebd \u0111\u01b0\u1ee3c binding \u0111\u1ebfn m\u1ed9t s\u1ed1 Queue nh\u1ea5t \u0111\u1ecbnh. Direct Exchange : T\u00ean m\u1eb7c \u0111\u1ecbnh l\u00e0 Empty string - Default Exchange ho\u1eb7c amq.direct . \u0110\u1ecbnh tuy\u1ebfn message \u0111\u1ebfn Queue d\u1ef1a v\u00e0o routing key. Th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho vi\u1ec7c \u0111\u1ecbnh tuy\u1ebfn tin nh\u1eafn unicast-\u0111\u01a1n h\u01b0\u1edbng (m\u1eb7c d\u00f9 n\u00f3 c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng cho \u0111\u1ecbnh tuy\u1ebfn multicast-\u0111a h\u01b0\u1edbng) v\u00e0 h\u1eefu \u00edch khi mu\u1ed1n ph\u00e2n bi\u1ec7t c\u00e1c th\u00f4ng b\u00e1o \u0111\u01b0\u1ee3c publish cho c\u00f9ng m\u1ed9t exchange b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng m\u1ed9t m\u00e3 \u0111\u1ecbnh danh chu\u1ed7i \u0111\u01a1n gi\u1ea3n. Fanout Exchange - amq.fanout : Fanout exchange \u0111\u1ecbnh tuy\u1ebfn message (copy message) t\u1edbi t\u1ea5t c\u1ea3 queue m\u00e0 n\u00f3 \u0111\u01b0\u1ee3c bind, v\u1edbi b\u1ea5t k\u1ec3 m\u1ed9t routing key n\u00e0o. Gi\u1ea3 s\u1eed, n\u1ebfu n\u00f3 N queue \u0111\u01b0\u1ee3c bind b\u1edfi m\u1ed9t Fanout exchange, khi m\u1ed9t message m\u1edbi published, exchange s\u1ebd \u0111\u1ecbnh tuy\u1ebfn message \u0111\u00f3 t\u1edbi t\u1ea5t c\u1ea3 N queues. Fanout exchange \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho \u0111\u1ecbnh tuy\u1ebfn message broadcast. Topic Exchange - (Publish/Subscribe): Topic exchange \u0111\u1ecbnh tuy\u1ebfn message t\u1edbi m\u1ed9t ho\u1eb7c nhi\u1ec1u queue d\u1ef1a tr\u00ean s\u1ef1 tr\u00f9ng kh\u1edbp gi\u1eefa routing key v\u00e0 pattern. Topic exchange th\u01b0\u1eddng s\u1eed d\u1ee5ng \u0111\u1ec3 th\u1ef1c hi\u1ec7n \u0111\u1ecbnh tuy\u1ebfn th\u00f4ng \u0111i\u1ec7p multicast. Headers Exchange : Header exchange \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 \u0111\u1ecbnh tuy\u1ebfn v\u1edbi nhi\u1ec1u thu\u1ed9c t\u00ednh, \u0111\u1ec3 d\u00e0ng th\u1ef1c hi\u1ec7n d\u01b0\u1edbi d\u1ea1ng header c\u1ee7a message h\u01a1n l\u00e0 routing key. Header exchange b\u1ecf \u0111i routing key m\u00e0 thay v\u00e0o \u0111\u00f3 \u0111\u1ecbnh tuy\u1ebfn d\u1ef1a tr\u00ean header c\u1ee7a message. Headers Exchange r\u1ea5t gi\u1ed1ng v\u1edbi Topic Exchange, nh\u01b0ng n\u00f3 \u0111\u1ecbnh tuy\u1ebfn d\u1ef1a tr\u00ean c\u00e1c gi\u00e1 tr\u1ecb header thay v\u00ec routing key. Ngo\u00e0i Exchange type , Exchange c\u00f2n \u0111\u1ecbnh ngh\u0129a m\u1ed9t s\u1ed1 thu\u1ed9c t\u00ednh: Name : t\u00ean Exchange. Durability : th\u1eddi gian t\u1ed3n t\u1ea1i khi broker restart Auto-delete : Exchange s\u1ebd b\u1ecb x\u00f3a khi kh\u00f4ng c\u00f2n Queue binding t\u1eeb n\u00f3 n\u1eefa Arguments : C\u00e1c tham s\u1ed1 kh\u00f4ng b\u1eaft bu\u1ed9c, \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng b\u1edfi c\u00e1c plugin v\u00e0 c\u00e1c t\u00ednh n\u0103ng d\u00e0nh ri\u00eang cho broker.","title":"Types of Exchanges"},{"location":"Message-Brokers/RabbitMQ/#reference","text":"AMQP concepts RabbitMQ - features RabbitMQ for beginners RabbitMQ Overview","title":"Reference"},{"location":"Message-Brokers/Routing/","text":"Routing Bindings Trong c\u00e1c b\u00e0i tr\u01b0\u1edbc, ch\u00fang ta \u0111\u00e3 \u0111\u1ec1 c\u1eadp v\u00e0 s\u1eed d\u1ee5ng \u0111\u1ebfn binding v\u1edbi d\u00f2ng code: channel . queue_bind ( exchange = exchange_name , queue = queue_name ) Binding l\u00e0 m\u1ed9t m\u1ed1i quan h\u1ec7 gi\u1eefa exchange v\u1edbi queue . N\u00f3 \u0111\u01b0\u1ee3c hi\u1ec3u \u0111\u01a1n gi\u1ea3n l\u00e0 m\u1ed9t queue l\u1eafng nghe c\u00e1c message t\u1eeb m\u1ed9t exchange n\u00e0o \u0111\u00f3. C\u00e1c binding c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c b\u1ed5 sung th\u00eam tham s\u1ed1 routing_key . \u0110\u1ec3 tr\u00e1nh r\u1ed1i r\u1eafm v\u1edbi tham s\u1ed1 basic_punlish , ch\u00fang ta s\u1ebd g\u1ecdi n\u00f3 l\u00e0 m\u1ed9t kh\u00f3a binding . \u0110\u1ec3 t\u1ea1o n\u00f3, ch\u00fang ta s\u1eed d\u1ee5ng code: channel . queue_bind ( exchange = exchange_name , queue = queue_name , routing_key = 'black' ) Vi\u1ec7c s\u1eed d\u1ee5ng m\u1ed9t kh\u00f3a binding c\u0169ng ph\u1ee5 thu\u1ed9c ph\u1ea7n l\u1edbn v\u00e0o type c\u1ee7a exchange \u0111ang d\u00f9ng. V\u1edbi ki\u1ec3u fanout , ch\u00fang s\u1ebd kh\u00f4ng \u0111\u1ec3 t\u00e2m \u0111\u1ebfn chuy\u1ec7n n\u00e0y (binding keys). Direct exchange V\u1edbi v\u00ed d\u1ee5 \u1edf ph\u1ea7n tr\u01b0\u1edbc, ch\u00fang ta \u0111\u00e3 x\u00e2y d\u1ef1ng m\u1ed9t h\u1ec7 th\u1ed1ng thu th\u1eadp log c\u1ee7a producer v\u00e0 g\u1eedi \u0111\u1ebfn to\u00e0n b\u1ed9 c\u00e1c consumer c\u00f3 trong h\u1ec7 th\u1ed1ng. Ch\u00fang ta mu\u1ed1n m\u1edf r\u1ed9ng h\u1ec7 th\u1ed1ng n\u00e0y v\u1edbi t\u00ednh n\u0103ng l\u1ecdc m\u1ed9t c\u00e1ch ch\u1eb7t ch\u1ebd h\u01a1n. V\u00ed d\u1ee5, ch\u00fang ta mu\u1ed1n script n\u00e0y ch\u1ec9 nh\u1eadn nh\u1eefng c\u1ea3nh b\u00e1o nh\u1eefng tr\u01b0\u1eddng h\u1ee3p x\u1ea5u nh\u1ea5t v\u00e0 ghi ch\u00fang. Ch\u00fang ta \u0111\u00e3 s\u1eed d\u1ee5ng exchange ki\u1ec3u fanout , ch\u00fang kh\u00f4ng c\u00f3 t\u00ednh linh ho\u1ea1t \u0111\u1ec3 l\u00e0m nh\u1eefng y\u00eau c\u1ea7u tr\u00ean. B\u00e2y gi\u1edd, ch\u00fang ta s\u1eed d\u1ee5ng driect exchange \u0111\u1ec3 gi\u1ea3i quy\u1ebft v\u1ea5n \u0111\u1ec1 tr\u00ean. C\u01a1 ch\u1ebf l\u00e0m vi\u1ec7c c\u1ee7a driect kh\u00e1 \u0111\u01a1n gi\u1ea3n, m\u1ed9t message s\u1ebd \u0111i t\u1edbi c\u00e1c queue c\u00f3 binding key tr\u00f9ng ho\u1eb7c gi\u1ed1ng v\u1edbi routing key c\u1ee7a message nh\u1ea5t. \u0110\u1ec3 n\u1eafm r\u00f5 h\u01a1n, ch\u00fang ta h\u00e3y \u0111\u1ec3 \u00fd v\u00e0o h\u00ecnh sau: Quan s\u00e1t th\u1ea5y, ta c\u00f3 m\u1ed9t exchange t\u00ean x v\u1edbi 2 h\u01b0\u1edbng v\u00e0o 2 queue kh\u00e1c nhau. H\u01b0\u1edbng th\u1ee9 nh\u1ea5t, ch\u00fang ta th\u1ea5y c\u00f3 m\u1ed9t binding key t\u00ean l\u00e0 orange . H\u01b0\u1edbng th\u1ee9 2, ch\u00fang ta th\u1ea5y c\u00f3 2 binding key , m\u1ed9t t\u00ean l\u00e0 black m\u1ed9t l\u00e0 green . Nh\u01b0 v\u1eady, m\u1ed9t message \u0111\u01b0\u1ee3c g\u1eedi t\u1edbi exchange v\u1edbi routing key l\u00e0 orange \u0111\u01b0\u1ee3c \u0111i\u1ec1u h\u01b0\u1edbng \u0111\u1ebfn queue Q1 . C\u00e1c message v\u1edbi routing key l\u00e0 black ho\u1eb7c green s\u1ebd \u0111\u01b0\u1ee3c \u0111i\u1ec1u h\u01b0\u1edbng t\u1edbi Q2 . C\u00f2n l\u1ea1i, c\u00e1c message kh\u00e1c s\u1ebd b\u1ecb lo\u1ea1i b\u1ecf. Multiple bindings \u1ede tr\u01b0\u1eddng h\u1ee3p n\u00e0y, ch\u00fang ta th\u00eam 1 binding key l\u00e0 black v\u00e0o gi\u1eefa x v\u00e0 Q1 . Ch\u00fang ta th\u1ea5y n\u00f3 kh\u00f4ng kh\u00e1c g\u00ec v\u1edbi ki\u1ec3u fanout khi m\u00e0 routing key \u0111\u1ec1u \u0111i\u1ec1u h\u01b0\u1edbng \u0111\u1ebfn c\u00e1c queue . Emitting logs Ch\u00fang ta s\u1ebd s\u1eed d\u1ee5ng v\u00ed d\u1ee5 tr\u00ean v\u00e0o h\u1ec7 th\u1ed1ng log c\u1ee7a nh\u1eefng b\u00e0i tr\u01b0\u1edbc. Thay v\u00ec s\u1eed d\u1ee5ng fanout , ch\u00fang ta s\u1ebd g\u1eedi c\u00e1c message t\u1edbi direct exchange . Ch\u00fang ta s\u1ebd s\u1eed d\u1ee5ng th\u00eam routing key qu\u00e1 tr\u00ecnh g\u1eedi nghi\u00eam ng\u1eb7t h\u01a1n. T\u1ea1o tr\u01b0\u1edbc m\u1ed9t exchange : channel . exchange_declare ( exchange = 'direct_logs' , type = 'direct' ) Sau \u0111\u00f3, c\u00e1c message \u0111\u00e3 s\u1eb5n s\u00e0ng \u0111\u1ec3 g\u1eedi: channel . basic_publish ( exchange = 'direct_logs' , routing_key = severity , body = message ) \u0110\u1ec3 d\u1ec5 hi\u1ec3u v\u00e0 \u0111\u01a1n gi\u1ea3n h\u00f3a, ch\u00fang ta s\u1ebd chia severity th\u00e0nh 3 lo\u1ea1i info , warning v\u00e0 error . Subscribing Vi\u1ec7c nh\u1eadn c\u00e1c message c\u0169ng gi\u1ed1ng nh\u01b0 c\u00e1c b\u00e0i tr\u01b0\u1edbc. V\u1edbi m\u1ed9t ngo\u1ea1i l\u1ec7, ch\u00fang ta s\u1ebd t\u1ea1o m\u1edbi m\u1ed9t binding . result = channel . queue_declare ( exclusive = True ) queue_name = result . method . queue for severity in severities : channel . queue_bind ( exchange = 'direct_logs' , queue = queue_name , routing_key = severity ) Output: python emit_log_direct.py error \"Run. Run. Or it will explode.\" # => [x] Sent 'error':'Run. Run. Or it will explode.' K\u1ebft qu\u1ea3 \u0111\u1ea1t \u0111\u01b0\u1ee3c \u1edf \u0111\u00e2y l\u00e0 Consumer/Producer ch\u1ec9 g\u1eedi/nh\u1eadn \u0111\u00fang Message \u1edf Queue m\u00e0 n\u00f3 binding. Source code emit_log_direct.py receive_logs_direct.py Reference RabbitMQ - tutorial-four-python","title":"Routing"},{"location":"Message-Brokers/Routing/#routing","text":"","title":"Routing"},{"location":"Message-Brokers/Routing/#bindings","text":"Trong c\u00e1c b\u00e0i tr\u01b0\u1edbc, ch\u00fang ta \u0111\u00e3 \u0111\u1ec1 c\u1eadp v\u00e0 s\u1eed d\u1ee5ng \u0111\u1ebfn binding v\u1edbi d\u00f2ng code: channel . queue_bind ( exchange = exchange_name , queue = queue_name ) Binding l\u00e0 m\u1ed9t m\u1ed1i quan h\u1ec7 gi\u1eefa exchange v\u1edbi queue . N\u00f3 \u0111\u01b0\u1ee3c hi\u1ec3u \u0111\u01a1n gi\u1ea3n l\u00e0 m\u1ed9t queue l\u1eafng nghe c\u00e1c message t\u1eeb m\u1ed9t exchange n\u00e0o \u0111\u00f3. C\u00e1c binding c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c b\u1ed5 sung th\u00eam tham s\u1ed1 routing_key . \u0110\u1ec3 tr\u00e1nh r\u1ed1i r\u1eafm v\u1edbi tham s\u1ed1 basic_punlish , ch\u00fang ta s\u1ebd g\u1ecdi n\u00f3 l\u00e0 m\u1ed9t kh\u00f3a binding . \u0110\u1ec3 t\u1ea1o n\u00f3, ch\u00fang ta s\u1eed d\u1ee5ng code: channel . queue_bind ( exchange = exchange_name , queue = queue_name , routing_key = 'black' ) Vi\u1ec7c s\u1eed d\u1ee5ng m\u1ed9t kh\u00f3a binding c\u0169ng ph\u1ee5 thu\u1ed9c ph\u1ea7n l\u1edbn v\u00e0o type c\u1ee7a exchange \u0111ang d\u00f9ng. V\u1edbi ki\u1ec3u fanout , ch\u00fang s\u1ebd kh\u00f4ng \u0111\u1ec3 t\u00e2m \u0111\u1ebfn chuy\u1ec7n n\u00e0y (binding keys).","title":"Bindings"},{"location":"Message-Brokers/Routing/#direct-exchange","text":"V\u1edbi v\u00ed d\u1ee5 \u1edf ph\u1ea7n tr\u01b0\u1edbc, ch\u00fang ta \u0111\u00e3 x\u00e2y d\u1ef1ng m\u1ed9t h\u1ec7 th\u1ed1ng thu th\u1eadp log c\u1ee7a producer v\u00e0 g\u1eedi \u0111\u1ebfn to\u00e0n b\u1ed9 c\u00e1c consumer c\u00f3 trong h\u1ec7 th\u1ed1ng. Ch\u00fang ta mu\u1ed1n m\u1edf r\u1ed9ng h\u1ec7 th\u1ed1ng n\u00e0y v\u1edbi t\u00ednh n\u0103ng l\u1ecdc m\u1ed9t c\u00e1ch ch\u1eb7t ch\u1ebd h\u01a1n. V\u00ed d\u1ee5, ch\u00fang ta mu\u1ed1n script n\u00e0y ch\u1ec9 nh\u1eadn nh\u1eefng c\u1ea3nh b\u00e1o nh\u1eefng tr\u01b0\u1eddng h\u1ee3p x\u1ea5u nh\u1ea5t v\u00e0 ghi ch\u00fang. Ch\u00fang ta \u0111\u00e3 s\u1eed d\u1ee5ng exchange ki\u1ec3u fanout , ch\u00fang kh\u00f4ng c\u00f3 t\u00ednh linh ho\u1ea1t \u0111\u1ec3 l\u00e0m nh\u1eefng y\u00eau c\u1ea7u tr\u00ean. B\u00e2y gi\u1edd, ch\u00fang ta s\u1eed d\u1ee5ng driect exchange \u0111\u1ec3 gi\u1ea3i quy\u1ebft v\u1ea5n \u0111\u1ec1 tr\u00ean. C\u01a1 ch\u1ebf l\u00e0m vi\u1ec7c c\u1ee7a driect kh\u00e1 \u0111\u01a1n gi\u1ea3n, m\u1ed9t message s\u1ebd \u0111i t\u1edbi c\u00e1c queue c\u00f3 binding key tr\u00f9ng ho\u1eb7c gi\u1ed1ng v\u1edbi routing key c\u1ee7a message nh\u1ea5t. \u0110\u1ec3 n\u1eafm r\u00f5 h\u01a1n, ch\u00fang ta h\u00e3y \u0111\u1ec3 \u00fd v\u00e0o h\u00ecnh sau: Quan s\u00e1t th\u1ea5y, ta c\u00f3 m\u1ed9t exchange t\u00ean x v\u1edbi 2 h\u01b0\u1edbng v\u00e0o 2 queue kh\u00e1c nhau. H\u01b0\u1edbng th\u1ee9 nh\u1ea5t, ch\u00fang ta th\u1ea5y c\u00f3 m\u1ed9t binding key t\u00ean l\u00e0 orange . H\u01b0\u1edbng th\u1ee9 2, ch\u00fang ta th\u1ea5y c\u00f3 2 binding key , m\u1ed9t t\u00ean l\u00e0 black m\u1ed9t l\u00e0 green . Nh\u01b0 v\u1eady, m\u1ed9t message \u0111\u01b0\u1ee3c g\u1eedi t\u1edbi exchange v\u1edbi routing key l\u00e0 orange \u0111\u01b0\u1ee3c \u0111i\u1ec1u h\u01b0\u1edbng \u0111\u1ebfn queue Q1 . C\u00e1c message v\u1edbi routing key l\u00e0 black ho\u1eb7c green s\u1ebd \u0111\u01b0\u1ee3c \u0111i\u1ec1u h\u01b0\u1edbng t\u1edbi Q2 . C\u00f2n l\u1ea1i, c\u00e1c message kh\u00e1c s\u1ebd b\u1ecb lo\u1ea1i b\u1ecf.","title":"Direct exchange"},{"location":"Message-Brokers/Routing/#multiple-bindings","text":"\u1ede tr\u01b0\u1eddng h\u1ee3p n\u00e0y, ch\u00fang ta th\u00eam 1 binding key l\u00e0 black v\u00e0o gi\u1eefa x v\u00e0 Q1 . Ch\u00fang ta th\u1ea5y n\u00f3 kh\u00f4ng kh\u00e1c g\u00ec v\u1edbi ki\u1ec3u fanout khi m\u00e0 routing key \u0111\u1ec1u \u0111i\u1ec1u h\u01b0\u1edbng \u0111\u1ebfn c\u00e1c queue .","title":"Multiple bindings"},{"location":"Message-Brokers/Routing/#emitting-logs","text":"Ch\u00fang ta s\u1ebd s\u1eed d\u1ee5ng v\u00ed d\u1ee5 tr\u00ean v\u00e0o h\u1ec7 th\u1ed1ng log c\u1ee7a nh\u1eefng b\u00e0i tr\u01b0\u1edbc. Thay v\u00ec s\u1eed d\u1ee5ng fanout , ch\u00fang ta s\u1ebd g\u1eedi c\u00e1c message t\u1edbi direct exchange . Ch\u00fang ta s\u1ebd s\u1eed d\u1ee5ng th\u00eam routing key qu\u00e1 tr\u00ecnh g\u1eedi nghi\u00eam ng\u1eb7t h\u01a1n. T\u1ea1o tr\u01b0\u1edbc m\u1ed9t exchange : channel . exchange_declare ( exchange = 'direct_logs' , type = 'direct' ) Sau \u0111\u00f3, c\u00e1c message \u0111\u00e3 s\u1eb5n s\u00e0ng \u0111\u1ec3 g\u1eedi: channel . basic_publish ( exchange = 'direct_logs' , routing_key = severity , body = message ) \u0110\u1ec3 d\u1ec5 hi\u1ec3u v\u00e0 \u0111\u01a1n gi\u1ea3n h\u00f3a, ch\u00fang ta s\u1ebd chia severity th\u00e0nh 3 lo\u1ea1i info , warning v\u00e0 error .","title":"Emitting logs"},{"location":"Message-Brokers/Routing/#subscribing","text":"Vi\u1ec7c nh\u1eadn c\u00e1c message c\u0169ng gi\u1ed1ng nh\u01b0 c\u00e1c b\u00e0i tr\u01b0\u1edbc. V\u1edbi m\u1ed9t ngo\u1ea1i l\u1ec7, ch\u00fang ta s\u1ebd t\u1ea1o m\u1edbi m\u1ed9t binding . result = channel . queue_declare ( exclusive = True ) queue_name = result . method . queue for severity in severities : channel . queue_bind ( exchange = 'direct_logs' , queue = queue_name , routing_key = severity ) Output: python emit_log_direct.py error \"Run. Run. Or it will explode.\" # => [x] Sent 'error':'Run. Run. Or it will explode.' K\u1ebft qu\u1ea3 \u0111\u1ea1t \u0111\u01b0\u1ee3c \u1edf \u0111\u00e2y l\u00e0 Consumer/Producer ch\u1ec9 g\u1eedi/nh\u1eadn \u0111\u00fang Message \u1edf Queue m\u00e0 n\u00f3 binding.","title":"Subscribing"},{"location":"Message-Brokers/Routing/#source-code","text":"emit_log_direct.py receive_logs_direct.py","title":"Source code"},{"location":"Message-Brokers/Routing/#reference","text":"RabbitMQ - tutorial-four-python","title":"Reference"},{"location":"Message-Brokers/SNS-SQS/","text":"SNS/SQS SNS - Simple Notification Service SNS l\u00e0 m\u1ed9t d\u1ecbch v\u1ee5 g\u1eedi c\u00e1c Notifications nhanh ch\u00f3ng, linh ho\u1ea1t, \u0111\u01b0\u1ee3c qu\u1ea3n l\u00fd \u0111\u1ea7y \u0111\u1ee7 cho ph\u00e9p g\u1eedi t\u1eebng message ri\u00eang l\u1ebb ho\u1eb7c g\u1eedi message h\u00e0ng lo\u1ea1t t\u1edbi s\u1ed1 l\u01b0\u1ee3ng l\u1edbn ng\u01b0\u1eddi nh\u1eadn. Amazon cung c\u1ea5p m\u1ed9t d\u1ecbch v\u1ee5 SNS l\u00e0 Amazon SNS , d\u00f9ng trong vi\u1ec7c push notifications s\u1ed1 l\u01b0\u1ee3ng l\u1edbn \u0111\u1ebfn client th\u00f4ng qua m\u1ed9t topic. Client \u1edf \u0111\u00e2y c\u00f3 th\u1ec3 l\u00e0 m\u1ed9t web server , mobile app , email ho\u1eb7c th\u1eadm ch\u00ed g\u1eedi message \u0111\u1ebfn c\u00e1c d\u1ecbch v\u1ee5 ph\u00e2n t\u00e1n kh\u00e1c m\u1ed9t c\u00e1ch \u0111\u01a1n gi\u1ea3n v\u00e0 ti\u1ebft ki\u1ec7m chi ph\u00ed SNS l\u00e0 distributed publish-subscribe system . Publisher s\u1ebd xu\u1ea5t b\u1ea3n c\u00e1c message v\u00e0 SNS v\u1ebd push c\u00e1c message n\u00e0y \u0111\u1ebfn Subscriber. SQS - Simple Queue Service SQS l\u00e0 distributed queuing system Message s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c push tr\u1ef1c ti\u1ebfp \u0111\u1ebfn Consumer m\u00e0 Consumer ph\u1ea3i order t\u1eeb SQS \u0111\u1ec3 nh\u1eadn message v\u00e0 nhi\u1ec1u Consumer kh\u00f4ng th\u1ec3 nh\u1eadn message c\u00f9ng m\u1ed9t l\u00fac. B\u1ea5t k\u1ef3 Consumer n\u00e0o c\u0169ng c\u00f3 th\u1ec3 nh\u1eadn \u0111\u01b0\u1ee3c message, x\u1eed l\u00fd v\u00e0 x\u00f3a n\u00f3. Nh\u1eefng Consumer kh\u00e1c kh\u00f4ng nh\u1eadn \u0111\u01b0\u1ee3c message t\u01b0\u01a1ng t\u1ef1 sau \u0111\u00f3. Vi\u1ec7c order message n\u00e0y g\u00e2y ra m\u1ed9t s\u1ed1 \u0111\u1ed9 tr\u1ec5 nh\u1ea5t \u0111\u1ecbnh trong vi\u1ec7c g\u1eedi message, kh\u00f4ng gi\u1ed1ng nh\u01b0 SNS, message \u0111\u01b0\u1ee3c push ngay l\u1eadp t\u1ee9c \u0111\u1ebfn Subscriber. Amazon cung c\u1ea5p m\u1ed9t d\u1ecbch v\u1ee5 SQS l\u00e0 Amazon SQS , ch\u1ee7 y\u1ebfu \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 t\u00e1ch c\u00e1c \u1ee9ng d\u1ee5ng ho\u1eb7c t\u00edch h\u1ee3p c\u00e1c \u1ee9ng d\u1ee5ng. Message c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef trong SQS trong th\u1eddi gian ng\u1eafn (t\u1ed1i \u0111a 14 ng\u00e0y). C\u1ee5 th\u1ec3, Amazon SQS cung c\u1ea5p gi\u1ea3i ph\u00e1p migration d\u1eef li\u1ec7u gi\u1eefa c\u00e1c th\u00e0nh ph\u1ea7n trong h\u1ec7 th\u1ed1ng ph\u00e2n t\u00e1n \u0111\u1ec3 th\u1ef1c hi\u1ec7n c\u00e1c nhi\u1ec7m v\u1ee5 kh\u00e1c nhau. V\u1edbi SQS, ta c\u00f3 th\u1ec3 gi\u1ea3m t\u1ea3i g\u00e1nh n\u1eb7ng cho h\u1ec7 th\u1ed1ng v\u00e0 c\u00f3 th\u1ec3 d\u1ec5 d\u00e0ng m\u1edf r\u1ed9ng kh\u1ea3 n\u0103ng l\u01b0u tr\u1eef c\u00e1c message v\u1edbi chi ph\u00ed th\u1ea5p. SNS vs. SQS Ph\u00e2n lo\u1ea1i: SQS : distributed queuing system SNS : distributed publish-subscribe system C\u01a1 ch\u1ebf: SQS : C\u01a1 ch\u1ebf pull - Consumer order message t\u1eeb SQS v\u00e0 pull message v\u1ec1 SNS : C\u01a1 ch\u1ebf push - SNS push message \u0111\u1ebfn consumer C\u00e1ch s\u1eed d\u1ee5ng SQS : T\u00e1ch hai \u1ee9ng d\u1ee5ng v\u00e0 cho ph\u00e9p x\u1eed l\u00fd kh\u00f4ng \u0111\u1ed3ng b\u1ed9 song song SNS : Cho ph\u00e9p x\u1eed l\u00fd c\u00f9ng m\u1ed9t notification theo nhi\u1ec1u c\u00e1ch Th\u1eddi gian t\u1ed3n t\u1ea1i c\u1ee7a message SQS: message v\u1eabn t\u1ed3n t\u1ea1i trong m\u1ed9t s\u1ed1 kho\u1ea3ng th\u1eddi gian (c\u00f3 th\u1ec3 \u0111\u1ecbnh c\u1ea5u h\u00ecnh) khi kh\u00f4ng c\u00f3 Consumer n\u00e0o s\u1eed d\u1ee5ng SNS: message s\u1ebd b\u1ecb x\u00f3a t\u1ed3n t\u1ea1i ng\u1eafn, s\u1ebd b\u1ecb x\u00f3a khi kh\u00f4ng c\u00f3 Consumer nh\u1eadn message ho\u1eb7c Consumer \u0111\u00e3 nh\u1eadn \u0111\u01b0\u1ee3c message. Consumer : SQS: Consumer gi\u1ed1ng nhau v\u00e0 x\u1eed l\u00fd message theo 1 c\u00e1ch duy nh\u1ea5t. SNS: T\u1ea5t c\u1ea3 nh\u1eefng consumer c\u00f3 c\u00e1ch x\u1eed l\u00fd c\u00e1c message theo nh\u1eefng c\u00e1ch kh\u00e1c nhau. N\u00f3i chung, SNS s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 g\u1eedi c\u00e1c notifications m\u1ed7i khi c\u00f3 th\u00f4ng b\u00e1o g\u1eedi \u0111\u1ebfn client. Tuy nhi\u00ean Client kh\u00f4ng ph\u1ea3i l\u00fac n\u00e0o c\u0169ng available \u0111\u1ec3 nh\u1eadn th\u00f4ng b\u00e1o ho\u1eb7c tr\u01b0\u1eddng h\u1ee3p m\u1ed9t l\u01b0\u1ee3ng l\u1edbn th\u00f4ng b\u00e1o g\u1eedi \u0111\u1ebfn 1 client, \u0111\u1ec1u d\u1eabn \u0111\u1ebfn k\u1ebft qu\u1ea3 kh\u00f4ng mong mu\u1ed1n l\u00e0 b\u1ecb lack c\u00e1c notification. Khi \u0111\u00f3 ta s\u1ebd c\u1ea7n d\u00f9ng SQS \u0111\u1ec3 l\u01b0u tr\u1eef c\u00e1c notification \u0111\u00f3. Ph\u00eda Client s\u1ebd order cho vi\u1ec7c nh\u1eadn notifications, khi h\u1ecd available th\u00ec Server s\u1ebd ch\u1ee7 \u0111\u1ed9ng request l\u00ean SQS \u0111\u1ec3 nh\u1eadn c\u00e1c notifications v\u00e0 g\u1eedi v\u1ec1 cho Client \u2192 tr\u00e1nh s\u1ef1 qu\u00e1 t\u1ea3i cho server v\u00e0 tr\u00e1nh \u0111\u01b0\u1ee3c vi\u1ec7c m\u1ea5t c\u00e1c notification t\u1eeb ch\u1ed7 client. Reference What is Amazon SNS Simple Queue Service SNS vs SQS - hevodata AWS SNS vs SQS \u2013 Whats The Difference stackoverflow.com - questions 13681213","title":"SNS/SQS"},{"location":"Message-Brokers/SNS-SQS/#snssqs","text":"","title":"SNS/SQS"},{"location":"Message-Brokers/SNS-SQS/#sns-simple-notification-service","text":"SNS l\u00e0 m\u1ed9t d\u1ecbch v\u1ee5 g\u1eedi c\u00e1c Notifications nhanh ch\u00f3ng, linh ho\u1ea1t, \u0111\u01b0\u1ee3c qu\u1ea3n l\u00fd \u0111\u1ea7y \u0111\u1ee7 cho ph\u00e9p g\u1eedi t\u1eebng message ri\u00eang l\u1ebb ho\u1eb7c g\u1eedi message h\u00e0ng lo\u1ea1t t\u1edbi s\u1ed1 l\u01b0\u1ee3ng l\u1edbn ng\u01b0\u1eddi nh\u1eadn. Amazon cung c\u1ea5p m\u1ed9t d\u1ecbch v\u1ee5 SNS l\u00e0 Amazon SNS , d\u00f9ng trong vi\u1ec7c push notifications s\u1ed1 l\u01b0\u1ee3ng l\u1edbn \u0111\u1ebfn client th\u00f4ng qua m\u1ed9t topic. Client \u1edf \u0111\u00e2y c\u00f3 th\u1ec3 l\u00e0 m\u1ed9t web server , mobile app , email ho\u1eb7c th\u1eadm ch\u00ed g\u1eedi message \u0111\u1ebfn c\u00e1c d\u1ecbch v\u1ee5 ph\u00e2n t\u00e1n kh\u00e1c m\u1ed9t c\u00e1ch \u0111\u01a1n gi\u1ea3n v\u00e0 ti\u1ebft ki\u1ec7m chi ph\u00ed SNS l\u00e0 distributed publish-subscribe system . Publisher s\u1ebd xu\u1ea5t b\u1ea3n c\u00e1c message v\u00e0 SNS v\u1ebd push c\u00e1c message n\u00e0y \u0111\u1ebfn Subscriber.","title":"SNS - Simple Notification Service"},{"location":"Message-Brokers/SNS-SQS/#sqs-simple-queue-service","text":"SQS l\u00e0 distributed queuing system Message s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c push tr\u1ef1c ti\u1ebfp \u0111\u1ebfn Consumer m\u00e0 Consumer ph\u1ea3i order t\u1eeb SQS \u0111\u1ec3 nh\u1eadn message v\u00e0 nhi\u1ec1u Consumer kh\u00f4ng th\u1ec3 nh\u1eadn message c\u00f9ng m\u1ed9t l\u00fac. B\u1ea5t k\u1ef3 Consumer n\u00e0o c\u0169ng c\u00f3 th\u1ec3 nh\u1eadn \u0111\u01b0\u1ee3c message, x\u1eed l\u00fd v\u00e0 x\u00f3a n\u00f3. Nh\u1eefng Consumer kh\u00e1c kh\u00f4ng nh\u1eadn \u0111\u01b0\u1ee3c message t\u01b0\u01a1ng t\u1ef1 sau \u0111\u00f3. Vi\u1ec7c order message n\u00e0y g\u00e2y ra m\u1ed9t s\u1ed1 \u0111\u1ed9 tr\u1ec5 nh\u1ea5t \u0111\u1ecbnh trong vi\u1ec7c g\u1eedi message, kh\u00f4ng gi\u1ed1ng nh\u01b0 SNS, message \u0111\u01b0\u1ee3c push ngay l\u1eadp t\u1ee9c \u0111\u1ebfn Subscriber. Amazon cung c\u1ea5p m\u1ed9t d\u1ecbch v\u1ee5 SQS l\u00e0 Amazon SQS , ch\u1ee7 y\u1ebfu \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 t\u00e1ch c\u00e1c \u1ee9ng d\u1ee5ng ho\u1eb7c t\u00edch h\u1ee3p c\u00e1c \u1ee9ng d\u1ee5ng. Message c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef trong SQS trong th\u1eddi gian ng\u1eafn (t\u1ed1i \u0111a 14 ng\u00e0y). C\u1ee5 th\u1ec3, Amazon SQS cung c\u1ea5p gi\u1ea3i ph\u00e1p migration d\u1eef li\u1ec7u gi\u1eefa c\u00e1c th\u00e0nh ph\u1ea7n trong h\u1ec7 th\u1ed1ng ph\u00e2n t\u00e1n \u0111\u1ec3 th\u1ef1c hi\u1ec7n c\u00e1c nhi\u1ec7m v\u1ee5 kh\u00e1c nhau. V\u1edbi SQS, ta c\u00f3 th\u1ec3 gi\u1ea3m t\u1ea3i g\u00e1nh n\u1eb7ng cho h\u1ec7 th\u1ed1ng v\u00e0 c\u00f3 th\u1ec3 d\u1ec5 d\u00e0ng m\u1edf r\u1ed9ng kh\u1ea3 n\u0103ng l\u01b0u tr\u1eef c\u00e1c message v\u1edbi chi ph\u00ed th\u1ea5p.","title":"SQS - Simple Queue Service"},{"location":"Message-Brokers/SNS-SQS/#sns-vs-sqs","text":"Ph\u00e2n lo\u1ea1i: SQS : distributed queuing system SNS : distributed publish-subscribe system C\u01a1 ch\u1ebf: SQS : C\u01a1 ch\u1ebf pull - Consumer order message t\u1eeb SQS v\u00e0 pull message v\u1ec1 SNS : C\u01a1 ch\u1ebf push - SNS push message \u0111\u1ebfn consumer C\u00e1ch s\u1eed d\u1ee5ng SQS : T\u00e1ch hai \u1ee9ng d\u1ee5ng v\u00e0 cho ph\u00e9p x\u1eed l\u00fd kh\u00f4ng \u0111\u1ed3ng b\u1ed9 song song SNS : Cho ph\u00e9p x\u1eed l\u00fd c\u00f9ng m\u1ed9t notification theo nhi\u1ec1u c\u00e1ch Th\u1eddi gian t\u1ed3n t\u1ea1i c\u1ee7a message SQS: message v\u1eabn t\u1ed3n t\u1ea1i trong m\u1ed9t s\u1ed1 kho\u1ea3ng th\u1eddi gian (c\u00f3 th\u1ec3 \u0111\u1ecbnh c\u1ea5u h\u00ecnh) khi kh\u00f4ng c\u00f3 Consumer n\u00e0o s\u1eed d\u1ee5ng SNS: message s\u1ebd b\u1ecb x\u00f3a t\u1ed3n t\u1ea1i ng\u1eafn, s\u1ebd b\u1ecb x\u00f3a khi kh\u00f4ng c\u00f3 Consumer nh\u1eadn message ho\u1eb7c Consumer \u0111\u00e3 nh\u1eadn \u0111\u01b0\u1ee3c message. Consumer : SQS: Consumer gi\u1ed1ng nhau v\u00e0 x\u1eed l\u00fd message theo 1 c\u00e1ch duy nh\u1ea5t. SNS: T\u1ea5t c\u1ea3 nh\u1eefng consumer c\u00f3 c\u00e1ch x\u1eed l\u00fd c\u00e1c message theo nh\u1eefng c\u00e1ch kh\u00e1c nhau. N\u00f3i chung, SNS s\u1ebd \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 g\u1eedi c\u00e1c notifications m\u1ed7i khi c\u00f3 th\u00f4ng b\u00e1o g\u1eedi \u0111\u1ebfn client. Tuy nhi\u00ean Client kh\u00f4ng ph\u1ea3i l\u00fac n\u00e0o c\u0169ng available \u0111\u1ec3 nh\u1eadn th\u00f4ng b\u00e1o ho\u1eb7c tr\u01b0\u1eddng h\u1ee3p m\u1ed9t l\u01b0\u1ee3ng l\u1edbn th\u00f4ng b\u00e1o g\u1eedi \u0111\u1ebfn 1 client, \u0111\u1ec1u d\u1eabn \u0111\u1ebfn k\u1ebft qu\u1ea3 kh\u00f4ng mong mu\u1ed1n l\u00e0 b\u1ecb lack c\u00e1c notification. Khi \u0111\u00f3 ta s\u1ebd c\u1ea7n d\u00f9ng SQS \u0111\u1ec3 l\u01b0u tr\u1eef c\u00e1c notification \u0111\u00f3. Ph\u00eda Client s\u1ebd order cho vi\u1ec7c nh\u1eadn notifications, khi h\u1ecd available th\u00ec Server s\u1ebd ch\u1ee7 \u0111\u1ed9ng request l\u00ean SQS \u0111\u1ec3 nh\u1eadn c\u00e1c notifications v\u00e0 g\u1eedi v\u1ec1 cho Client \u2192 tr\u00e1nh s\u1ef1 qu\u00e1 t\u1ea3i cho server v\u00e0 tr\u00e1nh \u0111\u01b0\u1ee3c vi\u1ec7c m\u1ea5t c\u00e1c notification t\u1eeb ch\u1ed7 client.","title":"SNS vs. SQS"},{"location":"Message-Brokers/SNS-SQS/#reference","text":"What is Amazon SNS Simple Queue Service SNS vs SQS - hevodata AWS SNS vs SQS \u2013 Whats The Difference stackoverflow.com - questions 13681213","title":"Reference"},{"location":"Message-Brokers/Topics-Exchange-Channel/","text":"Topics, Exchange, Channel Topics Trong c\u00e1c b\u00e0i tr\u01b0\u1edbc, ch\u00fang ta \u0111\u00e3 c\u1ea3i ti\u1ebfn th\u00eam m\u1ed9t s\u1ed1 t\u00ednh n\u0103ng m\u1edbi cho h\u1ec7 th\u1ed1ng log. Ch\u00fang ta kh\u00f4ng ch\u1ec9 d\u00f9ng exchange ki\u1ec3u fanout \u0111\u1ec3 g\u1eedi message cho t\u1ea5t c\u1ea3 c\u00e1c consume m\u00e0 thay v\u00e0o \u0111\u00f3 c\u00f3 th\u1ec3 d\u00f9ng driect , n\u00f3 c\u00f3 th\u1ec3 cho ch\u00fang ta ch\u1ecdn l\u1ef1a nh\u1eefng log c\u1ea7n thi\u1ebft, quan tr\u1ecdng. Nh\u01b0 ta th\u1ea5y, driect c\u00f3 kh\u00e1 nhi\u1ec1u \u01b0u \u0111i\u1ec3m. Nh\u01b0ng m\u1eb7c d\u00f9 v\u1eady nh\u01b0ng driect c\u0169ng c\u00f3 m\u1eb7t h\u1ea1n ch\u1ebf l\u00e0 kh\u00f4ng th\u1ec3 \u0111i\u1ec1u h\u01b0\u1edbng c\u00e1c message v\u1edbi nhi\u1ec1u \u0111i\u1ec1u ki\u1ec7n kh\u00e1c nhau. Trong h\u1ec7 th\u1ed1ng log, ch\u00fang ta kh\u00f4ng ch\u1ec9 thu th\u1eadp nh\u1eefng c\u00e1c log c\u00f3 \u0111\u1ed9 c\u1ea3nh b\u00e1o cao (info/warn/crit...) m\u00e0 c\u00f2n ph\u1ea3i \u0111i\u1ec1u h\u01b0\u1edbng c\u00e1c log kh\u00e1c li\u00ean quan t\u1edbi h\u1ec7 th\u1ed1ng (auth/cron/kern...). V\u00ec th\u1ebf, ch\u00fang ta c\u1ea7n ph\u1ea3i linh ho\u1ea1t ch\u1ecdn l\u1ecdc t\u1eeb nh\u1eefng message v\u1ec1 cron b\u00ean trong kern . \u0110\u1ec3 gi\u1ea3i quy\u1ebft v\u1ea5n \u0111\u1ec1 n\u00e0y, ch\u00fang ta c\u1ea7n t\u00ecm hi\u1ec3u v\u1ec1 m\u1ed9t exchange kh\u00e1 hay l\u00e0 topic . Topic exchange C\u00e1c message \u0111\u01b0\u1ee3c g\u1eedi \u0111\u1ebfn Topic exchange kh\u00f4ng b\u1ecb b\u00f3 bu\u1ed9c v\u00e0o routing_key* - n\u00f3 bao g\u1ed3m m\u1ed9t chu\u1ed7i c\u00e1c t\u1eeb \u0111\u01b0\u1ee3c ch\u1ee9a thu\u1ed9c t\u00ednh g\u1ee3i nh\u1edb, ch\u1ecdn l\u1ecdc ph\u00e2n \u0111\u1ecbnh b\u1edfi d\u1ea5u (.) v\u00e0 c\u00f3 \u0111\u1ed9 d\u00e0i kh\u00f4ng qu\u00e1 255 byte. V\u00ed d\u1ee5: \"stock.usd.nyse\" , \"nyse.vmw\" , \"quick.orange.rabbit\" Binding key c\u0169ng ph\u1ea3i s\u1eed d\u1ee5ng c\u00fa ph\u00e1p t\u01b0\u01a1ng t\u1ef1 v\u1edbi exchange . V\u1ec1 l\u00fd thuy\u1ebft, topic exchange ho\u1ea1t \u0111\u1ed9ng gi\u1ed1ng nh\u01b0 driect , c\u00f3 ngh\u0129a l\u00e0 n\u00f3 s\u1ebd so s\u00e1nh c\u00e1c routing key v\u1edbi binding key n\u1ebfu th\u1ea5y gi\u1ed1ng n\u00f3 s\u1ebd g\u1eedi message \u0111i. C\u00f3 2 tr\u01b0\u1eddng h\u1ee3p \u0111\u1eb7c bi\u1ec7t sau: * (start): \u0110\u01b0\u1ee3c thay th\u1ebf cho 1 t\u1eeb # (hash): \u0110\u01b0\u1ee3c thay th\u1ebf cho t\u1eeb r\u1ed7ng ho\u1eb7c nhi\u1ec1u t\u1eeb ph\u00eda tr\u01b0\u1edbc/sau n\u00f3 \u0110\u1ec3 d\u1ec5 h\u00ecnh dung ch\u00fang ta c\u00f9ng xem s\u01a1 \u0111\u1ed3 sau: topics \u1ede v\u00ed d\u1ee5 tr\u00ean, ch\u00fang ta s\u1ebd g\u1eedi message t\u1edbi t\u1ea5t c\u1ea3 c\u00e1c animals . message \u0111\u01b0\u1ee3c g\u1eedi \u0111i v\u1edbi routing key c\u00f3 ch\u1ee9a 3 t\u1eeb (v\u00ec c\u00f3 2 d\u1ea5u ch\u1ea5m). Ph\u00e2n t\u00edch c\u00fa ph\u00e1p c\u1ee7a routing key ta th\u1ea5y c\u00f3 3 tr\u01b0\u1eddng nh\u01b0 sau: <celerity>.<colour>.<species> . Quay tr\u1edf v\u1ec1 v\u00ed d\u1ee5 \u1edf h\u00ecnh, ch\u00fang ta th\u1ea5y Q1 s\u1ebd nh\u1eadn c\u00e1c message c\u00f3 routing key l\u00e0 *.orange.* . T\u01b0\u01a1ng t\u1ef1 v\u1eady, Q2 s\u1ebd nh\u1eadn c\u00e1c message ch\u1ee9a *.*.rabbit v\u00e0 lazy.# . Ch\u00fang ta c\u00f3 th\u1ec3 di\u1ec5n d\u1ea3i b\u1eb1ng l\u1eddi v\u0103n nh\u01b0 sau: Q1 s\u1ebd nh\u1eadn to\u00e0n b\u1ed9 c\u00e1c \u0111\u1ed9ng v\u1eadt m\u00e0u cam *.organe.* Q2 s\u1ebd l\u1eafng nghe to\u00e0n b\u1ed9 nh\u1eefng g\u00ec v\u1ec1 Rabbit c\u00f3 3 tr\u01b0\u1eddng *.*.rabbit v\u00e0 t\u1ea5t c\u1ea3 nh\u1eefng g\u00ec b\u1eaft \u0111\u1ea7u v\u1ec1 lazy.# V\u00ed d\u1ee5: quick.orange.rabbit : c\u1ea3 2 lazy.orange.elephant : c\u1ea3 2 quick.orange.fox : Q1 lazy.brown.fox : Q2 lazy.pink.rabbit : Q2 quick.brown.fox : B\u1ecf qua V\u1edbi c\u00e1c message c\u00f3 routing_key 4 tr\u01b0\u1eddng nh\u01b0 quick.orange.male.rabbit s\u1ebd b\u1ecb lo\u1ea1i b\u1ecf v\u00ec kh\u00f4ng c\u00f3 rule n\u00e0o ph\u00f9 h\u1ee3p. Nh\u01b0ng v\u1edbi lazy.orange.male.rabbit th\u00ec kh\u00f4ng, n\u00f3 ph\u00f9 h\u1ee3p v\u1edbi rule lazy.# \u1edf Q2 . Putting it all together Ch\u00fang ta s\u1ebd s\u1eed d\u1ee5ng topic v\u1edbi routing_key c\u00f3 2 tr\u01b0\u1eddng <facility>.<severity> . Gi\u1ed1ng nh\u01b0 code \u1edf c\u00e1c b\u00e0i tr\u01b0\u1edbc, ch\u00fang ta s\u1eeda l\u1ea1i 1 ch\u00fat emit_log_topic.py : #!/usr/bin/env python import pika import sys connection = pika . BlockingConnection ( pika . ConnectionParameters ( host = 'localhost' )) channel = connection . channel () channel . exchange_declare ( exchange = 'topic_logs' , type = 'topic' ) routing_key = sys . argv [ 1 ] if len ( sys . argv ) > 2 else 'anonymous.info' message = ' ' . join ( sys . argv [ 2 :]) or 'Hello World!' channel . basic_publish ( exchange = 'topic_logs' , routing_key = routing_key , body = message ) print ( \" [x] Sent %r : %r \" % ( routing_key , message )) connection . close () Code c\u1ee7a receive_logs_topic.py #!/usr/bin/env python import pika import sys connection = pika . BlockingConnection ( pika . ConnectionParameters ( host = 'localhost' )) channel = connection . channel () channel . exchange_declare ( exchange = 'topic_logs' , type = 'topic' ) result = channel . queue_declare ( exclusive = True ) queue_name = result . method . queue binding_keys = sys . argv [ 1 :] if not binding_keys : sys . stderr . write ( \"Usage: %s [binding_key]... \\n \" % sys . argv [ 0 ]) sys . exit ( 1 ) for binding_key in binding_keys : channel . queue_bind ( exchange = 'topic_logs' , queue = queue_name , routing_key = binding_key ) print ( ' [*] Waiting for logs. To exit press CTRL+C' ) def callback ( ch , method , properties , body ): print ( \" [x] %r : %r \" % ( method . routing_key , body )) channel . basic_consume ( callback , queue = queue_name , no_ack = True ) channel . start_consuming () \u0110\u1ec3 g\u1eedi t\u1ea5t c\u1ea3 c\u00e1c log: python receive_logs_topic.py \"#\" \u0110\u1ec3 nh\u1eadn t\u1ea5t c\u1ea3 c\u00e1c log t\u1eeb \"kern\" python receive_logs_topic.py \"kern.*\" N\u1ebfu mu\u1ed1n nh\u1eadn c\u00e1c log \"critial\": python receive_logs_topic.py \"*.critical\" Nh\u1eadn log t\u1eeb nhi\u1ec1u binding : python receive_logs_topic.py \"kern.*\" \"*.critical\" Nh\u1eadn c\u00e1c log v\u1edbi routing_key l\u00e0 kern.critial : python emit_log_topic.py \"kern.critical\" \"A critical kernel error\" Source emit_log_topic.py receive_logs_topic.py Exchange Nh\u01b0 m\u00ecnh \u0111\u00e3 \u0111\u1ec1 c\u1eadp \u1edf module RabbitMQ , c\u00f3 4 lo\u1ea1i Exchange: Direct , Fanout , Topic , Headers . Vi\u1ec7c l\u1ef1a ch\u1ecdn c\u00e1c exchange type kh\u00e1c nhau s\u1ebd d\u1eabn \u0111\u1ebfn c\u00e1c x\u1eed l\u00fd kh\u00e1c nhau c\u1ee7a message broker v\u1edbi message nh\u1eadn \u0111\u01b0\u1ee3c t\u1eeb producer. Exchange s\u1ebd \u0111\u01b0\u1ee3c binding \u0111\u1ebfn m\u1ed9t s\u1ed1 Queue nh\u1ea5t \u0111\u1ecbnh. Ngo\u00e0i 4 \u00f4ng exchange tr\u00ean c\u00f2n c\u00f3 th\u00eam Dead Letter Exchange , d\u00f9ng \u0111\u1ec3 catch c\u00e1c message kh\u00f4ng th\u1ec3 g\u1eedi \u0111\u01b0\u1ee3c, trong tr\u01b0\u1eddng h\u1ee3p n\u1ebfu kh\u00f4ng t\u00ecm th\u1ea5y queue ph\u00f9 h\u1ee3p cho message, message s\u1ebd t\u1ef1 \u0111\u1ed9ng b\u1ecb h\u1ee7y. Direct Exchange Direct Exchange - trao \u0111\u1ed5i tr\u1ef1c ti\u1ebfp: D\u00f9ng \u0111\u1ec3 \u0111\u1ecbnh tuy\u1ebfn message \u0111\u1ebfn Queue d\u1ef1a v\u00e0o routing key. Th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho vi\u1ec7c \u0111\u1ecbnh tuy\u1ebfn message unicast-\u0111\u01a1n h\u01b0\u1edbng (m\u1eb7c d\u00f9 n\u00f3 c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng cho \u0111\u1ecbnh tuy\u1ebfn multicast-\u0111a h\u01b0\u1edbng). C\u00e1c b\u01b0\u1edbc \u0111\u1ecbnh tuy\u1ebfn message: M\u1ed9t queue \u0111\u01b0\u1ee3c r\u00e0ng bu\u1ed9c v\u1edbi m\u1ed9t direct exchange b\u1edfi m\u1ed9t routing key K. Khi c\u00f3 m\u1ed9t message m\u1edbi v\u1edbi routing key R \u0111\u1ebfn direct exchange. Message s\u1ebd \u0111\u01b0\u1ee3c chuy\u1ec3n t\u1edbi queue \u0111\u00f3 n\u1ebfu R=K. M\u1ed9t Exchange kh\u00f4ng x\u00e1c \u0111\u1ecbnh t\u00ean (empty ttring), \u0111\u00e2y l\u00e0 lo\u1ea1i Default Exchange, m\u1ed9t d\u1ea1ng \u0111\u1eb7c bi\u1ec7t c\u1ee7a l\u00e0 Direct Exchange. Default Exchange \u0111\u01b0\u1ee3c li\u00ean k\u1ebft ng\u1ea7m \u0111\u1ecbnh v\u1edbi m\u1ecdi Queue v\u1edbi kh\u00f3a \u0111\u1ecbnh tuy\u1ebfn b\u1eb1ng v\u1edbi t\u00ean Queue. Direct Exchange h\u1eefu \u00edch khi mu\u1ed1n ph\u00e2n bi\u1ec7t c\u00e1c th\u00f4ng b\u00e1o \u0111\u01b0\u1ee3c publish cho c\u00f9ng m\u1ed9t exchange b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng m\u1ed9t m\u00e3 \u0111\u1ecbnh danh chu\u1ed7i \u0111\u01a1n gi\u1ea3n. V\u00ed d\u1ee5, n\u1ebfu Queue \u0111\u01b0\u1ee3c g\u1eafn v\u1edbi m\u1ed9t exchange c\u00f3 binding key l\u00e0 pdf_create , message \u0111\u01b0\u1ee3c \u0111\u1ea9y v\u00e0o exchange v\u1edbi routing key l\u00e0 pdf_create s\u1ebd \u0111\u01b0\u1ee3c \u0111\u01b0a v\u00e0o Queue n\u00e0y. Fanout Exchange Fanout Exchange d\u00f9ng \u0111\u1ec3 \u0111\u1ecbnh tuy\u1ebfn message (copy message) t\u1edbi t\u1ea5t c\u1ea3 queue m\u00e0 n\u00f3 \u0111\u01b0\u1ee3c bind, v\u1edbi b\u1ea5t k\u1ec3 m\u1ed9t routing key n\u00e0o. Gi\u1ea3 s\u1eed, n\u1ebfu n\u00f3 N queue \u0111\u01b0\u1ee3c bind b\u1edfi m\u1ed9t Fanout exchange, khi m\u1ed9t message m\u1edbi published, exchange s\u1ebd \u0111\u1ecbnh tuy\u1ebfn message \u0111\u00f3 t\u1edbi t\u1ea5t c\u1ea3 N queues. Fanout exchange \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho \u0111\u1ecbnh tuy\u1ebfn message broadcast. Fanout Exchange h\u1eefu \u00edch v\u1edbi tr\u01b0\u1eddng h\u1ee3p ta c\u1ea7n m\u1ed9t d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c g\u1eedi t\u1edbi nhi\u1ec1u \u1ee9ng d\u1ee5ng kh\u00e1c nhau v\u1edbi c\u00f9ng m\u1ed9t message nh\u01b0ng c\u00e1ch x\u1eed l\u00fd \u1edf \u1ee9ng d\u1ee5ng l\u00e0 kh\u00e1c nhau. Topic Exchange Topic Exchange \u0111\u1ecbnh tuy\u1ebfn message t\u1edbi m\u1ed9t ho\u1eb7c nhi\u1ec1u queue d\u1ef1a tr\u00ean s\u1ef1 tr\u00f9ng kh\u1edbp gi\u1eefa routing key v\u00e0 pattern. Topic exchange th\u01b0\u1eddng s\u1eed d\u1ee5ng \u0111\u1ec3 th\u1ef1c hi\u1ec7n \u0111\u1ecbnh tuy\u1ebfn th\u00f4ng \u0111i\u1ec7p multicast. V\u00ed d\u1ee5 m\u1ed9t v\u00e0i tr\u01b0\u1eddng h\u1ee3p s\u1eed d\u1ee5ng: Ph\u00e2n ph\u1ed1i d\u1eef li\u1ec7u li\u00ean quan \u0111\u1ebfn v\u1ecb tr\u00ed \u0111\u1ecba l\u00fd c\u1ee5 th\u1ec3. X\u1eed l\u00fd t\u00e1c v\u1ee5 n\u1ec1n \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n b\u1edfi nhi\u1ec1u workers, m\u1ed7i c\u00f4ng vi\u1ec7c c\u00f3 kh\u1ea3 n\u0103ng x\u1eed l\u00fd c\u00e1c nh\u00f3m t\u00e1c v\u1ee5 c\u1ee5 th\u1ec3. C\u1eadp nh\u1eadt tin t\u1ee9c li\u00ean quan \u0111\u1ebfn m\u1ed9t category ho\u1eb7c g\u1eafn tag. \u0110i\u1ec1u ph\u1ed1i c\u00e1c d\u1ecbch v\u1ee5 c\u1ee7a c\u00e1c lo\u1ea1i kh\u00e1c nhau trong cloud. M\u1ed9t topic exchange s\u1ebd s\u1eed d\u1ee5ng wildcard \u0111\u1ec3 g\u1eafn routing key v\u1edbi m\u1ed9t routing pattern khai b\u00e1o trong binding. Consumer c\u00f3 th\u1ec3 \u0111\u0103ng k\u00fd nh\u1eefng topic m\u00e0 n\u00f3 quan t\u00e2m. Header Exchange Header Exchange \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 \u0111\u1ecbnh tuy\u1ebfn v\u1edbi nhi\u1ec1u thu\u1ed9c t\u00ednh, \u0111\u1ec3 d\u00e0ng th\u1ef1c hi\u1ec7n d\u01b0\u1edbi d\u1ea1ng header c\u1ee7a message h\u01a1n l\u00e0 routing key. Header exchange b\u1ecf \u0111i routing key m\u00e0 thay v\u00e0o \u0111\u00f3 \u0111\u1ecbnh tuy\u1ebfn d\u1ef1a tr\u00ean header c\u1ee7a message. Tr\u01b0\u1eddng h\u1ee3p n\u00e0y, broker c\u1ea7n m\u1ed9t ho\u1eb7c nhi\u1ec1u th\u00f4ng tin t\u1eeb application developer, c\u1ee5 th\u1ec3 l\u00e0, n\u00ean quan t\u00e2m \u0111\u1ebfn nh\u1eefng message v\u1edbi ti\u00eau \u0111\u1ec1 n\u00e0o ph\u00f9 h\u1ee3p ho\u1eb7c t\u1ea5t c\u1ea3 ch\u00fang. Headers Exchange r\u1ea5t gi\u1ed1ng v\u1edbi Topic Exchange, nh\u01b0ng n\u00f3 \u0111\u1ecbnh tuy\u1ebfn d\u1ef1a tr\u00ean c\u00e1c gi\u00e1 tr\u1ecb header thay v\u00ec routing key. M\u1ed9t Message \u0111\u01b0\u1ee3c coi l\u00e0 ph\u00f9 h\u1ee3p n\u1ebfu gi\u00e1 tr\u1ecb c\u1ee7a header b\u1eb1ng v\u1edbi gi\u00e1 tr\u1ecb \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh khi r\u00e0ng bu\u1ed9c. Channel Notes Connection : M\u1ed9t k\u1ebft n\u1ed1i TCP gi\u1eefa \u1ee9ng d\u1ee5ng v\u00e0 RabbitMQ broker. Channel : M\u1ed9t k\u1ebft n\u1ed1i \u1ea3o trong m\u1ed9t Connection. Vi\u1ec7c publishing ho\u1eb7c consuming message t\u1eeb m\u1ed9t queue \u0111\u1ec1u \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n tr\u00ean channel. Channel \u0111\u1ea1i di\u1ec7n cho m\u1ed9t ph\u1ea7n logic c\u1ee7a application logic, m\u1ed7i Channel th\u01b0\u1eddng t\u1ed3n t\u1ea1i tr\u00ean m\u1ed9t thread ri\u00eang. Th\u00f4ng th\u01b0\u1eddng, t\u1ea5t c\u1ea3 c\u00e1c Channel do application m\u1edf ra s\u1ebd chia s\u1ebb m\u1ed9t k\u1ebft n\u1ed1i duy nh\u1ea5t - ch\u00fang l\u00e0 c\u00e1c session ho\u1ea1t \u0111\u1ed9ng d\u1ef1a tr\u00ean Connection. H\u1ea7u h\u1ebft c\u00e1c ho\u1ea1t \u0111\u1ed9ng c\u1ee7a giao th\u1ee9c AMQP di\u1ec5n ra qua c\u00e1c Channel. Channel ho\u1ea1t \u0111\u1ed9ng \u1edf Application layer trong m\u00f4 h\u00ecnh OSI Channels are designed to be transient - C\u00e1c Channel \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 d\u00f9ng t\u1ea1m th\u1eddi. V\u00ec ch\u00fang ch\u1ec9 l\u00e0 t\u1ea1m th\u1eddi, n\u00ean application kh\u00f4ng n\u00ean g\u1ed9p c\u00e1c Channel l\u1ea1i v\u1edbi nhau. Server s\u1eed d\u1ee5ng m\u1ed9t integer number \u0111\u1ec3 \u0111\u1ecbnh danh cho Channel, d\u00f9ng \u0111\u1ec3 ph\u00e2n bi\u1ec7t Channel n\u00e0o \u0111ang \u1edf session n\u00e0o, c\u00f3 c\u00e1c Connection g\u00ec. Channel Lifecycle - Opening Channels : C\u00e1c application m\u1edf m\u1ed9t Channel ngay sau khi m\u1edf Connection th\u00e0nh c\u00f4ng. Gi\u1ed1ng nh\u01b0 c\u00e1c Connection, c\u00e1c Channel c\u00f3 th\u1ec3 t\u1ed3n t\u1ea1i l\u00e2u d\u00e0i, kh\u00f4ng c\u1ea7n ph\u1ea3i m\u1edf m\u1ed9t Channel cho m\u1ed7i ho\u1ea1t \u0111\u1ed9ng c\u1ee7a application, l\u00e0m nh\u01b0 v\u1eady s\u1ebd r\u1ea5t k\u00e9m hi\u1ec7u qu\u1ea3, Channel th\u01b0\u1eddng \u0111\u01b0\u1ee3c d\u00f9ng cho m\u1ed9t network roundtrip . Closing Channels : Khi m\u1ed9t Channel kh\u00f4ng c\u00f2n c\u1ea7n thi\u1ebft n\u1eefa, n\u00f3 s\u1ebd \u0111\u01b0\u1ee3c \u0111\u00f3ng l\u1ea1i. Maximum Number of Channels per Connection : S\u1ed1 l\u01b0\u1ee3ng Channel t\u1ed1i \u0111a c\u00f3 th\u1ec3 m\u1edf \u0111\u1ed3ng th\u1eddi tr\u00ean m\u1ed9t Connection do client v\u00e0 server set t\u1ea1i th\u1eddi \u0111i\u1ec3m k\u1ebft n\u1ed1i. V\u00e0 gi\u00e1 tr\u1ecb c\u00f3 th\u1ec3 d\u00f9ng \u0111\u1ec3 \u0111\u1ecbnh c\u1ea5u h\u00ecnh cho c\u1ea3 RabbitMQ. Reference RabbitMQ - tutorial-five-python RabbitMQ Exchanges, routing keys and bindings RabbitMQ - Channel","title":"Topics, Exchange, Channel"},{"location":"Message-Brokers/Topics-Exchange-Channel/#topics-exchange-channel","text":"","title":"Topics, Exchange, Channel"},{"location":"Message-Brokers/Topics-Exchange-Channel/#topics","text":"Trong c\u00e1c b\u00e0i tr\u01b0\u1edbc, ch\u00fang ta \u0111\u00e3 c\u1ea3i ti\u1ebfn th\u00eam m\u1ed9t s\u1ed1 t\u00ednh n\u0103ng m\u1edbi cho h\u1ec7 th\u1ed1ng log. Ch\u00fang ta kh\u00f4ng ch\u1ec9 d\u00f9ng exchange ki\u1ec3u fanout \u0111\u1ec3 g\u1eedi message cho t\u1ea5t c\u1ea3 c\u00e1c consume m\u00e0 thay v\u00e0o \u0111\u00f3 c\u00f3 th\u1ec3 d\u00f9ng driect , n\u00f3 c\u00f3 th\u1ec3 cho ch\u00fang ta ch\u1ecdn l\u1ef1a nh\u1eefng log c\u1ea7n thi\u1ebft, quan tr\u1ecdng. Nh\u01b0 ta th\u1ea5y, driect c\u00f3 kh\u00e1 nhi\u1ec1u \u01b0u \u0111i\u1ec3m. Nh\u01b0ng m\u1eb7c d\u00f9 v\u1eady nh\u01b0ng driect c\u0169ng c\u00f3 m\u1eb7t h\u1ea1n ch\u1ebf l\u00e0 kh\u00f4ng th\u1ec3 \u0111i\u1ec1u h\u01b0\u1edbng c\u00e1c message v\u1edbi nhi\u1ec1u \u0111i\u1ec1u ki\u1ec7n kh\u00e1c nhau. Trong h\u1ec7 th\u1ed1ng log, ch\u00fang ta kh\u00f4ng ch\u1ec9 thu th\u1eadp nh\u1eefng c\u00e1c log c\u00f3 \u0111\u1ed9 c\u1ea3nh b\u00e1o cao (info/warn/crit...) m\u00e0 c\u00f2n ph\u1ea3i \u0111i\u1ec1u h\u01b0\u1edbng c\u00e1c log kh\u00e1c li\u00ean quan t\u1edbi h\u1ec7 th\u1ed1ng (auth/cron/kern...). V\u00ec th\u1ebf, ch\u00fang ta c\u1ea7n ph\u1ea3i linh ho\u1ea1t ch\u1ecdn l\u1ecdc t\u1eeb nh\u1eefng message v\u1ec1 cron b\u00ean trong kern . \u0110\u1ec3 gi\u1ea3i quy\u1ebft v\u1ea5n \u0111\u1ec1 n\u00e0y, ch\u00fang ta c\u1ea7n t\u00ecm hi\u1ec3u v\u1ec1 m\u1ed9t exchange kh\u00e1 hay l\u00e0 topic .","title":"Topics"},{"location":"Message-Brokers/Topics-Exchange-Channel/#topic-exchange","text":"C\u00e1c message \u0111\u01b0\u1ee3c g\u1eedi \u0111\u1ebfn Topic exchange kh\u00f4ng b\u1ecb b\u00f3 bu\u1ed9c v\u00e0o routing_key* - n\u00f3 bao g\u1ed3m m\u1ed9t chu\u1ed7i c\u00e1c t\u1eeb \u0111\u01b0\u1ee3c ch\u1ee9a thu\u1ed9c t\u00ednh g\u1ee3i nh\u1edb, ch\u1ecdn l\u1ecdc ph\u00e2n \u0111\u1ecbnh b\u1edfi d\u1ea5u (.) v\u00e0 c\u00f3 \u0111\u1ed9 d\u00e0i kh\u00f4ng qu\u00e1 255 byte. V\u00ed d\u1ee5: \"stock.usd.nyse\" , \"nyse.vmw\" , \"quick.orange.rabbit\" Binding key c\u0169ng ph\u1ea3i s\u1eed d\u1ee5ng c\u00fa ph\u00e1p t\u01b0\u01a1ng t\u1ef1 v\u1edbi exchange . V\u1ec1 l\u00fd thuy\u1ebft, topic exchange ho\u1ea1t \u0111\u1ed9ng gi\u1ed1ng nh\u01b0 driect , c\u00f3 ngh\u0129a l\u00e0 n\u00f3 s\u1ebd so s\u00e1nh c\u00e1c routing key v\u1edbi binding key n\u1ebfu th\u1ea5y gi\u1ed1ng n\u00f3 s\u1ebd g\u1eedi message \u0111i. C\u00f3 2 tr\u01b0\u1eddng h\u1ee3p \u0111\u1eb7c bi\u1ec7t sau: * (start): \u0110\u01b0\u1ee3c thay th\u1ebf cho 1 t\u1eeb # (hash): \u0110\u01b0\u1ee3c thay th\u1ebf cho t\u1eeb r\u1ed7ng ho\u1eb7c nhi\u1ec1u t\u1eeb ph\u00eda tr\u01b0\u1edbc/sau n\u00f3 \u0110\u1ec3 d\u1ec5 h\u00ecnh dung ch\u00fang ta c\u00f9ng xem s\u01a1 \u0111\u1ed3 sau: topics \u1ede v\u00ed d\u1ee5 tr\u00ean, ch\u00fang ta s\u1ebd g\u1eedi message t\u1edbi t\u1ea5t c\u1ea3 c\u00e1c animals . message \u0111\u01b0\u1ee3c g\u1eedi \u0111i v\u1edbi routing key c\u00f3 ch\u1ee9a 3 t\u1eeb (v\u00ec c\u00f3 2 d\u1ea5u ch\u1ea5m). Ph\u00e2n t\u00edch c\u00fa ph\u00e1p c\u1ee7a routing key ta th\u1ea5y c\u00f3 3 tr\u01b0\u1eddng nh\u01b0 sau: <celerity>.<colour>.<species> . Quay tr\u1edf v\u1ec1 v\u00ed d\u1ee5 \u1edf h\u00ecnh, ch\u00fang ta th\u1ea5y Q1 s\u1ebd nh\u1eadn c\u00e1c message c\u00f3 routing key l\u00e0 *.orange.* . T\u01b0\u01a1ng t\u1ef1 v\u1eady, Q2 s\u1ebd nh\u1eadn c\u00e1c message ch\u1ee9a *.*.rabbit v\u00e0 lazy.# . Ch\u00fang ta c\u00f3 th\u1ec3 di\u1ec5n d\u1ea3i b\u1eb1ng l\u1eddi v\u0103n nh\u01b0 sau: Q1 s\u1ebd nh\u1eadn to\u00e0n b\u1ed9 c\u00e1c \u0111\u1ed9ng v\u1eadt m\u00e0u cam *.organe.* Q2 s\u1ebd l\u1eafng nghe to\u00e0n b\u1ed9 nh\u1eefng g\u00ec v\u1ec1 Rabbit c\u00f3 3 tr\u01b0\u1eddng *.*.rabbit v\u00e0 t\u1ea5t c\u1ea3 nh\u1eefng g\u00ec b\u1eaft \u0111\u1ea7u v\u1ec1 lazy.# V\u00ed d\u1ee5: quick.orange.rabbit : c\u1ea3 2 lazy.orange.elephant : c\u1ea3 2 quick.orange.fox : Q1 lazy.brown.fox : Q2 lazy.pink.rabbit : Q2 quick.brown.fox : B\u1ecf qua V\u1edbi c\u00e1c message c\u00f3 routing_key 4 tr\u01b0\u1eddng nh\u01b0 quick.orange.male.rabbit s\u1ebd b\u1ecb lo\u1ea1i b\u1ecf v\u00ec kh\u00f4ng c\u00f3 rule n\u00e0o ph\u00f9 h\u1ee3p. Nh\u01b0ng v\u1edbi lazy.orange.male.rabbit th\u00ec kh\u00f4ng, n\u00f3 ph\u00f9 h\u1ee3p v\u1edbi rule lazy.# \u1edf Q2 .","title":"Topic exchange"},{"location":"Message-Brokers/Topics-Exchange-Channel/#putting-it-all-together","text":"Ch\u00fang ta s\u1ebd s\u1eed d\u1ee5ng topic v\u1edbi routing_key c\u00f3 2 tr\u01b0\u1eddng <facility>.<severity> . Gi\u1ed1ng nh\u01b0 code \u1edf c\u00e1c b\u00e0i tr\u01b0\u1edbc, ch\u00fang ta s\u1eeda l\u1ea1i 1 ch\u00fat emit_log_topic.py : #!/usr/bin/env python import pika import sys connection = pika . BlockingConnection ( pika . ConnectionParameters ( host = 'localhost' )) channel = connection . channel () channel . exchange_declare ( exchange = 'topic_logs' , type = 'topic' ) routing_key = sys . argv [ 1 ] if len ( sys . argv ) > 2 else 'anonymous.info' message = ' ' . join ( sys . argv [ 2 :]) or 'Hello World!' channel . basic_publish ( exchange = 'topic_logs' , routing_key = routing_key , body = message ) print ( \" [x] Sent %r : %r \" % ( routing_key , message )) connection . close () Code c\u1ee7a receive_logs_topic.py #!/usr/bin/env python import pika import sys connection = pika . BlockingConnection ( pika . ConnectionParameters ( host = 'localhost' )) channel = connection . channel () channel . exchange_declare ( exchange = 'topic_logs' , type = 'topic' ) result = channel . queue_declare ( exclusive = True ) queue_name = result . method . queue binding_keys = sys . argv [ 1 :] if not binding_keys : sys . stderr . write ( \"Usage: %s [binding_key]... \\n \" % sys . argv [ 0 ]) sys . exit ( 1 ) for binding_key in binding_keys : channel . queue_bind ( exchange = 'topic_logs' , queue = queue_name , routing_key = binding_key ) print ( ' [*] Waiting for logs. To exit press CTRL+C' ) def callback ( ch , method , properties , body ): print ( \" [x] %r : %r \" % ( method . routing_key , body )) channel . basic_consume ( callback , queue = queue_name , no_ack = True ) channel . start_consuming () \u0110\u1ec3 g\u1eedi t\u1ea5t c\u1ea3 c\u00e1c log: python receive_logs_topic.py \"#\" \u0110\u1ec3 nh\u1eadn t\u1ea5t c\u1ea3 c\u00e1c log t\u1eeb \"kern\" python receive_logs_topic.py \"kern.*\" N\u1ebfu mu\u1ed1n nh\u1eadn c\u00e1c log \"critial\": python receive_logs_topic.py \"*.critical\" Nh\u1eadn log t\u1eeb nhi\u1ec1u binding : python receive_logs_topic.py \"kern.*\" \"*.critical\" Nh\u1eadn c\u00e1c log v\u1edbi routing_key l\u00e0 kern.critial : python emit_log_topic.py \"kern.critical\" \"A critical kernel error\"","title":"Putting it all together"},{"location":"Message-Brokers/Topics-Exchange-Channel/#source","text":"emit_log_topic.py receive_logs_topic.py","title":"Source"},{"location":"Message-Brokers/Topics-Exchange-Channel/#exchange","text":"Nh\u01b0 m\u00ecnh \u0111\u00e3 \u0111\u1ec1 c\u1eadp \u1edf module RabbitMQ , c\u00f3 4 lo\u1ea1i Exchange: Direct , Fanout , Topic , Headers . Vi\u1ec7c l\u1ef1a ch\u1ecdn c\u00e1c exchange type kh\u00e1c nhau s\u1ebd d\u1eabn \u0111\u1ebfn c\u00e1c x\u1eed l\u00fd kh\u00e1c nhau c\u1ee7a message broker v\u1edbi message nh\u1eadn \u0111\u01b0\u1ee3c t\u1eeb producer. Exchange s\u1ebd \u0111\u01b0\u1ee3c binding \u0111\u1ebfn m\u1ed9t s\u1ed1 Queue nh\u1ea5t \u0111\u1ecbnh. Ngo\u00e0i 4 \u00f4ng exchange tr\u00ean c\u00f2n c\u00f3 th\u00eam Dead Letter Exchange , d\u00f9ng \u0111\u1ec3 catch c\u00e1c message kh\u00f4ng th\u1ec3 g\u1eedi \u0111\u01b0\u1ee3c, trong tr\u01b0\u1eddng h\u1ee3p n\u1ebfu kh\u00f4ng t\u00ecm th\u1ea5y queue ph\u00f9 h\u1ee3p cho message, message s\u1ebd t\u1ef1 \u0111\u1ed9ng b\u1ecb h\u1ee7y.","title":"Exchange"},{"location":"Message-Brokers/Topics-Exchange-Channel/#direct-exchange","text":"Direct Exchange - trao \u0111\u1ed5i tr\u1ef1c ti\u1ebfp: D\u00f9ng \u0111\u1ec3 \u0111\u1ecbnh tuy\u1ebfn message \u0111\u1ebfn Queue d\u1ef1a v\u00e0o routing key. Th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho vi\u1ec7c \u0111\u1ecbnh tuy\u1ebfn message unicast-\u0111\u01a1n h\u01b0\u1edbng (m\u1eb7c d\u00f9 n\u00f3 c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng cho \u0111\u1ecbnh tuy\u1ebfn multicast-\u0111a h\u01b0\u1edbng). C\u00e1c b\u01b0\u1edbc \u0111\u1ecbnh tuy\u1ebfn message: M\u1ed9t queue \u0111\u01b0\u1ee3c r\u00e0ng bu\u1ed9c v\u1edbi m\u1ed9t direct exchange b\u1edfi m\u1ed9t routing key K. Khi c\u00f3 m\u1ed9t message m\u1edbi v\u1edbi routing key R \u0111\u1ebfn direct exchange. Message s\u1ebd \u0111\u01b0\u1ee3c chuy\u1ec3n t\u1edbi queue \u0111\u00f3 n\u1ebfu R=K. M\u1ed9t Exchange kh\u00f4ng x\u00e1c \u0111\u1ecbnh t\u00ean (empty ttring), \u0111\u00e2y l\u00e0 lo\u1ea1i Default Exchange, m\u1ed9t d\u1ea1ng \u0111\u1eb7c bi\u1ec7t c\u1ee7a l\u00e0 Direct Exchange. Default Exchange \u0111\u01b0\u1ee3c li\u00ean k\u1ebft ng\u1ea7m \u0111\u1ecbnh v\u1edbi m\u1ecdi Queue v\u1edbi kh\u00f3a \u0111\u1ecbnh tuy\u1ebfn b\u1eb1ng v\u1edbi t\u00ean Queue. Direct Exchange h\u1eefu \u00edch khi mu\u1ed1n ph\u00e2n bi\u1ec7t c\u00e1c th\u00f4ng b\u00e1o \u0111\u01b0\u1ee3c publish cho c\u00f9ng m\u1ed9t exchange b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng m\u1ed9t m\u00e3 \u0111\u1ecbnh danh chu\u1ed7i \u0111\u01a1n gi\u1ea3n. V\u00ed d\u1ee5, n\u1ebfu Queue \u0111\u01b0\u1ee3c g\u1eafn v\u1edbi m\u1ed9t exchange c\u00f3 binding key l\u00e0 pdf_create , message \u0111\u01b0\u1ee3c \u0111\u1ea9y v\u00e0o exchange v\u1edbi routing key l\u00e0 pdf_create s\u1ebd \u0111\u01b0\u1ee3c \u0111\u01b0a v\u00e0o Queue n\u00e0y.","title":"Direct Exchange"},{"location":"Message-Brokers/Topics-Exchange-Channel/#fanout-exchange","text":"Fanout Exchange d\u00f9ng \u0111\u1ec3 \u0111\u1ecbnh tuy\u1ebfn message (copy message) t\u1edbi t\u1ea5t c\u1ea3 queue m\u00e0 n\u00f3 \u0111\u01b0\u1ee3c bind, v\u1edbi b\u1ea5t k\u1ec3 m\u1ed9t routing key n\u00e0o. Gi\u1ea3 s\u1eed, n\u1ebfu n\u00f3 N queue \u0111\u01b0\u1ee3c bind b\u1edfi m\u1ed9t Fanout exchange, khi m\u1ed9t message m\u1edbi published, exchange s\u1ebd \u0111\u1ecbnh tuy\u1ebfn message \u0111\u00f3 t\u1edbi t\u1ea5t c\u1ea3 N queues. Fanout exchange \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho \u0111\u1ecbnh tuy\u1ebfn message broadcast. Fanout Exchange h\u1eefu \u00edch v\u1edbi tr\u01b0\u1eddng h\u1ee3p ta c\u1ea7n m\u1ed9t d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c g\u1eedi t\u1edbi nhi\u1ec1u \u1ee9ng d\u1ee5ng kh\u00e1c nhau v\u1edbi c\u00f9ng m\u1ed9t message nh\u01b0ng c\u00e1ch x\u1eed l\u00fd \u1edf \u1ee9ng d\u1ee5ng l\u00e0 kh\u00e1c nhau.","title":"Fanout Exchange"},{"location":"Message-Brokers/Topics-Exchange-Channel/#topic-exchange_1","text":"Topic Exchange \u0111\u1ecbnh tuy\u1ebfn message t\u1edbi m\u1ed9t ho\u1eb7c nhi\u1ec1u queue d\u1ef1a tr\u00ean s\u1ef1 tr\u00f9ng kh\u1edbp gi\u1eefa routing key v\u00e0 pattern. Topic exchange th\u01b0\u1eddng s\u1eed d\u1ee5ng \u0111\u1ec3 th\u1ef1c hi\u1ec7n \u0111\u1ecbnh tuy\u1ebfn th\u00f4ng \u0111i\u1ec7p multicast. V\u00ed d\u1ee5 m\u1ed9t v\u00e0i tr\u01b0\u1eddng h\u1ee3p s\u1eed d\u1ee5ng: Ph\u00e2n ph\u1ed1i d\u1eef li\u1ec7u li\u00ean quan \u0111\u1ebfn v\u1ecb tr\u00ed \u0111\u1ecba l\u00fd c\u1ee5 th\u1ec3. X\u1eed l\u00fd t\u00e1c v\u1ee5 n\u1ec1n \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n b\u1edfi nhi\u1ec1u workers, m\u1ed7i c\u00f4ng vi\u1ec7c c\u00f3 kh\u1ea3 n\u0103ng x\u1eed l\u00fd c\u00e1c nh\u00f3m t\u00e1c v\u1ee5 c\u1ee5 th\u1ec3. C\u1eadp nh\u1eadt tin t\u1ee9c li\u00ean quan \u0111\u1ebfn m\u1ed9t category ho\u1eb7c g\u1eafn tag. \u0110i\u1ec1u ph\u1ed1i c\u00e1c d\u1ecbch v\u1ee5 c\u1ee7a c\u00e1c lo\u1ea1i kh\u00e1c nhau trong cloud. M\u1ed9t topic exchange s\u1ebd s\u1eed d\u1ee5ng wildcard \u0111\u1ec3 g\u1eafn routing key v\u1edbi m\u1ed9t routing pattern khai b\u00e1o trong binding. Consumer c\u00f3 th\u1ec3 \u0111\u0103ng k\u00fd nh\u1eefng topic m\u00e0 n\u00f3 quan t\u00e2m.","title":"Topic Exchange"},{"location":"Message-Brokers/Topics-Exchange-Channel/#header-exchange","text":"Header Exchange \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 \u0111\u1ecbnh tuy\u1ebfn v\u1edbi nhi\u1ec1u thu\u1ed9c t\u00ednh, \u0111\u1ec3 d\u00e0ng th\u1ef1c hi\u1ec7n d\u01b0\u1edbi d\u1ea1ng header c\u1ee7a message h\u01a1n l\u00e0 routing key. Header exchange b\u1ecf \u0111i routing key m\u00e0 thay v\u00e0o \u0111\u00f3 \u0111\u1ecbnh tuy\u1ebfn d\u1ef1a tr\u00ean header c\u1ee7a message. Tr\u01b0\u1eddng h\u1ee3p n\u00e0y, broker c\u1ea7n m\u1ed9t ho\u1eb7c nhi\u1ec1u th\u00f4ng tin t\u1eeb application developer, c\u1ee5 th\u1ec3 l\u00e0, n\u00ean quan t\u00e2m \u0111\u1ebfn nh\u1eefng message v\u1edbi ti\u00eau \u0111\u1ec1 n\u00e0o ph\u00f9 h\u1ee3p ho\u1eb7c t\u1ea5t c\u1ea3 ch\u00fang. Headers Exchange r\u1ea5t gi\u1ed1ng v\u1edbi Topic Exchange, nh\u01b0ng n\u00f3 \u0111\u1ecbnh tuy\u1ebfn d\u1ef1a tr\u00ean c\u00e1c gi\u00e1 tr\u1ecb header thay v\u00ec routing key. M\u1ed9t Message \u0111\u01b0\u1ee3c coi l\u00e0 ph\u00f9 h\u1ee3p n\u1ebfu gi\u00e1 tr\u1ecb c\u1ee7a header b\u1eb1ng v\u1edbi gi\u00e1 tr\u1ecb \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh khi r\u00e0ng bu\u1ed9c.","title":"Header Exchange"},{"location":"Message-Brokers/Topics-Exchange-Channel/#channel","text":"","title":"Channel"},{"location":"Message-Brokers/Topics-Exchange-Channel/#notes","text":"Connection : M\u1ed9t k\u1ebft n\u1ed1i TCP gi\u1eefa \u1ee9ng d\u1ee5ng v\u00e0 RabbitMQ broker. Channel : M\u1ed9t k\u1ebft n\u1ed1i \u1ea3o trong m\u1ed9t Connection. Vi\u1ec7c publishing ho\u1eb7c consuming message t\u1eeb m\u1ed9t queue \u0111\u1ec1u \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n tr\u00ean channel. Channel \u0111\u1ea1i di\u1ec7n cho m\u1ed9t ph\u1ea7n logic c\u1ee7a application logic, m\u1ed7i Channel th\u01b0\u1eddng t\u1ed3n t\u1ea1i tr\u00ean m\u1ed9t thread ri\u00eang. Th\u00f4ng th\u01b0\u1eddng, t\u1ea5t c\u1ea3 c\u00e1c Channel do application m\u1edf ra s\u1ebd chia s\u1ebb m\u1ed9t k\u1ebft n\u1ed1i duy nh\u1ea5t - ch\u00fang l\u00e0 c\u00e1c session ho\u1ea1t \u0111\u1ed9ng d\u1ef1a tr\u00ean Connection. H\u1ea7u h\u1ebft c\u00e1c ho\u1ea1t \u0111\u1ed9ng c\u1ee7a giao th\u1ee9c AMQP di\u1ec5n ra qua c\u00e1c Channel. Channel ho\u1ea1t \u0111\u1ed9ng \u1edf Application layer trong m\u00f4 h\u00ecnh OSI Channels are designed to be transient - C\u00e1c Channel \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 d\u00f9ng t\u1ea1m th\u1eddi. V\u00ec ch\u00fang ch\u1ec9 l\u00e0 t\u1ea1m th\u1eddi, n\u00ean application kh\u00f4ng n\u00ean g\u1ed9p c\u00e1c Channel l\u1ea1i v\u1edbi nhau. Server s\u1eed d\u1ee5ng m\u1ed9t integer number \u0111\u1ec3 \u0111\u1ecbnh danh cho Channel, d\u00f9ng \u0111\u1ec3 ph\u00e2n bi\u1ec7t Channel n\u00e0o \u0111ang \u1edf session n\u00e0o, c\u00f3 c\u00e1c Connection g\u00ec. Channel Lifecycle - Opening Channels : C\u00e1c application m\u1edf m\u1ed9t Channel ngay sau khi m\u1edf Connection th\u00e0nh c\u00f4ng. Gi\u1ed1ng nh\u01b0 c\u00e1c Connection, c\u00e1c Channel c\u00f3 th\u1ec3 t\u1ed3n t\u1ea1i l\u00e2u d\u00e0i, kh\u00f4ng c\u1ea7n ph\u1ea3i m\u1edf m\u1ed9t Channel cho m\u1ed7i ho\u1ea1t \u0111\u1ed9ng c\u1ee7a application, l\u00e0m nh\u01b0 v\u1eady s\u1ebd r\u1ea5t k\u00e9m hi\u1ec7u qu\u1ea3, Channel th\u01b0\u1eddng \u0111\u01b0\u1ee3c d\u00f9ng cho m\u1ed9t network roundtrip . Closing Channels : Khi m\u1ed9t Channel kh\u00f4ng c\u00f2n c\u1ea7n thi\u1ebft n\u1eefa, n\u00f3 s\u1ebd \u0111\u01b0\u1ee3c \u0111\u00f3ng l\u1ea1i. Maximum Number of Channels per Connection : S\u1ed1 l\u01b0\u1ee3ng Channel t\u1ed1i \u0111a c\u00f3 th\u1ec3 m\u1edf \u0111\u1ed3ng th\u1eddi tr\u00ean m\u1ed9t Connection do client v\u00e0 server set t\u1ea1i th\u1eddi \u0111i\u1ec3m k\u1ebft n\u1ed1i. V\u00e0 gi\u00e1 tr\u1ecb c\u00f3 th\u1ec3 d\u00f9ng \u0111\u1ec3 \u0111\u1ecbnh c\u1ea5u h\u00ecnh cho c\u1ea3 RabbitMQ.","title":"Notes"},{"location":"Message-Brokers/Topics-Exchange-Channel/#reference","text":"RabbitMQ - tutorial-five-python RabbitMQ Exchanges, routing keys and bindings RabbitMQ - Channel","title":"Reference"},{"location":"Message-Brokers/Work%20Queues/","text":"Work Queues Concepts Example Concepts \u00dd t\u01b0\u1edfng ch\u00ednh c\u1ee7a Work Queues (hay Task Queues ) l\u00e0 tr\u00e1nh vi\u1ec7c th\u1ef1c hi\u1ec7n ngay l\u1eadp t\u1ee9c m\u1ed9t work/task t\u1ed1n nhi\u1ec1u t\u00e0i nguy\u00ean v\u00e0 ph\u1ea3i ch\u1edd n\u00f3 ho\u00e0n th\u00e0nh. Thay v\u00e0o \u0111\u00f3 ch\u00fang ta s\u1ebd l\u00ean l\u1ecbch ( schedule ) v\u00e0 c\u00e1c work/task n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n d\u1ef1a tr\u00ean schedule m\u00e0 m\u00ecnh l\u1eadp ra. Work Queues s\u1ebd g\u00f3i g\u1ecdn (encapsulate) m\u1ed9t task d\u01b0\u1edbi d\u1ea1ng Message v\u00e0 g\u1eedi n\u00f3 \u0111\u1ebfn Queue. Sau \u0111\u00f3 c\u00f3 m\u1ed9t worker ch\u1ea1y background m\u1ed9t process \u0111\u1ec3 l\u1ea5y c\u00e1c task t\u1eeb Queue ra th\u1ef1c thi ch\u00fang. C\u00f3 th\u1ec3 t\u1ea1o nhi\u1ec1u worker \u0111\u1ec3 th\u1ef1c hi\u1ec7n c\u00e1c task v\u00e0 c\u00e1c task n\u00e0y \u0111\u1ec1u \u0111\u01b0\u1ee3c chia s\u1ebb gi\u1eefa c\u00e1c worker v\u1edbi nhau. Example Producer c\u00f3 nhi\u1ec7m v\u1ee5 t\u1ea1o c\u00e1c task v\u00e0 \u0111\u01b0a v\u00e0o RabbitMQ Broker, \u0111i t\u1eeb Exchange t\u1edbi Queue Consumer - \u0111\u00f3ng vai tr\u00f2 nh\u01b0 Worker c\u00f3 nhi\u1ec7m v\u1ee5 l\u1ea5y c\u00e1c task t\u1eeb Queue v\u1ec1 x\u1eed l\u00fd. Consume Qos(1) : M\u1eb7c \u0111\u1ecbnh, RabbitQM s\u1eed d\u1ee5ng Round-robin \u0111\u1ec3 g\u1eedi Message \u0111\u1ebfn Consumer k\u1ebf ti\u1ebfp m\u1ed9t c\u00e1ch tu\u1ea7n t\u1ef1. M\u1ed7i Consumer c\u00f3 th\u1eddi gian x\u1eed l\u00fd m\u1ed7i task kh\u00e1c nhau. \u0110\u1ec3 tr\u00e1nh m\u1ed9t Consumer nh\u1eadn qu\u00e1 nhi\u1ec1u task m\u00e0 kh\u00f4ng c\u00f3 th\u1eddi gian x\u1eed l\u00fd, m\u1ed9t Consumer qu\u00e1 r\u00e3nh kh\u00f4ng c\u00f3 th\u1eddi gian th\u1ef1c hi\u1ec7n task n\u00e0o h\u1ebft. Ta s\u1eed d\u1ee5ng option basicQos() \u0111\u1ec3 bu\u1ed9c RabbitMQ ch\u1ec9 g\u1eedi 1 Message cho 1 Consumer, khi n\u00e0o Consumer x\u1eed l\u00fd xong task th\u00ec m\u1edbi g\u1eedi ti\u1ebfp 1 Message cho n\u00f3 x\u1eed l\u00fd. Nh\u1edd v\u1eady th\u1eddi gian ho\u00e0n th\u00e0nh s\u1edbm h\u01a1n. C\u00e1c Consumer ti\u1ebfp h\u00e0nh x\u1eed l\u00fd c\u00e1i task m\u00e0 n\u00f3 \u0111\u01b0\u1ee3c giao. \u1ede \u0111\u00e2y v\u00ed d\u1ee5 Producer \u0111\u1ec3 t\u1ea1o ra 10 Tasks v\u00e0 2 Consumer \u0111\u1ec3 thay phi\u00ean nhau x\u1eed l\u00fd c\u00e1c task n\u00e0y. Consumer 1 s\u1ebd x\u1eed l\u00fd 1 task trong 100 milliseconds , Consumer 2 s\u1ebd x\u1eed l\u00fd 1 task trong 300 milliseconds . N\u1ebfu theo c\u01a1 ch\u1ebf Round-robin dispatching c\u1ee7a RabbitMQ th\u00f4ng th\u01b0\u1eddng th\u00ec m\u1ed7i Consumer s\u1ebd x\u1eed \u00fd 5 Tasks, th\u1eddi gian x\u1eed l\u00fd m\u1ed7i Task c\u1ee7a Consumer 2 l\u00e2u h\u01a1n n\u00ean Consumer 1 s\u1ebd r\u1ed7i r\u1ea3nh trong khi Consumer 2 v\u1eabn c\u00f2n vi\u1ec7c ph\u1ea3i x\u1eed l\u00fd. Tuy nhi\u00ean, m\u00ecnh \u0111\u00e3 s\u1eed d\u1ee5ng basicQos() n\u00ean s\u1ebd kh\u00f4ng c\u00f3 chuy\u1ec7n m\u1ed9t Consumer r\u1ed7i r\u1ea3nh v\u00e0 m\u1ed9t Consumer c\u00f3 nhi\u1ec1u Task c\u1ea7n l\u00e0m. Consumer s\u1ebd g\u1eedi m\u1ed9t ACK message \u0111\u1ebfn RabbitMQ \u0111\u1ec3 b\u00e1o r\u1eb1ng m\u1ed9t Message \u0111\u00e3 \u0111\u01b0\u1ee3c Consumer nh\u1eadn, x\u1eed l\u00fd v\u00e0 Rabbit c\u00f3 th\u1ec3 xo\u00e1 n\u00f3. \u0110\u1ec3 tr\u00e1nh tr\u01b0\u1eddng h\u1ee3p n\u1ebfu m\u1ed9t Consumer x\u1eed l\u00fd Task trong m\u1ed9t th\u1eddi gian d\u00e0i, ch\u1ec9 m\u1ed9t ph\u1ea7n c\u1ee7a Task \u0111\u01b0\u1ee3c ho\u00e0n th\u00e0nh v\u00e0 n\u00f3 die. Message \u0111\u00e3 b\u1ecb xo\u00e1 b\u1edfi RabbitQM v\u00e0 Task s\u1ebd b\u1ecb m\u1ea5t. \u0110\u1ec3 gi\u1ea3i quy\u1ebft v\u1ea5n \u0111\u1ec1 n\u00e0y, ch\u00fang ta s\u1ebd kh\u00f4ng auto g\u1eedi Message, m\u00e0 ch\u00fang ta s\u1ebd g\u1eedi m\u1ed9t ACK message \u0111\u1ebfn RabbitMQ khi n\u00f3 ho\u00e0n th\u00e0nh x\u1eed l\u00fd Message. Implement with Python V\u00ed d\u1ee5 n\u00e0y d\u1ef1a tr\u00ean tutorial c\u1ee7a RabbitMQ , S\u1eed d\u1ee5ng th\u01b0 vi\u1ec7n pika 0.10.1 Python client python -m pip install pika --upgrade Hello World! V\u00ed d\u1ee5 v\u1ec1 m\u1ed9t h\u1ec7 th\u1ed1ng g\u1eedi, nh\u1eadn message v\u00e0 hi\u1ec3n th\u1ecb n\u00f3 l\u00ean m\u00e0n h\u00ecnh. Ch\u00fang ta c\u1ea7n vi\u1ebft 2 ch\u01b0\u01a1ng tr\u00ecnh, m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh g\u1eedi v\u00e0 m\u1ed9t d\u00f9ng \u0111\u1ec3 nh\u1eadn v\u00e0 in th\u00f4ng tin ra m\u00e0n h\u00ecnh. To\u00e0n b\u1ed9 qu\u00e1 tr\u00ecnh \u0111\u01b0\u1ee3c bi\u1ec3u di\u1ec5n qua s\u01a1 \u0111\u1ed3 sau: Producer g\u1eedi c\u00e1c message t\u1edbi \"hello\" queue v\u00e0 Comsumer s\u1ebd nh\u1eadn th\u00f4ng tin t\u1eeb queue n\u00e0y. Sending Ta s\u1ebd vi\u1ebft ch\u01b0\u01a1ng tr\u00ecnh g\u1eedi message trong file send.py \u0111\u1ec3 g\u1eedi m\u1ed9t message t\u1edbi queue . \u0110\u1ea7u ti\u00ean, ch\u00fang ta kh\u1edfi t\u1ea1o m\u1ed9t k\u1ebft n\u1ed1i t\u1edbi m\u00e1y ch\u1ee7 RabbitMQ. #!/usr/bin/env python import pika connection = pika . BlockingConnection ( pika . ConnectionParameters ( 'localhost' )) channel = connection . channel () Nh\u01b0 v\u1eady l\u00e0 ch\u00fang ta \u0111\u00e3 k\u1ebft n\u1ed1i t\u1edbi broker \u1edf localhost , n\u1ebfu broker n\u1eb1m \u1edf tr\u00ean m\u00e1y kh\u00e1c h\u00e3y thay th\u1ebf b\u1eb1ng \u0111\u1ecba ch\u1ec9 IP c\u1ee7a n\u00f3. Ti\u1ebfp theo, ch\u00fang ta ph\u1ea3i ch\u1eafc ch\u1eafn m\u1ed9t \u0111i\u1ec1u l\u00e0 ph\u1ea3i c\u00f3 m\u1ed9t queue \u0111\u00e3 t\u1ed3n t\u1ea1i, n\u1ebfu ch\u00fang ta g\u1eedi message v\u00e0o queue ch\u01b0a c\u00f3 s\u1eb5n, c\u00e1c message n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c RabbitMQ* cho v\u00e0o trash. T\u1ea1o m\u1edbi m\u1ed9t queue cho c\u00e1c message , \u0111\u1eb7t t\u00ean c\u1ee7a cho queue l\u00e0 \"hello\" channel . queue_declare ( queue = 'hello' ) Trong RabbitMQ, m\u1ed9t message c\u00f3 th\u1ec3 kh\u00f4ng \u0111\u01b0\u1ee3c x\u1ebfp v\u00e0o queue . N\u00f3 ph\u1ea3i \u0111\u01b0\u1ee3c th\u00f4ng qua m\u1ed9t exchange v\u00e0 exchange m\u1eb7c \u0111\u1ecbnh l\u00e0 empty. \u0110\u00e2y l\u00e0 m\u1ed9t exchange \u0111\u1eb7c bi\u1ec7t, n\u00f3 cho ph\u00e9p ch\u00fang ta x\u00e1c \u0111\u1ecbnh ch\u00ednh x\u00e1c queue n\u00e0o m\u00e0 mu\u1ed1n g\u1eedi message \u0111\u1ebfn. T\u00ean c\u1ee7a queue \u0111\u01b0\u1ee3c ch\u1ec9 r\u00f5 trong tham s\u1ed1 routing_key : channel . basic_publish ( exchange = '' , routing_key = 'hello' , body = 'Hello World!' ) print ( \" [x] Sent 'Hello World!'\" ) Cu\u1ed1i c\u00f9ng l\u00e0 ch\u00fang ta ng\u1eaft k\u1ebft n\u1ed1i t\u1edbi server. connection . close () L\u01b0u \u00fd: N\u1ebfu qu\u00e1 tr\u00ecnh g\u1eedi kh\u00f4ng th\u00e0nh c\u00f4ng, ch\u00fang ta ph\u1ea3i ki\u1ec3m tra l\u1ea1i dung l\u01b0\u1ee3ng tr\u1ed1ng c\u1ee7a \u1ed5 \u0111\u0129a l\u01b0u tr\u1eef, c\u1ea5u h\u00ecnh m\u1eb7c \u0111\u1ecbnh c\u1ee7a RabbitMQ l\u00e0 1GB. Xem l\u1ea1i log v\u00e0 t\u0103ng dung l\u01b0\u1ee3ng n\u1ebfu c\u1ea7n. Ki\u1ec3m tra t\u1ea1i file c\u1ea5u h\u00ecnh \u1edf tr\u01b0\u1eddng disk_free_limit . Receiving Ch\u01b0\u01a1ng tr\u00ecnh th\u1ee9 2 l\u00e0 receive.py s\u1ebd nh\u1eadn message t\u1eeb queue v\u00e0 in n\u00f3 ra m\u00e0n h\u00ecnh. \u0110\u1ea7u ti\u00ean ch\u00fang ta c\u1ea7n ph\u1ea3i k\u1ebft n\u1ed1i t\u1edbi m\u00e1y ch\u1ee7 RabbitMQ nh\u01b0 \u0111\u00e3 h\u01b0\u1edbng d\u1eabn \u1edf ph\u1ea7n tr\u00ean. Ti\u1ebfp theo, ch\u00fang ta c\u0169ng ph\u1ea3i x\u00e1c \u0111\u1ecbnh queue . \u0110\u1ec3 ch\u1ecdn queue , ch\u00fang ta s\u1eed d\u1ee5ng d\u00f2ng code sau: channel . queue_declare ( queue = 'hello' ) \u0110\u1ec3 nh\u1eadn message , ch\u00fang ta t\u1ea1o m\u1ed9t h\u00e0m t\u00ean callback \u0111\u1ec3 giao ti\u1ebfp v\u1edbi queue . N\u1ed9i dung c\u1ee7a h\u00e0m l\u00e0 nh\u1eadn message v\u00e0 hi\u1ec3n th\u1ecb n\u00f3 ra m\u00e0n h\u00ecnh. def callback ( ch , method , properties , body ): print ( \" [x] Received %r \" % body ) Ti\u1ebfp theo, ch\u00fang ta x\u00e1c nh\u1eadn l\u1ea1i v\u1edbi server r\u1eb1ng \u0111\u00e3 nh\u1eadn \u0111\u01b0\u1ee3c message t\u1eeb hello . channel . basic_consume ( callback , queue = 'hello' , no_ack = True ) \u0110\u1ec3 cho code tr\u00ean ch\u1ea1y, ch\u00fang ta ph\u1ea3i ch\u1eafc ch\u1eafn r\u1eb1ng queue m\u00e0 ch\u00fang ta mu\u1ed1n nh\u1eadn message ph\u1ea3i t\u1ed3n t\u1ea1i, v\u00e0 ch\u00fang ta \u0111\u00e3 ch\u1ecdn n\u00f3 \u1edf ph\u00eda tr\u00ean queue_declare . Cu\u1ed1i c\u00f9ng, ch\u00fang ta th\u00eam \u0111o\u1ea1n code \u0111\u1ec3 ch\u1edd, l\u1eafng nghe message t\u1eeb queue . print ( ' [*] Waiting for messages. To exit press CTRL+C' ) channel . start_consuming () Demo Ta ch\u1ea1y file send.py tr\u00ean m\u1ed9t m\u00e1y \u0111\u00e3 c\u00e0i s\u1eb5n python pika v\u00e0 tr\u1ecf IP v\u1ec1 m\u00e1y ch\u1ee7 RabbitMQ thay th\u1ebf cho tr\u01b0\u1eddng localhost \u1edf trong file, file n\u00e0y s\u1ebd d\u1eebng sau m\u1ed7i l\u1ea7n ch\u1ea1y th\u00e0nh c\u00f4ng: $ python send.py # =>> [x] Sent 'Hello World!' Tr\u00ean m\u1ed9t m\u00e1y nh\u1eadn, ch\u00fang ta s\u1eeda IP c\u1ee7a m\u00e1y ch\u1ee7 RabbitMQ trong file v\u00e0 ch\u1ea1y: $ python receive.py [ * ] Waiting for messages. To exit press CTRL+C [ x ] Received 'Hello World!' Ch\u01b0\u01a1ng tr\u00ecnh s\u1ebd listen c\u00e1c message cho \u0111\u1ebfn khi n\u00e0o c\u00e1c ta b\u1ea5m CTRL+C \u0111\u1ec3 tho\u00e1t. Work Queues Ta \u0111\u00e3 c\u00f3 c\u00e1c ch\u01b0\u01a1ng tr\u00ecnh \u0111\u1ec3 g\u1eedi v\u00e0 nh\u1eadn c\u00e1c message t\u1eeb m\u1ed9t queue \u0111\u00e3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh danh. Gi\u1edd ta s\u1ebd t\u1ea1o m\u1ed9t Work Queue , \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 \u0111i\u1ec1u ph\u1ed1i c\u00e1c t\u00e1c v\u1ee5 c\u1ea7n nhi\u1ec1u th\u1eddi gian x\u1eed l\u00fd gi\u1eefa nhi\u1ec1u worker v\u1edbi nhau. \u0110\u1ea7u ti\u00ean ta c\u1ea7n s\u1eeda l\u1ea1i file send.py m\u1ed9t ch\u00fat \u0111\u1ec3 cho ph\u00e9p b\u1ea5t k\u1ef3 n\u1ed9i dung n\u00e0o c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c g\u1eedi qua file. N\u00f3 s\u1ebd \u0111\u1eb7t l\u1ecbch v\u00e0o c\u00e1c queue v\u00e0 \u0111\u1eb7t t\u00ean n\u00f3 l\u00e0 new_task.py : import sys message = ' ' . join ( sys . argv [ 1 :]) or \"Hello World!\" channel . basic_publish ( exchange = '' , routing_key = 'task_queue' , body = message , properties = pika . BasicProperties ( delivery_mode = 2 , # make message persistent )) print ( \" [x] Sent %r \" % message ) C\u00f2n \u0111\u1ed1i v\u1edbi file receive.py c\u0169ng c\u00f3 m\u1ed9t v\u00e0i thay \u0111\u1ed5i, l\u00e0 \u0111\u1ebfm s\u1ed1 d\u1ea5u . trong message . N\u00f3 s\u1ebd nh\u1eadn c\u00e1c message t\u1eeb queue v\u00e0 th\u1ef1c thi t\u00e1c v\u1ee5. H\u00e3y \u0111\u1eb7t t\u00ean cho n\u00f3 l\u00e0 worker.py import time def callback ( ch , method , properties , body ): print ( \" [x] Received %r \" % body ) time . sleep ( body . count ( b '.' )) print ( \" [x] Done\" ) Round-robin dispatching M\u1ed9t l\u1ee3i th\u1ebf c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng Work Queue l\u00e0 kh\u1ea3 n\u0103ng l\u00e0m vi\u1ec7c song song. N\u1ebfu ch\u00fang ta x\u00e2y d\u1ef1ng m\u1ed9t ph\u1ea7n d\u1ef1 tr\u1eef c\u1ee7a c\u00e1c work , ta c\u00f3 th\u1ec3 th\u00eam nhi\u1ec1u c\u00e1c worker v\u00e0 kh\u1ea3 n\u0103ng m\u1edf r\u1ed9ng n\u00f3 l\u00e0 t\u01b0\u01a1ng \u0111\u1ed1i d\u1ec5 d\u00e0ng. \u0110\u1ea7u ti\u00ean, ch\u00fang ta s\u1ebd ch\u1ea1y script worker.py tr\u00ean 2 m\u00e1y kh\u00e1c nhau c\u00f9ng m\u1ed9t th\u1eddi \u0111i\u1ec3m. shell1$ python worker.py [ * ] Waiting for messages. To exit press CTRL+C shell2$ python worker.py [ * ] Waiting for messages. To exit press CTRL+C Ti\u1ebfp theo, ch\u00fang ta publish m\u1ed9t s\u1ed1 message nh\u01b0 sau: shell3$ python new_task.py First message. shell3$ python new_task.py Second message.. shell3$ python new_task.py Third message... shell3$ python new_task.py Fourth message.... shell3$ python new_task.py Fifth message..... K\u1ebft qu\u1ea3 hi\u1ec3n th\u1ecb \u1edf 2 c\u1eeda s\u1ed5 console b\u00ean tr\u00ean nh\u01b0 sau: shell1$ python worker.py [ * ] Waiting for messages. To exit press CTRL+C [ x ] Received 'First message.' [ x ] Received 'Third message...' [ x ] Received 'Fifth message.....' shell2$ python worker.py [ * ] Waiting for messages. To exit press CTRL+C [ x ] Received 'Second message..' [ x ] Received 'Fourth message....' M\u1eb7c \u0111\u1ecbnh, RabbitMQ s\u1ebd g\u1eedi m\u1ed7i message t\u1edbi m\u1ed9t consumer theo t\u00ednh tu\u1ea7n t\u1ef1. Ki\u1ec3u n\u00e0y \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 Round-robin, h\u00e3y th\u1eed l\u1ea1i t\u00ecnh hu\u1ed1ng n\u00e0y v\u1edbi 3 ho\u1eb7c nhi\u1ec1u h\u01a1n 3 consumer . Message acknowledgment M\u1ed9t t\u00e1c v\u1ee5 \u0111\u01b0\u1ee3c th\u1ef1c thi s\u1ebd ph\u1ea3i m\u1ea5t \u0111\u1ebfn v\u00e0i gi\u00e2y. Sau khi g\u1eedi xong, RabbitMQ s\u1ebd xo\u00e1 b\u1ecf t\u00e1c v\u1ee5 \u0111\u00f3 ngay kh\u1ecfi queue . Trong tr\u01b0\u1eddng h\u1ee3p m\u1ed9t worker v\u00ec m\u1ed9t l\u00fd do n\u00e0o \u0111\u00f3 m\u00e0 kh\u00f4ng th\u1ec3 ho\u1ea1t \u0111\u1ed9ng, ch\u00fang ta s\u1ebd chuy\u1ec3n c\u00e1c t\u00e1c v\u1ee5 m\u00e0 n\u00f3 \u0111\u1ea3m nh\u1eadn sang m\u1ed9t worker kh\u00e1c. \u0110\u1ec3 tr\u00e1nh vi\u1ec7c th\u1ea5t l\u1ea1c c\u00e1c message , RabbitMQ cung c\u1ea5p c\u01a1 ch\u1ebf ack. Ack l\u00e0 m\u1ed9t b\u1ea3n tin \u0111\u01b0\u1ee3c g\u1eedi t\u1eeb consumer t\u1edbi server \u0111\u1ec3 th\u00f4ng b\u00e1o r\u1eb1ng n\u00f3 \u0111\u00e3 nh\u1eadn v\u00e0 x\u1eed l\u00fd message v\u00e0 RabbitMQ c\u00f3 th\u1ec3 xo\u00e1 n\u00f3 tr\u00ean queue . N\u1ebfu consumer b\u1ecb l\u1ed7i v\u00e0 kh\u00f4ng th\u1ec3 nh\u1eadn \u0111\u01b0\u1ee3c message , \u0111i\u1ec1u n\u00e0y \u0111\u1ed3ng ngh\u0129a v\u1edbi vi\u1ec7c b\u1ea3n tin ack ch\u01b0a \u0111\u01b0\u1ee3c g\u1eedi \u0111\u1ebfn server, l\u00fac n\u00e0y RabbitMQ s\u1ebd \u0111\u01b0a message \u0111\u00f3 v\u00e0o l\u1ea1i queue . T\u1ea1i th\u1eddi \u0111i\u1ec3m n\u00e0y, n\u1ebfu m\u1ed9t consumer kh\u00e1c online RabbitMQ s\u1ebd g\u1eedi l\u1ea1i message cho n\u00f3. \u0110i\u1ec1u n\u00e0y gi\u00fap b\u1ea1n y\u00ean t\u00e2m r\u1eb1ng, s\u1ebd kh\u00f4ng c\u00f3 b\u1ea3n tin n\u00e0o b\u1ecb m\u1ea5t trong qu\u00e1 tr\u00ecnh m\u1ed9t worker n\u00e0o \u0111\u00f3 b\u1ecb l\u1ed7i. B\u1ea3n tin ack m\u1eb7c \u0111\u1ecbnh \u0111\u01b0\u1ee3c b\u1eadt. trong v\u00ed d\u1ee5 l\u1ea7n tr\u01b0\u1edbc, ch\u00fang ta \u0111\u00e3 t\u1eaft n\u00f3 \u0111i \u1edf tu\u1ef3 ch\u1ecdn no_ack=True . \u1ede \u0111o\u1ea1n code d\u01b0\u1edbi \u0111\u00e2y, ch\u00fang ta s\u1ebd b\u1ecf tu\u1ef3 ch\u1ecdn \u0111\u00f3 \u0111i v\u00e0 ack s\u1ebd \u0111\u01b0\u1ee3c g\u1eedi t\u1eeb worker . def callback ( ch , method , properties , body ): print \" [x] Received %r \" % ( body ,) time . sleep ( body . count ( '.' ) ) print \" [x] Done\" ch . basic_ack ( delivery_tag = method . delivery_tag ) channel . basic_consume ( callback , queue = 'hello' ) Khi s\u1eed d\u1ee5ng \u0111o\u1ea1n code tr\u00ean, khi b\u1ea1n c\u00f3 b\u1ea5m CTRL+C \u0111\u1ec3 tho\u00e1t kh\u1ecfi ch\u01b0\u01a1ng tr\u00ecnh th\u00ec s\u1ebd kh\u00f4ng nh\u1eadn \u0111\u01b0\u1ee3c message t\u1eeb server do v\u1eady b\u1ea3n tin ack s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c g\u1eedi \u0111i cho \u0111\u1ebfn khi n\u00e0o b\u1ea1n b\u1eadt ch\u01b0\u01a1ng tr\u00ecnh tr\u1edf l\u1ea1i. \u0110i\u1ec1u n\u00e0y gi\u00fap cho ch\u00fang ta kh\u00f4ng b\u1ecb th\u1ea5t l\u1ea1c b\u1ea5t c\u1ee9 b\u1ea3n tin n\u00e0o. Message duralibity \u1ede ph\u1ea7n tr\u00ean, ch\u00fang ta \u0111\u00e3 bi\u1ebft c\u00e1ch gi\u1ea3i quy\u1ebft khi consumer g\u1eb7p s\u1ef1 c\u1ed1. Nh\u01b0ng khi RabbitMQ b\u1ecb d\u1eebng \u0111\u1ed9t ng\u1ed9t, t\u1ea5t c\u1ea3 c\u00e1c message s\u1ebd b\u1ecb m\u1ea5t h\u1ebft. \u0110\u1ec3 tr\u00e1nh s\u1ef1 vi\u1ec7c n\u00e0y, RabbitMQ cung c\u1ea5p c\u01a1 ch\u1ebf l\u00e2u b\u1ec1n h\u00e3y s\u1eed d\u1ee5ng \u0111o\u1ea1n code sau: channel . queue_declare ( queue = 'hello' , durable = True ) Tuy nhi\u00ean, \u0111o\u1ea1n code tr\u00ean s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c \u00e1p d\u1ee5ng v\u1edbi nh\u1eefng queue \u0111\u00e3 c\u00f3 s\u1eb5n. \u0110\u1ec3 th\u1ef1c hi\u1ec7n vi\u1ec7c n\u00e0y, ch\u00fang ta ph\u1ea3i t\u1ea1o ra m\u1ed9t queue m\u1edbi c\u00f3 t\u00ean l\u00e0 task_queue . channel . queue_declare ( queue = 'task_ queue' , durable = True ) Vi\u1ec7c n\u00e0y ph\u1ea3i \u0111\u01b0\u1ee3c thay \u0111\u1ed5i tr\u00ean c\u1ea3 producer v\u00e0 consumer . V\u00e0 t\u1ea1i th\u1eddi \u0111i\u1ec3m n\u00e0y, ch\u00fang ta ch\u1eafc ch\u1eafn r\u1eb1ng s\u1ebd kh\u00f4ng c\u00f3 message n\u00e0o b\u1ecb th\u1ea5t l\u1ea1c khi RabbitMQ b\u1ecb kh\u1edfi \u0111\u1ed9ng l\u1ea1i. B\u00e2y gi\u1edd, \u0111\u1ec3 th\u00eam t\u00ednh \u1ed5n \u0111\u1ecbnh cho n\u00f3, ch\u00fang ta th\u00eam thu\u1ed9c t\u00ednh delivery_mode v\u1edbi gi\u00e1 tr\u1ecb b\u1eb1ng 2 . channel . basic_publish ( exchange = '' , routing_key = \"task_queue\" , body = message , properties = pika . BasicProperties ( delivery_mode = 2 , # make message persistent )) Fair dispatch Tuy nhi\u00ean vi\u1ec7c \u0111i\u1ec1u ph\u1ed1i c\u00e1c message \u0111\u00f4i khi kh\u00f4ng nh\u01b0 ch\u00fang ta ngh\u0129. V\u00ed d\u1ee5 ch\u00fang ta c\u00f3 2 worker , m\u1ed9t worker ph\u1ea3i l\u00e0m vi\u1ec7c b\u1eadn r\u1ed9n c\u00f2n work kia th\u00ec h\u1ea7u nh\u01b0 kh\u00f4ng. RabbitMQ kh\u00f4ng h\u1ec1 bi\u1ebft \u0111i\u1ec1u \u0111\u00f3 v\u00e0 v\u1eabn \u0111i\u1ec1u ph\u1ed1i c\u00e1c message \u0111\u1ec1u. \u0110i\u1ec1u \u0111\u00f3 x\u1ea3y ra v\u00ec RabbitMQ ch\u1ec9 \u0111i\u1ec1u ph\u1ed1i message khi ch\u00fang \u1edf trong m\u1ed9t queue . N\u00f3 ch\u1ec9 vi\u1ec7c g\u1eedi message \u0111\u1ebfn consumer \u0111\u00e3 ch\u1ec9 \u0111\u1ecbnh m\u00e0 kh\u00f4ng quan t\u00e2m \u0111\u1ebfn b\u1ea5t c\u1ee9 vi\u1ec7c g\u00ec. \u0110\u1ec3 kh\u1eafc ph\u1ee5c \u0111i\u1ec1u \u0111\u00f3, ch\u00fang ta s\u1eed d\u1ee5ng ph\u01b0\u01a1ng th\u1ee9c basic.qos v\u1edbi t\u00f9y ch\u1ecdn prefetch_count=1 \u0111\u1ec3 n\u00f3i v\u1edbi RabbitMQ ch\u1ec9 g\u1eedi m\u1ed9t message t\u1edbi 1 worker m\u1ed9t l\u00fac v\u00e0 sau khi nh\u1eadn \u0111\u01b0\u1ee3c ack t\u1eeb worker v\u1eeba g\u1eedi l\u00e0 \u0111\u00e3 x\u1eed l\u00fd xong. V\u00e0 \u0111\u01b0\u01a1ng nhi\u00ean, n\u00f3 s\u1ebd g\u1eedi t\u1edbi worker k\u1ebf ti\u1ebfp. channel . basic_qos ( prefetch_count = 1 ) S\u1eed d\u1ee5ng c\u00e1ch n\u00e0y, ch\u00fang ta c\u00f3 th\u1ec3 thi\u1ebft l\u1eadp \u0111\u01b0\u1ee3c c\u00e1c c\u00f4ng vi\u1ec7c \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp theo h\u00e0ng \u0111\u1ee3i. M\u1ed9t s\u1ed1 t\u00f9y ch\u1ecdn b\u00ean tr\u00ean gi\u00fap RabbitMQ c\u00f3 th\u1ec3 ho\u1ea1t \u0111\u1ed9ng khi n\u00f3 v\u1eeba b\u1ecb kh\u1edfi \u0111\u1ed9ng l\u1ea1i. Source code send.py receive.py Reference Work Queues in RabbitMQ RabbitMQ - tutorial-one-python RabbitMQ - tutorial-two-python","title":"Work Queues"},{"location":"Message-Brokers/Work%20Queues/#work-queues","text":"Concepts Example","title":"Work Queues"},{"location":"Message-Brokers/Work%20Queues/#concepts","text":"\u00dd t\u01b0\u1edfng ch\u00ednh c\u1ee7a Work Queues (hay Task Queues ) l\u00e0 tr\u00e1nh vi\u1ec7c th\u1ef1c hi\u1ec7n ngay l\u1eadp t\u1ee9c m\u1ed9t work/task t\u1ed1n nhi\u1ec1u t\u00e0i nguy\u00ean v\u00e0 ph\u1ea3i ch\u1edd n\u00f3 ho\u00e0n th\u00e0nh. Thay v\u00e0o \u0111\u00f3 ch\u00fang ta s\u1ebd l\u00ean l\u1ecbch ( schedule ) v\u00e0 c\u00e1c work/task n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n d\u1ef1a tr\u00ean schedule m\u00e0 m\u00ecnh l\u1eadp ra. Work Queues s\u1ebd g\u00f3i g\u1ecdn (encapsulate) m\u1ed9t task d\u01b0\u1edbi d\u1ea1ng Message v\u00e0 g\u1eedi n\u00f3 \u0111\u1ebfn Queue. Sau \u0111\u00f3 c\u00f3 m\u1ed9t worker ch\u1ea1y background m\u1ed9t process \u0111\u1ec3 l\u1ea5y c\u00e1c task t\u1eeb Queue ra th\u1ef1c thi ch\u00fang. C\u00f3 th\u1ec3 t\u1ea1o nhi\u1ec1u worker \u0111\u1ec3 th\u1ef1c hi\u1ec7n c\u00e1c task v\u00e0 c\u00e1c task n\u00e0y \u0111\u1ec1u \u0111\u01b0\u1ee3c chia s\u1ebb gi\u1eefa c\u00e1c worker v\u1edbi nhau.","title":"Concepts"},{"location":"Message-Brokers/Work%20Queues/#example","text":"Producer c\u00f3 nhi\u1ec7m v\u1ee5 t\u1ea1o c\u00e1c task v\u00e0 \u0111\u01b0a v\u00e0o RabbitMQ Broker, \u0111i t\u1eeb Exchange t\u1edbi Queue Consumer - \u0111\u00f3ng vai tr\u00f2 nh\u01b0 Worker c\u00f3 nhi\u1ec7m v\u1ee5 l\u1ea5y c\u00e1c task t\u1eeb Queue v\u1ec1 x\u1eed l\u00fd. Consume Qos(1) : M\u1eb7c \u0111\u1ecbnh, RabbitQM s\u1eed d\u1ee5ng Round-robin \u0111\u1ec3 g\u1eedi Message \u0111\u1ebfn Consumer k\u1ebf ti\u1ebfp m\u1ed9t c\u00e1ch tu\u1ea7n t\u1ef1. M\u1ed7i Consumer c\u00f3 th\u1eddi gian x\u1eed l\u00fd m\u1ed7i task kh\u00e1c nhau. \u0110\u1ec3 tr\u00e1nh m\u1ed9t Consumer nh\u1eadn qu\u00e1 nhi\u1ec1u task m\u00e0 kh\u00f4ng c\u00f3 th\u1eddi gian x\u1eed l\u00fd, m\u1ed9t Consumer qu\u00e1 r\u00e3nh kh\u00f4ng c\u00f3 th\u1eddi gian th\u1ef1c hi\u1ec7n task n\u00e0o h\u1ebft. Ta s\u1eed d\u1ee5ng option basicQos() \u0111\u1ec3 bu\u1ed9c RabbitMQ ch\u1ec9 g\u1eedi 1 Message cho 1 Consumer, khi n\u00e0o Consumer x\u1eed l\u00fd xong task th\u00ec m\u1edbi g\u1eedi ti\u1ebfp 1 Message cho n\u00f3 x\u1eed l\u00fd. Nh\u1edd v\u1eady th\u1eddi gian ho\u00e0n th\u00e0nh s\u1edbm h\u01a1n. C\u00e1c Consumer ti\u1ebfp h\u00e0nh x\u1eed l\u00fd c\u00e1i task m\u00e0 n\u00f3 \u0111\u01b0\u1ee3c giao. \u1ede \u0111\u00e2y v\u00ed d\u1ee5 Producer \u0111\u1ec3 t\u1ea1o ra 10 Tasks v\u00e0 2 Consumer \u0111\u1ec3 thay phi\u00ean nhau x\u1eed l\u00fd c\u00e1c task n\u00e0y. Consumer 1 s\u1ebd x\u1eed l\u00fd 1 task trong 100 milliseconds , Consumer 2 s\u1ebd x\u1eed l\u00fd 1 task trong 300 milliseconds . N\u1ebfu theo c\u01a1 ch\u1ebf Round-robin dispatching c\u1ee7a RabbitMQ th\u00f4ng th\u01b0\u1eddng th\u00ec m\u1ed7i Consumer s\u1ebd x\u1eed \u00fd 5 Tasks, th\u1eddi gian x\u1eed l\u00fd m\u1ed7i Task c\u1ee7a Consumer 2 l\u00e2u h\u01a1n n\u00ean Consumer 1 s\u1ebd r\u1ed7i r\u1ea3nh trong khi Consumer 2 v\u1eabn c\u00f2n vi\u1ec7c ph\u1ea3i x\u1eed l\u00fd. Tuy nhi\u00ean, m\u00ecnh \u0111\u00e3 s\u1eed d\u1ee5ng basicQos() n\u00ean s\u1ebd kh\u00f4ng c\u00f3 chuy\u1ec7n m\u1ed9t Consumer r\u1ed7i r\u1ea3nh v\u00e0 m\u1ed9t Consumer c\u00f3 nhi\u1ec1u Task c\u1ea7n l\u00e0m. Consumer s\u1ebd g\u1eedi m\u1ed9t ACK message \u0111\u1ebfn RabbitMQ \u0111\u1ec3 b\u00e1o r\u1eb1ng m\u1ed9t Message \u0111\u00e3 \u0111\u01b0\u1ee3c Consumer nh\u1eadn, x\u1eed l\u00fd v\u00e0 Rabbit c\u00f3 th\u1ec3 xo\u00e1 n\u00f3. \u0110\u1ec3 tr\u00e1nh tr\u01b0\u1eddng h\u1ee3p n\u1ebfu m\u1ed9t Consumer x\u1eed l\u00fd Task trong m\u1ed9t th\u1eddi gian d\u00e0i, ch\u1ec9 m\u1ed9t ph\u1ea7n c\u1ee7a Task \u0111\u01b0\u1ee3c ho\u00e0n th\u00e0nh v\u00e0 n\u00f3 die. Message \u0111\u00e3 b\u1ecb xo\u00e1 b\u1edfi RabbitQM v\u00e0 Task s\u1ebd b\u1ecb m\u1ea5t. \u0110\u1ec3 gi\u1ea3i quy\u1ebft v\u1ea5n \u0111\u1ec1 n\u00e0y, ch\u00fang ta s\u1ebd kh\u00f4ng auto g\u1eedi Message, m\u00e0 ch\u00fang ta s\u1ebd g\u1eedi m\u1ed9t ACK message \u0111\u1ebfn RabbitMQ khi n\u00f3 ho\u00e0n th\u00e0nh x\u1eed l\u00fd Message.","title":"Example"},{"location":"Message-Brokers/Work%20Queues/#implement-with-python","text":"V\u00ed d\u1ee5 n\u00e0y d\u1ef1a tr\u00ean tutorial c\u1ee7a RabbitMQ , S\u1eed d\u1ee5ng th\u01b0 vi\u1ec7n pika 0.10.1 Python client python -m pip install pika --upgrade","title":"Implement with Python"},{"location":"Message-Brokers/Work%20Queues/#hello-world","text":"V\u00ed d\u1ee5 v\u1ec1 m\u1ed9t h\u1ec7 th\u1ed1ng g\u1eedi, nh\u1eadn message v\u00e0 hi\u1ec3n th\u1ecb n\u00f3 l\u00ean m\u00e0n h\u00ecnh. Ch\u00fang ta c\u1ea7n vi\u1ebft 2 ch\u01b0\u01a1ng tr\u00ecnh, m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh g\u1eedi v\u00e0 m\u1ed9t d\u00f9ng \u0111\u1ec3 nh\u1eadn v\u00e0 in th\u00f4ng tin ra m\u00e0n h\u00ecnh. To\u00e0n b\u1ed9 qu\u00e1 tr\u00ecnh \u0111\u01b0\u1ee3c bi\u1ec3u di\u1ec5n qua s\u01a1 \u0111\u1ed3 sau: Producer g\u1eedi c\u00e1c message t\u1edbi \"hello\" queue v\u00e0 Comsumer s\u1ebd nh\u1eadn th\u00f4ng tin t\u1eeb queue n\u00e0y.","title":"Hello World!"},{"location":"Message-Brokers/Work%20Queues/#sending","text":"Ta s\u1ebd vi\u1ebft ch\u01b0\u01a1ng tr\u00ecnh g\u1eedi message trong file send.py \u0111\u1ec3 g\u1eedi m\u1ed9t message t\u1edbi queue . \u0110\u1ea7u ti\u00ean, ch\u00fang ta kh\u1edfi t\u1ea1o m\u1ed9t k\u1ebft n\u1ed1i t\u1edbi m\u00e1y ch\u1ee7 RabbitMQ. #!/usr/bin/env python import pika connection = pika . BlockingConnection ( pika . ConnectionParameters ( 'localhost' )) channel = connection . channel () Nh\u01b0 v\u1eady l\u00e0 ch\u00fang ta \u0111\u00e3 k\u1ebft n\u1ed1i t\u1edbi broker \u1edf localhost , n\u1ebfu broker n\u1eb1m \u1edf tr\u00ean m\u00e1y kh\u00e1c h\u00e3y thay th\u1ebf b\u1eb1ng \u0111\u1ecba ch\u1ec9 IP c\u1ee7a n\u00f3. Ti\u1ebfp theo, ch\u00fang ta ph\u1ea3i ch\u1eafc ch\u1eafn m\u1ed9t \u0111i\u1ec1u l\u00e0 ph\u1ea3i c\u00f3 m\u1ed9t queue \u0111\u00e3 t\u1ed3n t\u1ea1i, n\u1ebfu ch\u00fang ta g\u1eedi message v\u00e0o queue ch\u01b0a c\u00f3 s\u1eb5n, c\u00e1c message n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c RabbitMQ* cho v\u00e0o trash. T\u1ea1o m\u1edbi m\u1ed9t queue cho c\u00e1c message , \u0111\u1eb7t t\u00ean c\u1ee7a cho queue l\u00e0 \"hello\" channel . queue_declare ( queue = 'hello' ) Trong RabbitMQ, m\u1ed9t message c\u00f3 th\u1ec3 kh\u00f4ng \u0111\u01b0\u1ee3c x\u1ebfp v\u00e0o queue . N\u00f3 ph\u1ea3i \u0111\u01b0\u1ee3c th\u00f4ng qua m\u1ed9t exchange v\u00e0 exchange m\u1eb7c \u0111\u1ecbnh l\u00e0 empty. \u0110\u00e2y l\u00e0 m\u1ed9t exchange \u0111\u1eb7c bi\u1ec7t, n\u00f3 cho ph\u00e9p ch\u00fang ta x\u00e1c \u0111\u1ecbnh ch\u00ednh x\u00e1c queue n\u00e0o m\u00e0 mu\u1ed1n g\u1eedi message \u0111\u1ebfn. T\u00ean c\u1ee7a queue \u0111\u01b0\u1ee3c ch\u1ec9 r\u00f5 trong tham s\u1ed1 routing_key : channel . basic_publish ( exchange = '' , routing_key = 'hello' , body = 'Hello World!' ) print ( \" [x] Sent 'Hello World!'\" ) Cu\u1ed1i c\u00f9ng l\u00e0 ch\u00fang ta ng\u1eaft k\u1ebft n\u1ed1i t\u1edbi server. connection . close () L\u01b0u \u00fd: N\u1ebfu qu\u00e1 tr\u00ecnh g\u1eedi kh\u00f4ng th\u00e0nh c\u00f4ng, ch\u00fang ta ph\u1ea3i ki\u1ec3m tra l\u1ea1i dung l\u01b0\u1ee3ng tr\u1ed1ng c\u1ee7a \u1ed5 \u0111\u0129a l\u01b0u tr\u1eef, c\u1ea5u h\u00ecnh m\u1eb7c \u0111\u1ecbnh c\u1ee7a RabbitMQ l\u00e0 1GB. Xem l\u1ea1i log v\u00e0 t\u0103ng dung l\u01b0\u1ee3ng n\u1ebfu c\u1ea7n. Ki\u1ec3m tra t\u1ea1i file c\u1ea5u h\u00ecnh \u1edf tr\u01b0\u1eddng disk_free_limit .","title":"Sending"},{"location":"Message-Brokers/Work%20Queues/#receiving","text":"Ch\u01b0\u01a1ng tr\u00ecnh th\u1ee9 2 l\u00e0 receive.py s\u1ebd nh\u1eadn message t\u1eeb queue v\u00e0 in n\u00f3 ra m\u00e0n h\u00ecnh. \u0110\u1ea7u ti\u00ean ch\u00fang ta c\u1ea7n ph\u1ea3i k\u1ebft n\u1ed1i t\u1edbi m\u00e1y ch\u1ee7 RabbitMQ nh\u01b0 \u0111\u00e3 h\u01b0\u1edbng d\u1eabn \u1edf ph\u1ea7n tr\u00ean. Ti\u1ebfp theo, ch\u00fang ta c\u0169ng ph\u1ea3i x\u00e1c \u0111\u1ecbnh queue . \u0110\u1ec3 ch\u1ecdn queue , ch\u00fang ta s\u1eed d\u1ee5ng d\u00f2ng code sau: channel . queue_declare ( queue = 'hello' ) \u0110\u1ec3 nh\u1eadn message , ch\u00fang ta t\u1ea1o m\u1ed9t h\u00e0m t\u00ean callback \u0111\u1ec3 giao ti\u1ebfp v\u1edbi queue . N\u1ed9i dung c\u1ee7a h\u00e0m l\u00e0 nh\u1eadn message v\u00e0 hi\u1ec3n th\u1ecb n\u00f3 ra m\u00e0n h\u00ecnh. def callback ( ch , method , properties , body ): print ( \" [x] Received %r \" % body ) Ti\u1ebfp theo, ch\u00fang ta x\u00e1c nh\u1eadn l\u1ea1i v\u1edbi server r\u1eb1ng \u0111\u00e3 nh\u1eadn \u0111\u01b0\u1ee3c message t\u1eeb hello . channel . basic_consume ( callback , queue = 'hello' , no_ack = True ) \u0110\u1ec3 cho code tr\u00ean ch\u1ea1y, ch\u00fang ta ph\u1ea3i ch\u1eafc ch\u1eafn r\u1eb1ng queue m\u00e0 ch\u00fang ta mu\u1ed1n nh\u1eadn message ph\u1ea3i t\u1ed3n t\u1ea1i, v\u00e0 ch\u00fang ta \u0111\u00e3 ch\u1ecdn n\u00f3 \u1edf ph\u00eda tr\u00ean queue_declare . Cu\u1ed1i c\u00f9ng, ch\u00fang ta th\u00eam \u0111o\u1ea1n code \u0111\u1ec3 ch\u1edd, l\u1eafng nghe message t\u1eeb queue . print ( ' [*] Waiting for messages. To exit press CTRL+C' ) channel . start_consuming ()","title":"Receiving"},{"location":"Message-Brokers/Work%20Queues/#demo","text":"Ta ch\u1ea1y file send.py tr\u00ean m\u1ed9t m\u00e1y \u0111\u00e3 c\u00e0i s\u1eb5n python pika v\u00e0 tr\u1ecf IP v\u1ec1 m\u00e1y ch\u1ee7 RabbitMQ thay th\u1ebf cho tr\u01b0\u1eddng localhost \u1edf trong file, file n\u00e0y s\u1ebd d\u1eebng sau m\u1ed7i l\u1ea7n ch\u1ea1y th\u00e0nh c\u00f4ng: $ python send.py # =>> [x] Sent 'Hello World!' Tr\u00ean m\u1ed9t m\u00e1y nh\u1eadn, ch\u00fang ta s\u1eeda IP c\u1ee7a m\u00e1y ch\u1ee7 RabbitMQ trong file v\u00e0 ch\u1ea1y: $ python receive.py [ * ] Waiting for messages. To exit press CTRL+C [ x ] Received 'Hello World!' Ch\u01b0\u01a1ng tr\u00ecnh s\u1ebd listen c\u00e1c message cho \u0111\u1ebfn khi n\u00e0o c\u00e1c ta b\u1ea5m CTRL+C \u0111\u1ec3 tho\u00e1t.","title":"Demo"},{"location":"Message-Brokers/Work%20Queues/#work-queues_1","text":"Ta \u0111\u00e3 c\u00f3 c\u00e1c ch\u01b0\u01a1ng tr\u00ecnh \u0111\u1ec3 g\u1eedi v\u00e0 nh\u1eadn c\u00e1c message t\u1eeb m\u1ed9t queue \u0111\u00e3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh danh. Gi\u1edd ta s\u1ebd t\u1ea1o m\u1ed9t Work Queue , \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 \u0111i\u1ec1u ph\u1ed1i c\u00e1c t\u00e1c v\u1ee5 c\u1ea7n nhi\u1ec1u th\u1eddi gian x\u1eed l\u00fd gi\u1eefa nhi\u1ec1u worker v\u1edbi nhau. \u0110\u1ea7u ti\u00ean ta c\u1ea7n s\u1eeda l\u1ea1i file send.py m\u1ed9t ch\u00fat \u0111\u1ec3 cho ph\u00e9p b\u1ea5t k\u1ef3 n\u1ed9i dung n\u00e0o c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c g\u1eedi qua file. N\u00f3 s\u1ebd \u0111\u1eb7t l\u1ecbch v\u00e0o c\u00e1c queue v\u00e0 \u0111\u1eb7t t\u00ean n\u00f3 l\u00e0 new_task.py : import sys message = ' ' . join ( sys . argv [ 1 :]) or \"Hello World!\" channel . basic_publish ( exchange = '' , routing_key = 'task_queue' , body = message , properties = pika . BasicProperties ( delivery_mode = 2 , # make message persistent )) print ( \" [x] Sent %r \" % message ) C\u00f2n \u0111\u1ed1i v\u1edbi file receive.py c\u0169ng c\u00f3 m\u1ed9t v\u00e0i thay \u0111\u1ed5i, l\u00e0 \u0111\u1ebfm s\u1ed1 d\u1ea5u . trong message . N\u00f3 s\u1ebd nh\u1eadn c\u00e1c message t\u1eeb queue v\u00e0 th\u1ef1c thi t\u00e1c v\u1ee5. H\u00e3y \u0111\u1eb7t t\u00ean cho n\u00f3 l\u00e0 worker.py import time def callback ( ch , method , properties , body ): print ( \" [x] Received %r \" % body ) time . sleep ( body . count ( b '.' )) print ( \" [x] Done\" )","title":"Work Queues"},{"location":"Message-Brokers/Work%20Queues/#round-robin-dispatching","text":"M\u1ed9t l\u1ee3i th\u1ebf c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng Work Queue l\u00e0 kh\u1ea3 n\u0103ng l\u00e0m vi\u1ec7c song song. N\u1ebfu ch\u00fang ta x\u00e2y d\u1ef1ng m\u1ed9t ph\u1ea7n d\u1ef1 tr\u1eef c\u1ee7a c\u00e1c work , ta c\u00f3 th\u1ec3 th\u00eam nhi\u1ec1u c\u00e1c worker v\u00e0 kh\u1ea3 n\u0103ng m\u1edf r\u1ed9ng n\u00f3 l\u00e0 t\u01b0\u01a1ng \u0111\u1ed1i d\u1ec5 d\u00e0ng. \u0110\u1ea7u ti\u00ean, ch\u00fang ta s\u1ebd ch\u1ea1y script worker.py tr\u00ean 2 m\u00e1y kh\u00e1c nhau c\u00f9ng m\u1ed9t th\u1eddi \u0111i\u1ec3m. shell1$ python worker.py [ * ] Waiting for messages. To exit press CTRL+C shell2$ python worker.py [ * ] Waiting for messages. To exit press CTRL+C Ti\u1ebfp theo, ch\u00fang ta publish m\u1ed9t s\u1ed1 message nh\u01b0 sau: shell3$ python new_task.py First message. shell3$ python new_task.py Second message.. shell3$ python new_task.py Third message... shell3$ python new_task.py Fourth message.... shell3$ python new_task.py Fifth message..... K\u1ebft qu\u1ea3 hi\u1ec3n th\u1ecb \u1edf 2 c\u1eeda s\u1ed5 console b\u00ean tr\u00ean nh\u01b0 sau: shell1$ python worker.py [ * ] Waiting for messages. To exit press CTRL+C [ x ] Received 'First message.' [ x ] Received 'Third message...' [ x ] Received 'Fifth message.....' shell2$ python worker.py [ * ] Waiting for messages. To exit press CTRL+C [ x ] Received 'Second message..' [ x ] Received 'Fourth message....' M\u1eb7c \u0111\u1ecbnh, RabbitMQ s\u1ebd g\u1eedi m\u1ed7i message t\u1edbi m\u1ed9t consumer theo t\u00ednh tu\u1ea7n t\u1ef1. Ki\u1ec3u n\u00e0y \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 Round-robin, h\u00e3y th\u1eed l\u1ea1i t\u00ecnh hu\u1ed1ng n\u00e0y v\u1edbi 3 ho\u1eb7c nhi\u1ec1u h\u01a1n 3 consumer .","title":"Round-robin dispatching"},{"location":"Message-Brokers/Work%20Queues/#message-acknowledgment","text":"M\u1ed9t t\u00e1c v\u1ee5 \u0111\u01b0\u1ee3c th\u1ef1c thi s\u1ebd ph\u1ea3i m\u1ea5t \u0111\u1ebfn v\u00e0i gi\u00e2y. Sau khi g\u1eedi xong, RabbitMQ s\u1ebd xo\u00e1 b\u1ecf t\u00e1c v\u1ee5 \u0111\u00f3 ngay kh\u1ecfi queue . Trong tr\u01b0\u1eddng h\u1ee3p m\u1ed9t worker v\u00ec m\u1ed9t l\u00fd do n\u00e0o \u0111\u00f3 m\u00e0 kh\u00f4ng th\u1ec3 ho\u1ea1t \u0111\u1ed9ng, ch\u00fang ta s\u1ebd chuy\u1ec3n c\u00e1c t\u00e1c v\u1ee5 m\u00e0 n\u00f3 \u0111\u1ea3m nh\u1eadn sang m\u1ed9t worker kh\u00e1c. \u0110\u1ec3 tr\u00e1nh vi\u1ec7c th\u1ea5t l\u1ea1c c\u00e1c message , RabbitMQ cung c\u1ea5p c\u01a1 ch\u1ebf ack. Ack l\u00e0 m\u1ed9t b\u1ea3n tin \u0111\u01b0\u1ee3c g\u1eedi t\u1eeb consumer t\u1edbi server \u0111\u1ec3 th\u00f4ng b\u00e1o r\u1eb1ng n\u00f3 \u0111\u00e3 nh\u1eadn v\u00e0 x\u1eed l\u00fd message v\u00e0 RabbitMQ c\u00f3 th\u1ec3 xo\u00e1 n\u00f3 tr\u00ean queue . N\u1ebfu consumer b\u1ecb l\u1ed7i v\u00e0 kh\u00f4ng th\u1ec3 nh\u1eadn \u0111\u01b0\u1ee3c message , \u0111i\u1ec1u n\u00e0y \u0111\u1ed3ng ngh\u0129a v\u1edbi vi\u1ec7c b\u1ea3n tin ack ch\u01b0a \u0111\u01b0\u1ee3c g\u1eedi \u0111\u1ebfn server, l\u00fac n\u00e0y RabbitMQ s\u1ebd \u0111\u01b0a message \u0111\u00f3 v\u00e0o l\u1ea1i queue . T\u1ea1i th\u1eddi \u0111i\u1ec3m n\u00e0y, n\u1ebfu m\u1ed9t consumer kh\u00e1c online RabbitMQ s\u1ebd g\u1eedi l\u1ea1i message cho n\u00f3. \u0110i\u1ec1u n\u00e0y gi\u00fap b\u1ea1n y\u00ean t\u00e2m r\u1eb1ng, s\u1ebd kh\u00f4ng c\u00f3 b\u1ea3n tin n\u00e0o b\u1ecb m\u1ea5t trong qu\u00e1 tr\u00ecnh m\u1ed9t worker n\u00e0o \u0111\u00f3 b\u1ecb l\u1ed7i. B\u1ea3n tin ack m\u1eb7c \u0111\u1ecbnh \u0111\u01b0\u1ee3c b\u1eadt. trong v\u00ed d\u1ee5 l\u1ea7n tr\u01b0\u1edbc, ch\u00fang ta \u0111\u00e3 t\u1eaft n\u00f3 \u0111i \u1edf tu\u1ef3 ch\u1ecdn no_ack=True . \u1ede \u0111o\u1ea1n code d\u01b0\u1edbi \u0111\u00e2y, ch\u00fang ta s\u1ebd b\u1ecf tu\u1ef3 ch\u1ecdn \u0111\u00f3 \u0111i v\u00e0 ack s\u1ebd \u0111\u01b0\u1ee3c g\u1eedi t\u1eeb worker . def callback ( ch , method , properties , body ): print \" [x] Received %r \" % ( body ,) time . sleep ( body . count ( '.' ) ) print \" [x] Done\" ch . basic_ack ( delivery_tag = method . delivery_tag ) channel . basic_consume ( callback , queue = 'hello' ) Khi s\u1eed d\u1ee5ng \u0111o\u1ea1n code tr\u00ean, khi b\u1ea1n c\u00f3 b\u1ea5m CTRL+C \u0111\u1ec3 tho\u00e1t kh\u1ecfi ch\u01b0\u01a1ng tr\u00ecnh th\u00ec s\u1ebd kh\u00f4ng nh\u1eadn \u0111\u01b0\u1ee3c message t\u1eeb server do v\u1eady b\u1ea3n tin ack s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c g\u1eedi \u0111i cho \u0111\u1ebfn khi n\u00e0o b\u1ea1n b\u1eadt ch\u01b0\u01a1ng tr\u00ecnh tr\u1edf l\u1ea1i. \u0110i\u1ec1u n\u00e0y gi\u00fap cho ch\u00fang ta kh\u00f4ng b\u1ecb th\u1ea5t l\u1ea1c b\u1ea5t c\u1ee9 b\u1ea3n tin n\u00e0o.","title":"Message acknowledgment"},{"location":"Message-Brokers/Work%20Queues/#message-duralibity","text":"\u1ede ph\u1ea7n tr\u00ean, ch\u00fang ta \u0111\u00e3 bi\u1ebft c\u00e1ch gi\u1ea3i quy\u1ebft khi consumer g\u1eb7p s\u1ef1 c\u1ed1. Nh\u01b0ng khi RabbitMQ b\u1ecb d\u1eebng \u0111\u1ed9t ng\u1ed9t, t\u1ea5t c\u1ea3 c\u00e1c message s\u1ebd b\u1ecb m\u1ea5t h\u1ebft. \u0110\u1ec3 tr\u00e1nh s\u1ef1 vi\u1ec7c n\u00e0y, RabbitMQ cung c\u1ea5p c\u01a1 ch\u1ebf l\u00e2u b\u1ec1n h\u00e3y s\u1eed d\u1ee5ng \u0111o\u1ea1n code sau: channel . queue_declare ( queue = 'hello' , durable = True ) Tuy nhi\u00ean, \u0111o\u1ea1n code tr\u00ean s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c \u00e1p d\u1ee5ng v\u1edbi nh\u1eefng queue \u0111\u00e3 c\u00f3 s\u1eb5n. \u0110\u1ec3 th\u1ef1c hi\u1ec7n vi\u1ec7c n\u00e0y, ch\u00fang ta ph\u1ea3i t\u1ea1o ra m\u1ed9t queue m\u1edbi c\u00f3 t\u00ean l\u00e0 task_queue . channel . queue_declare ( queue = 'task_ queue' , durable = True ) Vi\u1ec7c n\u00e0y ph\u1ea3i \u0111\u01b0\u1ee3c thay \u0111\u1ed5i tr\u00ean c\u1ea3 producer v\u00e0 consumer . V\u00e0 t\u1ea1i th\u1eddi \u0111i\u1ec3m n\u00e0y, ch\u00fang ta ch\u1eafc ch\u1eafn r\u1eb1ng s\u1ebd kh\u00f4ng c\u00f3 message n\u00e0o b\u1ecb th\u1ea5t l\u1ea1c khi RabbitMQ b\u1ecb kh\u1edfi \u0111\u1ed9ng l\u1ea1i. B\u00e2y gi\u1edd, \u0111\u1ec3 th\u00eam t\u00ednh \u1ed5n \u0111\u1ecbnh cho n\u00f3, ch\u00fang ta th\u00eam thu\u1ed9c t\u00ednh delivery_mode v\u1edbi gi\u00e1 tr\u1ecb b\u1eb1ng 2 . channel . basic_publish ( exchange = '' , routing_key = \"task_queue\" , body = message , properties = pika . BasicProperties ( delivery_mode = 2 , # make message persistent ))","title":"Message duralibity"},{"location":"Message-Brokers/Work%20Queues/#fair-dispatch","text":"Tuy nhi\u00ean vi\u1ec7c \u0111i\u1ec1u ph\u1ed1i c\u00e1c message \u0111\u00f4i khi kh\u00f4ng nh\u01b0 ch\u00fang ta ngh\u0129. V\u00ed d\u1ee5 ch\u00fang ta c\u00f3 2 worker , m\u1ed9t worker ph\u1ea3i l\u00e0m vi\u1ec7c b\u1eadn r\u1ed9n c\u00f2n work kia th\u00ec h\u1ea7u nh\u01b0 kh\u00f4ng. RabbitMQ kh\u00f4ng h\u1ec1 bi\u1ebft \u0111i\u1ec1u \u0111\u00f3 v\u00e0 v\u1eabn \u0111i\u1ec1u ph\u1ed1i c\u00e1c message \u0111\u1ec1u. \u0110i\u1ec1u \u0111\u00f3 x\u1ea3y ra v\u00ec RabbitMQ ch\u1ec9 \u0111i\u1ec1u ph\u1ed1i message khi ch\u00fang \u1edf trong m\u1ed9t queue . N\u00f3 ch\u1ec9 vi\u1ec7c g\u1eedi message \u0111\u1ebfn consumer \u0111\u00e3 ch\u1ec9 \u0111\u1ecbnh m\u00e0 kh\u00f4ng quan t\u00e2m \u0111\u1ebfn b\u1ea5t c\u1ee9 vi\u1ec7c g\u00ec. \u0110\u1ec3 kh\u1eafc ph\u1ee5c \u0111i\u1ec1u \u0111\u00f3, ch\u00fang ta s\u1eed d\u1ee5ng ph\u01b0\u01a1ng th\u1ee9c basic.qos v\u1edbi t\u00f9y ch\u1ecdn prefetch_count=1 \u0111\u1ec3 n\u00f3i v\u1edbi RabbitMQ ch\u1ec9 g\u1eedi m\u1ed9t message t\u1edbi 1 worker m\u1ed9t l\u00fac v\u00e0 sau khi nh\u1eadn \u0111\u01b0\u1ee3c ack t\u1eeb worker v\u1eeba g\u1eedi l\u00e0 \u0111\u00e3 x\u1eed l\u00fd xong. V\u00e0 \u0111\u01b0\u01a1ng nhi\u00ean, n\u00f3 s\u1ebd g\u1eedi t\u1edbi worker k\u1ebf ti\u1ebfp. channel . basic_qos ( prefetch_count = 1 ) S\u1eed d\u1ee5ng c\u00e1ch n\u00e0y, ch\u00fang ta c\u00f3 th\u1ec3 thi\u1ebft l\u1eadp \u0111\u01b0\u1ee3c c\u00e1c c\u00f4ng vi\u1ec7c \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp theo h\u00e0ng \u0111\u1ee3i. M\u1ed9t s\u1ed1 t\u00f9y ch\u1ecdn b\u00ean tr\u00ean gi\u00fap RabbitMQ c\u00f3 th\u1ec3 ho\u1ea1t \u0111\u1ed9ng khi n\u00f3 v\u1eeba b\u1ecb kh\u1edfi \u0111\u1ed9ng l\u1ea1i.","title":"Fair dispatch"},{"location":"Message-Brokers/Work%20Queues/#source-code","text":"send.py receive.py","title":"Source code"},{"location":"Message-Brokers/Work%20Queues/#reference","text":"Work Queues in RabbitMQ RabbitMQ - tutorial-one-python RabbitMQ - tutorial-two-python","title":"Reference"},{"location":"OOP/Object-Oriented-Programing/","text":"Object Oriented Programing Four Principles : Inheritance : Concepts, Features, Types of Inheritance, Example Encapsulation : Concepts, Features, Access modifier, Example Polymorphism : Concepts, Features, Overloading vs. Overriding , Example Abstraction : Concepts, Features, Types of Abstraction, Example Objects and Classes , Properties and Methods Constructor and Destructor SOLID / DRY Objects and Classes, Properties and Methods Objects : \u0111\u01b0\u1ee3c hi\u1ec3u nh\u01b0 l\u00e0 1 th\u1ef1c th\u1ec3, m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng. Trong OOP m\u1ecdi th\u1ee9 \u0111\u1ecbnh ngh\u0129a \u0111\u01b0\u1ee3c qua 3 kh\u00e1i ni\u1ec7m Identity , Attributes v\u00e0 Behaviours th\u00ec \u0111\u1ec1u l\u00e0 Objects. Classes : T\u1eadp h\u1ee3p m\u1ed9t ho\u1eb7c nhi\u1ec1u c\u00e1c objects c\u00f3 c\u00e1c \u0111\u1eb7c tr\u01b0\u01a1ng t\u01b0\u01a1ng t\u1ef1 nhau. Trong OOP, m\u1ed9t class bao g\u1ed3m 3 components l\u00e0: Name , Attributes v\u00e0 Behaviours Objects vs. Classes Class l\u00e0 m\u1ed9t khu\u00f4n m\u1eabu c\u00f2n object l\u00e0 m\u1ed9t th\u1ec3 hi\u1ec7n c\u1ee5 th\u1ec3 d\u1ef1a tr\u00ean khu\u00f4n m\u1eabu \u0111\u00f3. V\u00ed d\u1ee5 khi n\u00f3i \u0111\u1ebfn xe ot\u00f4 th\u00ec class ch\u00ednh khu\u00f4n m\u1eabu c\u1ee7a c\u00e1i xe v\u1edbi c\u00e1c \u0111\u1eb7c tr\u01b0ng nh\u01b0 c\u00f3 4 b\u00e1nh v\u00e0 c\u00f3 thi\u1ebft k\u1ebf t\u01b0\u01a1ng t\u1ef1 nh\u01b0 h\u00ecnh v\u1ebd. C\u00f2n object l\u00e0 c\u00e1c chi\u1ebfc xe ot\u00f4 \u0111\u01b0\u1ee3c x\u00e2y d\u1ef1ng d\u1ef1a tr\u00ean khu\u00f4n m\u1eabu \u0111\u00f3. Trong OOP, m\u1ed9t object bao g\u1ed3m 2 th\u00e0nh ph\u1ea7n: Properties v\u00e0 Methods: Properties : l\u00e0 nh\u1eefng th\u00f4ng tin, \u0111\u1eb7c \u0111i\u1ec3m c\u1ee7a object. V\u00ed d\u1ee5: xe oto s\u1ebd c\u00f3 t\u00ean, ki\u1ec3u d\u00e1ng, m\u00e0u s\u1eafc, 2 b\u00f4 hay n b\u00f4 v.vv \u2192 Ph\u1ea3n \u00e1nh t\u00ednh ch\u1ea5t c\u1ee7a object. Methods : l\u00e0 nh\u1eefng thao t\u00e1c, h\u00e0nh \u0111\u1ed9ng m\u00e0 object \u0111\u00f3 c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n. V\u00ed d\u1ee5: xe lamborghini th\u1ec3 \u0111\u1ea1t t\u1ed1c \u0111\u1ed9 254km/h, c\u00f3 th\u1ec3 ch\u1ea1y \u0111ua v\u1edbi th\u1eddi gian v.vvv \u2192 Ph\u1ea3n \u00e1nh h\u00e0nh vi c\u1ee7a object. Four Principles Inheritance Concepts Inheritance l\u00e0 qu\u00e1 tr\u00ecnh m\u00e0 m\u1ed9t class k\u1ebf th\u1eeba c\u00e1c thu\u1ed9c t\u00ednh c\u1ee7a m\u1ed9t class kh\u00e1c. C\u00e1c thu\u1ed9c t\u00ednh \u0111\u00f3 c\u00f3 th\u1ec3 l\u00e0 m\u1ed9t method ho\u1eb7c m\u1ed9t field n\u00e0o \u0111\u00f3. Class \u0111\u01b0\u1ee3c k\u1ebf th\u1eeba \u0111\u01b0\u1ee3c g\u1ecdi chung l\u00e0 parent class , c\u00f2n class k\u1ebf th\u1eeba s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi chung l\u00e0 children class . Features T\u0103ng kh\u1ea3 n\u0103ng t\u00e1i s\u1eed d\u1ee5ng . Khi m\u1ed9t class k\u1ebf th\u1eeba class kh\u00e1c, n\u00f3 c\u00f3 th\u1ec3 truy c\u1eadp t\u1ea5t c\u1ea3 c\u00e1c ch\u1ee9c n\u0103ng c\u1ee7a class m\u00e0 n\u00f3 k\u1ebf th\u1eeba. Khi code \u0111\u01b0\u1ee3c t\u00e1i s\u1eed d\u1ee5ng, s\u1ebd gi\u00fap gi\u1ea3m chi ph\u00ed ph\u00e1t tri\u1ec3n v\u00e0 b\u1ea3o tr\u00ec, vi\u1ec7c ki\u1ec3m tra v\u00e0 g\u1ee1 l\u1ed7i s\u1ebd th\u1ef1c hi\u1ec7n v\u1edbi code c\u1ee7a parent class, ch\u1ee9 kh\u00f4ng c\u1ea7n ki\u1ec3m tra t\u1eebng children class. H\u1ea1n ch\u1ebf s\u1ef1 d\u01b0 th\u1eeba code v\u00e0 h\u1ed7 tr\u1ee3 kh\u1ea3 n\u0103ng m\u1edf r\u1ed9ng code. Types of Inheritance: Single Inheritance : Tr\u01b0\u1eddng h\u1ee3p m\u1ed9t class ch\u1ec9 \u0111\u01b0\u1ee3c k\u1ebf th\u1eeba t\u1eeb m\u1ed9t class duy nh\u1ea5t, t\u1ee9c l\u00e0 m\u1ed9t children class ch\u1ec9 c\u00f3 m\u1ed9t parent class . Multiple Inheritance : Tr\u01b0\u1eddng h\u1ee3p m\u1ed9t class c\u00f3 th\u1ec3 k\u1ebf th\u1eeba t\u1eeb nhi\u1ec1u h\u01a1n m\u1ed9t class kh\u00e1c, \u0111\u1ed3ng ngh\u0129a v\u1edbi vi\u1ec7c m\u1ed9t children class c\u00f3 th\u1ec3 c\u00f3 nhi\u1ec1u h\u01a1n m\u1ed9t parent class . Multi-Level Inheritance : Tr\u01b0\u1eddng h\u1ee3p class A k\u1ebf th\u1eeba t\u1eeb class B, xong class B k\u1ebf th\u1eeba class C Hierarchical Inheritance : Tr\u01b0\u1eddng h\u1ee3p c\u00f3 nhi\u1ec1u children class \u0111\u01b0\u1ee3c k\u1ebf th\u1eeba t\u1eeb m\u1ed9t parent class duy nh\u1ea5t. Hybrid Inheritance / Virtual Inheritance : Tr\u01b0\u1eddng h\u1ee3p k\u1ebf th\u1eeba \u0111\u01b0\u1ee3c k\u1ebft h\u1ee3p b\u1edfi nhi\u1ec1u h\u01a1n m\u1ed9t lo\u1ea1i k\u1ebf th\u1eeba m\u00ecnh k\u1ec3 \u1edf tr\u00ean. Example A private teacher is a type of teacher. And any teacher is a type of Person. Encapsulation Concepts Encapsulation l\u00e0 vi\u1ec7c \u0111\u00f3ng g\u00f3i t\u1ea5t c\u1ea3 th\u00f4ng tin, d\u1eef li\u1ec7u, method v\u00e0o b\u00ean trong m\u1ed9t object . Sau \u0111\u00f3, khi m\u1ed9t object \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o t\u1eeb class , th\u00ec d\u1eef li\u1ec7u v\u00e0 method \u0111\u00e3 \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i trong object \u0111\u00f3. Khi s\u1eed d\u1ee5ng, ta ch\u1ec9 c\u1ea7n g\u1ecdi t\u00ean method ch\u1ee9 kh\u00f4ng c\u1ea7n truy c\u1eadp \u0111\u1ebfn d\u1eef li\u1ec7u b\u00ean trong. Features T\u00ednh linh ho\u1ea1t : Code \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i s\u1ebd linh ho\u1ea1t, d\u1ec5 s\u1eeda \u0111\u1ed5i h\u01a1n l\u00e0 nh\u1eefng \u0111o\u1ea1n code \u0111\u1ed9c l\u1eadp. Kh\u1ea3 n\u0103ng t\u00e1i s\u1eed d\u1ee5ng : Code \u0111\u00e3 \u0111\u00f3ng g\u00f3i c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c t\u00e1i s\u1eed d\u1ee5ng trong m\u1ed9t ho\u1eb7c nhi\u1ec1u \u1ee9ng d\u1ee5ng. Kh\u1ea3 n\u0103ng b\u1ea3o tr \u00ec: Code \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i trong nh\u1eefng ph\u1ea7n ri\u00eang bi\u1ec7t, nh\u01b0 l\u00e0 class , method , interface ,\u2026 Do \u0111\u00f3, vi\u1ec7c thay \u0111\u1ed5i, c\u1eadp nh\u1eadt m\u1ed9t ph\u1ea7n c\u1ee7a \u1ee9ng d\u1ee5ng kh\u00f4ng \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn nh\u1eefng ph\u1ea7n c\u00f2n l\u1ea1i. \u0110i\u1ec1u n\u00e0y gi\u00fap gi\u1ea3m c\u00f4ng s\u1ee9c v\u00e0 ti\u1ebft ki\u1ec7m th\u1eddi gian cho c\u00e1c \u00f4ng dev. Kh\u1ea3 n\u0103ng ki\u1ec3m th\u1eed : Testing ti\u1ebft ki\u1ec7m \u0111\u01b0\u1ee3c th\u1eddi gian v\u00e0 c\u00f4ng s\u1ee9c h\u01a1n trong vi\u1ec7c test 1 class ch\u1ee9a to\u00e0n b\u1ed9 th\u00f4ng tin c\u1ee7a class \u0111\u00f3 thay v\u00ec ki\u1ebfm t\u1eebng method c\u1ee7a class \u0111\u1ec3 test. Che gi\u1ea5u d\u1eef li\u1ec7u : Khi s\u1eed d\u1ee5ng method, dev ch\u1ec9 c\u1ea7n bi\u1ebft method \u0111\u00f3 nh\u1eadn parameter g\u00ec, return g\u00ec m\u00e0 kh\u00f4ng c\u1ea7n quan t\u00e2m nhi\u1ec1u \u0111\u1ebfn logic b\u00ean trong. Access modifier in Encapsulation Private : Ch\u1ec9 truy c\u1eadp \u0111\u01b0\u1ee3c method trong class khai b\u00e1o n\u00f3. Public : C\u00f3 th\u1ec3 truy c\u1eadp t\u1edbi method t\u1eeb c\u00e1c class kh\u00e1c Protected : Ch\u1ec9 truy c\u1eadp \u0111\u01b0\u1ee3c method khi class n\u00e0y k\u1ebf th\u1eeba class khai b\u00e1o method \u0111\u00f3 Example You can feed the cat. But you can\u2019t directly change how hungry the cat is. Polymorphism Concepts Polymorphism l\u00e0 vi\u1ec7c m\u1ed9t bi\u1ebfn, m\u1ed9t h\u00e0m ho\u1eb7c m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c c\u00f3 th\u1ec3 t\u1ed3n t\u1ea1i \u1edf nhi\u1ec1u d\u1ea1ng kh\u00e1c nhau. T\u1ee9c l\u00e0 ch\u00fang c\u00f3 th\u1ec3 c\u00f9ng m\u1ed9t t\u00ean nh\u01b0ng ch\u1ee9c n\u0103ng th\u1ef1c s\u1ef1 c\u1ee7a ch\u00fang l\u1ea1i kh\u00e1c nhau. Polymorphism th\u01b0\u1eddng \u0111\u01b0\u1ee3c d\u00f9ng trong tr\u01b0\u1eddng h\u1ee3p m\u1ed9t children class c\u1ea7n d\u00f9ng c\u00e1c method c\u1ee7a parent class v\u00e0 b\u1ed5 sung th\u00eam cho m\u1ed9t moethod kh\u00e1c. Hay khi m\u1ed9t class c\u1ea7n c\u00f3 nhi\u1ec1u method c\u00f3 c\u00f9ng t\u00ean nhau nh\u01b0ng kh\u00e1c parameter. Features T\u00e1i s\u1eed d\u1ee5ng. C\u00f3 th\u1ec3 d\u00f9ng m\u1ed9t t\u00ean duy nh\u1ea5t \u0111\u1ec3 l\u01b0u tr\u1eef bi\u1ebfn c\u1ee7a nhi\u1ec1u ki\u1ec3u d\u1eef li\u1ec7u kh\u00e1c nhau (float, double, long, int,\u2026). Overloading vs. Overriding Polymorphism g\u1ed3m c\u00f3 hai lo\u1ea1i: Runtime Polymorphism v\u00e0 Compile Time Polymorphism . Theo \u0111\u00f3, Polymorphism cho ph\u00e9p m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c th\u1ef1c thi nh\u1eefng behavior kh\u00e1c nhau theo hai h\u01b0\u1edbng: s\u1eed d\u1ee5ng ph\u01b0\u01a1ng th\u1ee9c ghi \u0111\u00e8 ( method overriding ) ho\u1eb7c ph\u01b0\u01a1ng th\u1ee9c n\u1ea1p ch\u1ed3ng ( method overloading ). Overloading l\u00e0 m\u1ed9t k\u0129 thu\u1eadt cho ph\u00e9p trong c\u00f9ng m\u1ed9t class c\u00f3 th\u1ec3 c\u00f3 nhi\u1ec1u ph\u01b0\u01a1ng th\u1ee9c c\u00f9ng t\u00ean nh\u01b0ng kh\u00e1c nhau v\u1ec1 s\u1ed1 l\u01b0\u1ee3ng tham s\u1ed1 ho\u1eb7c ki\u1ec3u d\u1eef li\u1ec7u tham s\u1ed1. Overriding \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong tr\u01b0\u1eddng h\u1ee3p l\u1edbp con k\u1ebf th\u1eeba t\u1eeb l\u1edbp cha v\u00e0 mu\u1ed1n \u0111\u1ecbnh ngh\u0129a l\u1ea1i m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c \u0111\u00e3 c\u00f3 m\u1eb7t \u1edf l\u1edbp cha. M\u1ed9t l\u1edbp cha th\u00f4ng th\u01b0\u1eddng c\u00f3 th\u1ec3 c\u00f3 nhi\u1ec1u l\u1edbp con k\u1ebf th\u1eeba, tuy nhi\u00ean ph\u01b0\u01a1ng th\u1ee9c \u1edf l\u1edbp cha c\u00f3 th\u1ec3 ph\u00f9 h\u1ee3p v\u1edbi l\u1edbp con n\u00e0y nh\u01b0ng kh\u00f4ng ph\u00f9 h\u1ee3p v\u1edbi l\u1edbp con kh\u00e1c, do \u0111\u00f3 l\u1edbp con c\u1ea7n ghi \u0111\u00e8 l\u1ea1i ph\u01b0\u01a1ng th\u1ee9c \u0111\u00f3 cho ph\u00f9 h\u1ee3p. Overloading Overriding Th\u1ec3 hi\u1ec7n \u0111a h\u00ecnh t\u1ea1i compile time Th\u1ec3 hi\u1ec7n \u0111a h\u00ecnh t\u1ea1i runtime Th\u00eam h\u00e0nh vi cho ph\u01b0\u01a1ng th\u1ee9c Thay \u0111\u1ed5i h\u00e0nh vi hi\u1ec7n t\u1ea1i c\u1ee7a ph\u01b0\u01a1ng th\u1ee9c C\u00f3 th\u1ec3 kh\u00e1c nhau v\u1ec1 s\u1ed1 l\u01b0\u1ee3ng v\u00e0 ki\u1ec3u d\u1eef li\u1ec7u c\u1ee7a tham s\u1ed1 S\u1ed1 l\u01b0\u1ee3ng v\u00e0 li\u1ec3u d\u1eef li\u1ec7u c\u1ee7a tham s\u1ed1 ph\u1ea3i gi\u1ed1ng nhau X\u1ea3y ra trong c\u00f9ng m\u1ed9t class X\u1ea3y ra \u1edf 2 class c\u00f3 quan h\u1ec7 k\u1ebf th\u1eeba Triangle, Circle, and Rectangle now can be used in the same collection Abstraction Concepts Abstraction l\u00e0 vi\u1ec7c tr\u1eebu t\u01b0\u1ee3ng h\u00f3a m\u1ed9t objects b\u1eb1ng c\u00e1ch ch\u1ecdn ra c\u00e1c thu\u1ed9c t\u00ednh, ph\u01b0\u01a1ng th\u1ee9c c\u1ee7a objects c\u1ea7n thi\u1ebft v\u00e0 b\u1ecf \u0111i nh\u1eefng thu\u1ed9c t\u00ednh, ph\u01b0\u01a1ng th\u1ee9c kh\u00f4ng c\u1ea7n thi\u1ebft. C\u00f3 th\u1ec3 xem Abstraction l\u00e0 m\u1ed9t ph\u1ea7n m\u1edf r\u1ed9ng c\u1ee7a Encapsulation . Th\u00f4ng qua Abstraction, ta c\u00f3 th\u1ec3 \u1ea9n t\u1ea5t c\u1ea3 d\u1eef li\u1ec7u ho\u1eb7c quy tr\u00ecnh kh\u00f4ng li\u00ean quan c\u1ee7a \u1ee9ng d\u1ee5ng. \u0110\u1ed1i v\u1edbi ng\u01b0\u1eddi d\u00f9ng, \u0111\u00f3 ch\u1ec9 l\u00e0 nh\u1eefng chi ti\u1ebft kh\u00f4ng c\u1ea7n thi\u1ebft. T\u1eeb \u0111\u00f3, ta c\u00f3 th\u1ec3 \u0111\u1ec3 gi\u1ea3m \u0111\u1ed9 ph\u1ee9c t\u1ea1p v\u00e0 t\u0103ng hi\u1ec7u qu\u1ea3 s\u1eed d\u1ee5ng c\u1ee7a ph\u1ea7n m\u1ec1m. Features X\u00e2y d\u1ef1ng m\u1ed9t interface \u0111\u01a1n gi\u1ea3n, d\u1ec5 hi\u1ec3u d\u1ec5 s\u1eed d\u1ee5ng cho c\u00e1c objects. Code ph\u1ee9c t\u1ea1p b\u1ecb \u1ea9n \u0111i. N\u00e2ng cao v\u1ea5n \u0111\u1ec1 b\u1ea3o m\u1eadt, b\u1ea3o v\u1ec7 d\u1eef li\u1ec7u kh\u00f4ng b\u1ecb l\u1ed9 ra ngo\u00e0i. Vi\u1ec7c b\u1ea3o tr\u00ec ph\u1ea7n m\u1ec1m d\u1ec5 d\u00e0ng h\u01a1n. Types of Abstraction: Data Abstraction : Khi d\u1eef li\u1ec7u c\u1ee7a object kh\u00f4ng hi\u1ec3n th\u1ecb ra b\u00ean ngo\u00e0i, th\u00ec \u0111\u00f3 g\u1ecdi l\u00e0 tr\u1eebu t\u01b0\u1ee3ng h\u00f3a d\u1eef li\u1ec7u. N\u1ebfu c\u1ea7n, ta c\u00f3 th\u1ec3 c\u1ea5p quy\u1ec1n truy c\u1eadp v\u00e0o d\u1eef li\u1ec7u c\u1ee7a object b\u1eb1ng nhi\u1ec1u c\u00e1ch. Th\u00f4ng th\u01b0\u1eddng s\u1eed d\u1ee5ng m\u1ed9t s\u1ed1 ph\u01b0\u01a1ng th\u1ee9c nh\u01b0 get , set . Process Abstraction : Khi kh\u00f4ng c\u1ea7n cung c\u1ea5p chi ti\u1ebft v\u1ec1 t\u1ea5t c\u1ea3 c\u00e1c ch\u1ee9c n\u0103ng kh\u00e1c nhau c\u1ee7a m\u1ed9t object hay c\u00e1c logic b\u00ean trong n\u00f3, ta c\u00f3 th\u1ec3 \u1ea9n vi\u1ec7c tri\u1ec3n khai n\u00e0y \u0111i d\u00f9ng Abstraction, g\u1ecdi l\u00e0 tr\u1eebu t\u01b0\u1ee3ng h\u00f3a quy tr\u00ecnh. Example Cell phones are complex. But using them is simple. Constructor / Destructor Constructor Constructor l\u00e0 m\u1ed9t h\u00e0m d\u00f9ng \u0111\u1ec3 kh\u1edfi t\u1ea1o , c\u1ea5p ph\u00e1t b\u1ed9 nh\u1edb cho m\u1ed9t object. Constructor th\u00f4ng th\u01b0\u1eddng s\u1ebd c\u00f3 c\u00e1c \u0111\u1eb7c \u0111i\u1ec3m nh\u01b0 \u0111\u01b0\u1ee3c g\u1ecdi khi c\u00f3 m\u1ed9t object \u0111\u01b0\u1ee3c t\u1ea1o, tr\u00f9ng v\u1edbi t\u00ean class, kh\u00f4ng c\u00f3 ki\u1ec3u d\u1eef li\u1ec7u tr\u1ea3 v\u1ec1. Types: Parameterized constructors : class Example { public : Example (); Example ( int a , int b ); // Parameterized constructor. private : int x_ ; int y_ ; }; Default constructors class Student { public : Student ( int a = 0 , int b = 0 ); // Default constructor. int a ; int b ; }; Copy constructors Conversion constructors Move constructors Destructor Destructor ng\u01b0\u1ee3c l\u1ea1i v\u1edbi Constructor, n\u00f3 \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 xo\u00e1 m\u1ed9t object. Destructor c\u0169ng c\u00f3 c\u00e1c \u0111\u1eb7c \u0111i\u1ec3m nh\u01b0 \u0111\u01b0\u1ee3c g\u1ecdi t\u1ef1 \u0111\u1ed9ng khi m\u1ed9t \u0111\u1ed1i object tho\u00e1t kh\u1ecfi Scope c\u1ee7a class, hay m\u1ed9t ch\u1ee9c n\u0103ng, ch\u01b0\u01a1ng tr\u00ecnh k\u1ebft th\u00fac Ch\u01b0\u01a1ng tr\u00ecnh k\u1ebft th\u00fac hay g\u1ecdi t\u1edbi to\u00e1n t\u1eed delete \u0111\u1ec3 x\u00f3a m\u1ed9t object v.vv, n\u00f3i chung l\u00e0 \u0111\u01b0\u1ee3c g\u1ecdi tr\u01b0\u1edbc khi b\u1ed9 nh\u1edb c\u1ee7a \u0111\u1ed1i t\u01b0\u1ee3ng \u0111\u01b0\u1ee3c gi\u1ea3i ph\u00f3ng. M\u1ee5c \u0111\u00edch ch\u00ednh c\u1ee7a n\u00f3 l\u00e0 gi\u1ea3i ph\u00f3ng c\u00e1c t\u00e0i nguy\u00ean, b\u1ed9 nh\u1edb m\u00e0 objects c\u00f3 \u0111\u01b0\u1ee3c trong th\u1eddi gian t\u1ed3n t\u1ea1i c\u1ee7a n\u00f3 v\u00e0 h\u1ee7y vi\u1ec7c tham chi\u1ebfu t\u1eeb object \u0111\u00f3 \u0111\u1ebfn c\u00e1c object kh\u00e1c. SOLID / DRY SOLID SOLID l\u00e0 vi\u1ebft t\u1eaft c\u1ee7a 5 ch\u1eef c\u00e1i \u0111\u1ea7u trong 5 nguy\u00ean t\u1eafc thi\u1ebft k\u1ebf h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng, gi\u00fap cho developer vi\u1ebft ra nh\u1eefng \u0111o\u1ea1n code d\u1ec5 \u0111\u1ecdc, d\u1ec5 hi\u1ec3u, d\u1ec5 maintain, \u0111\u01b0\u1ee3c \u0111\u01b0a ra b\u1edfi Bob Martin v\u00e0 Michael Feathers: S ingle responsibility priciple - SRP : M\u1ed9t class ch\u1ec9 n\u00ean gi\u1eef 1 tr\u00e1ch nhi\u1ec7m duy nh\u1ea5t (Ch\u1ec9 c\u00f3 th\u1ec3 s\u1eeda \u0111\u1ed5i class v\u1edbi 1 l\u00fd do duy nh\u1ea5t) O pen/Closed principle - OCP : C\u00f3 th\u1ec3 tho\u1ea3i m\u00e1i m\u1edf r\u1ed9ng 1 class, nh\u01b0ng kh\u00f4ng \u0111\u01b0\u1ee3c s\u1eeda \u0111\u1ed5i b\u00ean trong class \u0111\u00f3 (open for extension but closed for modification). L iskov substitution principe - LSP : Trong m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh, c\u00e1c object c\u1ee7a class con c\u00f3 th\u1ec3 thay th\u1ebf class cha m\u00e0 kh\u00f4ng l\u00e0m thay \u0111\u1ed5i t\u00ednh \u0111\u00fang \u0111\u1eafn c\u1ee7a ch\u01b0\u01a1ng tr\u00ecnh. I nterface segregation principle - ISP : Thay v\u00ec d\u00f9ng 1 interface l\u1edbn, ta n\u00ean t\u00e1ch th\u00e0nh nhi\u1ec1u interface nh\u1ecf, v\u1edbi nhi\u1ec1u m\u1ee5c \u0111\u00edch c\u1ee5 th\u1ec3. D ependency inversion principle - DIP : C\u00f3 hai \u00fd C\u00e1c module c\u1ea5p cao kh\u00f4ng n\u00ean ph\u1ee5 thu\u1ed9c v\u00e0o c\u00e1c modules c\u1ea5p th\u1ea5p. C\u1ea3 2 n\u00ean ph\u1ee5 thu\u1ed9c v\u00e0o abstraction. Interface (abstraction) kh\u00f4ng n\u00ean ph\u1ee5 thu\u1ed9c v\u00e0o chi ti\u1ebft, m\u00e0 ng\u01b0\u1ee3c l\u1ea1i.( C\u00e1c class giao ti\u1ebfp v\u1edbi nhau th\u00f4ng qua interface, kh\u00f4ng ph\u1ea3i th\u00f4ng qua implementation.) DRY DRY = Don\u2019t Repeat Yourself Nguy\u00ean t\u1eafc n\u00e0y khuy\u00ean ta \u0111\u1eebng c\u00f3 vi\u1ebft l\u1eb7p \u0111i l\u1eb7p l\u1ea1i b\u1ea5t k\u1ef3 m\u1ed9t \u0111o\u1ea1n code n\u00e0o m\u00e0 h\u00e3y \u0111\u00f3ng g\u00f3i n\u00f3 th\u00e0nh ph\u01b0\u01a1ng th\u1ee9c ri\u00eang v\u00e0 cho ph\u00e9p k\u1ebf th\u1eeba l\u1ea1i \u0111o\u1ea1n code n\u00e0y . \u0110\u1ebfn khi c\u1ea7n th\u00ec ch\u1ec9 c\u1ea7n g\u1ecdi t\u00ean ph\u01b0\u01a1ng th\u1ee9c \u0111\u00f3 ra x\u00e0i. \u0110\u1eebng l\u1eb7p l\u1ea1i code \u1edf \u0111\u00e2y l\u00e0 kh\u00f4ng l\u1eb7p l\u1ea1i c\u00e1c \u0111o\u1ea1n code gi\u1ed1ng nhau, c\u00e1c method th\u1ef1c hi\u1ec7n ch\u1ee9c n\u0103ng nh\u01b0 nhau, c\u1ed1 g\u1eafng gom ch\u00fang l\u1ea1i 1 c\u00e1ch g\u1ecdn g\u00e0ng v\u00e0 c\u00f3 th\u1ec3 d\u00f9ng l\u1ea1i khi c\u1ea7n. Reference How to explain object-oriented programming concepts to a 6-year-old The four basics of object-oriented programming Object Oriented Programming With A Real-World Scenario wiki - Constructor wiki - Destructor SOLID: The First 5 Principles of Object Oriented Design wiki - DRY Object-Oriented Programming: Objects, Classes & Methods","title":"Object Oriented Programing"},{"location":"OOP/Object-Oriented-Programing/#object-oriented-programing","text":"Four Principles : Inheritance : Concepts, Features, Types of Inheritance, Example Encapsulation : Concepts, Features, Access modifier, Example Polymorphism : Concepts, Features, Overloading vs. Overriding , Example Abstraction : Concepts, Features, Types of Abstraction, Example Objects and Classes , Properties and Methods Constructor and Destructor SOLID / DRY","title":"Object Oriented Programing"},{"location":"OOP/Object-Oriented-Programing/#objects-and-classes-properties-and-methods","text":"Objects : \u0111\u01b0\u1ee3c hi\u1ec3u nh\u01b0 l\u00e0 1 th\u1ef1c th\u1ec3, m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng. Trong OOP m\u1ecdi th\u1ee9 \u0111\u1ecbnh ngh\u0129a \u0111\u01b0\u1ee3c qua 3 kh\u00e1i ni\u1ec7m Identity , Attributes v\u00e0 Behaviours th\u00ec \u0111\u1ec1u l\u00e0 Objects. Classes : T\u1eadp h\u1ee3p m\u1ed9t ho\u1eb7c nhi\u1ec1u c\u00e1c objects c\u00f3 c\u00e1c \u0111\u1eb7c tr\u01b0\u01a1ng t\u01b0\u01a1ng t\u1ef1 nhau. Trong OOP, m\u1ed9t class bao g\u1ed3m 3 components l\u00e0: Name , Attributes v\u00e0 Behaviours Objects vs. Classes Class l\u00e0 m\u1ed9t khu\u00f4n m\u1eabu c\u00f2n object l\u00e0 m\u1ed9t th\u1ec3 hi\u1ec7n c\u1ee5 th\u1ec3 d\u1ef1a tr\u00ean khu\u00f4n m\u1eabu \u0111\u00f3. V\u00ed d\u1ee5 khi n\u00f3i \u0111\u1ebfn xe ot\u00f4 th\u00ec class ch\u00ednh khu\u00f4n m\u1eabu c\u1ee7a c\u00e1i xe v\u1edbi c\u00e1c \u0111\u1eb7c tr\u01b0ng nh\u01b0 c\u00f3 4 b\u00e1nh v\u00e0 c\u00f3 thi\u1ebft k\u1ebf t\u01b0\u01a1ng t\u1ef1 nh\u01b0 h\u00ecnh v\u1ebd. C\u00f2n object l\u00e0 c\u00e1c chi\u1ebfc xe ot\u00f4 \u0111\u01b0\u1ee3c x\u00e2y d\u1ef1ng d\u1ef1a tr\u00ean khu\u00f4n m\u1eabu \u0111\u00f3. Trong OOP, m\u1ed9t object bao g\u1ed3m 2 th\u00e0nh ph\u1ea7n: Properties v\u00e0 Methods: Properties : l\u00e0 nh\u1eefng th\u00f4ng tin, \u0111\u1eb7c \u0111i\u1ec3m c\u1ee7a object. V\u00ed d\u1ee5: xe oto s\u1ebd c\u00f3 t\u00ean, ki\u1ec3u d\u00e1ng, m\u00e0u s\u1eafc, 2 b\u00f4 hay n b\u00f4 v.vv \u2192 Ph\u1ea3n \u00e1nh t\u00ednh ch\u1ea5t c\u1ee7a object. Methods : l\u00e0 nh\u1eefng thao t\u00e1c, h\u00e0nh \u0111\u1ed9ng m\u00e0 object \u0111\u00f3 c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n. V\u00ed d\u1ee5: xe lamborghini th\u1ec3 \u0111\u1ea1t t\u1ed1c \u0111\u1ed9 254km/h, c\u00f3 th\u1ec3 ch\u1ea1y \u0111ua v\u1edbi th\u1eddi gian v.vvv \u2192 Ph\u1ea3n \u00e1nh h\u00e0nh vi c\u1ee7a object.","title":"Objects and Classes, Properties and Methods"},{"location":"OOP/Object-Oriented-Programing/#four-principles","text":"","title":"Four Principles"},{"location":"OOP/Object-Oriented-Programing/#inheritance","text":"","title":"Inheritance"},{"location":"OOP/Object-Oriented-Programing/#concepts","text":"Inheritance l\u00e0 qu\u00e1 tr\u00ecnh m\u00e0 m\u1ed9t class k\u1ebf th\u1eeba c\u00e1c thu\u1ed9c t\u00ednh c\u1ee7a m\u1ed9t class kh\u00e1c. C\u00e1c thu\u1ed9c t\u00ednh \u0111\u00f3 c\u00f3 th\u1ec3 l\u00e0 m\u1ed9t method ho\u1eb7c m\u1ed9t field n\u00e0o \u0111\u00f3. Class \u0111\u01b0\u1ee3c k\u1ebf th\u1eeba \u0111\u01b0\u1ee3c g\u1ecdi chung l\u00e0 parent class , c\u00f2n class k\u1ebf th\u1eeba s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi chung l\u00e0 children class .","title":"Concepts"},{"location":"OOP/Object-Oriented-Programing/#features","text":"T\u0103ng kh\u1ea3 n\u0103ng t\u00e1i s\u1eed d\u1ee5ng . Khi m\u1ed9t class k\u1ebf th\u1eeba class kh\u00e1c, n\u00f3 c\u00f3 th\u1ec3 truy c\u1eadp t\u1ea5t c\u1ea3 c\u00e1c ch\u1ee9c n\u0103ng c\u1ee7a class m\u00e0 n\u00f3 k\u1ebf th\u1eeba. Khi code \u0111\u01b0\u1ee3c t\u00e1i s\u1eed d\u1ee5ng, s\u1ebd gi\u00fap gi\u1ea3m chi ph\u00ed ph\u00e1t tri\u1ec3n v\u00e0 b\u1ea3o tr\u00ec, vi\u1ec7c ki\u1ec3m tra v\u00e0 g\u1ee1 l\u1ed7i s\u1ebd th\u1ef1c hi\u1ec7n v\u1edbi code c\u1ee7a parent class, ch\u1ee9 kh\u00f4ng c\u1ea7n ki\u1ec3m tra t\u1eebng children class. H\u1ea1n ch\u1ebf s\u1ef1 d\u01b0 th\u1eeba code v\u00e0 h\u1ed7 tr\u1ee3 kh\u1ea3 n\u0103ng m\u1edf r\u1ed9ng code.","title":"Features"},{"location":"OOP/Object-Oriented-Programing/#types-of-inheritance","text":"Single Inheritance : Tr\u01b0\u1eddng h\u1ee3p m\u1ed9t class ch\u1ec9 \u0111\u01b0\u1ee3c k\u1ebf th\u1eeba t\u1eeb m\u1ed9t class duy nh\u1ea5t, t\u1ee9c l\u00e0 m\u1ed9t children class ch\u1ec9 c\u00f3 m\u1ed9t parent class . Multiple Inheritance : Tr\u01b0\u1eddng h\u1ee3p m\u1ed9t class c\u00f3 th\u1ec3 k\u1ebf th\u1eeba t\u1eeb nhi\u1ec1u h\u01a1n m\u1ed9t class kh\u00e1c, \u0111\u1ed3ng ngh\u0129a v\u1edbi vi\u1ec7c m\u1ed9t children class c\u00f3 th\u1ec3 c\u00f3 nhi\u1ec1u h\u01a1n m\u1ed9t parent class . Multi-Level Inheritance : Tr\u01b0\u1eddng h\u1ee3p class A k\u1ebf th\u1eeba t\u1eeb class B, xong class B k\u1ebf th\u1eeba class C Hierarchical Inheritance : Tr\u01b0\u1eddng h\u1ee3p c\u00f3 nhi\u1ec1u children class \u0111\u01b0\u1ee3c k\u1ebf th\u1eeba t\u1eeb m\u1ed9t parent class duy nh\u1ea5t. Hybrid Inheritance / Virtual Inheritance : Tr\u01b0\u1eddng h\u1ee3p k\u1ebf th\u1eeba \u0111\u01b0\u1ee3c k\u1ebft h\u1ee3p b\u1edfi nhi\u1ec1u h\u01a1n m\u1ed9t lo\u1ea1i k\u1ebf th\u1eeba m\u00ecnh k\u1ec3 \u1edf tr\u00ean.","title":"Types of Inheritance:"},{"location":"OOP/Object-Oriented-Programing/#example","text":"A private teacher is a type of teacher. And any teacher is a type of Person.","title":"Example"},{"location":"OOP/Object-Oriented-Programing/#encapsulation","text":"","title":"Encapsulation"},{"location":"OOP/Object-Oriented-Programing/#concepts_1","text":"Encapsulation l\u00e0 vi\u1ec7c \u0111\u00f3ng g\u00f3i t\u1ea5t c\u1ea3 th\u00f4ng tin, d\u1eef li\u1ec7u, method v\u00e0o b\u00ean trong m\u1ed9t object . Sau \u0111\u00f3, khi m\u1ed9t object \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o t\u1eeb class , th\u00ec d\u1eef li\u1ec7u v\u00e0 method \u0111\u00e3 \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i trong object \u0111\u00f3. Khi s\u1eed d\u1ee5ng, ta ch\u1ec9 c\u1ea7n g\u1ecdi t\u00ean method ch\u1ee9 kh\u00f4ng c\u1ea7n truy c\u1eadp \u0111\u1ebfn d\u1eef li\u1ec7u b\u00ean trong.","title":"Concepts"},{"location":"OOP/Object-Oriented-Programing/#features_1","text":"T\u00ednh linh ho\u1ea1t : Code \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i s\u1ebd linh ho\u1ea1t, d\u1ec5 s\u1eeda \u0111\u1ed5i h\u01a1n l\u00e0 nh\u1eefng \u0111o\u1ea1n code \u0111\u1ed9c l\u1eadp. Kh\u1ea3 n\u0103ng t\u00e1i s\u1eed d\u1ee5ng : Code \u0111\u00e3 \u0111\u00f3ng g\u00f3i c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c t\u00e1i s\u1eed d\u1ee5ng trong m\u1ed9t ho\u1eb7c nhi\u1ec1u \u1ee9ng d\u1ee5ng. Kh\u1ea3 n\u0103ng b\u1ea3o tr \u00ec: Code \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i trong nh\u1eefng ph\u1ea7n ri\u00eang bi\u1ec7t, nh\u01b0 l\u00e0 class , method , interface ,\u2026 Do \u0111\u00f3, vi\u1ec7c thay \u0111\u1ed5i, c\u1eadp nh\u1eadt m\u1ed9t ph\u1ea7n c\u1ee7a \u1ee9ng d\u1ee5ng kh\u00f4ng \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn nh\u1eefng ph\u1ea7n c\u00f2n l\u1ea1i. \u0110i\u1ec1u n\u00e0y gi\u00fap gi\u1ea3m c\u00f4ng s\u1ee9c v\u00e0 ti\u1ebft ki\u1ec7m th\u1eddi gian cho c\u00e1c \u00f4ng dev. Kh\u1ea3 n\u0103ng ki\u1ec3m th\u1eed : Testing ti\u1ebft ki\u1ec7m \u0111\u01b0\u1ee3c th\u1eddi gian v\u00e0 c\u00f4ng s\u1ee9c h\u01a1n trong vi\u1ec7c test 1 class ch\u1ee9a to\u00e0n b\u1ed9 th\u00f4ng tin c\u1ee7a class \u0111\u00f3 thay v\u00ec ki\u1ebfm t\u1eebng method c\u1ee7a class \u0111\u1ec3 test. Che gi\u1ea5u d\u1eef li\u1ec7u : Khi s\u1eed d\u1ee5ng method, dev ch\u1ec9 c\u1ea7n bi\u1ebft method \u0111\u00f3 nh\u1eadn parameter g\u00ec, return g\u00ec m\u00e0 kh\u00f4ng c\u1ea7n quan t\u00e2m nhi\u1ec1u \u0111\u1ebfn logic b\u00ean trong.","title":"Features"},{"location":"OOP/Object-Oriented-Programing/#access-modifier-in-encapsulation","text":"Private : Ch\u1ec9 truy c\u1eadp \u0111\u01b0\u1ee3c method trong class khai b\u00e1o n\u00f3. Public : C\u00f3 th\u1ec3 truy c\u1eadp t\u1edbi method t\u1eeb c\u00e1c class kh\u00e1c Protected : Ch\u1ec9 truy c\u1eadp \u0111\u01b0\u1ee3c method khi class n\u00e0y k\u1ebf th\u1eeba class khai b\u00e1o method \u0111\u00f3","title":"Access modifier in Encapsulation"},{"location":"OOP/Object-Oriented-Programing/#example_1","text":"You can feed the cat. But you can\u2019t directly change how hungry the cat is.","title":"Example"},{"location":"OOP/Object-Oriented-Programing/#polymorphism","text":"","title":"Polymorphism"},{"location":"OOP/Object-Oriented-Programing/#concepts_2","text":"Polymorphism l\u00e0 vi\u1ec7c m\u1ed9t bi\u1ebfn, m\u1ed9t h\u00e0m ho\u1eb7c m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c c\u00f3 th\u1ec3 t\u1ed3n t\u1ea1i \u1edf nhi\u1ec1u d\u1ea1ng kh\u00e1c nhau. T\u1ee9c l\u00e0 ch\u00fang c\u00f3 th\u1ec3 c\u00f9ng m\u1ed9t t\u00ean nh\u01b0ng ch\u1ee9c n\u0103ng th\u1ef1c s\u1ef1 c\u1ee7a ch\u00fang l\u1ea1i kh\u00e1c nhau. Polymorphism th\u01b0\u1eddng \u0111\u01b0\u1ee3c d\u00f9ng trong tr\u01b0\u1eddng h\u1ee3p m\u1ed9t children class c\u1ea7n d\u00f9ng c\u00e1c method c\u1ee7a parent class v\u00e0 b\u1ed5 sung th\u00eam cho m\u1ed9t moethod kh\u00e1c. Hay khi m\u1ed9t class c\u1ea7n c\u00f3 nhi\u1ec1u method c\u00f3 c\u00f9ng t\u00ean nhau nh\u01b0ng kh\u00e1c parameter.","title":"Concepts"},{"location":"OOP/Object-Oriented-Programing/#features_2","text":"T\u00e1i s\u1eed d\u1ee5ng. C\u00f3 th\u1ec3 d\u00f9ng m\u1ed9t t\u00ean duy nh\u1ea5t \u0111\u1ec3 l\u01b0u tr\u1eef bi\u1ebfn c\u1ee7a nhi\u1ec1u ki\u1ec3u d\u1eef li\u1ec7u kh\u00e1c nhau (float, double, long, int,\u2026).","title":"Features"},{"location":"OOP/Object-Oriented-Programing/#overloading-vs-overriding","text":"Polymorphism g\u1ed3m c\u00f3 hai lo\u1ea1i: Runtime Polymorphism v\u00e0 Compile Time Polymorphism . Theo \u0111\u00f3, Polymorphism cho ph\u00e9p m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c th\u1ef1c thi nh\u1eefng behavior kh\u00e1c nhau theo hai h\u01b0\u1edbng: s\u1eed d\u1ee5ng ph\u01b0\u01a1ng th\u1ee9c ghi \u0111\u00e8 ( method overriding ) ho\u1eb7c ph\u01b0\u01a1ng th\u1ee9c n\u1ea1p ch\u1ed3ng ( method overloading ). Overloading l\u00e0 m\u1ed9t k\u0129 thu\u1eadt cho ph\u00e9p trong c\u00f9ng m\u1ed9t class c\u00f3 th\u1ec3 c\u00f3 nhi\u1ec1u ph\u01b0\u01a1ng th\u1ee9c c\u00f9ng t\u00ean nh\u01b0ng kh\u00e1c nhau v\u1ec1 s\u1ed1 l\u01b0\u1ee3ng tham s\u1ed1 ho\u1eb7c ki\u1ec3u d\u1eef li\u1ec7u tham s\u1ed1. Overriding \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong tr\u01b0\u1eddng h\u1ee3p l\u1edbp con k\u1ebf th\u1eeba t\u1eeb l\u1edbp cha v\u00e0 mu\u1ed1n \u0111\u1ecbnh ngh\u0129a l\u1ea1i m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c \u0111\u00e3 c\u00f3 m\u1eb7t \u1edf l\u1edbp cha. M\u1ed9t l\u1edbp cha th\u00f4ng th\u01b0\u1eddng c\u00f3 th\u1ec3 c\u00f3 nhi\u1ec1u l\u1edbp con k\u1ebf th\u1eeba, tuy nhi\u00ean ph\u01b0\u01a1ng th\u1ee9c \u1edf l\u1edbp cha c\u00f3 th\u1ec3 ph\u00f9 h\u1ee3p v\u1edbi l\u1edbp con n\u00e0y nh\u01b0ng kh\u00f4ng ph\u00f9 h\u1ee3p v\u1edbi l\u1edbp con kh\u00e1c, do \u0111\u00f3 l\u1edbp con c\u1ea7n ghi \u0111\u00e8 l\u1ea1i ph\u01b0\u01a1ng th\u1ee9c \u0111\u00f3 cho ph\u00f9 h\u1ee3p. Overloading Overriding Th\u1ec3 hi\u1ec7n \u0111a h\u00ecnh t\u1ea1i compile time Th\u1ec3 hi\u1ec7n \u0111a h\u00ecnh t\u1ea1i runtime Th\u00eam h\u00e0nh vi cho ph\u01b0\u01a1ng th\u1ee9c Thay \u0111\u1ed5i h\u00e0nh vi hi\u1ec7n t\u1ea1i c\u1ee7a ph\u01b0\u01a1ng th\u1ee9c C\u00f3 th\u1ec3 kh\u00e1c nhau v\u1ec1 s\u1ed1 l\u01b0\u1ee3ng v\u00e0 ki\u1ec3u d\u1eef li\u1ec7u c\u1ee7a tham s\u1ed1 S\u1ed1 l\u01b0\u1ee3ng v\u00e0 li\u1ec3u d\u1eef li\u1ec7u c\u1ee7a tham s\u1ed1 ph\u1ea3i gi\u1ed1ng nhau X\u1ea3y ra trong c\u00f9ng m\u1ed9t class X\u1ea3y ra \u1edf 2 class c\u00f3 quan h\u1ec7 k\u1ebf th\u1eeba Triangle, Circle, and Rectangle now can be used in the same collection","title":"Overloading vs. Overriding"},{"location":"OOP/Object-Oriented-Programing/#abstraction","text":"","title":"Abstraction"},{"location":"OOP/Object-Oriented-Programing/#concepts_3","text":"Abstraction l\u00e0 vi\u1ec7c tr\u1eebu t\u01b0\u1ee3ng h\u00f3a m\u1ed9t objects b\u1eb1ng c\u00e1ch ch\u1ecdn ra c\u00e1c thu\u1ed9c t\u00ednh, ph\u01b0\u01a1ng th\u1ee9c c\u1ee7a objects c\u1ea7n thi\u1ebft v\u00e0 b\u1ecf \u0111i nh\u1eefng thu\u1ed9c t\u00ednh, ph\u01b0\u01a1ng th\u1ee9c kh\u00f4ng c\u1ea7n thi\u1ebft. C\u00f3 th\u1ec3 xem Abstraction l\u00e0 m\u1ed9t ph\u1ea7n m\u1edf r\u1ed9ng c\u1ee7a Encapsulation . Th\u00f4ng qua Abstraction, ta c\u00f3 th\u1ec3 \u1ea9n t\u1ea5t c\u1ea3 d\u1eef li\u1ec7u ho\u1eb7c quy tr\u00ecnh kh\u00f4ng li\u00ean quan c\u1ee7a \u1ee9ng d\u1ee5ng. \u0110\u1ed1i v\u1edbi ng\u01b0\u1eddi d\u00f9ng, \u0111\u00f3 ch\u1ec9 l\u00e0 nh\u1eefng chi ti\u1ebft kh\u00f4ng c\u1ea7n thi\u1ebft. T\u1eeb \u0111\u00f3, ta c\u00f3 th\u1ec3 \u0111\u1ec3 gi\u1ea3m \u0111\u1ed9 ph\u1ee9c t\u1ea1p v\u00e0 t\u0103ng hi\u1ec7u qu\u1ea3 s\u1eed d\u1ee5ng c\u1ee7a ph\u1ea7n m\u1ec1m.","title":"Concepts"},{"location":"OOP/Object-Oriented-Programing/#features_3","text":"X\u00e2y d\u1ef1ng m\u1ed9t interface \u0111\u01a1n gi\u1ea3n, d\u1ec5 hi\u1ec3u d\u1ec5 s\u1eed d\u1ee5ng cho c\u00e1c objects. Code ph\u1ee9c t\u1ea1p b\u1ecb \u1ea9n \u0111i. N\u00e2ng cao v\u1ea5n \u0111\u1ec1 b\u1ea3o m\u1eadt, b\u1ea3o v\u1ec7 d\u1eef li\u1ec7u kh\u00f4ng b\u1ecb l\u1ed9 ra ngo\u00e0i. Vi\u1ec7c b\u1ea3o tr\u00ec ph\u1ea7n m\u1ec1m d\u1ec5 d\u00e0ng h\u01a1n.","title":"Features"},{"location":"OOP/Object-Oriented-Programing/#types-of-abstraction","text":"Data Abstraction : Khi d\u1eef li\u1ec7u c\u1ee7a object kh\u00f4ng hi\u1ec3n th\u1ecb ra b\u00ean ngo\u00e0i, th\u00ec \u0111\u00f3 g\u1ecdi l\u00e0 tr\u1eebu t\u01b0\u1ee3ng h\u00f3a d\u1eef li\u1ec7u. N\u1ebfu c\u1ea7n, ta c\u00f3 th\u1ec3 c\u1ea5p quy\u1ec1n truy c\u1eadp v\u00e0o d\u1eef li\u1ec7u c\u1ee7a object b\u1eb1ng nhi\u1ec1u c\u00e1ch. Th\u00f4ng th\u01b0\u1eddng s\u1eed d\u1ee5ng m\u1ed9t s\u1ed1 ph\u01b0\u01a1ng th\u1ee9c nh\u01b0 get , set . Process Abstraction : Khi kh\u00f4ng c\u1ea7n cung c\u1ea5p chi ti\u1ebft v\u1ec1 t\u1ea5t c\u1ea3 c\u00e1c ch\u1ee9c n\u0103ng kh\u00e1c nhau c\u1ee7a m\u1ed9t object hay c\u00e1c logic b\u00ean trong n\u00f3, ta c\u00f3 th\u1ec3 \u1ea9n vi\u1ec7c tri\u1ec3n khai n\u00e0y \u0111i d\u00f9ng Abstraction, g\u1ecdi l\u00e0 tr\u1eebu t\u01b0\u1ee3ng h\u00f3a quy tr\u00ecnh.","title":"Types of Abstraction:"},{"location":"OOP/Object-Oriented-Programing/#example_2","text":"Cell phones are complex. But using them is simple.","title":"Example"},{"location":"OOP/Object-Oriented-Programing/#constructor-destructor","text":"","title":"Constructor / Destructor"},{"location":"OOP/Object-Oriented-Programing/#constructor","text":"Constructor l\u00e0 m\u1ed9t h\u00e0m d\u00f9ng \u0111\u1ec3 kh\u1edfi t\u1ea1o , c\u1ea5p ph\u00e1t b\u1ed9 nh\u1edb cho m\u1ed9t object. Constructor th\u00f4ng th\u01b0\u1eddng s\u1ebd c\u00f3 c\u00e1c \u0111\u1eb7c \u0111i\u1ec3m nh\u01b0 \u0111\u01b0\u1ee3c g\u1ecdi khi c\u00f3 m\u1ed9t object \u0111\u01b0\u1ee3c t\u1ea1o, tr\u00f9ng v\u1edbi t\u00ean class, kh\u00f4ng c\u00f3 ki\u1ec3u d\u1eef li\u1ec7u tr\u1ea3 v\u1ec1. Types: Parameterized constructors : class Example { public : Example (); Example ( int a , int b ); // Parameterized constructor. private : int x_ ; int y_ ; }; Default constructors class Student { public : Student ( int a = 0 , int b = 0 ); // Default constructor. int a ; int b ; }; Copy constructors Conversion constructors Move constructors","title":"Constructor"},{"location":"OOP/Object-Oriented-Programing/#destructor","text":"Destructor ng\u01b0\u1ee3c l\u1ea1i v\u1edbi Constructor, n\u00f3 \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 xo\u00e1 m\u1ed9t object. Destructor c\u0169ng c\u00f3 c\u00e1c \u0111\u1eb7c \u0111i\u1ec3m nh\u01b0 \u0111\u01b0\u1ee3c g\u1ecdi t\u1ef1 \u0111\u1ed9ng khi m\u1ed9t \u0111\u1ed1i object tho\u00e1t kh\u1ecfi Scope c\u1ee7a class, hay m\u1ed9t ch\u1ee9c n\u0103ng, ch\u01b0\u01a1ng tr\u00ecnh k\u1ebft th\u00fac Ch\u01b0\u01a1ng tr\u00ecnh k\u1ebft th\u00fac hay g\u1ecdi t\u1edbi to\u00e1n t\u1eed delete \u0111\u1ec3 x\u00f3a m\u1ed9t object v.vv, n\u00f3i chung l\u00e0 \u0111\u01b0\u1ee3c g\u1ecdi tr\u01b0\u1edbc khi b\u1ed9 nh\u1edb c\u1ee7a \u0111\u1ed1i t\u01b0\u1ee3ng \u0111\u01b0\u1ee3c gi\u1ea3i ph\u00f3ng. M\u1ee5c \u0111\u00edch ch\u00ednh c\u1ee7a n\u00f3 l\u00e0 gi\u1ea3i ph\u00f3ng c\u00e1c t\u00e0i nguy\u00ean, b\u1ed9 nh\u1edb m\u00e0 objects c\u00f3 \u0111\u01b0\u1ee3c trong th\u1eddi gian t\u1ed3n t\u1ea1i c\u1ee7a n\u00f3 v\u00e0 h\u1ee7y vi\u1ec7c tham chi\u1ebfu t\u1eeb object \u0111\u00f3 \u0111\u1ebfn c\u00e1c object kh\u00e1c.","title":"Destructor"},{"location":"OOP/Object-Oriented-Programing/#solid-dry","text":"","title":"SOLID / DRY"},{"location":"OOP/Object-Oriented-Programing/#solid","text":"SOLID l\u00e0 vi\u1ebft t\u1eaft c\u1ee7a 5 ch\u1eef c\u00e1i \u0111\u1ea7u trong 5 nguy\u00ean t\u1eafc thi\u1ebft k\u1ebf h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng, gi\u00fap cho developer vi\u1ebft ra nh\u1eefng \u0111o\u1ea1n code d\u1ec5 \u0111\u1ecdc, d\u1ec5 hi\u1ec3u, d\u1ec5 maintain, \u0111\u01b0\u1ee3c \u0111\u01b0a ra b\u1edfi Bob Martin v\u00e0 Michael Feathers: S ingle responsibility priciple - SRP : M\u1ed9t class ch\u1ec9 n\u00ean gi\u1eef 1 tr\u00e1ch nhi\u1ec7m duy nh\u1ea5t (Ch\u1ec9 c\u00f3 th\u1ec3 s\u1eeda \u0111\u1ed5i class v\u1edbi 1 l\u00fd do duy nh\u1ea5t) O pen/Closed principle - OCP : C\u00f3 th\u1ec3 tho\u1ea3i m\u00e1i m\u1edf r\u1ed9ng 1 class, nh\u01b0ng kh\u00f4ng \u0111\u01b0\u1ee3c s\u1eeda \u0111\u1ed5i b\u00ean trong class \u0111\u00f3 (open for extension but closed for modification). L iskov substitution principe - LSP : Trong m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh, c\u00e1c object c\u1ee7a class con c\u00f3 th\u1ec3 thay th\u1ebf class cha m\u00e0 kh\u00f4ng l\u00e0m thay \u0111\u1ed5i t\u00ednh \u0111\u00fang \u0111\u1eafn c\u1ee7a ch\u01b0\u01a1ng tr\u00ecnh. I nterface segregation principle - ISP : Thay v\u00ec d\u00f9ng 1 interface l\u1edbn, ta n\u00ean t\u00e1ch th\u00e0nh nhi\u1ec1u interface nh\u1ecf, v\u1edbi nhi\u1ec1u m\u1ee5c \u0111\u00edch c\u1ee5 th\u1ec3. D ependency inversion principle - DIP : C\u00f3 hai \u00fd C\u00e1c module c\u1ea5p cao kh\u00f4ng n\u00ean ph\u1ee5 thu\u1ed9c v\u00e0o c\u00e1c modules c\u1ea5p th\u1ea5p. C\u1ea3 2 n\u00ean ph\u1ee5 thu\u1ed9c v\u00e0o abstraction. Interface (abstraction) kh\u00f4ng n\u00ean ph\u1ee5 thu\u1ed9c v\u00e0o chi ti\u1ebft, m\u00e0 ng\u01b0\u1ee3c l\u1ea1i.( C\u00e1c class giao ti\u1ebfp v\u1edbi nhau th\u00f4ng qua interface, kh\u00f4ng ph\u1ea3i th\u00f4ng qua implementation.)","title":"SOLID"},{"location":"OOP/Object-Oriented-Programing/#dry","text":"DRY = Don\u2019t Repeat Yourself Nguy\u00ean t\u1eafc n\u00e0y khuy\u00ean ta \u0111\u1eebng c\u00f3 vi\u1ebft l\u1eb7p \u0111i l\u1eb7p l\u1ea1i b\u1ea5t k\u1ef3 m\u1ed9t \u0111o\u1ea1n code n\u00e0o m\u00e0 h\u00e3y \u0111\u00f3ng g\u00f3i n\u00f3 th\u00e0nh ph\u01b0\u01a1ng th\u1ee9c ri\u00eang v\u00e0 cho ph\u00e9p k\u1ebf th\u1eeba l\u1ea1i \u0111o\u1ea1n code n\u00e0y . \u0110\u1ebfn khi c\u1ea7n th\u00ec ch\u1ec9 c\u1ea7n g\u1ecdi t\u00ean ph\u01b0\u01a1ng th\u1ee9c \u0111\u00f3 ra x\u00e0i. \u0110\u1eebng l\u1eb7p l\u1ea1i code \u1edf \u0111\u00e2y l\u00e0 kh\u00f4ng l\u1eb7p l\u1ea1i c\u00e1c \u0111o\u1ea1n code gi\u1ed1ng nhau, c\u00e1c method th\u1ef1c hi\u1ec7n ch\u1ee9c n\u0103ng nh\u01b0 nhau, c\u1ed1 g\u1eafng gom ch\u00fang l\u1ea1i 1 c\u00e1ch g\u1ecdn g\u00e0ng v\u00e0 c\u00f3 th\u1ec3 d\u00f9ng l\u1ea1i khi c\u1ea7n.","title":"DRY"},{"location":"OOP/Object-Oriented-Programing/#reference","text":"How to explain object-oriented programming concepts to a 6-year-old The four basics of object-oriented programming Object Oriented Programming With A Real-World Scenario wiki - Constructor wiki - Destructor SOLID: The First 5 Principles of Object Oriented Design wiki - DRY Object-Oriented Programming: Objects, Classes & Methods","title":"Reference"},{"location":"ORM/Overview/","text":"Overview What is an ORM? How does ORM work? ORM Architechtural Pattern What is an ORM? ORM hay O/R mapping l\u00e0 vi\u1ebft t\u1eaft c\u1ee7a Object Relational Mapping . ORM l\u00e0 m\u1ed9t k\u1ef9 thu\u1eadt chuy\u1ec3n \u0111\u1ed5i c\u00e1c d\u1eef li\u1ec7u trong RDBM sang c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng t\u01b0\u01a1ng th\u00edch b\u1eb1ng l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng (OOP). C\u1ee5 th\u1ec3, ORM s\u1ebd \u00e1nh x\u1ea1 c\u00e1c d\u1eef li\u1ec7u trong database sang m\u1ed9t l\u1edbp (class) nh\u1ea5t \u0111\u1ecbnh \u0111\u01b0\u1ee3c declare trong source code. B\u1eb1ng c\u00e1ch \u0111\u00f3 s\u1ebd khi\u1ebfn cho vi\u1ec7c ki\u1ebfn tr\u00fac , qu\u1ea3n l\u00ed v\u00e0 duy tr\u00ec nh\u1eefng v\u1ea5n \u0111\u1ec1 li\u00ean quan \u0111\u1ebfn c\u01a1 s\u1edf d\u1eef li\u1ec7u tr\u1edf n\u00ean \u0111\u01a1n gi\u1ea3n h\u01a1n. ORM framework t\u1ea1o ra m\u1ed9t layer n\u1eb1m \u1edf gi\u1eefa ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh v\u00e0 database, c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c b\u00ean trong c\u00e1c ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng, t\u1eeb \u0111\u00f3 n\u00f3 c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng ch\u00ednh ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh \u0111\u00f3 \u0111\u1ec3 thao t\u00e1c v\u1edbi database m\u00e0 kh\u00f4ng c\u1ea7n vi\u1ebft c\u00e1c c\u00e2u l\u1ec7nh SQL d\u00e0i d\u00f2ng. C\u00e1c object class s\u1ebd t\u01b0\u01a1ng \u1ee9ng v\u1edbi c\u00e1c table trong database, v\u00e0 c\u00e1c object instance s\u1ebd t\u01b0\u01a1ng \u1ee9ng v\u1edbi c\u00e1c record trong c\u00e1c table \u0111\u00f3. Upside Tu\u00e2n th\u1ee7 nguy\u00ean t\u1eafc DRY , vi\u1ebft code theo m\u00f4 h\u00ecnh MVC, t\u1eadp trung h\u00f3a code l\u1ea1i m\u1ed9t ch\u1ed7, vi\u1ec7c ch\u1ec9nh s\u1eeda, maintain, reuse code s\u1ebd d\u1ec5 d\u00e0ng h\u01a1n. R\u1ea5t nhi\u1ec1u th\u1ee9 li\u00ean quan t\u1edbi vi\u1ec7c x\u1eed l\u00ed d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n t\u1ef1 \u0111\u1ed9ng T\u1eadn d\u1ee5ng \u01b0u \u0111i\u1ec3m c\u1ee7a OOP Gi\u1ea3m s\u1ed1 l\u01b0\u1ee3ng d\u00f2ng code v\u00e0 t\u0103ng hi\u1ec7u qu\u1ea3 l\u1eadp tr\u00ecnh ORM cho ph\u00e9p l\u1eadp tr\u00ecnh vi\u00ean c\u00f3 th\u1ec3 t\u1eadp trung v\u00e0o c\u00e1c business logic h\u01a1n l\u00e0 vi\u1ebft c\u00e1c c\u00e2u query ph\u1ee9c t\u1ea1p t\u1edbi database, nh\u1edd \u0111\u00f3 thu g\u1ecdn \u0111\u01b0\u1ee3c code v\u00e0 t\u0103ng hi\u1ec7u qu\u1ea3 l\u00e0m vi\u1ec7c. Query Interface \u0111a d\u1ea1ng, gi\u1ea3i quy\u1ebft \u0111\u01b0\u1ee3c h\u1ea7u h\u1ebft c\u00e1c tr\u01b0\u1eddng h\u1ee3p c\u00f3 th\u1ec3 x\u1ea3y ra t\u01b0\u01a1ng \u1ee9ng v\u1edbi nh\u1eefng c\u00e2u l\u1ec7nh SQL ph\u1ee9c t\u1ea1p. ORM qu\u1ea3n l\u00fd hi\u1ec7u qu\u1ea3 m\u1ed1i li\u00ean h\u1ec7 gi\u1eefa c\u00e1c d\u1eef li\u1ec7u. C\u00e1c object li\u00ean quan \u0111\u1ec1u \u0111\u01b0\u1ee3c load m\u1ed9t c\u00e1ch t\u1ef1 \u0111\u1ed9ng khi m\u1ed9t query \u0111\u01b0\u1ee3c d\u1ecbch sang c\u00e2u l\u1ec7nh SQL t\u01b0\u01a1ng \u1ee9ng. ORM h\u1ed7 tr\u1ee3 x\u1eed l\u00fd \u0111\u1ed3ng th\u1eddi, cho ph\u00e9p nhi\u1ec1u user c\u00f3 th\u1ec3 update m\u1ed9t t\u1eadp h\u1ee3p c\u00e1c data c\u00f9ng m\u1ed9t l\u00fac. Caching Object \u0111\u01b0\u1ee3c cache l\u1ea1i, gi\u1ea3m thi\u1ec3u th\u1eddi gian load tr\u00ean database. Nhi\u1ec1u s\u1ef1 thay \u0111\u1ed5i c\u1ee7a object \u0111\u1ec1u c\u00f3 th\u1ec3 \u0111\u01b0a v\u00e0o chung trong 1 transaction, nh\u1edd \u0111\u00f3 ch\u00fang c\u00f3 th\u1ec3 \u0111\u1ed3ng th\u1eddi \u0111\u01b0\u1ee3c commit hay rollback. Nhi\u1ec1u transaction c\u00f3 th\u1ec3 ch\u1ea1y c\u00f9ng m\u1ed9t l\u00fac nh\u01b0ng m\u1ed7i transaction \u0111\u1ec1u \u0111\u1ed9c l\u1eadp v\u1edbi c\u00e1c transaction kh\u00e1c. Downside V\u1edbi m\u1ed7i framework s\u1ebd c\u00f3 1 th\u01b0 vi\u1ec7n ORM kh\u00e1c nhau, t\u1ed1n th\u1eddi gian \u0111\u1ec3 ti\u1ebfp c\u1eadn. V\u00e0 v\u00ec ch\u00fang l\u00e0 th\u01b0 vi\u1ec7n n\u00ean app s\u1ebd ph\u1ea3i import th\u00eam 1 th\u01b0 vi\u1ec7n n\u1eefa v\u00e0o project. Performance \u1ed5n \u0111\u1ed1i v\u1edbi c\u00e1c truy v\u1ea5n th\u00f4ng th\u01b0\u1eddng. Tuy nhi\u00ean \u0111\u1ed1i v\u1edbi m\u1ed9t s\u1ed1 thao t\u00e1c nh\u01b0 insert h\u00e0ng lo\u1ea1t, s\u1eeda xo\u00e1 ... d\u00f9ng Raw SQL s\u1ebd cho performance t\u1ed1t h\u01a1n. T\u0103ng x\u1eed l\u00fd ORM framework t\u1ea1o ra m\u1ed9t layer gi\u1eefa ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh v\u00e0 database, gi\u00fap gi\u1ea3m s\u1ef1 ph\u1ee9c t\u1ea1p trong l\u1eadp tr\u00ecnh v\u00e0 t\u0103ng t\u1ed1c \u0111\u1ed9 ph\u00e1t tri\u1ec3n. Tuy nhi\u00ean \u0111i\u1ec1u n\u00e0y c\u0169ng l\u00e0m t\u0103ng th\u00eam c\u00e1c x\u1eed l\u00fd trong \u1ee9ng d\u1ee5ng. S\u1eed d\u1ee5ng ORM s\u1ebd ti\u00eau t\u1ed1n nhi\u1ec1u d\u1eef li\u1ec7u v\u00e0 t\u00e0i nguy\u00ean CPU h\u01a1n. How does ORM work? L\u1ea5y v\u00ed d\u1ee5 d\u01b0\u1edbi \u0111\u00e2y \u0111\u1ec3 th\u1ea5y \u0111\u01b0\u1ee3c c\u00e1ch ORM \u00e1nh x\u1ea1 m\u1ed9t object t\u1eeb source code sang database: Gi\u1ea3 s\u1eed m\u00ecnh c\u00f3 hai b\u1ea3ng Customer v\u00e0 BankAccount . M\u1ed9t Customer c\u00f3 th\u1ec3 c\u00f3 nhi\u1ec1u BankAccount nh\u01b0ng m\u1ed9t BankAccount ch\u1ec9 c\u00f3 th\u1ec3 c\u00f3 m\u1ed9t Customer duy nh\u1ea5t (quan h\u1ec7 ManyToOne). N\u1ebfu s\u1eed d\u1ee5ng database, ch\u00fang ta s\u1ebb ph\u1ea3i vi\u1ebft c\u00e1c query \u0111\u1ec3 t\u1ea1o b\u1ea3ng Customer v\u00e0 BankAccount k\u00e8m theo \u0111\u00f3 l\u00e0 c\u00e1c fields c\u1ee7a ch\u00fang. Sau \u0111\u00f3 c\u1ee9 m\u1ed7i l\u1ea7n c\u1ea7n l\u1ea5y ra, truy v\u1ea5n hay t\u00ecm ki\u1ebfm c\u00e1c gi\u00e1 tr\u1ecb c\u1ee7a b\u1ea3ng \u0111\u00f3, ch\u00fang ta s\u1ebd l\u1ea1i c\u1ea7n vi\u1ebft query \u0111\u1ec3 c\u00e1c l\u00e0m vi\u1ec7c \u0111\u00f3, nh\u01b0 \"SELECT ___ FROM ___\" (SQL) ORM s\u1ebd gi\u1ea3i quy\u1ebft c\u00e1c v\u1ea5n \u0111\u1ec1 n\u00e0y b\u1eb1ng vi\u1ec7c thay th\u1ebf vi\u1ec7c vi\u1ebft query th\u00f4ng th\u01b0\u1eddng th\u00e0nh c\u00e1c schema d\u01b0\u1edbi d\u1ea1ng class. \u1ede \u0111\u00e2y m\u00ecnh c\u00f3 Customer v\u1edbi c\u00e1c tr\u01b0\u1eddng nh\u01b0 name, age, address v\u00e0 bankAccounts th\u00ec t\u01b0\u01a1ng \u1ee9ng m\u00ecnh s\u1ebd c\u00f3 l\u1edbp nh\u01b0 sau: V\u1edbi vi\u1ec7c th\u1ec3 hi\u1ec7n c\u00e1c entities trong Database th\u00e0nh t\u1eebng class nh\u01b0 th\u1ebf trong code, c\u00e1c class n\u00e0y c\u0169ng s\u1ebd c\u00f3 m\u1ed9t s\u1ed1 method d\u00f9ng \u0111\u1ec3 tr\u1ea3 v\u1ec1 d\u1eef li\u1ec7u hay t\u00ecm ki\u1ebfm d\u1eef li\u1ec7u. V\u00ed d\u1ee5, query l\u1ea5y m\u1ed9t s\u1ed1 field c\u1ee7a Customer theo id: let customer = await Customer.findById([10]); ORM Architechtural Pattern ORM c\u00f3 m\u1ed9t s\u1ed1 m\u1eabu ki\u1ebfn tr\u00fac - architectural pattern ch\u1ee7 \u0111\u1ea1o \u0111\u01b0\u1ee3c \u00e1p d\u1ee5ng \u0111\u1ec3 tri\u1ec3n khai v\u00e0o qu\u00e1 tr\u00ecnh ph\u00e1t tri\u1ec3n ORM. Theo Martin Fowler trong quy\u1ec3n s\u00e1ch Patterns of Enterprise Application Architecture (2003), \u0111\u1ec1 xu\u1ea5t \u0111\u1ebfn hai pattern ch\u1ee7 \u0111\u1ea1o v\u00e0 c\u1ed1t l\u00f5i \u0111\u1ec3 t\u1ea1o th\u00e0nh ORM l\u00e0 Active Record v\u00e0 Data Mapper : 1. Active Record Pattern - Trong Active record pattern c\u00e1c row trong relational database \u0111\u01b0\u1ee3c map 1-1 th\u00e0nh c\u00e1c object. C\u1ee5 th\u1ec3, k\u1ef9 thu\u1eadt n\u00e0y s\u1ebd s\u1eed d\u1ee5ng object wraps m\u1ed9t row trong table/view, \u0111\u00f3ng g\u00f3i quy\u1ec1n truy c\u1eadp c\u01a1 s\u1edf d\u1eef li\u1ec7u v\u00e0 c\u1ea3 logic tr\u00ean d\u1eef li\u1ec7u \u0111\u00f3 v\u00e0 \u0111\u1ecbnh ngh\u0129a m\u1ed9t object bao g\u1ed3m c\u1ea3 data v\u00e0 behavior c\u1ee7a d\u1eef li\u1ec7u \u0111\u00f3. Active Record s\u1eed d\u1ee5ng c\u00e1ch ti\u1ebfp c\u1eadn r\u00f5 r\u00e0ng, minh b\u1ea1ch, \u0111\u01b0a logic thao t\u00e1c d\u1eef li\u1ec7u v\u00e0o object domain, nh\u1edd \u0111\u00f3 c\u00e1c \u00f4ng dev d\u1ec5 d\u00e0ng \u0111\u1ecdc hi\u1ec3u \u0111\u01b0\u1ee3c logic, behavior c\u1ee7a object. M\u1ed9t s\u1ed1 ORM theo Active Record pattern ph\u1ed5 bi\u1ebfn nh\u01b0: ActiveRecord , TypeORM , Sequelize , Eloquent , Prisma . 2. Data Mapper Pattern Data Mapper l\u00e0 1 layer mapper \u0111\u01b0a d\u1eef li\u1ec7u qua l\u1ea1i gi\u1eefa object v\u00e0 Database m\u00e0 v\u1eabn gi\u1eef \u0111\u01b0\u1ee3c t\u00ednh \u0111\u1ed9c l\u1eadp gi\u1eefa ch\u00fang. T\u1ee9c l\u00e0 c\u00f3 layer gi\u1eef cho d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c l\u01b0u trong b\u1ed9 nh\u1edb m\u00e1y v\u00e0 trong c\u01a1 s\u1edf d\u1eef li\u1ec7u \u0111\u1ed9c l\u1eadp v\u1edbi nhau. M\u1ed9t s\u1ed1 ORM theo Data Mapper Pattern: Hibernate , SQLALchemy , MikroORM , Doctrine 2 Reference Understanding Object-Relational Mapping: Pros, Cons, and Types Object-Relational Mapping (ORM)","title":"Overview"},{"location":"ORM/Overview/#overview","text":"What is an ORM? How does ORM work? ORM Architechtural Pattern","title":"Overview"},{"location":"ORM/Overview/#what-is-an-orm","text":"ORM hay O/R mapping l\u00e0 vi\u1ebft t\u1eaft c\u1ee7a Object Relational Mapping . ORM l\u00e0 m\u1ed9t k\u1ef9 thu\u1eadt chuy\u1ec3n \u0111\u1ed5i c\u00e1c d\u1eef li\u1ec7u trong RDBM sang c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng t\u01b0\u01a1ng th\u00edch b\u1eb1ng l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng (OOP). C\u1ee5 th\u1ec3, ORM s\u1ebd \u00e1nh x\u1ea1 c\u00e1c d\u1eef li\u1ec7u trong database sang m\u1ed9t l\u1edbp (class) nh\u1ea5t \u0111\u1ecbnh \u0111\u01b0\u1ee3c declare trong source code. B\u1eb1ng c\u00e1ch \u0111\u00f3 s\u1ebd khi\u1ebfn cho vi\u1ec7c ki\u1ebfn tr\u00fac , qu\u1ea3n l\u00ed v\u00e0 duy tr\u00ec nh\u1eefng v\u1ea5n \u0111\u1ec1 li\u00ean quan \u0111\u1ebfn c\u01a1 s\u1edf d\u1eef li\u1ec7u tr\u1edf n\u00ean \u0111\u01a1n gi\u1ea3n h\u01a1n. ORM framework t\u1ea1o ra m\u1ed9t layer n\u1eb1m \u1edf gi\u1eefa ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh v\u00e0 database, c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c b\u00ean trong c\u00e1c ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng, t\u1eeb \u0111\u00f3 n\u00f3 c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng ch\u00ednh ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh \u0111\u00f3 \u0111\u1ec3 thao t\u00e1c v\u1edbi database m\u00e0 kh\u00f4ng c\u1ea7n vi\u1ebft c\u00e1c c\u00e2u l\u1ec7nh SQL d\u00e0i d\u00f2ng. C\u00e1c object class s\u1ebd t\u01b0\u01a1ng \u1ee9ng v\u1edbi c\u00e1c table trong database, v\u00e0 c\u00e1c object instance s\u1ebd t\u01b0\u01a1ng \u1ee9ng v\u1edbi c\u00e1c record trong c\u00e1c table \u0111\u00f3. Upside Tu\u00e2n th\u1ee7 nguy\u00ean t\u1eafc DRY , vi\u1ebft code theo m\u00f4 h\u00ecnh MVC, t\u1eadp trung h\u00f3a code l\u1ea1i m\u1ed9t ch\u1ed7, vi\u1ec7c ch\u1ec9nh s\u1eeda, maintain, reuse code s\u1ebd d\u1ec5 d\u00e0ng h\u01a1n. R\u1ea5t nhi\u1ec1u th\u1ee9 li\u00ean quan t\u1edbi vi\u1ec7c x\u1eed l\u00ed d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n t\u1ef1 \u0111\u1ed9ng T\u1eadn d\u1ee5ng \u01b0u \u0111i\u1ec3m c\u1ee7a OOP Gi\u1ea3m s\u1ed1 l\u01b0\u1ee3ng d\u00f2ng code v\u00e0 t\u0103ng hi\u1ec7u qu\u1ea3 l\u1eadp tr\u00ecnh ORM cho ph\u00e9p l\u1eadp tr\u00ecnh vi\u00ean c\u00f3 th\u1ec3 t\u1eadp trung v\u00e0o c\u00e1c business logic h\u01a1n l\u00e0 vi\u1ebft c\u00e1c c\u00e2u query ph\u1ee9c t\u1ea1p t\u1edbi database, nh\u1edd \u0111\u00f3 thu g\u1ecdn \u0111\u01b0\u1ee3c code v\u00e0 t\u0103ng hi\u1ec7u qu\u1ea3 l\u00e0m vi\u1ec7c. Query Interface \u0111a d\u1ea1ng, gi\u1ea3i quy\u1ebft \u0111\u01b0\u1ee3c h\u1ea7u h\u1ebft c\u00e1c tr\u01b0\u1eddng h\u1ee3p c\u00f3 th\u1ec3 x\u1ea3y ra t\u01b0\u01a1ng \u1ee9ng v\u1edbi nh\u1eefng c\u00e2u l\u1ec7nh SQL ph\u1ee9c t\u1ea1p. ORM qu\u1ea3n l\u00fd hi\u1ec7u qu\u1ea3 m\u1ed1i li\u00ean h\u1ec7 gi\u1eefa c\u00e1c d\u1eef li\u1ec7u. C\u00e1c object li\u00ean quan \u0111\u1ec1u \u0111\u01b0\u1ee3c load m\u1ed9t c\u00e1ch t\u1ef1 \u0111\u1ed9ng khi m\u1ed9t query \u0111\u01b0\u1ee3c d\u1ecbch sang c\u00e2u l\u1ec7nh SQL t\u01b0\u01a1ng \u1ee9ng. ORM h\u1ed7 tr\u1ee3 x\u1eed l\u00fd \u0111\u1ed3ng th\u1eddi, cho ph\u00e9p nhi\u1ec1u user c\u00f3 th\u1ec3 update m\u1ed9t t\u1eadp h\u1ee3p c\u00e1c data c\u00f9ng m\u1ed9t l\u00fac. Caching Object \u0111\u01b0\u1ee3c cache l\u1ea1i, gi\u1ea3m thi\u1ec3u th\u1eddi gian load tr\u00ean database. Nhi\u1ec1u s\u1ef1 thay \u0111\u1ed5i c\u1ee7a object \u0111\u1ec1u c\u00f3 th\u1ec3 \u0111\u01b0a v\u00e0o chung trong 1 transaction, nh\u1edd \u0111\u00f3 ch\u00fang c\u00f3 th\u1ec3 \u0111\u1ed3ng th\u1eddi \u0111\u01b0\u1ee3c commit hay rollback. Nhi\u1ec1u transaction c\u00f3 th\u1ec3 ch\u1ea1y c\u00f9ng m\u1ed9t l\u00fac nh\u01b0ng m\u1ed7i transaction \u0111\u1ec1u \u0111\u1ed9c l\u1eadp v\u1edbi c\u00e1c transaction kh\u00e1c. Downside V\u1edbi m\u1ed7i framework s\u1ebd c\u00f3 1 th\u01b0 vi\u1ec7n ORM kh\u00e1c nhau, t\u1ed1n th\u1eddi gian \u0111\u1ec3 ti\u1ebfp c\u1eadn. V\u00e0 v\u00ec ch\u00fang l\u00e0 th\u01b0 vi\u1ec7n n\u00ean app s\u1ebd ph\u1ea3i import th\u00eam 1 th\u01b0 vi\u1ec7n n\u1eefa v\u00e0o project. Performance \u1ed5n \u0111\u1ed1i v\u1edbi c\u00e1c truy v\u1ea5n th\u00f4ng th\u01b0\u1eddng. Tuy nhi\u00ean \u0111\u1ed1i v\u1edbi m\u1ed9t s\u1ed1 thao t\u00e1c nh\u01b0 insert h\u00e0ng lo\u1ea1t, s\u1eeda xo\u00e1 ... d\u00f9ng Raw SQL s\u1ebd cho performance t\u1ed1t h\u01a1n. T\u0103ng x\u1eed l\u00fd ORM framework t\u1ea1o ra m\u1ed9t layer gi\u1eefa ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh v\u00e0 database, gi\u00fap gi\u1ea3m s\u1ef1 ph\u1ee9c t\u1ea1p trong l\u1eadp tr\u00ecnh v\u00e0 t\u0103ng t\u1ed1c \u0111\u1ed9 ph\u00e1t tri\u1ec3n. Tuy nhi\u00ean \u0111i\u1ec1u n\u00e0y c\u0169ng l\u00e0m t\u0103ng th\u00eam c\u00e1c x\u1eed l\u00fd trong \u1ee9ng d\u1ee5ng. S\u1eed d\u1ee5ng ORM s\u1ebd ti\u00eau t\u1ed1n nhi\u1ec1u d\u1eef li\u1ec7u v\u00e0 t\u00e0i nguy\u00ean CPU h\u01a1n.","title":"What is an ORM?"},{"location":"ORM/Overview/#how-does-orm-work","text":"L\u1ea5y v\u00ed d\u1ee5 d\u01b0\u1edbi \u0111\u00e2y \u0111\u1ec3 th\u1ea5y \u0111\u01b0\u1ee3c c\u00e1ch ORM \u00e1nh x\u1ea1 m\u1ed9t object t\u1eeb source code sang database: Gi\u1ea3 s\u1eed m\u00ecnh c\u00f3 hai b\u1ea3ng Customer v\u00e0 BankAccount . M\u1ed9t Customer c\u00f3 th\u1ec3 c\u00f3 nhi\u1ec1u BankAccount nh\u01b0ng m\u1ed9t BankAccount ch\u1ec9 c\u00f3 th\u1ec3 c\u00f3 m\u1ed9t Customer duy nh\u1ea5t (quan h\u1ec7 ManyToOne). N\u1ebfu s\u1eed d\u1ee5ng database, ch\u00fang ta s\u1ebb ph\u1ea3i vi\u1ebft c\u00e1c query \u0111\u1ec3 t\u1ea1o b\u1ea3ng Customer v\u00e0 BankAccount k\u00e8m theo \u0111\u00f3 l\u00e0 c\u00e1c fields c\u1ee7a ch\u00fang. Sau \u0111\u00f3 c\u1ee9 m\u1ed7i l\u1ea7n c\u1ea7n l\u1ea5y ra, truy v\u1ea5n hay t\u00ecm ki\u1ebfm c\u00e1c gi\u00e1 tr\u1ecb c\u1ee7a b\u1ea3ng \u0111\u00f3, ch\u00fang ta s\u1ebd l\u1ea1i c\u1ea7n vi\u1ebft query \u0111\u1ec3 c\u00e1c l\u00e0m vi\u1ec7c \u0111\u00f3, nh\u01b0 \"SELECT ___ FROM ___\" (SQL) ORM s\u1ebd gi\u1ea3i quy\u1ebft c\u00e1c v\u1ea5n \u0111\u1ec1 n\u00e0y b\u1eb1ng vi\u1ec7c thay th\u1ebf vi\u1ec7c vi\u1ebft query th\u00f4ng th\u01b0\u1eddng th\u00e0nh c\u00e1c schema d\u01b0\u1edbi d\u1ea1ng class. \u1ede \u0111\u00e2y m\u00ecnh c\u00f3 Customer v\u1edbi c\u00e1c tr\u01b0\u1eddng nh\u01b0 name, age, address v\u00e0 bankAccounts th\u00ec t\u01b0\u01a1ng \u1ee9ng m\u00ecnh s\u1ebd c\u00f3 l\u1edbp nh\u01b0 sau: V\u1edbi vi\u1ec7c th\u1ec3 hi\u1ec7n c\u00e1c entities trong Database th\u00e0nh t\u1eebng class nh\u01b0 th\u1ebf trong code, c\u00e1c class n\u00e0y c\u0169ng s\u1ebd c\u00f3 m\u1ed9t s\u1ed1 method d\u00f9ng \u0111\u1ec3 tr\u1ea3 v\u1ec1 d\u1eef li\u1ec7u hay t\u00ecm ki\u1ebfm d\u1eef li\u1ec7u. V\u00ed d\u1ee5, query l\u1ea5y m\u1ed9t s\u1ed1 field c\u1ee7a Customer theo id: let customer = await Customer.findById([10]);","title":"How does ORM work?"},{"location":"ORM/Overview/#orm-architechtural-pattern","text":"ORM c\u00f3 m\u1ed9t s\u1ed1 m\u1eabu ki\u1ebfn tr\u00fac - architectural pattern ch\u1ee7 \u0111\u1ea1o \u0111\u01b0\u1ee3c \u00e1p d\u1ee5ng \u0111\u1ec3 tri\u1ec3n khai v\u00e0o qu\u00e1 tr\u00ecnh ph\u00e1t tri\u1ec3n ORM. Theo Martin Fowler trong quy\u1ec3n s\u00e1ch Patterns of Enterprise Application Architecture (2003), \u0111\u1ec1 xu\u1ea5t \u0111\u1ebfn hai pattern ch\u1ee7 \u0111\u1ea1o v\u00e0 c\u1ed1t l\u00f5i \u0111\u1ec3 t\u1ea1o th\u00e0nh ORM l\u00e0 Active Record v\u00e0 Data Mapper : 1. Active Record Pattern - Trong Active record pattern c\u00e1c row trong relational database \u0111\u01b0\u1ee3c map 1-1 th\u00e0nh c\u00e1c object. C\u1ee5 th\u1ec3, k\u1ef9 thu\u1eadt n\u00e0y s\u1ebd s\u1eed d\u1ee5ng object wraps m\u1ed9t row trong table/view, \u0111\u00f3ng g\u00f3i quy\u1ec1n truy c\u1eadp c\u01a1 s\u1edf d\u1eef li\u1ec7u v\u00e0 c\u1ea3 logic tr\u00ean d\u1eef li\u1ec7u \u0111\u00f3 v\u00e0 \u0111\u1ecbnh ngh\u0129a m\u1ed9t object bao g\u1ed3m c\u1ea3 data v\u00e0 behavior c\u1ee7a d\u1eef li\u1ec7u \u0111\u00f3. Active Record s\u1eed d\u1ee5ng c\u00e1ch ti\u1ebfp c\u1eadn r\u00f5 r\u00e0ng, minh b\u1ea1ch, \u0111\u01b0a logic thao t\u00e1c d\u1eef li\u1ec7u v\u00e0o object domain, nh\u1edd \u0111\u00f3 c\u00e1c \u00f4ng dev d\u1ec5 d\u00e0ng \u0111\u1ecdc hi\u1ec3u \u0111\u01b0\u1ee3c logic, behavior c\u1ee7a object. M\u1ed9t s\u1ed1 ORM theo Active Record pattern ph\u1ed5 bi\u1ebfn nh\u01b0: ActiveRecord , TypeORM , Sequelize , Eloquent , Prisma . 2. Data Mapper Pattern Data Mapper l\u00e0 1 layer mapper \u0111\u01b0a d\u1eef li\u1ec7u qua l\u1ea1i gi\u1eefa object v\u00e0 Database m\u00e0 v\u1eabn gi\u1eef \u0111\u01b0\u1ee3c t\u00ednh \u0111\u1ed9c l\u1eadp gi\u1eefa ch\u00fang. T\u1ee9c l\u00e0 c\u00f3 layer gi\u1eef cho d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c l\u01b0u trong b\u1ed9 nh\u1edb m\u00e1y v\u00e0 trong c\u01a1 s\u1edf d\u1eef li\u1ec7u \u0111\u1ed9c l\u1eadp v\u1edbi nhau. M\u1ed9t s\u1ed1 ORM theo Data Mapper Pattern: Hibernate , SQLALchemy , MikroORM , Doctrine 2","title":"ORM Architechtural Pattern"},{"location":"ORM/Overview/#reference","text":"Understanding Object-Relational Mapping: Pros, Cons, and Types Object-Relational Mapping (ORM)","title":"Reference"},{"location":"Package-Management/composer/","text":"Composer Install/remove package Package version constrains & composer.lock Auto loading Overview Composer l\u00e0 c\u00f4ng c\u1ee5 \u0111\u1ec3 qu\u1ea3n l\u00fd package hay library c\u1ee7a PHP. V\u1ec1 c\u01a1 c\u1ea3n, Composer s\u1ebd kh\u00f4ng c\u00e0i package \u1edf global v\u00e0 g\u1ecdi l\u00e0 Dependency \u2192 Composer l\u00e0 c\u00f4ng c\u1ee5 qu\u1ea3n l\u00fd c\u00e1c Dependency v\u00ec th\u1ebf n\u00f3 c\u00f2n \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 Dependency Manager . T\u01b0\u01a1ng t\u1ef1 nh\u01b0 npm hay bundle , composer ra \u0111\u1eddi \u0111\u1ec3 gi\u1ea3i quy\u1ebft c\u00e1c v\u1ea5n \u0111\u1ec1 kh\u00f3 kh\u0103n nh\u01b0 khi dung l\u01b0\u1ee3ng project l\u1edbn, vi\u1ec7c c\u1eadp nh\u1eadt c\u0169ng nh\u01b0 ch\u00e8n c\u00e1c package hay library v\u00e0o project r\u1ea5t ph\u1ee9c t\u1ea1p v\u00e0 phi\u1ec1n ph\u1ee9c. V\u1edbi composer , ch\u1ec9 c\u1ea7n khai b\u00e1o name v\u00e0 version c\u1ee7a c\u00e1c package hay library, composer s\u1ebd t\u1ef1 \u0111\u1ed9ng t\u00ecm v\u00e0 t\u1ea3i c\u00e1c package hay library m\u00e0 m\u00ecnh c\u1ea7n v\u1ec1 project. Composer qu\u1ea3n l\u00fd dependencies d\u1ef1a tr\u00ean t\u1eebng Project PHP ri\u00eang bi\u1ec7t, n\u00f3 c\u00e0i \u0111\u1eb7t c\u00e1c dependencies n\u00e0y v\u00e0o m\u1ed9t folder vendor trong d\u1ef1 \u00e1n (m\u1ed7i d\u1ef1 \u00e1n c\u00f3 m\u1ed9t th\u01b0 m\u1ee5c vendor ri\u00eang). Composer t\u1ef1 \u0111\u1ed9ng sinh ra file vendor/autoload.php , t\u1eeb file n\u00e0y gi\u00fap ta n\u1ea1p c\u00e1c dependencies \u0111\u00e3 c\u00e0i \u0111\u1eb7t v\u00e0o project. composer.json : L\u00e0 n\u01a1i khai b\u00e1o dependencies d\u00f9ng trong project, nh\u1eefng th\u00f4ng tin v\u1ec1 name, version, licenses, source \u2026 \u0111\u01b0\u1ee3c declare theo JSON format. { \"name\": \"wataridori/bphalcon\", \"type\": \"project\", \"description\": \"A small library which implement some features to phalcon\", \"license\": \"GPL-3.0\", \"authors\": [ { \"name\": \"Harry Hoang\", \"email\": \"harry.hoang@contemi.com\" } ], \"require\": { \"php\": \">=5.4\" } } composer.lock : L\u00e0 n\u01a1i l\u01b0u tr\u1eef th\u00f4ng tin v\u1ec1 dependencies \u0111\u00e3 \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t. composer.json vs. composer.lock : V\u00ed d\u1ee5 khi ta d\u00f9ng l\u1ec7nh install \u0111\u1ec3 c\u00e0i \u0111\u1eb7t package th\u00ec composer s\u1ebd \u0111\u1ecdc th\u00f4ng tin v\u1ec1 dependencies \u1edf trong file composer.json , sau \u0111\u00f3 c\u00e0i \u0111\u1eb7t v\u00e0 t\u1ea1o ra file composer.lock \u0111\u1ec3 l\u01b0u th\u00f4ng tin c\u1ee5 th\u1ec3 v\u1ec1 nh\u1eefng dependencies \u0111\u00f3. Gi\u1ea3 s\u1eed ta commit c\u1ea3 2 file composer.json v\u00e0 composer.lock v\u00e0o version control c\u1ee7a m\u00ecnh, r\u1ed3i b\u1ea5t c\u1ee9 \u00f4ng dev n\u00e0o t\u1ea3i code v\u1ec1 th\u00ec d\u00f9 c\u00f3 c\u00e0i \u0111\u1eb7t v\u00e0o th\u1eddi \u0111i\u1ec3m kh\u00e1c nhau \u0111i ch\u0103ng n\u1eefa th\u00ec v\u1eabn s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c nh\u1eefng dependencies v\u1edbi nh\u1eefng version gi\u1ed1ng nhau, do n\u00f3 \u0111\u01b0\u1ee3c \u0111\u1ecdc t\u1eeb file composer.lock , ch\u1ee9 kh\u00f4ng ph\u1ea3i file composer.json . Install/remove package Danh s\u00e1ch c\u00e1c package c\u1ee7a PHP Install a package require composer require <package>[:<tag>] C\u00e2u l\u1ec7nh tr\u00ean s\u1ebd th\u00eam m\u1edbi m\u1ed9t library hay package v\u00e0 ghi v\u00e0o file composer.json t\u1ea1i current directory. Options: --dev : Th\u00eam packages v\u00e0o require-dev , d\u00f9ng package n\u00e0y \u0111\u1ec3 dev. xem full t\u1ea1i V\u00ed d\u1ee5, install th\u01b0 vi\u1ec7n monolog/monolog phi\u00ean b\u1ea3n m\u1edbi nh\u1ea5t (th\u01b0 vi\u1ec7n l\u01b0u log th\u00f4ng d\u1ee5ng cho php): composer require monolog/monolog Sau l\u1ec7nh n\u00e0y, Composer s\u1ebd t\u1ea3i t\u1ea5t c\u1ea3 c\u00e1c dependencies \u0111\u1ec3 d\u00f9ng \u0111\u01b0\u1ee3c th\u01b0 vi\u1ec7n monolog/monolog v\u00e0o d\u1ef1 \u00e1n, sau \u0111\u00f3 n\u00f3 l\u01b0u t\u1ea1i th\u01b0 m\u1ee5c vendor , \u0111\u1ed3ng th\u1eddi c\u0169ng c\u00f3 lu\u00f4n file vendor/autoload.php M\u1edf l\u1ea1i file composer.json ta th\u1ea5y \u0111\u00e3 c\u00f3 th\u00eam \u0111o\u1ea1n code: { \"require\": { \"monolog/monolog\": \"^1.24\" } } install , update v\u00e0 reinstall C\u00f3 hai c\u00e2u l\u1ec7nh d\u00f9ng \u0111\u1ec3 t\u1ea3i, c\u1eadp nh\u1eadt package d\u1ef1a tr\u00ean 2 file package.json v\u00e0 package.lock : composer install T\u01b0\u01a1ng t\u1ef1 nh\u01b0 require , install d\u00f9ng \u0111\u1ec3 t\u1ea3i package, nh\u01b0ng kh\u00e1c l\u00e0 package \u0111\u00f3 ph\u1ea3i \u0111\u01b0\u1ee3c declare b\u1eb1ng 1 json object trong composer.json . Khi ch\u1ea1y l\u1ec7nh instal , composer ti\u1ebfn h\u00e0nh \u0111\u1ecdc file package.lock v\u00e0 composer.json , t\u1ea3i c\u00e1c dependencies v\u00e0 l\u01b0u v\u00e0o vendor . composer update D\u00f9ng \u0111\u1ec3 t\u1ea3i phi\u00ean b\u1ea3n m\u1edbi nh\u1ea5t c\u1ee7a c\u00e1c dependencies v\u00e0 c\u1eadp nh\u1eadt t\u1ec7p composer.lock . N\u00f3 s\u1ebd th\u00eam ho\u1eb7c x\u00f3a c\u00e1c dependencies d\u1ef1a tr\u00ean composer.json , ignored composer.lock . composer reinstall C\u01a1 ch\u1ebf install t\u01b0\u01a1ng t\u1ef1 nh\u01b0 install nh\u01b0ng tr\u01b0\u1edbc ti\u00ean n\u00f3 ti\u1ebfn h\u00e0nh looks up installed packages by name trong composer.json , x\u00f3a h\u1ebft packages c\u0169 r\u1ed3i m\u1edbi install. Remove a package Ng\u01b0\u1ee3c l\u1ea1i v\u1edbi require, command n\u00e0y th\u1ef1c hi\u1ec7n delete package d\u1ef1a tr\u00ean composer.json composer remove <package> C\u00f3 options l\u00e0 --dev , ch\u1ec9 remove c\u00e1c package \u0111\u01b0\u1ee3c khai b\u00e1o trong require-dev Ngo\u00e0i ra, c\u00e1ch 2 \u0111\u1ec3 remove packages, m\u1edf file composer.json , x\u00f3a t\u00ean th\u01b0 vi\u1ec7n \u0111\u00f3 trong ph\u1ea7n require, sau \u0111\u00f3 ch\u1ea1y l\u1ec7nh composer update xem th\u00eam c\u00e1c Command-line interface/Commands c\u1ee7a Composer Package version constrains & composer.lock Package version constrains l\u00e0 nh\u1eefng r\u00e0ng bu\u1ed9c v\u1ec1 phi\u00ean b\u1ea3n c\u1ee7a packages theo \u0111\u00fang ngh\u0129a \u0111en. Composer Versions Constrains tu\u00e2n theo Version Control System (VCS) , t\u01b0\u01a1ng t\u1ef1 nh\u01b0 Git, c\u0169ng c\u00f3 c\u00e1c kh\u00e1i ni\u1ec7m nh\u01b0: Tags: v1.0.1 Branches: v1.x-dev Stabilities: v1.1-BETA Version Range: s\u1eed d\u1ee5ng c\u00e1c operators > , >= , < , <= , != >=1.0 >=1.0 <2.0 >=1.0 <1.1 || >=1.2 Hyphenated Version Range ( - ): Thay v\u00ec d\u00f9ng >=1.0.0 <=2.1.0 , c\u00f3 th\u1ec3 thay b\u1eb1ng 1.0.0 - 2.1.0 cho g\u1ecdn Wildcard Version Range ( .* ): Thay v\u00ec d\u00f9ng >=1.0.0 <1.1.0 , c\u00f3 th\u1ec3 thay b\u1eb1ng 1.0.* cho g\u1ecdn Tilde Version Range ( ~ ): ~1.2 t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi >=1.2 <2.0.0 , hay ~1.2.3 t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi >=1.2.3 <1.3.0 Caret Version Range ( ^ ): ^1.2.3 t\u01b0\u01a1ng \u0111\u01b0\u1edbng v\u1edbi >=1.2.3 <2.0.0 , hay ^0.3 t\u01b0\u01a1ng \u0111\u01b0\u1edbng v\u1edbi >=0.3.0 <0.4.0 . Stability Constraints: Stability d\u00f9ng trong c\u00e1c thay \u0111\u1ed5i l\u1edbn c\u1ee7a version, gi\u00fap t\u0103ng t\u00ednh r\u00f5 r\u00e0ng, minh b\u1ea1ch. N\u1ebfu kh\u00f4ng x\u00e1c \u0111\u1ecbnh r\u00f5 Stability trong version, Composer s\u1ebd th\u00eam c\u00e1c h\u1eadu t\u1ed1 sau version m\u1ed9t c\u00e1c Internally , th\u01b0\u1eddng m\u1eb7c \u0111\u1ecbnh th\u00e0nh -dev ho\u1eb7c -stable . V\u00ed d\u1ee5: Constraint Internally 1.2.3 =1.2.3.0-stable >1.2 >1.2.0.0-stable >=1.2 >=1.2.0.0-dev >=1.2-stable >=1.2.0.0-stable <1.3 <1.3.0.0-dev <=1.3 <=1.3.0.0-stable 1 - 2 >=1.0.0.0-dev <3.0.0.0-dev ~1.3 >=1.3.0.0-dev <2.0.0.0-dev 1.4.* >=1.4.0.0-dev <1.5.0.0-dev Summary \"require\" : { \"vendor/package\" : \"1.3.2\" , // exac tl y 1.3.2 // > , < , >= , <= | speci f y upper / lower bou n ds \"vendor/package\" : \">=1.3.2\" , // a n y t hi n g above or equal t o 1.3.2 \"vendor/package\" : \"<1.3.2\" , // a n y t hi n g below 1.3.2 // * | wildcard \"vendor/package\" : \"1.3.*\" , // >= 1.3.0 < 1.4.0 // ~ | allows las t digi t speci f ied t o go up \"vendor/package\" : \"~1.3.2\" , // >= 1.3.2 < 1.4.0 \"vendor/package\" : \"~1.3\" , // >= 1.3.0 < 2.0.0 // ^ | does n ' t allow breaki n g cha n ges (major versio n f ixed - f ollowi n g semver) \"vendor/package\" : \"^1.3.2\" , // >= 1.3.2 < 2.0.0 \"vendor/package\" : \"^0.3.2\" , // >= 0.3.2 < 0.4.0 // excep t i f major versio n is 0 } Auto loading PSR PSR - PHP Standards Recommendations , n\u00f3 l\u00e0 ti\u00eau chu\u1ea9n \u0111\u01b0\u1ee3c khuy\u1ebfn ngh\u1ecb \u00e1p d\u1ee5ng khi l\u1eadp tr\u00ecnh PHP, n\u00f3 v\u1eabn \u0111ang ho\u00e0n ch\u1ec9nh, trong \u0111\u00f3 kh\u00e1 nhi\u1ec1u ti\u00eau chu\u1ea9n con \u0111\u00e3 ho\u00e0n ch\u1ec9nh v\u00e0 \u0111\u01b0\u1ee3c c\u00e1c l\u1eadp tr\u00ecnh vi\u00ean, t\u1ed5 ch\u1ee9c ch\u1ea5p nh\u1eadn s\u1eed d\u1ee5ng. S\u1eed d\u1ee5ng PSR \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o th\u1ed1ng nh\u1ea5t v\u1ec1 c\u00e1ch th\u1ee9c vi\u1ebft code, t\u1ed5 ch\u1ee9c \u1ee9ng d\u1ee5ng ... nh\u1eb1m d\u1ec5 qu\u1ea3n l\u00fd, \u0111\u1ecdc, v\u00e0 s\u1eed d\u1ee5ng l\u1ea1i gi\u1eefa c\u00e1c Framework ... \u0111\u1ed3ng th\u1eddi \u0111\u1ea3m b\u1ea3o c\u00f3 m\u1ed9t giao di\u1ec7n l\u1eadp tr\u00ecnh chung gi\u1eefa c\u00e1c \u1ee9ng d\u1ee5ng,c\u00e1c Framework, khi n\u00f3 c\u00f9ng th\u1ef1c hi\u1ec7n m\u1ed9t ch\u1ee9c n\u0103ng. Danh s\u00e1ch c\u00e1c PSR t\u1ea1i php-fig.org . \u0110\u1ebfn nay c\u00f3 18 ti\u00eau chu\u1ea9n t\u1eeb PSR-0 \u0111\u1ebfn PSR-17 , trong \u0111\u00f3 c\u00f3 c\u00e1c ti\u00eau chu\u1ea9n \u0111\u00e3 \u0111\u01b0\u1ee3c ph\u00ea duy\u1ec7t c\u00f3 c\u00e1c ti\u00eau chu\u1ea9n \u0111ang so\u1ea1n th\u1ea3o v\u00e0 c\u00f3 ti\u00eau chu\u1ea9n \u0111\u00e3 l\u1ed7i th\u1eddi (v\u00ed d\u1ee5 PSR-0 \u0111\u00e3 l\u1ed7i th\u1eddi, b\u1ecb thay b\u1edfi PSR-4). C\u00e1c ti\u00eau chu\u1ea9n PSR should know: PSR-1 - Basic Coding Standard: Ti\u00eau chu\u1ea9n v\u1ec1 vi\u1ebft code PSR-2 - Coding Style Guide: Ti\u00eau chu\u1ea9n v\u1ec1 tr\u00ecnh b\u00e0y code PSR-3 - Logger Interface: Tr\u00ecnh b\u00e0y v\u1ec1 c\u00e1c th\u00e0nh ph\u1ea7n c\u1ea7n ph\u1ea3i c\u00f3 c\u1ee7a m\u1ed9t Logger PSR-4 - Autoloading Standard: Tr\u00ecnh b\u00e0y v\u1ec1 c\u00e1ch ch\u1ec9 \u0111\u1ecbnh \u1ee9ng d\u1ee5ng t\u1ef1 \u0111\u1ed9ng n\u1ea1p (gi\u1ed1ng include, require) c\u00e1c file php, l\u1edbp, h\u00e0m khi n\u00f3 c\u1ea7n d\u00f9ng \u0111\u1ebfn. PSR-6 - Caching Interface: Ti\u00eau chu\u1ea9n c\u1ea7n c\u00f3 c\u1ee7a m\u1ed9t b\u1ed9 \u1ee9ng d\u1ee5ng caching PSR-7 - HTTP Message Interface: Ti\u00eau chu\u1ea9n v\u1ec1 interface c\u1ee7a m\u1ed9t \u1ee9ng d\u1ee5ng s\u1eed HTTP Message - request v\u00e0 respone PSR-4 Autoloader Tr\u01b0\u1edbc \u0111\u00e2y trong PHP vi\u1ec7c n\u1ea1p c\u00e1c file th\u01b0 vi\u1ec7n, m\u00e3 d\u00f9ng l\u1ea1i v\u00e0o m\u1ed9t file PHP kh\u00e1c th\u01b0\u1eddng d\u00f9ng c\u00e1c l\u1ec7nh include v\u00e0 require. \u0110i\u1ec1u n\u00e0y g\u00e2y m\u1ea5t th\u1eddi gian, r\u1eafc r\u1ed1i, d\u00e0i code. <?php include __DIR__ . '/classes/MyClass.php' ; include __DIR__ . '/classes/Foo.php' ; include __DIR__ . '/classes/Bar.php' ; // ... $obj = new MyClass ; $foo = new Foo ; $bar = new Bar ; // ... ?> Ti\u1ebfp theo t\u1eeb PHP5 c\u00f3 c\u00e1c h\u00e0m tr\u1ee3 gi\u00fap t\u1ef1 \u0111\u1ed9ng h\u00f3a vi\u1ec7c g\u1ecdi th\u01b0 vi\u1ec7n b\u1eb1ng c\u00e1c h\u00e0m nh\u01b0: __autoload , spl_autoload_register , spl_autoload_functions , spl_autoload_extensions ... <?php spl_autoload_register ( function ( $classname ) { include __DIR__ . </ classes /< . $classname . <. php < ; }); $myClass = new MyClass ; $foo = new Foo ; $bar = new Bar ; ?> Tuy nhi\u00ean \u0111\u1ec3 d\u1ec5 d\u00e0ng chia s\u1ebb code, d\u00f9ng l\u1ea1i code gi\u1eefa c\u00e1c framework, gi\u1eefa c\u00e1c d\u1ef1 \u00e1n ..., c\u1ed9ng \u0111\u1ed3ng PHP th\u1ed1ng nh\u1ea5t m\u1ed9t c\u00e1ch th\u1ee9c t\u1ef1 \u0111\u1ed9ng n\u1ea1p th\u01b0 vi\u1ec7n theo m\u1ed9t chu\u1ea9n l\u00e0 PSR-4 Autoload . Ngo\u00e0i ti\u00eau chu\u1ea9n t\u1ef1 \u0111\u1ed9ng load PSR-4 c\u00f2n c\u00f3 ti\u00eau chu\u1ea9n t\u1ef1 \u0111\u1ed9ng load theo PSR-0 (tuy nhi\u00ean \u0111\u00e3 l\u1ed7i th\u1eddi, c\u00e1c d\u1ef1 \u00e1n m\u1edbi kh\u00f4ng n\u00ean theo PSR-0 n\u1eefa). PSR-4 Autoload : Ph\u1ea3i c\u00f3 m\u1ed9t c\u00f3 ch\u1ebf v\u00e0 c\u00e1ch b\u1ed1 tr\u00ed code trong c\u00e1c th\u01b0 m\u1ee5c sao cho m\u1ecdi class \u0111\u1ec1u c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c tham chi\u1ebfu \u0111\u1ebfn b\u1eb1ng c\u00e1ch vi\u1ebft code nh\u01b0 sau: \\<NamespaceName>(\\<SubNamespaceNames>)*\\<ClassName> C\u00f3 ngh\u0129a l\u00e0 m\u1ed7i l\u1edbp ta ph\u1ea3i x\u00e2y d\u1ef1ng sao cho c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c tham chi\u1ebfu \u0111\u1ebfn b\u1edfi d\u00f2ng code ba th\u00e0nh ph\u1ea7n: Namespace , c\u00e1c SubNamespaceNames con, v\u00e0 t\u00ean l\u1edbp ClassName . NameSpace : Ti\u1ec1n \u0111\u1ed1 \u0111\u1ea7u ti\u00ean b\u1eaft bu\u1ed9c ph\u1ea3i c\u00f3. T\u00ean n\u00e0y do ta t\u1ef1 \u0111\u1eb7t, sao cho kh\u00f4ng xung \u0111\u1ed9t t\u00ean c\u00e1c th\u01b0 vi\u1ec7n kh\u00e1c. SubNameSpaces : C\u00e1c namespace con (theo sau NameSpace \u0111\u1ea7u ti\u00ean). C\u00f3 m\u1ed9t ho\u1eb7c nhi\u1ec1u t\u00f9y d\u1ef1 \u00e1n m\u00ecnh config. Nh\u01b0ng b\u1eaft \u0111\u1ea7u t\u1eeb SubNameSpace ph\u1ea3i t\u01b0\u01a1ng \u1ee9ng v\u1edbi c\u1ea5u tr\u00fac th\u01b0 m\u1ee5c l\u01b0u tr\u1eef code. ClassName : B\u1eaft bu\u1ed9c ph\u1ea3i c\u00f3 v\u00e0 ph\u1ea3i c\u00f3 t\u00ean file PHP tr\u00f9ng t\u00ean ClassName \u1edf th\u01b0 m\u1ee5c t\u01b0\u01a1ng \u1ee9ng v\u1edbi namespace cu\u1ed1i c\u00f9ng (vd ClassName.php), trong file \u0111\u00f3 s\u1ebd \u0111\u1ecbnh ngh\u0129a n\u1ed9i dung c\u1ee7a code c\u1ee7a class m\u00ecnh c\u1ea7n load. \u0110\u00f3 l\u00e0 c\u00e1ch th\u1ed1ng nh\u1ea5t vi\u1ebft b\u1ed1 tr\u00ed code PHP tr\u00ean c\u00e1c th\u01b0 m\u1ee5c v\u00e0 theo c\u00e1c namespace . Khi \u0111\u00e3 vi\u1ebft code tu\u00e2n th\u1ee7 theo h\u01b0\u1edbng d\u1eabn n\u00e0y th\u00ec c\u00e1c famework kh\u00e1c nhau \u0111\u1ec1u s\u1eed d\u1ee5ng m\u1ed9t c\u01a1 ch\u1ebf t\u1ef1 \u0111\u1ed9ng n\u1ea1p t\u01b0\u01a1ng t\u1ef1 nhau n\u00ean c\u00f3 th\u1ec3 d\u00f9ng l\u1ea1i th\u01b0 vi\u1ec7n. Composer v\u00e0 PSR-4 : Autoload Composer cung c\u1ea5p 1 module autoload , tu\u00e2n theo chu\u1ea9n PSR-4 . C\u1ee5 th\u1ec3 m\u1ed7i package trong d\u1ef1 \u00e1n n\u1eb1m theo c\u1ea5u tr\u00fac vendor/package-name . Sau \u0111\u00f3, \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o vendor/autoload.php \u0111\u01b0\u1ee3c g\u1ecdi, ta c\u1ea7n c\u1eadp nh\u1eadt composer.json d\u00f9ng dependency autoload : { \"autoload\": { \"psr-4\": { \"MyCompany\\\\\": \"src/\", } } } Khai b\u00e1o composer.json nh\u01b0 tr\u00ean xong, g\u00f5 l\u1ec7nh: composer dum-autoload Example X\u00e2y d\u1ef1ng m\u1ed9t l\u1edbp c\u00f3 t\u00ean FirstClass , c\u00f3 namespace l\u00e0 MyCompany/Mymodule . Code file l\u01b0u trong file src/Mymodule/FirstClass.php . <?php namespace MyCompany\\Mymodule class FirstClass { function helloComposer () { } } ?> Nh\u01b0 tr\u00ean l\u00e0 \u0111\u00e3 \u0111\u00fang chu\u1ea9n PRS-4 , composer s\u1ebd gi\u00fap ta t\u00edch h\u1ee3p v\u00e0o vendor/autoload.php , \u0111\u1ec3 c\u00f3 th\u1ec3 t\u1ef1 \u0111\u1ed9ng include c\u00f3 tr\u00ean khi c\u1ea7n d\u00f9ng \u0111\u1ebfn b\u1eb1ng \u0111o\u1ea1n code v\u00ed d\u1ee5: <?php $cls = new MyCompany\\Mymodule\\FirstClass (); ?> //Ho\u1eb7c <?php use MyCompany\\Mymodule ; $cls = new FirstClass (); ?> Reference Difference between composer install , composer update and composer require Versions and constraints Composer - Basic usage Composer - Command-line interface/Commands Standard autoloader PSR-4 Autoloader - Ti\u00eau chu\u1ea9n vi\u1ebft t\u1ef1 \u0111\u1ed9ng n\u1ea1p kh\u1edfi t\u1ea1o PHP","title":"Composer"},{"location":"Package-Management/composer/#composer","text":"Install/remove package Package version constrains & composer.lock Auto loading","title":"Composer"},{"location":"Package-Management/composer/#overview","text":"Composer l\u00e0 c\u00f4ng c\u1ee5 \u0111\u1ec3 qu\u1ea3n l\u00fd package hay library c\u1ee7a PHP. V\u1ec1 c\u01a1 c\u1ea3n, Composer s\u1ebd kh\u00f4ng c\u00e0i package \u1edf global v\u00e0 g\u1ecdi l\u00e0 Dependency \u2192 Composer l\u00e0 c\u00f4ng c\u1ee5 qu\u1ea3n l\u00fd c\u00e1c Dependency v\u00ec th\u1ebf n\u00f3 c\u00f2n \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 Dependency Manager . T\u01b0\u01a1ng t\u1ef1 nh\u01b0 npm hay bundle , composer ra \u0111\u1eddi \u0111\u1ec3 gi\u1ea3i quy\u1ebft c\u00e1c v\u1ea5n \u0111\u1ec1 kh\u00f3 kh\u0103n nh\u01b0 khi dung l\u01b0\u1ee3ng project l\u1edbn, vi\u1ec7c c\u1eadp nh\u1eadt c\u0169ng nh\u01b0 ch\u00e8n c\u00e1c package hay library v\u00e0o project r\u1ea5t ph\u1ee9c t\u1ea1p v\u00e0 phi\u1ec1n ph\u1ee9c. V\u1edbi composer , ch\u1ec9 c\u1ea7n khai b\u00e1o name v\u00e0 version c\u1ee7a c\u00e1c package hay library, composer s\u1ebd t\u1ef1 \u0111\u1ed9ng t\u00ecm v\u00e0 t\u1ea3i c\u00e1c package hay library m\u00e0 m\u00ecnh c\u1ea7n v\u1ec1 project. Composer qu\u1ea3n l\u00fd dependencies d\u1ef1a tr\u00ean t\u1eebng Project PHP ri\u00eang bi\u1ec7t, n\u00f3 c\u00e0i \u0111\u1eb7t c\u00e1c dependencies n\u00e0y v\u00e0o m\u1ed9t folder vendor trong d\u1ef1 \u00e1n (m\u1ed7i d\u1ef1 \u00e1n c\u00f3 m\u1ed9t th\u01b0 m\u1ee5c vendor ri\u00eang). Composer t\u1ef1 \u0111\u1ed9ng sinh ra file vendor/autoload.php , t\u1eeb file n\u00e0y gi\u00fap ta n\u1ea1p c\u00e1c dependencies \u0111\u00e3 c\u00e0i \u0111\u1eb7t v\u00e0o project. composer.json : L\u00e0 n\u01a1i khai b\u00e1o dependencies d\u00f9ng trong project, nh\u1eefng th\u00f4ng tin v\u1ec1 name, version, licenses, source \u2026 \u0111\u01b0\u1ee3c declare theo JSON format. { \"name\": \"wataridori/bphalcon\", \"type\": \"project\", \"description\": \"A small library which implement some features to phalcon\", \"license\": \"GPL-3.0\", \"authors\": [ { \"name\": \"Harry Hoang\", \"email\": \"harry.hoang@contemi.com\" } ], \"require\": { \"php\": \">=5.4\" } } composer.lock : L\u00e0 n\u01a1i l\u01b0u tr\u1eef th\u00f4ng tin v\u1ec1 dependencies \u0111\u00e3 \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t. composer.json vs. composer.lock : V\u00ed d\u1ee5 khi ta d\u00f9ng l\u1ec7nh install \u0111\u1ec3 c\u00e0i \u0111\u1eb7t package th\u00ec composer s\u1ebd \u0111\u1ecdc th\u00f4ng tin v\u1ec1 dependencies \u1edf trong file composer.json , sau \u0111\u00f3 c\u00e0i \u0111\u1eb7t v\u00e0 t\u1ea1o ra file composer.lock \u0111\u1ec3 l\u01b0u th\u00f4ng tin c\u1ee5 th\u1ec3 v\u1ec1 nh\u1eefng dependencies \u0111\u00f3. Gi\u1ea3 s\u1eed ta commit c\u1ea3 2 file composer.json v\u00e0 composer.lock v\u00e0o version control c\u1ee7a m\u00ecnh, r\u1ed3i b\u1ea5t c\u1ee9 \u00f4ng dev n\u00e0o t\u1ea3i code v\u1ec1 th\u00ec d\u00f9 c\u00f3 c\u00e0i \u0111\u1eb7t v\u00e0o th\u1eddi \u0111i\u1ec3m kh\u00e1c nhau \u0111i ch\u0103ng n\u1eefa th\u00ec v\u1eabn s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c nh\u1eefng dependencies v\u1edbi nh\u1eefng version gi\u1ed1ng nhau, do n\u00f3 \u0111\u01b0\u1ee3c \u0111\u1ecdc t\u1eeb file composer.lock , ch\u1ee9 kh\u00f4ng ph\u1ea3i file composer.json .","title":"Overview"},{"location":"Package-Management/composer/#installremove-package","text":"Danh s\u00e1ch c\u00e1c package c\u1ee7a PHP","title":"Install/remove package"},{"location":"Package-Management/composer/#install-a-package","text":"require composer require <package>[:<tag>] C\u00e2u l\u1ec7nh tr\u00ean s\u1ebd th\u00eam m\u1edbi m\u1ed9t library hay package v\u00e0 ghi v\u00e0o file composer.json t\u1ea1i current directory. Options: --dev : Th\u00eam packages v\u00e0o require-dev , d\u00f9ng package n\u00e0y \u0111\u1ec3 dev. xem full t\u1ea1i V\u00ed d\u1ee5, install th\u01b0 vi\u1ec7n monolog/monolog phi\u00ean b\u1ea3n m\u1edbi nh\u1ea5t (th\u01b0 vi\u1ec7n l\u01b0u log th\u00f4ng d\u1ee5ng cho php): composer require monolog/monolog Sau l\u1ec7nh n\u00e0y, Composer s\u1ebd t\u1ea3i t\u1ea5t c\u1ea3 c\u00e1c dependencies \u0111\u1ec3 d\u00f9ng \u0111\u01b0\u1ee3c th\u01b0 vi\u1ec7n monolog/monolog v\u00e0o d\u1ef1 \u00e1n, sau \u0111\u00f3 n\u00f3 l\u01b0u t\u1ea1i th\u01b0 m\u1ee5c vendor , \u0111\u1ed3ng th\u1eddi c\u0169ng c\u00f3 lu\u00f4n file vendor/autoload.php M\u1edf l\u1ea1i file composer.json ta th\u1ea5y \u0111\u00e3 c\u00f3 th\u00eam \u0111o\u1ea1n code: { \"require\": { \"monolog/monolog\": \"^1.24\" } } install , update v\u00e0 reinstall C\u00f3 hai c\u00e2u l\u1ec7nh d\u00f9ng \u0111\u1ec3 t\u1ea3i, c\u1eadp nh\u1eadt package d\u1ef1a tr\u00ean 2 file package.json v\u00e0 package.lock : composer install T\u01b0\u01a1ng t\u1ef1 nh\u01b0 require , install d\u00f9ng \u0111\u1ec3 t\u1ea3i package, nh\u01b0ng kh\u00e1c l\u00e0 package \u0111\u00f3 ph\u1ea3i \u0111\u01b0\u1ee3c declare b\u1eb1ng 1 json object trong composer.json . Khi ch\u1ea1y l\u1ec7nh instal , composer ti\u1ebfn h\u00e0nh \u0111\u1ecdc file package.lock v\u00e0 composer.json , t\u1ea3i c\u00e1c dependencies v\u00e0 l\u01b0u v\u00e0o vendor . composer update D\u00f9ng \u0111\u1ec3 t\u1ea3i phi\u00ean b\u1ea3n m\u1edbi nh\u1ea5t c\u1ee7a c\u00e1c dependencies v\u00e0 c\u1eadp nh\u1eadt t\u1ec7p composer.lock . N\u00f3 s\u1ebd th\u00eam ho\u1eb7c x\u00f3a c\u00e1c dependencies d\u1ef1a tr\u00ean composer.json , ignored composer.lock . composer reinstall C\u01a1 ch\u1ebf install t\u01b0\u01a1ng t\u1ef1 nh\u01b0 install nh\u01b0ng tr\u01b0\u1edbc ti\u00ean n\u00f3 ti\u1ebfn h\u00e0nh looks up installed packages by name trong composer.json , x\u00f3a h\u1ebft packages c\u0169 r\u1ed3i m\u1edbi install.","title":"Install a package"},{"location":"Package-Management/composer/#remove-a-package","text":"Ng\u01b0\u1ee3c l\u1ea1i v\u1edbi require, command n\u00e0y th\u1ef1c hi\u1ec7n delete package d\u1ef1a tr\u00ean composer.json composer remove <package> C\u00f3 options l\u00e0 --dev , ch\u1ec9 remove c\u00e1c package \u0111\u01b0\u1ee3c khai b\u00e1o trong require-dev Ngo\u00e0i ra, c\u00e1ch 2 \u0111\u1ec3 remove packages, m\u1edf file composer.json , x\u00f3a t\u00ean th\u01b0 vi\u1ec7n \u0111\u00f3 trong ph\u1ea7n require, sau \u0111\u00f3 ch\u1ea1y l\u1ec7nh composer update xem th\u00eam c\u00e1c Command-line interface/Commands c\u1ee7a Composer","title":"Remove a package"},{"location":"Package-Management/composer/#package-version-constrains-composerlock","text":"Package version constrains l\u00e0 nh\u1eefng r\u00e0ng bu\u1ed9c v\u1ec1 phi\u00ean b\u1ea3n c\u1ee7a packages theo \u0111\u00fang ngh\u0129a \u0111en. Composer Versions Constrains tu\u00e2n theo Version Control System (VCS) , t\u01b0\u01a1ng t\u1ef1 nh\u01b0 Git, c\u0169ng c\u00f3 c\u00e1c kh\u00e1i ni\u1ec7m nh\u01b0: Tags: v1.0.1 Branches: v1.x-dev Stabilities: v1.1-BETA Version Range: s\u1eed d\u1ee5ng c\u00e1c operators > , >= , < , <= , != >=1.0 >=1.0 <2.0 >=1.0 <1.1 || >=1.2 Hyphenated Version Range ( - ): Thay v\u00ec d\u00f9ng >=1.0.0 <=2.1.0 , c\u00f3 th\u1ec3 thay b\u1eb1ng 1.0.0 - 2.1.0 cho g\u1ecdn Wildcard Version Range ( .* ): Thay v\u00ec d\u00f9ng >=1.0.0 <1.1.0 , c\u00f3 th\u1ec3 thay b\u1eb1ng 1.0.* cho g\u1ecdn Tilde Version Range ( ~ ): ~1.2 t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi >=1.2 <2.0.0 , hay ~1.2.3 t\u01b0\u01a1ng \u0111\u01b0\u01a1ng v\u1edbi >=1.2.3 <1.3.0 Caret Version Range ( ^ ): ^1.2.3 t\u01b0\u01a1ng \u0111\u01b0\u1edbng v\u1edbi >=1.2.3 <2.0.0 , hay ^0.3 t\u01b0\u01a1ng \u0111\u01b0\u1edbng v\u1edbi >=0.3.0 <0.4.0 . Stability Constraints: Stability d\u00f9ng trong c\u00e1c thay \u0111\u1ed5i l\u1edbn c\u1ee7a version, gi\u00fap t\u0103ng t\u00ednh r\u00f5 r\u00e0ng, minh b\u1ea1ch. N\u1ebfu kh\u00f4ng x\u00e1c \u0111\u1ecbnh r\u00f5 Stability trong version, Composer s\u1ebd th\u00eam c\u00e1c h\u1eadu t\u1ed1 sau version m\u1ed9t c\u00e1c Internally , th\u01b0\u1eddng m\u1eb7c \u0111\u1ecbnh th\u00e0nh -dev ho\u1eb7c -stable . V\u00ed d\u1ee5: Constraint Internally 1.2.3 =1.2.3.0-stable >1.2 >1.2.0.0-stable >=1.2 >=1.2.0.0-dev >=1.2-stable >=1.2.0.0-stable <1.3 <1.3.0.0-dev <=1.3 <=1.3.0.0-stable 1 - 2 >=1.0.0.0-dev <3.0.0.0-dev ~1.3 >=1.3.0.0-dev <2.0.0.0-dev 1.4.* >=1.4.0.0-dev <1.5.0.0-dev","title":"Package version constrains &amp; composer.lock"},{"location":"Package-Management/composer/#summary","text":"\"require\" : { \"vendor/package\" : \"1.3.2\" , // exac tl y 1.3.2 // > , < , >= , <= | speci f y upper / lower bou n ds \"vendor/package\" : \">=1.3.2\" , // a n y t hi n g above or equal t o 1.3.2 \"vendor/package\" : \"<1.3.2\" , // a n y t hi n g below 1.3.2 // * | wildcard \"vendor/package\" : \"1.3.*\" , // >= 1.3.0 < 1.4.0 // ~ | allows las t digi t speci f ied t o go up \"vendor/package\" : \"~1.3.2\" , // >= 1.3.2 < 1.4.0 \"vendor/package\" : \"~1.3\" , // >= 1.3.0 < 2.0.0 // ^ | does n ' t allow breaki n g cha n ges (major versio n f ixed - f ollowi n g semver) \"vendor/package\" : \"^1.3.2\" , // >= 1.3.2 < 2.0.0 \"vendor/package\" : \"^0.3.2\" , // >= 0.3.2 < 0.4.0 // excep t i f major versio n is 0 }","title":"Summary"},{"location":"Package-Management/composer/#auto-loading","text":"","title":"Auto loading"},{"location":"Package-Management/composer/#psr","text":"PSR - PHP Standards Recommendations , n\u00f3 l\u00e0 ti\u00eau chu\u1ea9n \u0111\u01b0\u1ee3c khuy\u1ebfn ngh\u1ecb \u00e1p d\u1ee5ng khi l\u1eadp tr\u00ecnh PHP, n\u00f3 v\u1eabn \u0111ang ho\u00e0n ch\u1ec9nh, trong \u0111\u00f3 kh\u00e1 nhi\u1ec1u ti\u00eau chu\u1ea9n con \u0111\u00e3 ho\u00e0n ch\u1ec9nh v\u00e0 \u0111\u01b0\u1ee3c c\u00e1c l\u1eadp tr\u00ecnh vi\u00ean, t\u1ed5 ch\u1ee9c ch\u1ea5p nh\u1eadn s\u1eed d\u1ee5ng. S\u1eed d\u1ee5ng PSR \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o th\u1ed1ng nh\u1ea5t v\u1ec1 c\u00e1ch th\u1ee9c vi\u1ebft code, t\u1ed5 ch\u1ee9c \u1ee9ng d\u1ee5ng ... nh\u1eb1m d\u1ec5 qu\u1ea3n l\u00fd, \u0111\u1ecdc, v\u00e0 s\u1eed d\u1ee5ng l\u1ea1i gi\u1eefa c\u00e1c Framework ... \u0111\u1ed3ng th\u1eddi \u0111\u1ea3m b\u1ea3o c\u00f3 m\u1ed9t giao di\u1ec7n l\u1eadp tr\u00ecnh chung gi\u1eefa c\u00e1c \u1ee9ng d\u1ee5ng,c\u00e1c Framework, khi n\u00f3 c\u00f9ng th\u1ef1c hi\u1ec7n m\u1ed9t ch\u1ee9c n\u0103ng. Danh s\u00e1ch c\u00e1c PSR t\u1ea1i php-fig.org . \u0110\u1ebfn nay c\u00f3 18 ti\u00eau chu\u1ea9n t\u1eeb PSR-0 \u0111\u1ebfn PSR-17 , trong \u0111\u00f3 c\u00f3 c\u00e1c ti\u00eau chu\u1ea9n \u0111\u00e3 \u0111\u01b0\u1ee3c ph\u00ea duy\u1ec7t c\u00f3 c\u00e1c ti\u00eau chu\u1ea9n \u0111ang so\u1ea1n th\u1ea3o v\u00e0 c\u00f3 ti\u00eau chu\u1ea9n \u0111\u00e3 l\u1ed7i th\u1eddi (v\u00ed d\u1ee5 PSR-0 \u0111\u00e3 l\u1ed7i th\u1eddi, b\u1ecb thay b\u1edfi PSR-4). C\u00e1c ti\u00eau chu\u1ea9n PSR should know: PSR-1 - Basic Coding Standard: Ti\u00eau chu\u1ea9n v\u1ec1 vi\u1ebft code PSR-2 - Coding Style Guide: Ti\u00eau chu\u1ea9n v\u1ec1 tr\u00ecnh b\u00e0y code PSR-3 - Logger Interface: Tr\u00ecnh b\u00e0y v\u1ec1 c\u00e1c th\u00e0nh ph\u1ea7n c\u1ea7n ph\u1ea3i c\u00f3 c\u1ee7a m\u1ed9t Logger PSR-4 - Autoloading Standard: Tr\u00ecnh b\u00e0y v\u1ec1 c\u00e1ch ch\u1ec9 \u0111\u1ecbnh \u1ee9ng d\u1ee5ng t\u1ef1 \u0111\u1ed9ng n\u1ea1p (gi\u1ed1ng include, require) c\u00e1c file php, l\u1edbp, h\u00e0m khi n\u00f3 c\u1ea7n d\u00f9ng \u0111\u1ebfn. PSR-6 - Caching Interface: Ti\u00eau chu\u1ea9n c\u1ea7n c\u00f3 c\u1ee7a m\u1ed9t b\u1ed9 \u1ee9ng d\u1ee5ng caching PSR-7 - HTTP Message Interface: Ti\u00eau chu\u1ea9n v\u1ec1 interface c\u1ee7a m\u1ed9t \u1ee9ng d\u1ee5ng s\u1eed HTTP Message - request v\u00e0 respone","title":"PSR"},{"location":"Package-Management/composer/#psr-4-autoloader","text":"Tr\u01b0\u1edbc \u0111\u00e2y trong PHP vi\u1ec7c n\u1ea1p c\u00e1c file th\u01b0 vi\u1ec7n, m\u00e3 d\u00f9ng l\u1ea1i v\u00e0o m\u1ed9t file PHP kh\u00e1c th\u01b0\u1eddng d\u00f9ng c\u00e1c l\u1ec7nh include v\u00e0 require. \u0110i\u1ec1u n\u00e0y g\u00e2y m\u1ea5t th\u1eddi gian, r\u1eafc r\u1ed1i, d\u00e0i code. <?php include __DIR__ . '/classes/MyClass.php' ; include __DIR__ . '/classes/Foo.php' ; include __DIR__ . '/classes/Bar.php' ; // ... $obj = new MyClass ; $foo = new Foo ; $bar = new Bar ; // ... ?> Ti\u1ebfp theo t\u1eeb PHP5 c\u00f3 c\u00e1c h\u00e0m tr\u1ee3 gi\u00fap t\u1ef1 \u0111\u1ed9ng h\u00f3a vi\u1ec7c g\u1ecdi th\u01b0 vi\u1ec7n b\u1eb1ng c\u00e1c h\u00e0m nh\u01b0: __autoload , spl_autoload_register , spl_autoload_functions , spl_autoload_extensions ... <?php spl_autoload_register ( function ( $classname ) { include __DIR__ . </ classes /< . $classname . <. php < ; }); $myClass = new MyClass ; $foo = new Foo ; $bar = new Bar ; ?> Tuy nhi\u00ean \u0111\u1ec3 d\u1ec5 d\u00e0ng chia s\u1ebb code, d\u00f9ng l\u1ea1i code gi\u1eefa c\u00e1c framework, gi\u1eefa c\u00e1c d\u1ef1 \u00e1n ..., c\u1ed9ng \u0111\u1ed3ng PHP th\u1ed1ng nh\u1ea5t m\u1ed9t c\u00e1ch th\u1ee9c t\u1ef1 \u0111\u1ed9ng n\u1ea1p th\u01b0 vi\u1ec7n theo m\u1ed9t chu\u1ea9n l\u00e0 PSR-4 Autoload . Ngo\u00e0i ti\u00eau chu\u1ea9n t\u1ef1 \u0111\u1ed9ng load PSR-4 c\u00f2n c\u00f3 ti\u00eau chu\u1ea9n t\u1ef1 \u0111\u1ed9ng load theo PSR-0 (tuy nhi\u00ean \u0111\u00e3 l\u1ed7i th\u1eddi, c\u00e1c d\u1ef1 \u00e1n m\u1edbi kh\u00f4ng n\u00ean theo PSR-0 n\u1eefa). PSR-4 Autoload : Ph\u1ea3i c\u00f3 m\u1ed9t c\u00f3 ch\u1ebf v\u00e0 c\u00e1ch b\u1ed1 tr\u00ed code trong c\u00e1c th\u01b0 m\u1ee5c sao cho m\u1ecdi class \u0111\u1ec1u c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c tham chi\u1ebfu \u0111\u1ebfn b\u1eb1ng c\u00e1ch vi\u1ebft code nh\u01b0 sau: \\<NamespaceName>(\\<SubNamespaceNames>)*\\<ClassName> C\u00f3 ngh\u0129a l\u00e0 m\u1ed7i l\u1edbp ta ph\u1ea3i x\u00e2y d\u1ef1ng sao cho c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c tham chi\u1ebfu \u0111\u1ebfn b\u1edfi d\u00f2ng code ba th\u00e0nh ph\u1ea7n: Namespace , c\u00e1c SubNamespaceNames con, v\u00e0 t\u00ean l\u1edbp ClassName . NameSpace : Ti\u1ec1n \u0111\u1ed1 \u0111\u1ea7u ti\u00ean b\u1eaft bu\u1ed9c ph\u1ea3i c\u00f3. T\u00ean n\u00e0y do ta t\u1ef1 \u0111\u1eb7t, sao cho kh\u00f4ng xung \u0111\u1ed9t t\u00ean c\u00e1c th\u01b0 vi\u1ec7n kh\u00e1c. SubNameSpaces : C\u00e1c namespace con (theo sau NameSpace \u0111\u1ea7u ti\u00ean). C\u00f3 m\u1ed9t ho\u1eb7c nhi\u1ec1u t\u00f9y d\u1ef1 \u00e1n m\u00ecnh config. Nh\u01b0ng b\u1eaft \u0111\u1ea7u t\u1eeb SubNameSpace ph\u1ea3i t\u01b0\u01a1ng \u1ee9ng v\u1edbi c\u1ea5u tr\u00fac th\u01b0 m\u1ee5c l\u01b0u tr\u1eef code. ClassName : B\u1eaft bu\u1ed9c ph\u1ea3i c\u00f3 v\u00e0 ph\u1ea3i c\u00f3 t\u00ean file PHP tr\u00f9ng t\u00ean ClassName \u1edf th\u01b0 m\u1ee5c t\u01b0\u01a1ng \u1ee9ng v\u1edbi namespace cu\u1ed1i c\u00f9ng (vd ClassName.php), trong file \u0111\u00f3 s\u1ebd \u0111\u1ecbnh ngh\u0129a n\u1ed9i dung c\u1ee7a code c\u1ee7a class m\u00ecnh c\u1ea7n load. \u0110\u00f3 l\u00e0 c\u00e1ch th\u1ed1ng nh\u1ea5t vi\u1ebft b\u1ed1 tr\u00ed code PHP tr\u00ean c\u00e1c th\u01b0 m\u1ee5c v\u00e0 theo c\u00e1c namespace . Khi \u0111\u00e3 vi\u1ebft code tu\u00e2n th\u1ee7 theo h\u01b0\u1edbng d\u1eabn n\u00e0y th\u00ec c\u00e1c famework kh\u00e1c nhau \u0111\u1ec1u s\u1eed d\u1ee5ng m\u1ed9t c\u01a1 ch\u1ebf t\u1ef1 \u0111\u1ed9ng n\u1ea1p t\u01b0\u01a1ng t\u1ef1 nhau n\u00ean c\u00f3 th\u1ec3 d\u00f9ng l\u1ea1i th\u01b0 vi\u1ec7n.","title":"PSR-4 Autoloader"},{"location":"Package-Management/composer/#composer-va-psr-4-autoload","text":"Composer cung c\u1ea5p 1 module autoload , tu\u00e2n theo chu\u1ea9n PSR-4 . C\u1ee5 th\u1ec3 m\u1ed7i package trong d\u1ef1 \u00e1n n\u1eb1m theo c\u1ea5u tr\u00fac vendor/package-name . Sau \u0111\u00f3, \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o vendor/autoload.php \u0111\u01b0\u1ee3c g\u1ecdi, ta c\u1ea7n c\u1eadp nh\u1eadt composer.json d\u00f9ng dependency autoload : { \"autoload\": { \"psr-4\": { \"MyCompany\\\\\": \"src/\", } } } Khai b\u00e1o composer.json nh\u01b0 tr\u00ean xong, g\u00f5 l\u1ec7nh: composer dum-autoload Example X\u00e2y d\u1ef1ng m\u1ed9t l\u1edbp c\u00f3 t\u00ean FirstClass , c\u00f3 namespace l\u00e0 MyCompany/Mymodule . Code file l\u01b0u trong file src/Mymodule/FirstClass.php . <?php namespace MyCompany\\Mymodule class FirstClass { function helloComposer () { } } ?> Nh\u01b0 tr\u00ean l\u00e0 \u0111\u00e3 \u0111\u00fang chu\u1ea9n PRS-4 , composer s\u1ebd gi\u00fap ta t\u00edch h\u1ee3p v\u00e0o vendor/autoload.php , \u0111\u1ec3 c\u00f3 th\u1ec3 t\u1ef1 \u0111\u1ed9ng include c\u00f3 tr\u00ean khi c\u1ea7n d\u00f9ng \u0111\u1ebfn b\u1eb1ng \u0111o\u1ea1n code v\u00ed d\u1ee5: <?php $cls = new MyCompany\\Mymodule\\FirstClass (); ?> //Ho\u1eb7c <?php use MyCompany\\Mymodule ; $cls = new FirstClass (); ?>","title":"Composer v\u00e0 PSR-4 : Autoload"},{"location":"Package-Management/composer/#reference","text":"Difference between composer install , composer update and composer require Versions and constraints Composer - Basic usage Composer - Command-line interface/Commands Standard autoloader PSR-4 Autoloader - Ti\u00eau chu\u1ea9n vi\u1ebft t\u1ef1 \u0111\u1ed9ng n\u1ea1p kh\u1edfi t\u1ea1o PHP","title":"Reference"},{"location":"Package-Management/npm/","text":"NPM Overview Install/remove library package Package version constrains & package.lock Overview npm - Node Package Manager l\u00e0 m\u1ed9t c\u00f4ng c\u1ee5 qu\u1ea3n l\u00fd c\u00e1c library, package cho NodeJs. npx l\u00e0 m\u1ed9t c\u00f4ng c\u1ee5 gi\u00fap b\u1ea1n execute c\u00e1c package t\u1eeb npm registry m\u1ed9t c\u00e1ch \u0111\u01a1n gi\u1ea3n v\u00e0 nhanh ch\u00f3ng. nvm l\u00e0 m\u1ed9t package tool qu\u1ea3n l\u00fd c\u00e1c version c\u1ee7a Nodejs. Package l\u00e0: a) M\u1ed9t th\u01b0 m\u1ee5c ch\u1ee9a ch\u01b0\u01a1ng tr\u00ecnh \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 b\u1eb1ng t\u1ec7p package.json b) M\u1ed9t tarball gzipped ch\u1ee9a (a) c) M\u1ed9t url ph\u00e2n gi\u1ea3i th\u00e0nh (b) d) M\u1ed9t <name>@<version> \u0111\u01b0\u1ee3c xu\u1ea5t b\u1ea3n tr\u00ean npm registry v\u1edbi (c) e) M\u1ed9t <name>@<tag> tr\u1ecf \u0111\u1ebfn (d) f) M\u1ed9t <name> gi\u1ed1ng (e), default tag l\u00e0 latest g) M\u1ed9t <git remote url> ph\u00e2n gi\u1ea3i th\u00e0nh (a) npm components and use case npm bao g\u1ed3m ba th\u00e0nh ph\u1ea7n ri\u00eang bi\u1ec7t: npm website : d\u00f9ng \u0111\u1ec3 discover packages, thi\u1ebft l\u1eadp profiles c\u00e1 nh\u00e2n hay t\u1ed5 ch\u1ee9c \u0111\u1ec3 qu\u1ea3n l\u00fd quy\u1ec1n truy c\u1eadp v\u00e0o c\u00e1c public/private packages. npm Command Line Interface : n\u01a1i c\u00e1c dev t\u01b0\u01a1ng t\u00e1c v\u1edbi npm npm registry : public database cho JavaScript software v\u00e0 meta-information c\u1ee7a npm. S\u1eed d\u1ee5ng npm trong c\u00e1c tr\u01b0\u1eddng h\u1ee3p c\u1ea7n: Qu\u1ea3n l\u00fd packages cho NodeJS app T\u1ea3i xu\u1ed1ng \u0111\u00fang c\u00e1ch c\u00e1c standalone tools Run packages m\u00e0 kh\u00f4ng c\u1ea7n download b\u1eb1ng npx . npm vs yarn M\u1ed9t v\u00e0i thi\u1ebfu s\u00f3t c\u1ee7a npm: Queued install : npm down c\u00e1c dependencies t\u1eeb registry c\u1ee7a n\u00f3 theo c\u01a1 ch\u1ebf queue (FIFO), t\u1ed1n nhi\u1ec1u th\u1eddi gian. Single registry : C\u00f3 duy nh\u1ea5t 1 npm registry. Security : npm cho ph\u00e9p c\u00e1c packages ch\u1ea1y code trong qu\u00e1 tr\u00ecnh download. Offline : Kh\u00f4ng h\u1ed7 tr\u1ee3 c\u00e0i \u0111\u1eb7t offline Conflict gi\u1eefa c\u00e1c version c\u1ee7a packages, dependencies. C\u00f3 th\u1ec3 kh\u1eafc ph\u1ee5c b\u1eb1ng npm shrinkwrap \u0111\u1ec3 t\u1ea1o lockfile npm-shrinkwrap.json \u2192 ch\u1ec9 update version khi t\u1ed3n t\u1ea1i lock file. yarn - Yet Another Resource Negotiator - Node Package Manager , c\u00f3 th\u1ec3 coi l\u00e0 CLI client h\u1ed7 tr\u1ee3 vi\u1ec7c down c\u00e1c dependencies: Cho ph\u00e9p download c\u00e1c package t\u1eeb NpmJS ho\u1eb7c Bower Download c\u00e1c dependencies song song v\u1edbi nhau, kh\u00f4ng ch\u1edd \u0111\u1ee3i nh\u01b0 npm. N\u1ebfu \u0111\u00e3 c\u00e0i 1 package tr\u01b0\u1edbc \u0111\u00f3, yarn s\u1ebd t\u1ea1o m\u1ed9t clone trong b\u1ed9 nh\u1edb cached \u0111\u1ec3 h\u1ed7 tr\u1ee3 vi\u1ec7c c\u00e0i \u0111\u1eb7t offline. lock ch\u00ednh x\u00e1c duy nh\u1ea5t m\u1ed9t version c\u1ee7a packages \u0111\u00e3 c\u00e0i v\u00e0o file yarn.lock \u2192 lu\u00f4n t\u1ea1o v\u00e0 update yarn.lock source npm vs. yarn : Installation procedure: npm \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t chung v\u1edbi Node c\u00f2n yarn \u0111\u01b0\u1ee3c c\u00e0i b\u1eb1ng yarnpkg ho\u1eb7c npm v\u1edbi command: npm install yarn --global The lock file Output log: npm : Log h\u1ebft stack trace c\u1ee7a c\u00e1c c\u00e2u l\u1ec7nh npm \u2192 Log d\u00e0i, \u0111\u1ecdc m\u1ec7t. yarn : clean , ng\u1eafn g\u1ecdn v\u00e0 tr\u00ecnh b\u00e0y theo ki\u1ec3u tree \u2192 \u0111\u1ecdc log d\u1ec5 hi\u1ec3u v\u00e0 d\u1ec5 ph\u00e2n bi\u1ec7t Installing global dependencies: npm : npm install -g package_name@version_number yarn : yarn global add package_name@version_number \u2192 C\u00fa ph\u00e1p commands thay \u0111\u1ed5i khi x\u00e0i yarn so v\u1edbi npm , v\u1eabn c\u00f3 v\u00e0i commands same The \u2018why\u2019 command: npm ch\u01b0a t\u00edch h\u1ee3p t\u00ednh n\u0103ng \"why\". yarn \u0111i k\u00e8m v\u1edbi m\u1ed9t l\u1ec7nh \"why\" cho bi\u1ebft l\u00fd do t\u1ea1i sao c\u00f3 m\u1ed9t dependency trong d\u1ef1 \u00e1n. Fetching packages: npm : fetch c\u00e1c dependencies t\u1eeb npm registry trong m\u1ed7i l\u1ea7n npm install . yarn : l\u01b0u tr\u1eef locally c\u00e1c dependenciesc v\u00e0 fetch t\u1eeb local trong m\u1ed7i l\u1ea7n yarn add . Install/remove library package CLI commands scope : T\u1ea5t c\u1ea3 c\u00e1c package \u0111\u1ec1u c\u00f3 name, ngo\u00e0i ra m\u1ed9t s\u1ed1 c\u00f3 th\u00eam scope . scope k\u00e8m trong t\u00ean package : @somescope/somepackagename scope l\u00e0 m\u1ed9t c\u00e1ch nh\u00f3m c\u00e1c package c\u00f3 li\u00ean quan l\u1ea1i v\u1edbi nhau, c\u00f3 th\u1ec3 gom l\u1ea1i chung 1 scope: @ant-design/icons - Local install (default)): t\u1ea3i package v\u00e0o folder ./node_modules t\u1ea1i root. C\u1ea7n d\u00f9ng khi m\u00ecnh require() hay import() package v\u00f4 project c\u1ee7a m\u00ecnh. Global install (with -g ) : t\u1ea3i package v\u00e0o /usr/local ho\u1eb7c b\u1ea5t c\u1ee9 n\u01a1i n\u00e0o Node \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t. D\u00f9ng khi m\u00ecnh c\u1ea7n run c\u00e1i package b\u1eb1ng command line. Install a package npm install ( with no args , in package dir ) npm install [< @scope >/]< name > npm install [< @scope >/]< name >@< tag > npm install [< @scope >/]< name >@< version > npm install [< @scope >/]< name >@< version range > npm install < alias > @npm :< name > npm install < git-host >:< git-user >/< repo-name > npm install < git repo url > npm install < tarball file > npm install < tarball url > npm install < folder > aliases : npm i , npm add common options : [ -P |- -save-prod | -D |- -save-dev | -O |- -save-optional |- -save-peer ] [ -E |- -save -exact ] [ -B |- -save-bundle ] [- -no-save ] [- -dry-run ] L\u1ec7nh n\u00e0y c\u00e0i \u0111\u1eb7t m\u1ed9t package v\u00e0 \u0111\u01b0\u1ee3c qu\u1ea3n l\u00fd b\u1edfi: npm-cowrap.json , package-lock.json ho\u1eb7c yarn.lock . Description folder npm install <folder> : C\u00e0i \u0111\u1eb7t package d\u1ef1a tr\u00ean th\u01b0 m\u1ee5c ch\u1ee9a package \u0111\u00f3. tarball file npm install <tarball file> : C\u00e0i \u0111\u1eb7t package d\u1ef1a tr\u00ean tarball file : .tar , .tar.gz , ho\u1eb7c .tgz . V\u00ed d\u1ee5: npm install ./package.tgz npm install <tarball url> : t\u01b0\u01a1ng t\u1ef1 nh\u01b0 tr\u00ean nh\u01b0ng l\u00e0 link t\u1edbi url c\u1ee7a file tarball file \u0111\u1ec3 down v\u1ec1 npm install https://github.com/indexzero/forever/tarball/v0.5.6 scope npm install [<@scope>/]<name> : C\u00e0i package theo scope v\u00e0 t\u00ean package, version v\u00e0 tag m\u1eb7c \u0111\u1ecbnh l\u00e0 latest npm install @myorg/privatepackage npm install [<@scope>/]<name>@<tag> v\u00e0 npm install [<@scope>/]<name>@<version> : T\u01b0\u01a1ng t\u1ef1 tr\u00ean, nh\u01b0ng down ch\u00ednh x\u00e1c tag hay version c\u1ee7a package alias npm install <alias>@npm:<name> : alias l\u00e0 bi\u1ec7t danh c\u1ee7a package, \u0111\u01b0\u1ee3c named trong d\u1ef1 \u00e1n t\u1eeb nh\u1eefng package c\u1ee7a npm registry tu\u00e2n theo validate-npm-package-name . V\u00ed d\u1ee5: npm install my-react@npm:react npm install jquery2@npm:jquery@2 npm install jquery3@npm:jquery@3 npm install npa@npm:npm-package-arg git npm install <git remote url> : C\u00e0i \u0111\u1eb7t package t\u1eeb git b\u1eb1ng git remote url , syntax c\u1ee7a git remote url : <protocol>://[<user>[:<password>]@]<hostname>[:<port>][:][/]<path>[#<commit-ish> | #semver:<semver>] V\u00ed d\u1ee5: npm install git+ssh://git@github.com:npm/cli.git#v1.0.27 npm install git+ssh://git@github.com:npm/cli#pull/273 npm install git+ssh://git@github.com:npm/cli#semver:^5.0 npm install git+https://isaacs@github.com/npm/cli.git npm install git://github.com/npm/cli.git#v1.0.27 GIT_SSH_COMMAND='ssh -i ~/.ssh/custom_ident' npm install git+ssh://git@github.com:npm/cli.git \u0110\u01a1n gi\u1ea3n h\u01a1n, c\u00f3 th\u1ec3 d\u00f9ng npm install <githubname>/<githubrepo>[#<commit-ish>] ho\u1eb7c npm install github:<githubname>/<githubrepo>[#<commit-ish>] . V\u00ed d\u1ee5: npm install mygithubuser/myproject npm install github:mygithubuser/myproject Ngo\u00e0i ra, ta c\u00f3 th\u1ec3 t\u1ea3i package v\u1edbi git b\u1eb1ng id c\u1ee7a commit theo ki\u1ec3u npm install gist:[<githubname>/]<gistID>[#<commit-ish>|#semver:<semver>] ho\u1eb7c b\u1eb1ng gitlab npm install gitlab:<gitlabname>/<gitlabrepo>[#<commit-ish>] , bitbucket npm install bitbucket:<bitbucketname>/<bitbucketrepo>[#<commit-ish>] Configuration Xem full t\u1ea1i: using-npm/config , d\u01b0\u1edbi \u0111\u00e2y l\u00e0 3 Configuration ph\u1ed5 bi\u1ebfn nh\u1ea5t: save : Default: true Type: boolean L\u01b0u c\u00e1c packages \u0111\u00e3 c\u00e0i \u0111\u1eb7t v\u00e0o package.json d\u01b0\u1edbi d\u1ea1ng json object dependencies . \u0110\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 l\u01b0u packages c\u1ea7n thi\u1ebft \u0111\u1ec3 \u1ee9ng d\u1ee5ng ch\u1ea1y. save-dev : Default: false Type: boolean L\u01b0u c\u00e1c packages \u0111\u00e3 c\u00e0i \u0111\u1eb7t v\u00e0o package.json d\u01b0\u1edbi d\u1ea1ng json object devDependencies . \u0110\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 l\u01b0u packages cho m\u1ee5c \u0111\u00edch ph\u00e1t tri\u1ec3n. global Default: false Type: Boolean C\u00e0i c\u00e1c package \u1edf global thay v\u00ec local Remove a package npm uninstall [<@scope>/]<pkg>[@<version>]... [-S|--save|--no-save] aliases: remove, rm, r, un, unlink Thao t\u00e1c n\u00e0y s\u1ebd g\u1ee1 c\u00e0i \u0111\u1eb7t package, x\u00f3a lu\u00f4n c\u00e1c objects: dependencies , devDependencies , optionalDependencies , v\u00e0 peerDependencies trong package.json , npm-shrinkwrap.json v\u00e0 package-lock.json . C\u00f3 th\u1ec3 s\u1eed d\u1ee5ng Configuration: no-save \u0111\u1ec3 ng\u0103n vi\u1ec7c npm x\u00f3a c\u00e1c json object tr\u00ean. Package version constrains & package.lock npm \u0111\u01b0a ra m\u1ed9t s\u1ed1 r\u00e0ng bu\u1ed9c v\u1ec1 Package version , g\u1ecdi l\u00e0 semantic versioning rules (? - V6, V7, npm V8 \u0111\u1ecdc docs ko th\u1ea5y) m\u00e0 b\u1ea5t c\u1ee9 NodeJS Dev n\u00e0o c\u0169ng should know. M\u1ed7i khi package c\u00f3 c\u00e1c c\u1eadp nh\u1eadt quan tr\u1ecdng, th\u00ec n\u00ean xu\u1ea5t b\u1ea3n phi\u00ean b\u1ea3n m\u1edbi c\u1ee7a package , Package version \u0111\u01b0\u1ee3c c\u1eadp nh\u1eadt trong t\u1ec7p package.json . Vi\u1ec7c \u0111\u1eb7t Package version tu\u00e2n theo semantic versioning rules gi\u00fap c\u00e1c \u00f4ng dev kh\u00e1c - user c\u1ee7a c\u00e1i package hi\u1ec3u \u0111\u01b0\u1ee3c m\u1ee9c \u0111\u1ed9 thay \u0111\u1ed5i trong m\u1ed9t phi\u00ean b\u1ea3n nh\u1ea5t \u0111\u1ecbnh c\u1ee7a package v\u00e0 \u0111i\u1ec1u ch\u1ec9nh m\u00e3 c\u1ee7a ri\u00eang \u1ed5ng n\u1ebfu c\u1ea7n. semantic versioning rules c\u01a1 b\u1ea3n: First release : 1.0.0 Patch release : 1.0.1 Minor release : 1.1.0 Major release : 2.0.0 source version specificity : Value Description ~version Approximately equivalent to version, c\u00e1ch t\u00ednh: npm semver - Tilde Ranges ^version Compatible with version, c\u00e1ch t\u00ednh: npm semver - Caret Ranges version version c\u1ee5 th\u1ec3 >version ho\u1eb7c >=version version th\u1ea5p nh\u1ea5t <version ho\u1eb7c <=version version cao nh\u1ea5t 1.2.x version t\u1eeb 1.2.0 t\u1edbi 1.2.9 * version n\u00e0o c\u0169ng h\u1ea3o latest latest release package-lock.json \u0111\u01b0\u1ee3c t\u1ea1o t\u1ef1 \u0111\u1ed9ng t\u1eeb npm ^5.x.x v\u1edbi m\u1ee5c \u0111\u00edch theo d\u00f5i ch\u00ednh x\u00e1c Package version c\u1ee7a m\u1ecdi package \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t \u0111\u1ec3 nodejs app c\u00f3 th\u1ec3 t\u00e1i t\u1ea1o l\u1ea1i ch\u00ednh x\u00e1c 100% node_modules . package-lock.json gi\u1ea3i quy\u1ebft m\u1ed9t v\u1ea5n \u0111\u1ec1 r\u1ea5t c\u1ee5 th\u1ec3 m\u00e0 package.json ch\u01b0a \u0111\u01b0\u1ee3c gi\u1ea3i quy\u1ebft \u0111\u01b0\u1ee3c: Trong package.json , ta c\u00f3 th\u1ec3 \u0111\u1eb7t Package version s\u1eed d\u1ee5ng semantic versioning rules , t\u1eeb \u0111\u00f3 d\u1eabn t\u1edbi tr\u01b0\u1eddng h\u1ee3p C\u00e0i \u0111\u1eb7t c\u00e1c dependencies t\u1eeb c\u00f9ng m\u1ed9t file package.json nh\u01b0ng l\u1ea1i d\u1eabn \u0111\u1ebfn 2 phi\u00ean b\u1ea3n c\u00e0i \u0111\u1eb7t kh\u00e1c nhau. \"express\" : { \"version\" : \"4.15.4\" , \"resolved\" : \"https://registry.npmjs.org/express/-/express-4.15.4.tgz\" , \"integrity\" : \"sha1-Ay4iU0ic+PzgJma+yj0R7XotrtE=\" , \"requires\" : { \"accepts\" : \"1.3.3\" , \"array-flatten\" : \"1.1.1\" , \"content-disposition\" : \"0.5.2\" , \"content-type\" : \"1.0.2\" , \"cookie\" : \"0.3.1\" , \"cookie-signature\" : \"1.0.6\" , \"debug\" : \"2.6.8\" , \"depd\" : \"1.1.1\" , \"encodeurl\" : \"1.0.1\" , \"escape-html\" : \"1.0.3\" , \"etag\" : \"1.8.0\" , \"finalhandler\" : \"1.0.4\" , \"fresh\" : \"0.5.0\" , \"merge-descriptors\" : \"1.0.1\" , \"methods\" : \"1.1.2\" , \"on-finished\" : \"2.3.0\" , \"parseurl\" : \"1.3.1\" , \"path-to-regexp\" : \"0.1.7\" , \"proxy-addr\" : \"1.1.5\" , \"qs\" : \"6.5.0\" , \"range-parser\" : \"1.2.0\" , \"send\" : \"0.15.4\" , \"serve-static\" : \"1.12.4\" , \"setprototypeof\" : \"1.0.3\" , \"statuses\" : \"1.3.1\" , \"type-is\" : \"1.6.15\" , \"utils-merge\" : \"1.0.0\" , \"vary\" : \"1.1.1\" } }, \u2192 package-lock.json ch\u1ec9 \u0111\u1ecbnh r\u00f5 version , location , m\u00e3 b\u0103m integrity cho m\u1ed7i module v\u00e0 t\u1eebng dependencies c\u1ee7a n\u00f3, t\u1eeb \u0111\u00f3 gi\u00fap cho vi\u1ec7c clone c\u1ee7a node_modules \u0111\u01b0\u1ee3c t\u1ea1o ra s\u1ebd lu\u00f4n gi\u1ed1ng nhau cho d\u00f9 ta c\u00e0i \u0111\u1eb7t nodejs app v\u00e0o b\u1ea5t c\u1ee9 l\u00fac n\u00e0o. Reference Difference between npx and npm Difference between npm and yarn npm vs yarn Semantic versioning cheatsheet","title":"NPM"},{"location":"Package-Management/npm/#npm","text":"Overview Install/remove library package Package version constrains & package.lock","title":"NPM"},{"location":"Package-Management/npm/#overview","text":"npm - Node Package Manager l\u00e0 m\u1ed9t c\u00f4ng c\u1ee5 qu\u1ea3n l\u00fd c\u00e1c library, package cho NodeJs. npx l\u00e0 m\u1ed9t c\u00f4ng c\u1ee5 gi\u00fap b\u1ea1n execute c\u00e1c package t\u1eeb npm registry m\u1ed9t c\u00e1ch \u0111\u01a1n gi\u1ea3n v\u00e0 nhanh ch\u00f3ng. nvm l\u00e0 m\u1ed9t package tool qu\u1ea3n l\u00fd c\u00e1c version c\u1ee7a Nodejs. Package l\u00e0: a) M\u1ed9t th\u01b0 m\u1ee5c ch\u1ee9a ch\u01b0\u01a1ng tr\u00ecnh \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 b\u1eb1ng t\u1ec7p package.json b) M\u1ed9t tarball gzipped ch\u1ee9a (a) c) M\u1ed9t url ph\u00e2n gi\u1ea3i th\u00e0nh (b) d) M\u1ed9t <name>@<version> \u0111\u01b0\u1ee3c xu\u1ea5t b\u1ea3n tr\u00ean npm registry v\u1edbi (c) e) M\u1ed9t <name>@<tag> tr\u1ecf \u0111\u1ebfn (d) f) M\u1ed9t <name> gi\u1ed1ng (e), default tag l\u00e0 latest g) M\u1ed9t <git remote url> ph\u00e2n gi\u1ea3i th\u00e0nh (a)","title":"Overview"},{"location":"Package-Management/npm/#npm-components-and-use-case","text":"npm bao g\u1ed3m ba th\u00e0nh ph\u1ea7n ri\u00eang bi\u1ec7t: npm website : d\u00f9ng \u0111\u1ec3 discover packages, thi\u1ebft l\u1eadp profiles c\u00e1 nh\u00e2n hay t\u1ed5 ch\u1ee9c \u0111\u1ec3 qu\u1ea3n l\u00fd quy\u1ec1n truy c\u1eadp v\u00e0o c\u00e1c public/private packages. npm Command Line Interface : n\u01a1i c\u00e1c dev t\u01b0\u01a1ng t\u00e1c v\u1edbi npm npm registry : public database cho JavaScript software v\u00e0 meta-information c\u1ee7a npm. S\u1eed d\u1ee5ng npm trong c\u00e1c tr\u01b0\u1eddng h\u1ee3p c\u1ea7n: Qu\u1ea3n l\u00fd packages cho NodeJS app T\u1ea3i xu\u1ed1ng \u0111\u00fang c\u00e1ch c\u00e1c standalone tools Run packages m\u00e0 kh\u00f4ng c\u1ea7n download b\u1eb1ng npx .","title":"npm components and use case"},{"location":"Package-Management/npm/#npm-vs-yarn","text":"M\u1ed9t v\u00e0i thi\u1ebfu s\u00f3t c\u1ee7a npm: Queued install : npm down c\u00e1c dependencies t\u1eeb registry c\u1ee7a n\u00f3 theo c\u01a1 ch\u1ebf queue (FIFO), t\u1ed1n nhi\u1ec1u th\u1eddi gian. Single registry : C\u00f3 duy nh\u1ea5t 1 npm registry. Security : npm cho ph\u00e9p c\u00e1c packages ch\u1ea1y code trong qu\u00e1 tr\u00ecnh download. Offline : Kh\u00f4ng h\u1ed7 tr\u1ee3 c\u00e0i \u0111\u1eb7t offline Conflict gi\u1eefa c\u00e1c version c\u1ee7a packages, dependencies. C\u00f3 th\u1ec3 kh\u1eafc ph\u1ee5c b\u1eb1ng npm shrinkwrap \u0111\u1ec3 t\u1ea1o lockfile npm-shrinkwrap.json \u2192 ch\u1ec9 update version khi t\u1ed3n t\u1ea1i lock file. yarn - Yet Another Resource Negotiator - Node Package Manager , c\u00f3 th\u1ec3 coi l\u00e0 CLI client h\u1ed7 tr\u1ee3 vi\u1ec7c down c\u00e1c dependencies: Cho ph\u00e9p download c\u00e1c package t\u1eeb NpmJS ho\u1eb7c Bower Download c\u00e1c dependencies song song v\u1edbi nhau, kh\u00f4ng ch\u1edd \u0111\u1ee3i nh\u01b0 npm. N\u1ebfu \u0111\u00e3 c\u00e0i 1 package tr\u01b0\u1edbc \u0111\u00f3, yarn s\u1ebd t\u1ea1o m\u1ed9t clone trong b\u1ed9 nh\u1edb cached \u0111\u1ec3 h\u1ed7 tr\u1ee3 vi\u1ec7c c\u00e0i \u0111\u1eb7t offline. lock ch\u00ednh x\u00e1c duy nh\u1ea5t m\u1ed9t version c\u1ee7a packages \u0111\u00e3 c\u00e0i v\u00e0o file yarn.lock \u2192 lu\u00f4n t\u1ea1o v\u00e0 update yarn.lock source npm vs. yarn : Installation procedure: npm \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t chung v\u1edbi Node c\u00f2n yarn \u0111\u01b0\u1ee3c c\u00e0i b\u1eb1ng yarnpkg ho\u1eb7c npm v\u1edbi command: npm install yarn --global The lock file Output log: npm : Log h\u1ebft stack trace c\u1ee7a c\u00e1c c\u00e2u l\u1ec7nh npm \u2192 Log d\u00e0i, \u0111\u1ecdc m\u1ec7t. yarn : clean , ng\u1eafn g\u1ecdn v\u00e0 tr\u00ecnh b\u00e0y theo ki\u1ec3u tree \u2192 \u0111\u1ecdc log d\u1ec5 hi\u1ec3u v\u00e0 d\u1ec5 ph\u00e2n bi\u1ec7t Installing global dependencies: npm : npm install -g package_name@version_number yarn : yarn global add package_name@version_number \u2192 C\u00fa ph\u00e1p commands thay \u0111\u1ed5i khi x\u00e0i yarn so v\u1edbi npm , v\u1eabn c\u00f3 v\u00e0i commands same The \u2018why\u2019 command: npm ch\u01b0a t\u00edch h\u1ee3p t\u00ednh n\u0103ng \"why\". yarn \u0111i k\u00e8m v\u1edbi m\u1ed9t l\u1ec7nh \"why\" cho bi\u1ebft l\u00fd do t\u1ea1i sao c\u00f3 m\u1ed9t dependency trong d\u1ef1 \u00e1n. Fetching packages: npm : fetch c\u00e1c dependencies t\u1eeb npm registry trong m\u1ed7i l\u1ea7n npm install . yarn : l\u01b0u tr\u1eef locally c\u00e1c dependenciesc v\u00e0 fetch t\u1eeb local trong m\u1ed7i l\u1ea7n yarn add .","title":"npm vs yarn"},{"location":"Package-Management/npm/#installremove-library-package","text":"CLI commands scope : T\u1ea5t c\u1ea3 c\u00e1c package \u0111\u1ec1u c\u00f3 name, ngo\u00e0i ra m\u1ed9t s\u1ed1 c\u00f3 th\u00eam scope . scope k\u00e8m trong t\u00ean package : @somescope/somepackagename scope l\u00e0 m\u1ed9t c\u00e1ch nh\u00f3m c\u00e1c package c\u00f3 li\u00ean quan l\u1ea1i v\u1edbi nhau, c\u00f3 th\u1ec3 gom l\u1ea1i chung 1 scope: @ant-design/icons - Local install (default)): t\u1ea3i package v\u00e0o folder ./node_modules t\u1ea1i root. C\u1ea7n d\u00f9ng khi m\u00ecnh require() hay import() package v\u00f4 project c\u1ee7a m\u00ecnh. Global install (with -g ) : t\u1ea3i package v\u00e0o /usr/local ho\u1eb7c b\u1ea5t c\u1ee9 n\u01a1i n\u00e0o Node \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t. D\u00f9ng khi m\u00ecnh c\u1ea7n run c\u00e1i package b\u1eb1ng command line.","title":"Install/remove library package"},{"location":"Package-Management/npm/#install-a-package","text":"npm install ( with no args , in package dir ) npm install [< @scope >/]< name > npm install [< @scope >/]< name >@< tag > npm install [< @scope >/]< name >@< version > npm install [< @scope >/]< name >@< version range > npm install < alias > @npm :< name > npm install < git-host >:< git-user >/< repo-name > npm install < git repo url > npm install < tarball file > npm install < tarball url > npm install < folder > aliases : npm i , npm add common options : [ -P |- -save-prod | -D |- -save-dev | -O |- -save-optional |- -save-peer ] [ -E |- -save -exact ] [ -B |- -save-bundle ] [- -no-save ] [- -dry-run ] L\u1ec7nh n\u00e0y c\u00e0i \u0111\u1eb7t m\u1ed9t package v\u00e0 \u0111\u01b0\u1ee3c qu\u1ea3n l\u00fd b\u1edfi: npm-cowrap.json , package-lock.json ho\u1eb7c yarn.lock .","title":"Install a package"},{"location":"Package-Management/npm/#description","text":"folder npm install <folder> : C\u00e0i \u0111\u1eb7t package d\u1ef1a tr\u00ean th\u01b0 m\u1ee5c ch\u1ee9a package \u0111\u00f3. tarball file npm install <tarball file> : C\u00e0i \u0111\u1eb7t package d\u1ef1a tr\u00ean tarball file : .tar , .tar.gz , ho\u1eb7c .tgz . V\u00ed d\u1ee5: npm install ./package.tgz npm install <tarball url> : t\u01b0\u01a1ng t\u1ef1 nh\u01b0 tr\u00ean nh\u01b0ng l\u00e0 link t\u1edbi url c\u1ee7a file tarball file \u0111\u1ec3 down v\u1ec1 npm install https://github.com/indexzero/forever/tarball/v0.5.6 scope npm install [<@scope>/]<name> : C\u00e0i package theo scope v\u00e0 t\u00ean package, version v\u00e0 tag m\u1eb7c \u0111\u1ecbnh l\u00e0 latest npm install @myorg/privatepackage npm install [<@scope>/]<name>@<tag> v\u00e0 npm install [<@scope>/]<name>@<version> : T\u01b0\u01a1ng t\u1ef1 tr\u00ean, nh\u01b0ng down ch\u00ednh x\u00e1c tag hay version c\u1ee7a package alias npm install <alias>@npm:<name> : alias l\u00e0 bi\u1ec7t danh c\u1ee7a package, \u0111\u01b0\u1ee3c named trong d\u1ef1 \u00e1n t\u1eeb nh\u1eefng package c\u1ee7a npm registry tu\u00e2n theo validate-npm-package-name . V\u00ed d\u1ee5: npm install my-react@npm:react npm install jquery2@npm:jquery@2 npm install jquery3@npm:jquery@3 npm install npa@npm:npm-package-arg git npm install <git remote url> : C\u00e0i \u0111\u1eb7t package t\u1eeb git b\u1eb1ng git remote url , syntax c\u1ee7a git remote url : <protocol>://[<user>[:<password>]@]<hostname>[:<port>][:][/]<path>[#<commit-ish> | #semver:<semver>] V\u00ed d\u1ee5: npm install git+ssh://git@github.com:npm/cli.git#v1.0.27 npm install git+ssh://git@github.com:npm/cli#pull/273 npm install git+ssh://git@github.com:npm/cli#semver:^5.0 npm install git+https://isaacs@github.com/npm/cli.git npm install git://github.com/npm/cli.git#v1.0.27 GIT_SSH_COMMAND='ssh -i ~/.ssh/custom_ident' npm install git+ssh://git@github.com:npm/cli.git \u0110\u01a1n gi\u1ea3n h\u01a1n, c\u00f3 th\u1ec3 d\u00f9ng npm install <githubname>/<githubrepo>[#<commit-ish>] ho\u1eb7c npm install github:<githubname>/<githubrepo>[#<commit-ish>] . V\u00ed d\u1ee5: npm install mygithubuser/myproject npm install github:mygithubuser/myproject Ngo\u00e0i ra, ta c\u00f3 th\u1ec3 t\u1ea3i package v\u1edbi git b\u1eb1ng id c\u1ee7a commit theo ki\u1ec3u npm install gist:[<githubname>/]<gistID>[#<commit-ish>|#semver:<semver>] ho\u1eb7c b\u1eb1ng gitlab npm install gitlab:<gitlabname>/<gitlabrepo>[#<commit-ish>] , bitbucket npm install bitbucket:<bitbucketname>/<bitbucketrepo>[#<commit-ish>]","title":"Description"},{"location":"Package-Management/npm/#configuration","text":"Xem full t\u1ea1i: using-npm/config , d\u01b0\u1edbi \u0111\u00e2y l\u00e0 3 Configuration ph\u1ed5 bi\u1ebfn nh\u1ea5t: save : Default: true Type: boolean L\u01b0u c\u00e1c packages \u0111\u00e3 c\u00e0i \u0111\u1eb7t v\u00e0o package.json d\u01b0\u1edbi d\u1ea1ng json object dependencies . \u0110\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 l\u01b0u packages c\u1ea7n thi\u1ebft \u0111\u1ec3 \u1ee9ng d\u1ee5ng ch\u1ea1y. save-dev : Default: false Type: boolean L\u01b0u c\u00e1c packages \u0111\u00e3 c\u00e0i \u0111\u1eb7t v\u00e0o package.json d\u01b0\u1edbi d\u1ea1ng json object devDependencies . \u0110\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 l\u01b0u packages cho m\u1ee5c \u0111\u00edch ph\u00e1t tri\u1ec3n. global Default: false Type: Boolean C\u00e0i c\u00e1c package \u1edf global thay v\u00ec local","title":"Configuration"},{"location":"Package-Management/npm/#remove-a-package","text":"npm uninstall [<@scope>/]<pkg>[@<version>]... [-S|--save|--no-save] aliases: remove, rm, r, un, unlink Thao t\u00e1c n\u00e0y s\u1ebd g\u1ee1 c\u00e0i \u0111\u1eb7t package, x\u00f3a lu\u00f4n c\u00e1c objects: dependencies , devDependencies , optionalDependencies , v\u00e0 peerDependencies trong package.json , npm-shrinkwrap.json v\u00e0 package-lock.json . C\u00f3 th\u1ec3 s\u1eed d\u1ee5ng Configuration: no-save \u0111\u1ec3 ng\u0103n vi\u1ec7c npm x\u00f3a c\u00e1c json object tr\u00ean.","title":"Remove a package"},{"location":"Package-Management/npm/#package-version-constrains-packagelock","text":"npm \u0111\u01b0a ra m\u1ed9t s\u1ed1 r\u00e0ng bu\u1ed9c v\u1ec1 Package version , g\u1ecdi l\u00e0 semantic versioning rules (? - V6, V7, npm V8 \u0111\u1ecdc docs ko th\u1ea5y) m\u00e0 b\u1ea5t c\u1ee9 NodeJS Dev n\u00e0o c\u0169ng should know. M\u1ed7i khi package c\u00f3 c\u00e1c c\u1eadp nh\u1eadt quan tr\u1ecdng, th\u00ec n\u00ean xu\u1ea5t b\u1ea3n phi\u00ean b\u1ea3n m\u1edbi c\u1ee7a package , Package version \u0111\u01b0\u1ee3c c\u1eadp nh\u1eadt trong t\u1ec7p package.json . Vi\u1ec7c \u0111\u1eb7t Package version tu\u00e2n theo semantic versioning rules gi\u00fap c\u00e1c \u00f4ng dev kh\u00e1c - user c\u1ee7a c\u00e1i package hi\u1ec3u \u0111\u01b0\u1ee3c m\u1ee9c \u0111\u1ed9 thay \u0111\u1ed5i trong m\u1ed9t phi\u00ean b\u1ea3n nh\u1ea5t \u0111\u1ecbnh c\u1ee7a package v\u00e0 \u0111i\u1ec1u ch\u1ec9nh m\u00e3 c\u1ee7a ri\u00eang \u1ed5ng n\u1ebfu c\u1ea7n. semantic versioning rules c\u01a1 b\u1ea3n: First release : 1.0.0 Patch release : 1.0.1 Minor release : 1.1.0 Major release : 2.0.0 source version specificity : Value Description ~version Approximately equivalent to version, c\u00e1ch t\u00ednh: npm semver - Tilde Ranges ^version Compatible with version, c\u00e1ch t\u00ednh: npm semver - Caret Ranges version version c\u1ee5 th\u1ec3 >version ho\u1eb7c >=version version th\u1ea5p nh\u1ea5t <version ho\u1eb7c <=version version cao nh\u1ea5t 1.2.x version t\u1eeb 1.2.0 t\u1edbi 1.2.9 * version n\u00e0o c\u0169ng h\u1ea3o latest latest release package-lock.json \u0111\u01b0\u1ee3c t\u1ea1o t\u1ef1 \u0111\u1ed9ng t\u1eeb npm ^5.x.x v\u1edbi m\u1ee5c \u0111\u00edch theo d\u00f5i ch\u00ednh x\u00e1c Package version c\u1ee7a m\u1ecdi package \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t \u0111\u1ec3 nodejs app c\u00f3 th\u1ec3 t\u00e1i t\u1ea1o l\u1ea1i ch\u00ednh x\u00e1c 100% node_modules . package-lock.json gi\u1ea3i quy\u1ebft m\u1ed9t v\u1ea5n \u0111\u1ec1 r\u1ea5t c\u1ee5 th\u1ec3 m\u00e0 package.json ch\u01b0a \u0111\u01b0\u1ee3c gi\u1ea3i quy\u1ebft \u0111\u01b0\u1ee3c: Trong package.json , ta c\u00f3 th\u1ec3 \u0111\u1eb7t Package version s\u1eed d\u1ee5ng semantic versioning rules , t\u1eeb \u0111\u00f3 d\u1eabn t\u1edbi tr\u01b0\u1eddng h\u1ee3p C\u00e0i \u0111\u1eb7t c\u00e1c dependencies t\u1eeb c\u00f9ng m\u1ed9t file package.json nh\u01b0ng l\u1ea1i d\u1eabn \u0111\u1ebfn 2 phi\u00ean b\u1ea3n c\u00e0i \u0111\u1eb7t kh\u00e1c nhau. \"express\" : { \"version\" : \"4.15.4\" , \"resolved\" : \"https://registry.npmjs.org/express/-/express-4.15.4.tgz\" , \"integrity\" : \"sha1-Ay4iU0ic+PzgJma+yj0R7XotrtE=\" , \"requires\" : { \"accepts\" : \"1.3.3\" , \"array-flatten\" : \"1.1.1\" , \"content-disposition\" : \"0.5.2\" , \"content-type\" : \"1.0.2\" , \"cookie\" : \"0.3.1\" , \"cookie-signature\" : \"1.0.6\" , \"debug\" : \"2.6.8\" , \"depd\" : \"1.1.1\" , \"encodeurl\" : \"1.0.1\" , \"escape-html\" : \"1.0.3\" , \"etag\" : \"1.8.0\" , \"finalhandler\" : \"1.0.4\" , \"fresh\" : \"0.5.0\" , \"merge-descriptors\" : \"1.0.1\" , \"methods\" : \"1.1.2\" , \"on-finished\" : \"2.3.0\" , \"parseurl\" : \"1.3.1\" , \"path-to-regexp\" : \"0.1.7\" , \"proxy-addr\" : \"1.1.5\" , \"qs\" : \"6.5.0\" , \"range-parser\" : \"1.2.0\" , \"send\" : \"0.15.4\" , \"serve-static\" : \"1.12.4\" , \"setprototypeof\" : \"1.0.3\" , \"statuses\" : \"1.3.1\" , \"type-is\" : \"1.6.15\" , \"utils-merge\" : \"1.0.0\" , \"vary\" : \"1.1.1\" } }, \u2192 package-lock.json ch\u1ec9 \u0111\u1ecbnh r\u00f5 version , location , m\u00e3 b\u0103m integrity cho m\u1ed7i module v\u00e0 t\u1eebng dependencies c\u1ee7a n\u00f3, t\u1eeb \u0111\u00f3 gi\u00fap cho vi\u1ec7c clone c\u1ee7a node_modules \u0111\u01b0\u1ee3c t\u1ea1o ra s\u1ebd lu\u00f4n gi\u1ed1ng nhau cho d\u00f9 ta c\u00e0i \u0111\u1eb7t nodejs app v\u00e0o b\u1ea5t c\u1ee9 l\u00fac n\u00e0o.","title":"Package version constrains &amp; package.lock"},{"location":"Package-Management/npm/#reference","text":"Difference between npx and npm Difference between npm and yarn npm vs yarn Semantic versioning cheatsheet","title":"Reference"},{"location":"Redis/Redis/","text":"Redis Overview Redis data types Redis Clusters Redis Pub/Sub Overview Redis - REmote DIctionary Server: l\u00e0 m\u1ed9t open-source \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 l\u01b0u tr\u1eef d\u1eef li\u1ec7u c\u00f3 c\u1ea5u tr\u00fac v\u00e0 l\u01b0u d\u01b0\u1edbi d\u1ea1ng key-value , c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng nh\u01b0 m\u1ed9t database , b\u1ed9 nh\u1edb cache hay m\u1ed9t message broker . Redis hi\u1ec7n cung c\u1ea5p th\u1eddi gian ph\u1ea3n h\u1ed3i ch\u01b0a \u0111\u1ebfn m\u1ed9t mili gi\u00e2y , gi\u00fap th\u1ef1c hi\u1ec7n h\u00e0ng tri\u1ec7u y\u00eau c\u1ea7u m\u1ed7i gi\u00e2y cho c\u00e1c \u1ee9ng d\u1ee5ng realtime trong nh\u1eefng ng\u00e0nh nh\u01b0 tr\u00f2 ch\u01a1i, c\u00f4ng ngh\u1ec7 qu\u1ea3ng c\u00e1o, d\u1ecbch v\u1ee5 t\u00e0i ch\u00ednh, ch\u0103m s\u00f3c s\u1ee9c kh\u1ecfe v\u00e0 IoT. Do hi\u1ec7u su\u1ea5t nhanh , Redis th\u01b0\u1eddng \u0111\u01b0\u1ee3c ch\u1ecdn s\u1eed d\u1ee5ng cho b\u1ed9 nh\u1edb \u0111\u1ec7m, qu\u1ea3n l\u00fd phi\u00ean, tr\u00f2 ch\u01a1i, b\u1ea3ng x\u1ebfp h\u1ea1ng, ph\u00e2n t\u00edch theo realtime, \u1ee9ng d\u1ee5ng kh\u00f4ng gian \u0111\u1ecba l\u00fd, \u0111\u1eb7t xe, tr\u00f2 chuy\u1ec7n/nh\u1eafn tin, ph\u00e1t tr\u1ef1c ti\u1ebfp n\u1ed9i dung \u0111a ph\u01b0\u01a1ng ti\u1ec7n c\u0169ng nh\u01b0 c\u00e1c \u1ee9ng d\u1ee5ng c\u01a1 ch\u1ebf pub/sub. Redis c\u00f3 hi\u1ec7u su\u1ea5t nhanh nh\u01b0 th\u1ebf l\u00e0 nh\u1edd n\u00f3 l\u00e0 m\u1ed9t h\u1ec7 th\u1ed1ng c\u01a1 s\u1edf d\u1eef li\u1ec7u NoSQL, l\u01b0u tr\u1eef d\u1eef li\u1ec7u v\u1edbi d\u1ea1ng KEY-VALUE tr\u00ean b\u1ed9 nh\u1edb RAM c\u1ee7a m\u00e1y ch\u1ee7. Ngo\u00e0i ra, n\u00f3 c\u0169ng c\u00f3 c\u01a1 ch\u1ebf sao l\u01b0u d\u1eef li\u1ec7u xu\u1ed1ng \u1ed5 c\u1ee9ng, v\u1eabn \u0111\u1ea3m b\u1ea3o \u0111\u01b0\u1ee3c d\u1eef li\u1ec7u kh\u00f4ng b\u1ecb m\u1ea5t \u0111i d\u00f9 truy xu\u1ea5t nhanh. Redis mang l\u1ea1i nh\u1eefng l\u1ee3i \u00edch sau: Hi\u1ec7u su\u1ea5t : Redis l\u01b0u tr\u1eef d\u1eef li\u1ec7u tr\u00ean RAM c\u1ed9ng v\u1edbi c\u01a1 ch\u1ebf Replication, t\u1eeb \u0111\u00f3 Redis mang t\u00ednh high availability , n\u00e2ng cao performance r\u1ea5t nhi\u1ec1u so v\u1edbi c\u01a1 s\u1edf d\u1eef li\u1ec7u l\u01b0u ph\u1ea7n l\u1edbn d\u1eef li\u1ec7u tr\u00ean \u1ed5 \u0111\u0129a ho\u1eb7c \u1ed5 SSD. C\u1ea5u tr\u00fac d\u1eef li\u1ec7u linh ho\u1ea1t : Redis s\u1edf h\u1eefu r\u1ea5t nhi\u1ec1u c\u1ea5u tr\u00fac d\u1eef li\u1ec7u \u0111\u1ec3 \u0111\u00e1p \u1ee9ng nhu c\u1ea7u cho \u1ee9ng d\u1ee5ng c\u1ee7a b\u1ea1n. \u0110\u01a1n gi\u1ea3n v\u00e0 d\u1ec5 s\u1eed d\u1ee5ng : Redis \u0111\u01a1n gi\u1ea3n h\u00f3a m\u00e3 b\u1eb1ng c\u00e1ch cho ph\u00e9p b\u1ea1n vi\u1ebft \u00edt d\u00f2ng l\u1ec7nh h\u01a1n \u0111\u1ec3 l\u01b0u tr\u1eef, truy c\u1eadp v\u00e0 s\u1eed d\u1ee5ng d\u1eef li\u1ec7u tr\u00ean \u1ee9ng d\u1ee5ng c\u1ee7a b\u1ea1n Kh\u1ea3 n\u0103ng sao ch\u00e9p v\u00e0 \u0111\u1ed9 b\u1ec1n : Redis s\u1eed d\u1ee5ng ki\u1ebfn tr\u00fac master-slave v\u00e0 h\u1ed7 tr\u1ee3 sao ch\u00e9p kh\u00f4ng \u0111\u1ed3ng b\u1ed9, trong \u0111\u00f3 c\u00f3 th\u1ec3 sao ch\u00e9p d\u1eef li\u1ec7u sang nhi\u1ec1u m\u00e1y ch\u1ee7 kh\u00e1c. V\u1ec1 \u0111\u1ed9 b\u1ec1n, Redis h\u1ed7 tr\u1ee3 backup d\u1eef li\u1ec7u t\u1ea1i m\u1ed9t th\u1eddi \u0111i\u1ec3m n\u00e0o \u0111\u00f3 (ch\u00e9p t\u1eadp d\u1eef li\u1ec7u Redis sang \u1ed5 \u0111\u0129a). \u0110\u1ed9 kh\u1ea3 d\u1ee5ng cao v\u00e0 quy m\u00f4 linh ho\u1ea1t : Redis t\u1ed5 ch\u1ee9c m\u00f4 h\u00ecnh master-slave theo ki\u1ebfn tr\u00fac Redis Cluster , ki\u1ebfn tr\u00fac n\u00e0y cho ph\u00e9p x\u00e2y d\u1ef1ng nh\u1eefng gi\u1ea3i ph\u00e1p c\u00f3 \u0111\u1ed9 kh\u1ea3 d\u1ee5ng cao - khi c\u1ea7n th\u00ec Cluster c\u00f3 th\u1ec3 m\u1edf r\u1ed9ng ho\u1eb7c thu g\u1ecdn, \u0111\u1ea3m b\u1ea3o hi\u1ec7u su\u1ea5t \u1ed5n \u0111\u1ecbnh v\u00e0 b\u1ea3o m\u1eadt. M\u00e3 ngu\u1ed3n m\u1edf Tr\u01b0\u1eddng h\u1ee3p s\u1eed d\u1ee5ng ph\u1ed5 bi\u1ebfn c\u1ee7a Redis: Cache : Redis l\u00e0 kho d\u1eef li\u1ec7u ch\u1ee9a c\u00e1c key-value c\u00f3 th\u1ec3 ho\u1ea1t \u0111\u1ed9ng nh\u01b0 b\u1ed9 nh\u1edb \u0111\u1ec7m, t\u1ef1 \u0111\u1ed9ng x\u00f3a b\u1ecf d\u1eef li\u1ec7u c\u0169 khi th\u00eam m\u1ed9t d\u1eef li\u1ec7u m\u1edbi. Khi \u0111\u00f3 b\u1ed9 nh\u1edb \u0111\u1ec7m n\u00e0y c\u00f3 th\u1ec3 ho\u1ea1t \u0111\u1ed9ng theo thu\u1eadt to\u00e1n LRU (Least Recently Used) v\u00e0 c\u1ea3 LFU (Least Frequently Used) k\u1ec3 t\u1eeb phi\u00ean b\u1ea3n 4.0. C\u01a1 ch\u1ebf Redis cached s\u1ebd h\u1ed7 tr\u1ee3 nhi\u1ec1u ki\u1ec3u c\u1ea5u tr\u00fac d\u1eef li\u1ec7u ph\u1ed5 bi\u1ebfn (hash, list, set, sorted set, string) c\u00f9ng v\u1edbi c\u00f4ng ngh\u1ec7 \u0111\u1ecdc ghi d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf v\u00e0 t\u1ed1i \u01b0u hi\u1ec7u su\u1ea5t t\u1ed1t (h\u01a1n Memcached ). \u0110\u1ed3ng th\u1eddi, Redis c\u00f2n c\u00f3 th\u1ec3 cho ph\u00e9p scripting b\u1eb1ng ng\u00f4n ng\u1eef Lua - Lua scripting. Do \u0111\u00f3, Redis th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng l\u00e0m h\u1ec7 th\u1ed1ng l\u01b0u tr\u1eef b\u1ed9 nh\u1edb \u0111\u1ec7m cho c\u00e1c \u1ee9ng d\u1ee5ng c\u1ea7n truy xu\u1ea5t d\u1eef li\u1ec7u v\u1edbi t\u1ed1c \u0111\u1ed9 ph\u1ea3n h\u1ed3i nhanh. Database : B\u1ea3n ch\u1ea5t Redis l\u00e0 m\u1ed9t server c\u1ea5u tr\u00fac d\u1eef li\u1ec7u. Ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 d\u00f9ng Redis \u0111\u01a1n l\u1ebb nh\u01b0 m\u1ed9t server ch\u1ee9a d\u1eef li\u1ec7u b\u00ecnh th\u01b0\u1eddng. Ho\u1eb7c k\u1ebft h\u1ee3p v\u1edbi m\u1ed9t database kh\u00e1c nh\u01b0 MySQL \u0111\u1ec3 t\u0103ng t\u1ed1c \u0111\u1ed9 x\u1eed l\u00ed c\u1ee7a n\u00f3. B\u00ean c\u1ea1nh c\u01a1 ch\u1ebf l\u01b0u tr\u1eef backup tr\u00ean \u1ed5 \u0111\u0129a c\u1ee9ng nh\u01b0 c\u00e1c h\u1ec7 qu\u1ea3n tr\u1ecb d\u1eef li\u1ec7u kh\u00e1c, \u0111\u1ed9 b\u1ea3o m\u1eadt v\u00e0 s\u1eeda l\u1ed7i cao l\u00e0 \u0111i\u1ec3m \u0111\u1eb7c bi\u1ec7t c\u1ee7a c\u01a1 s\u1edf d\u1eef li\u1ec7u \u0111\u1eb7c bi\u1ec7t n\u00e0y. Message broker : Redis hi\u1ec7n cung c\u1ea5p th\u1eddi gian ph\u1ea3n h\u1ed3i \u1edf t\u1ed1c \u0111\u1ed9 ch\u01b0a \u0111\u1ebfn m\u1ed9t mili gi\u00e2y. Ch\u00ednh v\u00ec th\u1ebf, h\u00e0ng tri\u1ec7u y\u00eau c\u1ea7u m\u1ed7i gi\u00e2y cho c\u00e1c \u1ee9ng d\u1ee5ng th\u1eddi gian th\u1ef1c trong l\u0129nh v\u1ef1c Tr\u00f2 ch\u01a1i, C\u00f4ng ngh\u1ec7 qu\u1ea3ng c\u00e1o, D\u1ecbch v\u1ee5 t\u00e0i ch\u00ednh, Ch\u0103m s\u00f3c s\u1ee9c kh\u1ecfe v\u00e0 IoT \u0111\u01b0\u1ee3c \u0111\u00e1p \u1ee9ng r\u1ea5t nhanh g\u1ecdn. Ngo\u00e0i ra, Redis th\u01b0\u1eddng c\u00f2n \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho ho\u1ea1t \u0111\u1ed9ng Session store , Gaming leaderboards , Rich media streaming , Geospatial , Machine Learning v\u00e0 Real-time analytics . Redis data types Kh\u00e1c v\u1edbi RDMS nh\u01b0 MySQL, hay PostgreSQL, Redis kh\u00f4ng c\u00f3 table. Redis l\u01b0u tr\u1eef data d\u01b0\u1edbi d\u1ea1ng key-value . Cobf so v\u1edbi memcached th\u00ec memcached c\u0169ng l\u00e0m v\u1eady, nh\u01b0ng ki\u1ec3u d\u1eef li\u1ec7u c\u1ee7a memcached b\u1ecb h\u1ea1n ch\u1ebf, kh\u00f4ng \u0111a d\u1ea1ng \u0111\u01b0\u1ee3c nh\u01b0 Redis, do \u0111\u00f3 kh\u00f4ng h\u1ed7 tr\u1ee3 \u0111\u01b0\u1ee3c nhi\u1ec1u thao t\u00e1c t\u1eeb ph\u00eda ng\u01b0\u1eddi d\u00f9ng. D\u01b0\u1edbi \u0111\u00e2y l\u00e0 s\u01a1 l\u01b0\u1ee3c v\u1ec1 c\u00e1c ki\u1ec3u d\u1eef li\u1ec7u Redis d\u00f9ng \u0111\u1ec3 l\u01b0u value: Strings Strings l\u00e0 ki\u1ec3u d\u1eef li\u1ec7u c\u01a1 b\u1ea3n nh\u1ea5t c\u1ee7a Redis. Redis string \u0111\u01b0\u1ee3c l\u01b0u d\u01b0\u1edbi d\u1ea1ng nh\u1ecb ph\u00e2n n\u00ean c\u00f3 th\u1ec3 ch\u1ee9a b\u1ea5t k\u00ec lo\u1ea1i d\u1eef li\u1ec7u n\u00e0o nh\u01b0 \u1ea3nh d\u1ea1ng JPEG hay Ruby object . \u0110\u1ed9 d\u00e0i gi\u00e1 tr\u1ecb c\u1ee7a 1 string t\u1ed1i \u0111a l\u00e0 512MB. Danh s\u00e1ch c\u00e1c command tr\u00ean Redis \u0111\u1ec3 thao t\u00e1c v\u1edbi string type: commands/#string V\u00ed d\u1ee5 b\u00ean d\u01b0\u1edbi v\u1edbi vi\u1ec7c s\u1eed d\u1ee5ng l\u1ec7nh SET \u0111\u1ec3 set value cho key v\u00e0 l\u1ec7nh GET \u0111\u1ec3 truy xu\u1ea5t value c\u1ee7a key. $ set username Harry OK $ get username \"Harry\" List List l\u00e0 danh s\u00e1ch c\u00e1c string \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp theo th\u1ee9 t\u1ef1 ch\u00e8n v\u00e0o list. Ta c\u00f3 th\u1ec3 th\u00eam c\u00e1c ph\u1ea7n t\u1eed v\u00e0o \u0111\u1ea7u ho\u1eb7c cu\u1ed1i 1 list s\u1eed d\u1ee5ng LPUSH ho\u1eb7c RPUSH . M\u1ed9t list \u0111\u01b0\u1ee3c t\u1ea1o ra khi ch\u00fang ta th\u1ef1c hi\u1ec7n thao t\u00e1c LPUSH ho\u1eb7c RPUSH v\u1edbi m\u1ed9t key r\u1ed7ng. T\u01b0\u01a1ng t\u1ef1, key s\u1ebd \u0111\u01b0\u1ee3c x\u00f3a kh\u1ecfi key space khi c\u00e1c thao t\u00e1c tr\u00ean bi\u1ebfn danh s\u00e1ch tr\u1edf v\u1ec1 r\u1ed7ng. V\u00ed d\u1ee5: LPUSH mylist a # now the list is \"a\" LPUSH mylist b # now the list is \"b\",\"a\" RPUSH mylist c # now the list is \"b\",\"a\",\"c\" (RPUSH was used this time) Danh s\u00e1ch c\u00e1c command v\u1edbi lists t\u1ea1i commands#list Sets Sets l\u00e0 t\u1eadp h\u1ee3p c\u00e1c string kh\u00f4ng \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp. Sets h\u1ed7 tr\u1ee3 c\u00e1c thao t\u00e1c th\u00eam ph\u1ea7n t\u1eed, \u0111\u1ecdc , x\u00f3a t\u1eebng ph\u1ea7n t\u1eed, ki\u1ec3m tra s\u1ef1 t\u1ed3n t\u1ea1i c\u1ee7a ph\u1ea7n t\u1eed trong set v\u1edbi th\u1eddi gian m\u1eb7c \u0111\u1ecbnh l\u00e0 O(1) b\u1ea5t k\u1ec3 s\u1ed1 l\u01b0\u1ee3ng ph\u1ea7n t\u1eed c\u1ee7a set \u0111\u00f3 l\u00e0 bao nhi\u00eau. Ngo\u00e0i ra Redis c\u00f2n h\u1ed7 tr\u1ee3 c\u00e1c ph\u00e9p to\u00e1n gi\u1eefa c\u00e1c sets v\u1edbi nhau, g\u1ed3m intersect , union , difference . S\u1ed1 l\u01b0\u1ee3ng ph\u1ea7n t\u1eed t\u1ed1i \u0111a trong 1 set l\u00e0 2^32 - 1 ( 4294967295 , nhi\u1ec1u h\u01a1n 4 t\u1ec9 ph\u1ea7n t\u1eed trong m\u1ed7i set). Danh s\u00e1ch c\u00e1c command v\u1edbi sets t\u1ea1i commands#set Hashes Hashes l\u00e0 ki\u1ec3u d\u1eef li\u1ec7u l\u01b0u tr\u1eef hash table c\u1ee7a c\u00e1c c\u1eb7p key-value , trong \u0111\u00f3, key \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp ng\u1eabu nhi\u00ean, kh\u00f4ng theo th\u1ee9 t\u1ef1 n\u00e0o c\u1ea3. Hash th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 l\u01b0u c\u00e1c object (user c\u00f3 c\u00e1c filed nh\u01b0 name, age, address,...). M\u1ed7i hash c\u00f3 th\u1ec3 l\u01b0u tr\u1eef 2^32 - 1 c\u1eb7p key-value. Redis h\u1ed7 tr\u1ee3 c\u00e1c thao t\u00e1c th\u00eam , \u0111\u1ecdc , x\u00f3a t\u1eebng ph\u1ea7n t\u1eed, c\u0169ng nh\u01b0 \u0111\u1ecdc t\u1ea5t c\u1ea3 gi\u00e1 tr\u1ecb trong hash. Danh s\u00e1ch c\u00e1c command v\u1edbi Hashes t\u1ea1i commands#hash Sorted Sets Sorted Sets c\u01a1 b\u1ea3n l\u00e0 Sets c\u00e1c string \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp sao cho c\u00e1c string trong set \u0111\u1ec1u l\u00e0 duy nh\u1ea5t . M\u1ed7i ph\u1ea7n t\u1eed c\u1ee7a Sorted Sets l\u00e0 map c\u1ee7a 1 string (member) v\u00e0 1 floating-point number (score), Sorted Sets s\u1ebd \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp theo score n\u00e0y, c\u00e1c ph\u1ea7n t\u1eed l\u00e0 duy nh\u1ea5t nh\u01b0ng c\u00e1c score c\u00f3 th\u1ec3 ngang b\u1eb1ng nhau. Redis h\u1ed7 tr\u1ee3 c\u00e1c thao t\u00e1c t\u00e1c th\u00eam , s\u1eeda , x\u00f3a ph\u1ea7n t\u1eed m\u1ed9t c\u00e1ch r\u1ea5t nhanh (th\u1eddi gian t\u1ec9 l\u1ec7 v\u1edbi logarit c\u1ee7a s\u1ed1 ph\u1ea7n t\u1eed). Danh s\u00e1ch c\u00e1c command v\u1edbi Hashes t\u1ea1i commands#sorted-set Bitmaps and HyperLogLogs Redis c\u0169ng h\u1ed7 tr\u1ee3 Bitmap v\u00e0 HyperLogLogs v\u00e0 \u0111\u1ec1u d\u1ef1a tr\u00ean ki\u1ec3u strings nh\u01b0ng c\u00f3 semantics ri\u00eang c\u1ee7a ch\u00fang: Bitmap - ki\u1ec3u d\u1eef li\u1ec7u t\u1eadp h\u1ee3p c\u00e1c bit v\u00e0 \u0111\u01b0\u1ee3c Redis h\u1ed7 tr\u1ee3 th\u1ef1c hi\u1ec7n c\u00e1c t\u00e1c v\u1ee5 quy m\u00f4 bit. HyperLogLogs : Redis HyperLogLog l\u00e0 m\u1ed9t thu\u1eadt to\u00e1n s\u1eed d\u1ee5ng ph\u01b0\u01a1ng ph\u00e1p ng\u1eabu nhi\u00ean \u0111\u1ec3 t\u1ea1o ra m\u1ed9t s\u1ed1 l\u01b0\u1ee3ng ph\u1ea7n t\u1eed l\u00e0 duy nh\u1ea5t trong m\u1ed9t t\u1eadp h\u1ee3p ch\u1ec9 s\u1eed d\u1ee5ng m\u1ed9t l\u01b0\u1ee3ng b\u1ed9 nh\u1edb nh\u1ecf v\u00e0 kh\u00f4ng \u0111\u1ed5i. HyperLogLog cung c\u1ea5p m\u1ed9t x\u1ea5p x\u1ec9 r\u1ea5t t\u1ed1t v\u1ec1 t\u00ednh ch\u00ednh x\u00e1c c\u1ee7a m\u1ed9t t\u1eadp h\u1ee3p ngay c\u1ea3 khi s\u1eed d\u1ee5ng m\u1ed9t l\u01b0\u1ee3ng b\u1ed9 nh\u1edb r\u1ea5t nh\u1ecf kho\u1ea3ng 12 kbyte m\u1ed7i key v\u1edbi sai s\u1ed1 chu\u1ea9n l\u00e0 0,81% . Kh\u00f4ng c\u00f3 gi\u1edbi h\u1ea1n v\u1ec1 s\u1ed1 l\u01b0\u1ee3ng ph\u1ea7n t\u1eed, tr\u1eeb khi b\u1ea1n c\u1ea7n m\u1ed9t s\u1ed1 l\u01b0\u1ee3ng l\u1edbn h\u01a1n 264 ph\u1ea7n t\u1eed . Redis Clusters Master-Slave Architecture Master Node: Process ch\u00ednh, ch\u1ea1y v\u00e0 x\u1eed l\u00fd c\u00e1c k\u1ebft n\u1ed1i v\u1edbi client. Slave Node: process ph\u1ee5, ch\u1ea1y c\u00f9ng process ch\u00ednh v\u00e0 gi\u00e1m s\u00e1t process ch\u00ednh. Process ph\u1ee5 c\u0169ng th\u1ef1c hi\u1ec7n vi\u1ec7c ghi (dump) d\u1eef li\u1ec7u \u0111\u1ecbnh k\u1ef3 v\u00e0o \u1ed5 c\u1ee9ng \u0111\u1ec3 backup. Redis Cluster vs. Redis Sentinel Redis c\u0169ng gi\u1ed1ng c\u00e1c c\u01a1 s\u1edf d\u1eef li\u1ec7u kh\u00e1c, Redis c\u1ea7n c\u1ea5u h\u00ecnh \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o t\u00ednh s\u1eb5n s\u1eb1ng v\u00e0 ho\u1ea1t \u0111\u1ed9ng c\u1ee7a n\u00f3, v\u1edbi Redis Cluster v\u00e0 Redis Sentinel . Redis Sentinel : l\u00e0 m\u1ed9t h\u1ec7 th\u1ed1ng \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 gi\u00fap qu\u1ea3n l\u00fd c\u00e1c Redis instances . M\u1ee5c \u0111\u00edch ch\u00ednh c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng sentinel l\u00e0 cung c\u1ea5p m\u1ed9t h\u1ec7 th\u1ed1ng c\u00f3 t\u00ednh high availability b\u1eb1ng c\u00e1ch monitoring , notifying , v\u00e0 providing v\u00e0 Replication - Replication theo m\u00f4 h\u00ecnh master-slave (m\u1ed9t v\u00e0i Redis instances \u0111\u00f3ng vai tr\u00f2 slave l\u00e0 b\u1ea3n sao ch\u00ednh x\u00e1c c\u1ee7a m\u1ed9t Redis instance gi\u1eef vai tr\u00f2 master). Khi m\u1ed9t master kh\u00f4ng th\u1ec3 serve , Sentinel \u0111\u1ea3m nhi\u1ec7m nhi\u1ec7m v\u1ee5 gi\u00e1m s\u00e1t s\u1ebd t\u1ef1 l\u1ef1a ch\u1ecdn m\u1ed9t master m\u1edbi trong c\u00e1c slaves. Redis Cluster :L\u00e0 m\u1ed9t gi\u1ea3i ph\u00e1p cho data sharding v\u1edbi t\u00ednh n\u0103ng qu\u1ea3n l\u00fd, v\u00e0 c\u0169ng c\u00f3 c\u01a1 ch\u1ebf replication. Redis Cluster gi\u00fap Redis ho\u1ea1t \u0111\u1ed9ng theo m\u00f4 h\u00ecnh ph\u00e2n t\u00e1n, chia m\u1ed9t instance th\u00e0nh nhi\u1ec1u cluster, kh\u00e1c v\u1edbi Replication + Sentinel \u0111\u00f3 l\u00e0 c\u00e1c cluster \u0111\u1ec1u \u0111\u01b0\u1ee3c coi nh\u01b0 master. \u2192 Redis Cluster cung c\u1ea5p t\u00ednh kh\u1ea3 d\u1ee5ng cao, ho\u1ea1t \u0111\u1ed9ng t\u01b0\u01a1ng t\u1ef1 nh\u01b0 Redis Sentinel nh\u01b0ng cho ph\u00e9p chia s\u1ebb nhi\u1ec1u d\u1eef li\u1ec7u h\u01a1n gi\u1eefa c\u00e1c instances trong Cluster. Do \u0111\u00f3, Redis Cluster c\u1ea3i thi\u1ec7n kh\u1ea3 n\u0103ng m\u1edf r\u1ed9ng \u1ee9ng d\u1ee5ng c\u1ee7a khi d\u1eef li\u1ec7u scale-up. Concepts and Redis Cluster master-replica model Redis Cluster provides a way to run a Redis installation where data is automatically sharded across multiple Redis nodes. Redis Cluster also provides some degree of availability during partitions, that is in practical terms the ability to continue the operations when some nodes fail or are not able to communicate. D\u1eef li\u1ec7u \u0111\u01b0\u1ee3c t\u1ef1 \u0111\u1ed9ng chia nh\u1ecf tr\u00ean nhi\u1ec1u Redis Node v\u00e0 c\u00f3 th\u1ec3 t\u1ef1 \u0111\u1ed9ng chia s\u1ebb d\u1eef li\u1ec7u v\u1edbi nhau trong Cluster. Duy tr\u00ec kh\u1ea3 n\u0103ng ho\u1ea1t \u0111\u1ed9ng li\u00ean t\u1ee5c c\u1ee7a Cluster, khi m\u1ed9t Node con g\u1eb7p s\u1ef1 c\u1ed1 ho\u1eb7c kh\u00f4ng th\u1ec3 giao ti\u1ebfp v\u1edbi ph\u1ea7n c\u00f2n l\u1ea1i c\u1ee7a Cluster, Redis Cluster s\u1ebd ti\u1ebfn h\u00e0nh thay th\u1ebf Node \u0111\u00f3 b\u1eb1ng nh\u00e2n b\u1ea3n c\u1ee7a n\u00f3, \u0111\u1ea3m b\u1ea3o nh\u00e2n b\u1ea3n n\u00e0y ho\u1ea1t \u0111\u1ed9ng \u0111\u00fang nh\u01b0 Node c\u0169 d\u1ef1a tr\u00ean ch\u1ebf Replication nh\u01b0 tr\u00ean. C\u1ee5 th\u1ec3: Khi process ch\u00ednh - Master Node b\u1ecb treo hay tho\u00e1t, m\u1ed9t trong c\u00e1c process ph\u1ee5 - Slave Node tr\u1edf th\u00e0nh Master Node v\u00e0 x\u1eed l\u00fd t\u1ea5t c\u1ea3 c\u00e1c y\u00eau c\u1ea7u trong khi ch\u1edd Master Node \u0111\u01b0\u1ee3c kh\u1edfi \u0111\u1ed9ng l\u1ea1i. Khi Master Process ho\u1ea1t \u0111\u1ed9ng tr\u1edf l\u1ea1i, n\u00f3 s\u1ebd l\u1ea5y t\u1ec7p k\u1ebft xu\u1ea5t t\u1eeb \u200b\u200bMaster t\u1ea1m th\u1eddi v\u00e0 s\u1eed d\u1ee5ng n\u00f3 l\u00e0m c\u01a1 s\u1edf. Qu\u00e1 tr\u00ecnh ch\u00ednh \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o l\u1ea1i d\u01b0\u1edbi d\u1ea1ng Master, trong khi Master Node t\u1ea1m th\u1eddi quay tr\u1edf l\u1ea1i l\u00e0m vi\u1ec7c nh\u01b0 m\u1ed9t Slave Node . Pub/Sub Redis Pub / Sub \u0111\u01b0\u1ee3c \u00e1p d\u1ee5ng trong c\u00e1c h\u1ec7 th\u1ed1ng c\u1ea7n g\u1eedi / nh\u1eadn message t\u1eeb sender - publisher g\u1eedi message \u0111\u1ebfn receiver subscriber . Li\u00ean k\u1ebft m\u00e0 c\u00e1c message \u0111\u01b0\u1ee3c chuy\u1ec3n \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 Chanel . Trong Redis, m\u1ed9t client c\u00f3 th\u1ec3 subscribe nhi\u1ec1u chanel . D\u01b0\u1edbi \u0111\u00e2y l\u00e0 c\u00e1c Command c\u01a1 b\u1ea3n, xem full t\u1ea1i commands/#pubsub : Command Description PSUBSCRIBE pattern [pattern ...] \u0110\u0103ng k\u00fd (subscibe) channel PUBSUB subcommand [argument [argument ...]] Cho bi\u1ebft tr\u1ea1ng th\u00e1i c\u1ee7a h\u1ec7 th\u1ed1ng Pub / Sub. V\u00ed d\u1ee5, client n\u00e0o \u0111ang ho\u1ea1t \u0111\u1ed9ng tr\u00ean m\u00e1y ch\u1ee7. PUBLISH channel message G\u1eedi message t\u1edbi channel PUNSUBSCRIBE [pattern [pattern ...]] D\u1eebng nh\u1eadn message c\u1ee7a channel theo pattern SUBSCRIBE channel [channel ...] Nh\u1eadn message c\u1ee7a channel UNSUBSCRIBE [channel [channel ...]] D\u1eebng vi\u1ec7c nh\u1eadn message t\u1eeb channel Reference What is Redis - AWS Redis Data types redis-sentinel-vs-cluster Redis Master-Slave Replication Redis cluster tutorial Redis pubsub topic Publish/Subscribe pattern example (Redis, Kafka)","title":"Redis"},{"location":"Redis/Redis/#redis","text":"Overview Redis data types Redis Clusters Redis Pub/Sub","title":"Redis"},{"location":"Redis/Redis/#overview","text":"Redis - REmote DIctionary Server: l\u00e0 m\u1ed9t open-source \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 l\u01b0u tr\u1eef d\u1eef li\u1ec7u c\u00f3 c\u1ea5u tr\u00fac v\u00e0 l\u01b0u d\u01b0\u1edbi d\u1ea1ng key-value , c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng nh\u01b0 m\u1ed9t database , b\u1ed9 nh\u1edb cache hay m\u1ed9t message broker . Redis hi\u1ec7n cung c\u1ea5p th\u1eddi gian ph\u1ea3n h\u1ed3i ch\u01b0a \u0111\u1ebfn m\u1ed9t mili gi\u00e2y , gi\u00fap th\u1ef1c hi\u1ec7n h\u00e0ng tri\u1ec7u y\u00eau c\u1ea7u m\u1ed7i gi\u00e2y cho c\u00e1c \u1ee9ng d\u1ee5ng realtime trong nh\u1eefng ng\u00e0nh nh\u01b0 tr\u00f2 ch\u01a1i, c\u00f4ng ngh\u1ec7 qu\u1ea3ng c\u00e1o, d\u1ecbch v\u1ee5 t\u00e0i ch\u00ednh, ch\u0103m s\u00f3c s\u1ee9c kh\u1ecfe v\u00e0 IoT. Do hi\u1ec7u su\u1ea5t nhanh , Redis th\u01b0\u1eddng \u0111\u01b0\u1ee3c ch\u1ecdn s\u1eed d\u1ee5ng cho b\u1ed9 nh\u1edb \u0111\u1ec7m, qu\u1ea3n l\u00fd phi\u00ean, tr\u00f2 ch\u01a1i, b\u1ea3ng x\u1ebfp h\u1ea1ng, ph\u00e2n t\u00edch theo realtime, \u1ee9ng d\u1ee5ng kh\u00f4ng gian \u0111\u1ecba l\u00fd, \u0111\u1eb7t xe, tr\u00f2 chuy\u1ec7n/nh\u1eafn tin, ph\u00e1t tr\u1ef1c ti\u1ebfp n\u1ed9i dung \u0111a ph\u01b0\u01a1ng ti\u1ec7n c\u0169ng nh\u01b0 c\u00e1c \u1ee9ng d\u1ee5ng c\u01a1 ch\u1ebf pub/sub. Redis c\u00f3 hi\u1ec7u su\u1ea5t nhanh nh\u01b0 th\u1ebf l\u00e0 nh\u1edd n\u00f3 l\u00e0 m\u1ed9t h\u1ec7 th\u1ed1ng c\u01a1 s\u1edf d\u1eef li\u1ec7u NoSQL, l\u01b0u tr\u1eef d\u1eef li\u1ec7u v\u1edbi d\u1ea1ng KEY-VALUE tr\u00ean b\u1ed9 nh\u1edb RAM c\u1ee7a m\u00e1y ch\u1ee7. Ngo\u00e0i ra, n\u00f3 c\u0169ng c\u00f3 c\u01a1 ch\u1ebf sao l\u01b0u d\u1eef li\u1ec7u xu\u1ed1ng \u1ed5 c\u1ee9ng, v\u1eabn \u0111\u1ea3m b\u1ea3o \u0111\u01b0\u1ee3c d\u1eef li\u1ec7u kh\u00f4ng b\u1ecb m\u1ea5t \u0111i d\u00f9 truy xu\u1ea5t nhanh. Redis mang l\u1ea1i nh\u1eefng l\u1ee3i \u00edch sau: Hi\u1ec7u su\u1ea5t : Redis l\u01b0u tr\u1eef d\u1eef li\u1ec7u tr\u00ean RAM c\u1ed9ng v\u1edbi c\u01a1 ch\u1ebf Replication, t\u1eeb \u0111\u00f3 Redis mang t\u00ednh high availability , n\u00e2ng cao performance r\u1ea5t nhi\u1ec1u so v\u1edbi c\u01a1 s\u1edf d\u1eef li\u1ec7u l\u01b0u ph\u1ea7n l\u1edbn d\u1eef li\u1ec7u tr\u00ean \u1ed5 \u0111\u0129a ho\u1eb7c \u1ed5 SSD. C\u1ea5u tr\u00fac d\u1eef li\u1ec7u linh ho\u1ea1t : Redis s\u1edf h\u1eefu r\u1ea5t nhi\u1ec1u c\u1ea5u tr\u00fac d\u1eef li\u1ec7u \u0111\u1ec3 \u0111\u00e1p \u1ee9ng nhu c\u1ea7u cho \u1ee9ng d\u1ee5ng c\u1ee7a b\u1ea1n. \u0110\u01a1n gi\u1ea3n v\u00e0 d\u1ec5 s\u1eed d\u1ee5ng : Redis \u0111\u01a1n gi\u1ea3n h\u00f3a m\u00e3 b\u1eb1ng c\u00e1ch cho ph\u00e9p b\u1ea1n vi\u1ebft \u00edt d\u00f2ng l\u1ec7nh h\u01a1n \u0111\u1ec3 l\u01b0u tr\u1eef, truy c\u1eadp v\u00e0 s\u1eed d\u1ee5ng d\u1eef li\u1ec7u tr\u00ean \u1ee9ng d\u1ee5ng c\u1ee7a b\u1ea1n Kh\u1ea3 n\u0103ng sao ch\u00e9p v\u00e0 \u0111\u1ed9 b\u1ec1n : Redis s\u1eed d\u1ee5ng ki\u1ebfn tr\u00fac master-slave v\u00e0 h\u1ed7 tr\u1ee3 sao ch\u00e9p kh\u00f4ng \u0111\u1ed3ng b\u1ed9, trong \u0111\u00f3 c\u00f3 th\u1ec3 sao ch\u00e9p d\u1eef li\u1ec7u sang nhi\u1ec1u m\u00e1y ch\u1ee7 kh\u00e1c. V\u1ec1 \u0111\u1ed9 b\u1ec1n, Redis h\u1ed7 tr\u1ee3 backup d\u1eef li\u1ec7u t\u1ea1i m\u1ed9t th\u1eddi \u0111i\u1ec3m n\u00e0o \u0111\u00f3 (ch\u00e9p t\u1eadp d\u1eef li\u1ec7u Redis sang \u1ed5 \u0111\u0129a). \u0110\u1ed9 kh\u1ea3 d\u1ee5ng cao v\u00e0 quy m\u00f4 linh ho\u1ea1t : Redis t\u1ed5 ch\u1ee9c m\u00f4 h\u00ecnh master-slave theo ki\u1ebfn tr\u00fac Redis Cluster , ki\u1ebfn tr\u00fac n\u00e0y cho ph\u00e9p x\u00e2y d\u1ef1ng nh\u1eefng gi\u1ea3i ph\u00e1p c\u00f3 \u0111\u1ed9 kh\u1ea3 d\u1ee5ng cao - khi c\u1ea7n th\u00ec Cluster c\u00f3 th\u1ec3 m\u1edf r\u1ed9ng ho\u1eb7c thu g\u1ecdn, \u0111\u1ea3m b\u1ea3o hi\u1ec7u su\u1ea5t \u1ed5n \u0111\u1ecbnh v\u00e0 b\u1ea3o m\u1eadt. M\u00e3 ngu\u1ed3n m\u1edf Tr\u01b0\u1eddng h\u1ee3p s\u1eed d\u1ee5ng ph\u1ed5 bi\u1ebfn c\u1ee7a Redis: Cache : Redis l\u00e0 kho d\u1eef li\u1ec7u ch\u1ee9a c\u00e1c key-value c\u00f3 th\u1ec3 ho\u1ea1t \u0111\u1ed9ng nh\u01b0 b\u1ed9 nh\u1edb \u0111\u1ec7m, t\u1ef1 \u0111\u1ed9ng x\u00f3a b\u1ecf d\u1eef li\u1ec7u c\u0169 khi th\u00eam m\u1ed9t d\u1eef li\u1ec7u m\u1edbi. Khi \u0111\u00f3 b\u1ed9 nh\u1edb \u0111\u1ec7m n\u00e0y c\u00f3 th\u1ec3 ho\u1ea1t \u0111\u1ed9ng theo thu\u1eadt to\u00e1n LRU (Least Recently Used) v\u00e0 c\u1ea3 LFU (Least Frequently Used) k\u1ec3 t\u1eeb phi\u00ean b\u1ea3n 4.0. C\u01a1 ch\u1ebf Redis cached s\u1ebd h\u1ed7 tr\u1ee3 nhi\u1ec1u ki\u1ec3u c\u1ea5u tr\u00fac d\u1eef li\u1ec7u ph\u1ed5 bi\u1ebfn (hash, list, set, sorted set, string) c\u00f9ng v\u1edbi c\u00f4ng ngh\u1ec7 \u0111\u1ecdc ghi d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf v\u00e0 t\u1ed1i \u01b0u hi\u1ec7u su\u1ea5t t\u1ed1t (h\u01a1n Memcached ). \u0110\u1ed3ng th\u1eddi, Redis c\u00f2n c\u00f3 th\u1ec3 cho ph\u00e9p scripting b\u1eb1ng ng\u00f4n ng\u1eef Lua - Lua scripting. Do \u0111\u00f3, Redis th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng l\u00e0m h\u1ec7 th\u1ed1ng l\u01b0u tr\u1eef b\u1ed9 nh\u1edb \u0111\u1ec7m cho c\u00e1c \u1ee9ng d\u1ee5ng c\u1ea7n truy xu\u1ea5t d\u1eef li\u1ec7u v\u1edbi t\u1ed1c \u0111\u1ed9 ph\u1ea3n h\u1ed3i nhanh. Database : B\u1ea3n ch\u1ea5t Redis l\u00e0 m\u1ed9t server c\u1ea5u tr\u00fac d\u1eef li\u1ec7u. Ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 d\u00f9ng Redis \u0111\u01a1n l\u1ebb nh\u01b0 m\u1ed9t server ch\u1ee9a d\u1eef li\u1ec7u b\u00ecnh th\u01b0\u1eddng. Ho\u1eb7c k\u1ebft h\u1ee3p v\u1edbi m\u1ed9t database kh\u00e1c nh\u01b0 MySQL \u0111\u1ec3 t\u0103ng t\u1ed1c \u0111\u1ed9 x\u1eed l\u00ed c\u1ee7a n\u00f3. B\u00ean c\u1ea1nh c\u01a1 ch\u1ebf l\u01b0u tr\u1eef backup tr\u00ean \u1ed5 \u0111\u0129a c\u1ee9ng nh\u01b0 c\u00e1c h\u1ec7 qu\u1ea3n tr\u1ecb d\u1eef li\u1ec7u kh\u00e1c, \u0111\u1ed9 b\u1ea3o m\u1eadt v\u00e0 s\u1eeda l\u1ed7i cao l\u00e0 \u0111i\u1ec3m \u0111\u1eb7c bi\u1ec7t c\u1ee7a c\u01a1 s\u1edf d\u1eef li\u1ec7u \u0111\u1eb7c bi\u1ec7t n\u00e0y. Message broker : Redis hi\u1ec7n cung c\u1ea5p th\u1eddi gian ph\u1ea3n h\u1ed3i \u1edf t\u1ed1c \u0111\u1ed9 ch\u01b0a \u0111\u1ebfn m\u1ed9t mili gi\u00e2y. Ch\u00ednh v\u00ec th\u1ebf, h\u00e0ng tri\u1ec7u y\u00eau c\u1ea7u m\u1ed7i gi\u00e2y cho c\u00e1c \u1ee9ng d\u1ee5ng th\u1eddi gian th\u1ef1c trong l\u0129nh v\u1ef1c Tr\u00f2 ch\u01a1i, C\u00f4ng ngh\u1ec7 qu\u1ea3ng c\u00e1o, D\u1ecbch v\u1ee5 t\u00e0i ch\u00ednh, Ch\u0103m s\u00f3c s\u1ee9c kh\u1ecfe v\u00e0 IoT \u0111\u01b0\u1ee3c \u0111\u00e1p \u1ee9ng r\u1ea5t nhanh g\u1ecdn. Ngo\u00e0i ra, Redis th\u01b0\u1eddng c\u00f2n \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho ho\u1ea1t \u0111\u1ed9ng Session store , Gaming leaderboards , Rich media streaming , Geospatial , Machine Learning v\u00e0 Real-time analytics .","title":"Overview"},{"location":"Redis/Redis/#redis-data-types","text":"Kh\u00e1c v\u1edbi RDMS nh\u01b0 MySQL, hay PostgreSQL, Redis kh\u00f4ng c\u00f3 table. Redis l\u01b0u tr\u1eef data d\u01b0\u1edbi d\u1ea1ng key-value . Cobf so v\u1edbi memcached th\u00ec memcached c\u0169ng l\u00e0m v\u1eady, nh\u01b0ng ki\u1ec3u d\u1eef li\u1ec7u c\u1ee7a memcached b\u1ecb h\u1ea1n ch\u1ebf, kh\u00f4ng \u0111a d\u1ea1ng \u0111\u01b0\u1ee3c nh\u01b0 Redis, do \u0111\u00f3 kh\u00f4ng h\u1ed7 tr\u1ee3 \u0111\u01b0\u1ee3c nhi\u1ec1u thao t\u00e1c t\u1eeb ph\u00eda ng\u01b0\u1eddi d\u00f9ng. D\u01b0\u1edbi \u0111\u00e2y l\u00e0 s\u01a1 l\u01b0\u1ee3c v\u1ec1 c\u00e1c ki\u1ec3u d\u1eef li\u1ec7u Redis d\u00f9ng \u0111\u1ec3 l\u01b0u value:","title":"Redis data types"},{"location":"Redis/Redis/#strings","text":"Strings l\u00e0 ki\u1ec3u d\u1eef li\u1ec7u c\u01a1 b\u1ea3n nh\u1ea5t c\u1ee7a Redis. Redis string \u0111\u01b0\u1ee3c l\u01b0u d\u01b0\u1edbi d\u1ea1ng nh\u1ecb ph\u00e2n n\u00ean c\u00f3 th\u1ec3 ch\u1ee9a b\u1ea5t k\u00ec lo\u1ea1i d\u1eef li\u1ec7u n\u00e0o nh\u01b0 \u1ea3nh d\u1ea1ng JPEG hay Ruby object . \u0110\u1ed9 d\u00e0i gi\u00e1 tr\u1ecb c\u1ee7a 1 string t\u1ed1i \u0111a l\u00e0 512MB. Danh s\u00e1ch c\u00e1c command tr\u00ean Redis \u0111\u1ec3 thao t\u00e1c v\u1edbi string type: commands/#string V\u00ed d\u1ee5 b\u00ean d\u01b0\u1edbi v\u1edbi vi\u1ec7c s\u1eed d\u1ee5ng l\u1ec7nh SET \u0111\u1ec3 set value cho key v\u00e0 l\u1ec7nh GET \u0111\u1ec3 truy xu\u1ea5t value c\u1ee7a key. $ set username Harry OK $ get username \"Harry\"","title":"Strings"},{"location":"Redis/Redis/#list","text":"List l\u00e0 danh s\u00e1ch c\u00e1c string \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp theo th\u1ee9 t\u1ef1 ch\u00e8n v\u00e0o list. Ta c\u00f3 th\u1ec3 th\u00eam c\u00e1c ph\u1ea7n t\u1eed v\u00e0o \u0111\u1ea7u ho\u1eb7c cu\u1ed1i 1 list s\u1eed d\u1ee5ng LPUSH ho\u1eb7c RPUSH . M\u1ed9t list \u0111\u01b0\u1ee3c t\u1ea1o ra khi ch\u00fang ta th\u1ef1c hi\u1ec7n thao t\u00e1c LPUSH ho\u1eb7c RPUSH v\u1edbi m\u1ed9t key r\u1ed7ng. T\u01b0\u01a1ng t\u1ef1, key s\u1ebd \u0111\u01b0\u1ee3c x\u00f3a kh\u1ecfi key space khi c\u00e1c thao t\u00e1c tr\u00ean bi\u1ebfn danh s\u00e1ch tr\u1edf v\u1ec1 r\u1ed7ng. V\u00ed d\u1ee5: LPUSH mylist a # now the list is \"a\" LPUSH mylist b # now the list is \"b\",\"a\" RPUSH mylist c # now the list is \"b\",\"a\",\"c\" (RPUSH was used this time) Danh s\u00e1ch c\u00e1c command v\u1edbi lists t\u1ea1i commands#list","title":"List"},{"location":"Redis/Redis/#sets","text":"Sets l\u00e0 t\u1eadp h\u1ee3p c\u00e1c string kh\u00f4ng \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp. Sets h\u1ed7 tr\u1ee3 c\u00e1c thao t\u00e1c th\u00eam ph\u1ea7n t\u1eed, \u0111\u1ecdc , x\u00f3a t\u1eebng ph\u1ea7n t\u1eed, ki\u1ec3m tra s\u1ef1 t\u1ed3n t\u1ea1i c\u1ee7a ph\u1ea7n t\u1eed trong set v\u1edbi th\u1eddi gian m\u1eb7c \u0111\u1ecbnh l\u00e0 O(1) b\u1ea5t k\u1ec3 s\u1ed1 l\u01b0\u1ee3ng ph\u1ea7n t\u1eed c\u1ee7a set \u0111\u00f3 l\u00e0 bao nhi\u00eau. Ngo\u00e0i ra Redis c\u00f2n h\u1ed7 tr\u1ee3 c\u00e1c ph\u00e9p to\u00e1n gi\u1eefa c\u00e1c sets v\u1edbi nhau, g\u1ed3m intersect , union , difference . S\u1ed1 l\u01b0\u1ee3ng ph\u1ea7n t\u1eed t\u1ed1i \u0111a trong 1 set l\u00e0 2^32 - 1 ( 4294967295 , nhi\u1ec1u h\u01a1n 4 t\u1ec9 ph\u1ea7n t\u1eed trong m\u1ed7i set). Danh s\u00e1ch c\u00e1c command v\u1edbi sets t\u1ea1i commands#set","title":"Sets"},{"location":"Redis/Redis/#hashes","text":"Hashes l\u00e0 ki\u1ec3u d\u1eef li\u1ec7u l\u01b0u tr\u1eef hash table c\u1ee7a c\u00e1c c\u1eb7p key-value , trong \u0111\u00f3, key \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp ng\u1eabu nhi\u00ean, kh\u00f4ng theo th\u1ee9 t\u1ef1 n\u00e0o c\u1ea3. Hash th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 l\u01b0u c\u00e1c object (user c\u00f3 c\u00e1c filed nh\u01b0 name, age, address,...). M\u1ed7i hash c\u00f3 th\u1ec3 l\u01b0u tr\u1eef 2^32 - 1 c\u1eb7p key-value. Redis h\u1ed7 tr\u1ee3 c\u00e1c thao t\u00e1c th\u00eam , \u0111\u1ecdc , x\u00f3a t\u1eebng ph\u1ea7n t\u1eed, c\u0169ng nh\u01b0 \u0111\u1ecdc t\u1ea5t c\u1ea3 gi\u00e1 tr\u1ecb trong hash. Danh s\u00e1ch c\u00e1c command v\u1edbi Hashes t\u1ea1i commands#hash","title":"Hashes"},{"location":"Redis/Redis/#sorted-sets","text":"Sorted Sets c\u01a1 b\u1ea3n l\u00e0 Sets c\u00e1c string \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp sao cho c\u00e1c string trong set \u0111\u1ec1u l\u00e0 duy nh\u1ea5t . M\u1ed7i ph\u1ea7n t\u1eed c\u1ee7a Sorted Sets l\u00e0 map c\u1ee7a 1 string (member) v\u00e0 1 floating-point number (score), Sorted Sets s\u1ebd \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp theo score n\u00e0y, c\u00e1c ph\u1ea7n t\u1eed l\u00e0 duy nh\u1ea5t nh\u01b0ng c\u00e1c score c\u00f3 th\u1ec3 ngang b\u1eb1ng nhau. Redis h\u1ed7 tr\u1ee3 c\u00e1c thao t\u00e1c t\u00e1c th\u00eam , s\u1eeda , x\u00f3a ph\u1ea7n t\u1eed m\u1ed9t c\u00e1ch r\u1ea5t nhanh (th\u1eddi gian t\u1ec9 l\u1ec7 v\u1edbi logarit c\u1ee7a s\u1ed1 ph\u1ea7n t\u1eed). Danh s\u00e1ch c\u00e1c command v\u1edbi Hashes t\u1ea1i commands#sorted-set","title":"Sorted Sets"},{"location":"Redis/Redis/#bitmaps-and-hyperloglogs","text":"Redis c\u0169ng h\u1ed7 tr\u1ee3 Bitmap v\u00e0 HyperLogLogs v\u00e0 \u0111\u1ec1u d\u1ef1a tr\u00ean ki\u1ec3u strings nh\u01b0ng c\u00f3 semantics ri\u00eang c\u1ee7a ch\u00fang: Bitmap - ki\u1ec3u d\u1eef li\u1ec7u t\u1eadp h\u1ee3p c\u00e1c bit v\u00e0 \u0111\u01b0\u1ee3c Redis h\u1ed7 tr\u1ee3 th\u1ef1c hi\u1ec7n c\u00e1c t\u00e1c v\u1ee5 quy m\u00f4 bit. HyperLogLogs : Redis HyperLogLog l\u00e0 m\u1ed9t thu\u1eadt to\u00e1n s\u1eed d\u1ee5ng ph\u01b0\u01a1ng ph\u00e1p ng\u1eabu nhi\u00ean \u0111\u1ec3 t\u1ea1o ra m\u1ed9t s\u1ed1 l\u01b0\u1ee3ng ph\u1ea7n t\u1eed l\u00e0 duy nh\u1ea5t trong m\u1ed9t t\u1eadp h\u1ee3p ch\u1ec9 s\u1eed d\u1ee5ng m\u1ed9t l\u01b0\u1ee3ng b\u1ed9 nh\u1edb nh\u1ecf v\u00e0 kh\u00f4ng \u0111\u1ed5i. HyperLogLog cung c\u1ea5p m\u1ed9t x\u1ea5p x\u1ec9 r\u1ea5t t\u1ed1t v\u1ec1 t\u00ednh ch\u00ednh x\u00e1c c\u1ee7a m\u1ed9t t\u1eadp h\u1ee3p ngay c\u1ea3 khi s\u1eed d\u1ee5ng m\u1ed9t l\u01b0\u1ee3ng b\u1ed9 nh\u1edb r\u1ea5t nh\u1ecf kho\u1ea3ng 12 kbyte m\u1ed7i key v\u1edbi sai s\u1ed1 chu\u1ea9n l\u00e0 0,81% . Kh\u00f4ng c\u00f3 gi\u1edbi h\u1ea1n v\u1ec1 s\u1ed1 l\u01b0\u1ee3ng ph\u1ea7n t\u1eed, tr\u1eeb khi b\u1ea1n c\u1ea7n m\u1ed9t s\u1ed1 l\u01b0\u1ee3ng l\u1edbn h\u01a1n 264 ph\u1ea7n t\u1eed .","title":"Bitmaps and HyperLogLogs"},{"location":"Redis/Redis/#redis-clusters","text":"","title":"Redis Clusters"},{"location":"Redis/Redis/#master-slave-architecture","text":"Master Node: Process ch\u00ednh, ch\u1ea1y v\u00e0 x\u1eed l\u00fd c\u00e1c k\u1ebft n\u1ed1i v\u1edbi client. Slave Node: process ph\u1ee5, ch\u1ea1y c\u00f9ng process ch\u00ednh v\u00e0 gi\u00e1m s\u00e1t process ch\u00ednh. Process ph\u1ee5 c\u0169ng th\u1ef1c hi\u1ec7n vi\u1ec7c ghi (dump) d\u1eef li\u1ec7u \u0111\u1ecbnh k\u1ef3 v\u00e0o \u1ed5 c\u1ee9ng \u0111\u1ec3 backup.","title":"Master-Slave Architecture"},{"location":"Redis/Redis/#redis-cluster-vs-redis-sentinel","text":"Redis c\u0169ng gi\u1ed1ng c\u00e1c c\u01a1 s\u1edf d\u1eef li\u1ec7u kh\u00e1c, Redis c\u1ea7n c\u1ea5u h\u00ecnh \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o t\u00ednh s\u1eb5n s\u1eb1ng v\u00e0 ho\u1ea1t \u0111\u1ed9ng c\u1ee7a n\u00f3, v\u1edbi Redis Cluster v\u00e0 Redis Sentinel . Redis Sentinel : l\u00e0 m\u1ed9t h\u1ec7 th\u1ed1ng \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 gi\u00fap qu\u1ea3n l\u00fd c\u00e1c Redis instances . M\u1ee5c \u0111\u00edch ch\u00ednh c\u1ee7a vi\u1ec7c s\u1eed d\u1ee5ng sentinel l\u00e0 cung c\u1ea5p m\u1ed9t h\u1ec7 th\u1ed1ng c\u00f3 t\u00ednh high availability b\u1eb1ng c\u00e1ch monitoring , notifying , v\u00e0 providing v\u00e0 Replication - Replication theo m\u00f4 h\u00ecnh master-slave (m\u1ed9t v\u00e0i Redis instances \u0111\u00f3ng vai tr\u00f2 slave l\u00e0 b\u1ea3n sao ch\u00ednh x\u00e1c c\u1ee7a m\u1ed9t Redis instance gi\u1eef vai tr\u00f2 master). Khi m\u1ed9t master kh\u00f4ng th\u1ec3 serve , Sentinel \u0111\u1ea3m nhi\u1ec7m nhi\u1ec7m v\u1ee5 gi\u00e1m s\u00e1t s\u1ebd t\u1ef1 l\u1ef1a ch\u1ecdn m\u1ed9t master m\u1edbi trong c\u00e1c slaves. Redis Cluster :L\u00e0 m\u1ed9t gi\u1ea3i ph\u00e1p cho data sharding v\u1edbi t\u00ednh n\u0103ng qu\u1ea3n l\u00fd, v\u00e0 c\u0169ng c\u00f3 c\u01a1 ch\u1ebf replication. Redis Cluster gi\u00fap Redis ho\u1ea1t \u0111\u1ed9ng theo m\u00f4 h\u00ecnh ph\u00e2n t\u00e1n, chia m\u1ed9t instance th\u00e0nh nhi\u1ec1u cluster, kh\u00e1c v\u1edbi Replication + Sentinel \u0111\u00f3 l\u00e0 c\u00e1c cluster \u0111\u1ec1u \u0111\u01b0\u1ee3c coi nh\u01b0 master. \u2192 Redis Cluster cung c\u1ea5p t\u00ednh kh\u1ea3 d\u1ee5ng cao, ho\u1ea1t \u0111\u1ed9ng t\u01b0\u01a1ng t\u1ef1 nh\u01b0 Redis Sentinel nh\u01b0ng cho ph\u00e9p chia s\u1ebb nhi\u1ec1u d\u1eef li\u1ec7u h\u01a1n gi\u1eefa c\u00e1c instances trong Cluster. Do \u0111\u00f3, Redis Cluster c\u1ea3i thi\u1ec7n kh\u1ea3 n\u0103ng m\u1edf r\u1ed9ng \u1ee9ng d\u1ee5ng c\u1ee7a khi d\u1eef li\u1ec7u scale-up.","title":"Redis Cluster vs. Redis Sentinel"},{"location":"Redis/Redis/#concepts-and-redis-cluster-master-replica-model","text":"Redis Cluster provides a way to run a Redis installation where data is automatically sharded across multiple Redis nodes. Redis Cluster also provides some degree of availability during partitions, that is in practical terms the ability to continue the operations when some nodes fail or are not able to communicate. D\u1eef li\u1ec7u \u0111\u01b0\u1ee3c t\u1ef1 \u0111\u1ed9ng chia nh\u1ecf tr\u00ean nhi\u1ec1u Redis Node v\u00e0 c\u00f3 th\u1ec3 t\u1ef1 \u0111\u1ed9ng chia s\u1ebb d\u1eef li\u1ec7u v\u1edbi nhau trong Cluster. Duy tr\u00ec kh\u1ea3 n\u0103ng ho\u1ea1t \u0111\u1ed9ng li\u00ean t\u1ee5c c\u1ee7a Cluster, khi m\u1ed9t Node con g\u1eb7p s\u1ef1 c\u1ed1 ho\u1eb7c kh\u00f4ng th\u1ec3 giao ti\u1ebfp v\u1edbi ph\u1ea7n c\u00f2n l\u1ea1i c\u1ee7a Cluster, Redis Cluster s\u1ebd ti\u1ebfn h\u00e0nh thay th\u1ebf Node \u0111\u00f3 b\u1eb1ng nh\u00e2n b\u1ea3n c\u1ee7a n\u00f3, \u0111\u1ea3m b\u1ea3o nh\u00e2n b\u1ea3n n\u00e0y ho\u1ea1t \u0111\u1ed9ng \u0111\u00fang nh\u01b0 Node c\u0169 d\u1ef1a tr\u00ean ch\u1ebf Replication nh\u01b0 tr\u00ean. C\u1ee5 th\u1ec3: Khi process ch\u00ednh - Master Node b\u1ecb treo hay tho\u00e1t, m\u1ed9t trong c\u00e1c process ph\u1ee5 - Slave Node tr\u1edf th\u00e0nh Master Node v\u00e0 x\u1eed l\u00fd t\u1ea5t c\u1ea3 c\u00e1c y\u00eau c\u1ea7u trong khi ch\u1edd Master Node \u0111\u01b0\u1ee3c kh\u1edfi \u0111\u1ed9ng l\u1ea1i. Khi Master Process ho\u1ea1t \u0111\u1ed9ng tr\u1edf l\u1ea1i, n\u00f3 s\u1ebd l\u1ea5y t\u1ec7p k\u1ebft xu\u1ea5t t\u1eeb \u200b\u200bMaster t\u1ea1m th\u1eddi v\u00e0 s\u1eed d\u1ee5ng n\u00f3 l\u00e0m c\u01a1 s\u1edf. Qu\u00e1 tr\u00ecnh ch\u00ednh \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o l\u1ea1i d\u01b0\u1edbi d\u1ea1ng Master, trong khi Master Node t\u1ea1m th\u1eddi quay tr\u1edf l\u1ea1i l\u00e0m vi\u1ec7c nh\u01b0 m\u1ed9t Slave Node .","title":"Concepts and Redis Cluster master-replica model"},{"location":"Redis/Redis/#pubsub","text":"Redis Pub / Sub \u0111\u01b0\u1ee3c \u00e1p d\u1ee5ng trong c\u00e1c h\u1ec7 th\u1ed1ng c\u1ea7n g\u1eedi / nh\u1eadn message t\u1eeb sender - publisher g\u1eedi message \u0111\u1ebfn receiver subscriber . Li\u00ean k\u1ebft m\u00e0 c\u00e1c message \u0111\u01b0\u1ee3c chuy\u1ec3n \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 Chanel . Trong Redis, m\u1ed9t client c\u00f3 th\u1ec3 subscribe nhi\u1ec1u chanel . D\u01b0\u1edbi \u0111\u00e2y l\u00e0 c\u00e1c Command c\u01a1 b\u1ea3n, xem full t\u1ea1i commands/#pubsub : Command Description PSUBSCRIBE pattern [pattern ...] \u0110\u0103ng k\u00fd (subscibe) channel PUBSUB subcommand [argument [argument ...]] Cho bi\u1ebft tr\u1ea1ng th\u00e1i c\u1ee7a h\u1ec7 th\u1ed1ng Pub / Sub. V\u00ed d\u1ee5, client n\u00e0o \u0111ang ho\u1ea1t \u0111\u1ed9ng tr\u00ean m\u00e1y ch\u1ee7. PUBLISH channel message G\u1eedi message t\u1edbi channel PUNSUBSCRIBE [pattern [pattern ...]] D\u1eebng nh\u1eadn message c\u1ee7a channel theo pattern SUBSCRIBE channel [channel ...] Nh\u1eadn message c\u1ee7a channel UNSUBSCRIBE [channel [channel ...]] D\u1eebng vi\u1ec7c nh\u1eadn message t\u1eeb channel","title":"Pub/Sub"},{"location":"Redis/Redis/#reference","text":"What is Redis - AWS Redis Data types redis-sentinel-vs-cluster Redis Master-Slave Replication Redis cluster tutorial Redis pubsub topic Publish/Subscribe pattern example (Redis, Kafka)","title":"Reference"},{"location":"Source-Version-Control/Source-Version-Control/","text":"Source Version Control (Git) Concepts: repository, registry, ssh File states, workflow, .gitignore and .gitkeep Basic commands: clone, checkout, add, commit, push, pull, merge, revert, reset, log\u2026 Using git features on PHPStorm Git flow Concepts Repository Repository l\u00e0 n\u01a1i ch\u1ee9a v\u00e0 ghi l\u1ea1i states c\u1ee7a th\u01b0 m\u1ee5c v\u00e0 file. states l\u01b0u l\u1ea1i c\u00e1c th\u00f4ng tin, l\u1ecbch s\u1eed thay \u0111\u1ed5i c\u1ee7a th\u01b0 m\u1ee5c v\u00e0 file. GIT Repository \u0111\u01b0\u1ee3c ph\u00e2n th\u00e0nh 2 lo\u1ea1i l\u00e0 remote repository v\u00e0 local repository . Remote repository : L\u00e0 repository \u0111\u1ec3 chia s\u1ebb gi\u1eefa nhi\u1ec1u ng\u01b0\u1eddi v\u00e0 git \u0111\u1eb7t tr\u00ean server chuy\u00ean d\u1ee5ng c\u1ee7a n\u00f3. Local repository : L\u00e0 repository tr\u00ean m\u00e1y local. Registry Registry ho\u1ea1t \u0111\u1ed9ng nh\u01b0 m\u1ed9t kho ch\u1ee9a chung, public ho\u1eb7c private, cho nhi\u1ec1u repository . Th\u01b0\u1eddng d\u00f9ng chung cho 1 t\u1ed5 ch\u1ee9c, c\u00f3 th\u1ec3 publish v\u00e0 share packages, c\u00f3 th\u1ec3 d\u1ec5 d\u00e0ng s\u1eed d\u1ee5ng nh\u01b0 m\u1ed9t ph\u1ea7n dependency trong c\u00e1c d\u1ef1 \u00e1n. GitHub Packages GitLab Container Registry SSH SSH l\u00e0 m\u1ed9t giao th\u1ee9c t\u01b0\u01a1ng t\u00e1c gi\u1eefa client-server c\u00f3 s\u1eed d\u1ee5ng c\u01a1 ch\u1ebf m\u00e3 ho\u00e1 m\u1ea1nh m\u1ebd nh\u1eb1m b\u1ea3o v\u1ec7 t\u00ednh to\u00e0n v\u1eb9n v\u00e0 b\u1ea3o m\u1eadt th\u00f4ng tin li\u00ean l\u1ea1c, ng\u0103n ch\u1eb7n c\u00e1c hi\u1ec7n t\u01b0\u1ee3ng \u0111\u00e1nh c\u1eafp th\u00f4ng tin tr\u00ean \u0111\u01b0\u1eddng truy\u1ec1n. Th\u01b0\u1eddng d\u00f9ng nh\u01b0 m\u1ed9t ph\u01b0\u01a1ng ph\u00e1p \u0111\u1ec3 \u0111\u0103ng nh\u1eadp t\u1eeb xa an to\u00e0n t\u1eeb m\u00e1y t\u00ednh n\u00e0y sang m\u00e1y t\u00ednh kh\u00e1c. GIT SSH : B\u1ea3o m\u1eadt c\u00e1c k\u1ebft n\u1ed1i c\u1ee7a local v\u1edbi server v\u00e0 kh\u00f4ng ph\u1ea3i nh\u1eadp m\u1eadt kh\u1ea9u github ho\u1eb7c gitlab m\u1ed7i l\u1ea7n pull ho\u1eb7c push code. C\u01a1 ch\u1ebf x\u00e1c th\u1ef1c c\u1ee7a GIT SSH : D\u00f9ng Public/Private key cryptography Public Key - l\u00e0 m\u1ed9t file text - n\u00f3 l\u1ea1i l\u01b0u \u1edf ph\u00eda Git Server SSH , n\u00f3 d\u00f9ng \u0111\u1ec3 khi Client g\u1eedi Private Key (file l\u01b0u \u1edf Client) l\u00ean \u0111\u1ec3 x\u00e1c th\u1ef1c th\u00ec ti\u1ebfn h\u00e0nh verify gi\u1eefa Private Key v\u00e0 Public Key n\u00e0y. N\u1ebfu c\u1eb7p key n\u00e0y \u0111\u00fang ( key pair \u0111\u01b0\u1ee3c gen t\u1eeb ssh-keygen ) th\u00ec k\u1ebft n\u1ed1i gi\u1eefa client - git server l\u00e0 an to\u00e0n. Private Key - l\u00e0 m\u1ed9t file text - d\u00f9ng \u0111\u1ec3 x\u00e1c th\u1ef1c s\u1ef1 ph\u00f9 h\u1ee3p c\u1ee7a Private Key v\u00e0 Public Key . Client mu\u1ed1n k\u1ebft n\u1ed1i v\u1edbi Git Server , thay v\u00ec nh\u1eadp m\u1eadt kh\u1ea9u th\u00ec client g\u1eedi Private Key qua SSH. T\u1ea1o GIT SSH Key d\u00f9ng ssh-keygen c\u1ee7a OpenSSH M\u1edf terminate (tr\u00ean Linux, macOS ho\u1eb7c cmd tr\u00ean Windows) r\u1ed3i g\u00f5 $ ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" \u0110\u1ea7u ti\u00ean n\u00f3 h\u1ecfi nh\u1eadp th\u01b0 m\u1ee5c s\u1ebd l\u01b0u key sinh ra, h\u00e3y nh\u1eadp th\u01b0 m\u1ee5c - t\u00ean file mu\u1ed1n l\u01b0u ho\u1eb7c nh\u1ea5n Enter \u0111\u1ec3 s\u1eed d\u1ee5ng \u0111\u01b0\u1eddng d\u1eabn n\u00f3 g\u1ee3i \u00fd (~/.ssh/id_rsa). Sau \u0111\u00f3 n\u00f3 y\u00eau c\u1ea7u nh\u1eadp passphase , c\u00f3 th\u1ec3 nh\u1ea5n Enter \u0111\u1ec3 r\u1ed7ng. Cu\u1ed1i c\u00f9ng n\u00f3 sinh ra hai file key c\u00f3 t\u00ean id_rsa v\u00e0 id_rsa.pub \u1edf th\u01b0 m\u1ee5c \u0111\u00e3 nh\u1eadp tr\u00ean. Start ssh-agent Win \u2192 Services \u2192 OpenSSH Authentication Agent \u2192 Automatic (Delayed Start). Xong g\u00f5 $ start-ssh-agent refer Adding new SSH key to GitHub account: refer Testing SSH connection ssh -T git@github.com Ho\u1eb7c File states, workflow, .gitignore and .gitkeep File states: File c\u00f3 2 states l\u00e0 tracked v\u00e0 untracked . D\u01b0\u1edbi \u0111\u00e2y l\u00e0 File status lifecycle Untracked state : Files \u0111ang \u1edf local directory, ch\u01b0a \u0111\u01b0\u1ee3c th\u00eam v\u00e0o github repository index . File khi n\u00e0y \u1edf untracked state Unmodified state : Files \u0111\u00e3 \u0111\u01b0\u1ee3c th\u00eam github repository index b\u1eb1ng l\u1ec7nh $git add file-name . File khi n\u00e0y \u1edf tracked state Modified state : Khi Files \u0111\u01b0\u1ee3c tracked tr\u01b0\u1edbc \u0111\u00f3 c\u00f3 c\u00e1c thay \u0111\u1ed5i, ch\u1ec9nh s\u1eeda nh\u01b0ng kh\u00f4ng th\u1ef1c hi\u1ec7n vi\u1ec7c commit the changes. Staged state : Khi Files \u0111\u01b0\u1ee3c commit v\u00e0 s\u1eb5n s\u00e0ng push v\u00e0o git repository . Workflow M\u1ed9t basic git workflow: git clone... ho\u1eb7c git pull ... git add... git commit -m ... git push... .gitignore : Li\u1ec7t k\u00ea nh\u1eefng file m\u00e0 m\u00ecnh kh\u00f4ng mong mu\u1ed1n push l\u00ean git. S\u1eed d\u1ee5ng c\u00e1c patterns: S\u1eed d\u1ee5ng # \u0111\u1ec3 comment v\u00e0 c\u00f3 th\u1ec3 \u0111\u1ec3 c\u00e1ch d\u00f2ng cho d\u1ec5 \u0111\u1ecdc. T\u00ean file c\u1ea7n ignore: example.exe C\u1ea3 th\u01b0 m\u1ee5c: example_folder/ S\u1eed d\u1ee5ng d\u1ea5u * \u0111\u1ec3 ignore c\u00e1c file c\u00f3 c\u00f9ng \u0111\u1ecbnh d\u1ea1ng. V\u00ed d\u1ee5 nh\u01b0 b\u1ea1n mu\u1ed1n ignore t\u1ea5t c\u1ea3 c\u00e1c file .xml trong project: *.xml . C\u00f2n n\u1ebfu d\u00f9ng config/*.xml th\u00ec n\u00f3 ch\u1ec9 ignore cho c\u00e1c file config/abc.xml m\u00e0 kh\u00f4ng ignore cho c\u00e1c file config/sub/abc.xml S\u1eed d\u1ee5ng ** \u0111\u1ec3 ignore cho c\u00e1c th\u01b0 m\u1ee5c kh\u00f4ng c\u1ea7n \u0111\u1ecbnh r\u00f5 t\u00ean. V\u00ed d\u1ee5: **/foo n\u00f3 s\u1ebd ignore cho t\u1ea5t c\u1ea3 file ho\u1eb7c th\u01b0 m\u1ee5c c\u00f3 t\u00ean l\u00e0 foo \u1edf m\u1ecdi n\u01a1i trong project. S\u1eed d\u1ee5ng ki\u1ec3u folder/** \u0111\u1ec3 ignore cho t\u1ea5t c\u1ea3 c\u00e1c file b\u00ean trong th\u01b0 m\u1ee5c. .gitkeep : Git kh\u00f4ng cho push c\u00e1c th\u01b0 m\u1ee5c tr\u1ed1ng. N\u1ebfu ta c\u1ed1 g\u1eafng push m\u1ed9t th\u01b0 m\u1ee5c kh\u00f4ng c\u00f3 g\u00ec trong \u0111\u00f3, m\u1eb7c d\u00f9 n\u00f3 s\u1ebd t\u1ed3n t\u1ea1i tr\u00ean m\u00e1y local nh\u01b0ng l\u1ea1i kh\u00f4ng \u0111\u01b0\u1ee3c push l\u00ean git repo. M\u1ed9t ph\u01b0\u01a1ng ph\u00e1p ph\u1ed5 bi\u1ebfn, \u0111\u01b0\u1ee3c ti\u00eau chu\u1ea9n h\u00f3a (ko ph\u1ea3i t\u00ednh n\u0103ng c\u1ee7a Git) \u0111\u1ec3 gi\u1ea3i quy\u1ebft v\u1ea5n \u0111\u1ec1 n\u00e0y l\u00e0 t\u1ea1o m\u1ed9t file .gitkeep (ho\u1eb7c t\u00ean g\u00ec c\u0169ng \u0111c) v\u00e0o c\u00e1c th\u01b0 m\u1ee5c tr\u1ed1ng sau \u0111\u00f3 push b\u00ecnh th\u01b0\u1eddng. Basic commands C\u1ea5u h\u00ecnh v\u00e0 kh\u1edfi t\u1ea1o Repo \u0110\u1ed5i t\u00ean/email ng\u01b0\u1eddi d\u00f9ng git config --global user.name newname git config --global user.email newmail@domain.com Kh\u1edfi t\u1ea1o m\u1ed9t Local Repository m\u1edbi git init Kh\u1edfi t\u1ea1o m\u1ed9t Remote Repository m\u1edbi \u1edf Git Server git init --bare L\u00e0m vi\u1ec7c v\u1edbi Local Repo git status - git status xem tr\u1ea1ng th\u00e1i c\u1ee7a Repo - git status -s xem tr\u1ea1ng th\u00e1i c\u1ee7a Repo ng\u1eafn g\u1ecdn - git clone path clone m\u1ed9t Repository c\u00f3 \u0111\u1ecba ch\u1ec9 l\u00e0 path git add - git add c\u1eadp nh\u1eadt file state v\u00e0o staged - git add filename th\u00eam file v\u00e0o staged - git add *.c th\u00eam file c\u00f3 ph\u1ea7n m\u1edf r\u1ed9ng .c - git add -A th\u00eam m\u1ecdi th\u1ee9 c\u00f3 s\u1ef1 thay \u0111\u1ed5i (th\u00eam file m\u1edbi, x\u00f3a file, thay \u0111\u1ed5i n\u1ed9i dung ...) - git add . th\u00eam m\u1ecdi th\u1ee9 tr\u1eeb x\u00f3a file - git add - th\u00eam m\u1ecdi th\u1ee9 tr\u1eeb file m\u1edbi git commit git commit -m \"commit msg ...\" commit m\u1edbi git commit --amend -m \"commit msg ...\" commit + c\u1eadp nh\u1eadt v\u00e0o commit cu\u1ed1i git log git log xem l\u1ecbch s\u1eed commit git log -4 xem l\u1ecbch s\u1eed 4 commit git log -4 -p xem l\u1ecbch s\u1eed 4 commit + chi ti\u1ebft thay \u0111\u1ed5i git log --oneline hay git log --pretty=oneline hi\u1ec3n th\u1ecb log tr\u1ef1c quan tr\u00ean 1 d\u00f2ng git diff git diff Xem s\u1ef1 kh\u00e1c bi\u1ec7t gi\u1eefa th\u01b0 m\u1ee5c l\u00e0m vi\u1ec7c v\u00e0 staged git diff --staged Xem s\u1ef1 kh\u00e1c bi\u1ec7t gi\u1eefa staged v\u00e0 commit cu\u1ed1i git rm, git reset, git clean - git rm filename x\u00f3a file - git reset HEAD filename h\u1ee7y thay \u0111\u1ed5i c\u1ee7a file - git clean -d -fx . X\u00f3a c\u00e1c file kh\u00f4ng \u0111\u01b0\u1ee3c tracked, d\u00f9ng khi mu\u1ed1n x\u00f3a b\u1ecf nhanh c\u00e1c file kh\u00f4ng \u0111\u01b0\u1ee3c tracked git checkout git checkout <branchname> chuy\u1ec3n sang branchname \u0111\u1ec3 code git checkout -b <branchname> t\u1ea1o m\u1edbi branchname v\u00e0 chuy\u1ec3n sang branchname \u0111\u1ec3 code L\u00e0m vi\u1ec7c v\u1edbi Remote Repo git remote git remote xem list c\u00e1c Remote git remote add name_remote addr_remote th\u00eam m\u1ed9t Remote v\u00e0o Local git remote show name_remote xem th\u00f4ng tin v\u1ec1 Remote git remote rename abc xyz \u0111\u1ed5i t\u00ean Remote git pull, git fetch git pull <remote> <branch> t\u1ea3i xu\u1ed1ng n\u1ed9i dung t\u1eeb Remote repository m\u00e0 kh\u00f4ng l\u00e0m thay \u0111\u1ed5i tr\u1ea1ng th\u00e1i c\u1ee7a Local repository git fetch <remote> <branch> : t\u1ea3i xu\u1ed1ng n\u1ed9i dung v\u00e0 c\u1ed1 g\u1eafng thay \u0111\u1ed5i tr\u1ea1ng th\u00e1i c\u1ee7a Local repository cho ph\u00f9 h\u1ee3p v\u1edbi n\u1ed9i dung \u0111\u00f3 L\u00e0m vi\u1ec7c v\u1edbi Tag git tag xem danh s\u00e1ch tag git tag -a tagname -m \"tag msg\" t\u1ea1o tag cho commit hi\u1ec7n t\u1ea1i git tag -a tagname -m \"tag msg\" hash t\u1ea1o tag cho commit c\u0169 git show tagname xem th\u00f4ng tin v\u1ec1 commit c\u00f3 tagname git push origin tagname c\u1eadp nh\u1eadt l\u00ean remote t\u1ea5t c\u1ea3 tagname git push origin --tags c\u1eadp nh\u1eadn l\u00ean remote t\u1ea5t c\u1ea3 tag git checkout tagname xem v\u1ec1 phi\u00ean b\u1ea3n commit c\u00f3 tagname git checkout -b newbranchname tagname t\u1ea1o nh\u00e1nh m\u1edbi t\u1eeb phi\u00ean b\u1ea3n tagname git push --delete origin tagname x\u00f3a tag \u1edf remote git tag -d tagname x\u00f3a tag \u1edf local L\u00e0m vi\u1ec7c v\u1edbi branch git branch li\u1ec7t k\u00ea c\u00e1c branch git branch -v li\u1ec7t k\u00ea c\u00e1c branch + commit cu\u1ed1i git branch --merged c\u00e1c branch g\u1ed9p v\u00e0o branch \u0111ang checkin git branch --no-merged c\u00e1c branch kh\u00f4ng g\u1ed9p v\u00e0o branch \u0111ang checkin git branch branchname t\u1ea1o branch m\u1edbi git checkout -b branchname t\u1ea1o branch m\u1edbi, khi \u0111ang \u0111\u1ee9ng \u1edf m\u1ed9t snapshot c\u0169 git checkout branchname chuy\u1ec3n branch git merge branchname g\u1ed9p branch v\u1edbi branch hi\u1ec7n t\u1ea1i git base branchname g\u1ed9p branch v\u1edbi branch hi\u1ec7n t\u1ea1i git mergetool c\u00f4ng c\u1ee5 tr\u1ef1c quan x\u1eed l\u00fd xung \u0111\u1ed9t merge git branch -d branchname x\u00f3a branch Git flow Git Flow l\u00e0 t\u00ean g\u1ecdi c\u1ee7a 1 tool (command) h\u1ed7 tr\u1ee3 branch model g\u1ecdi l\u00e0 A successful Git branching model do \u00f4ng Vincent Driessen \u0111\u1ec1 xu\u1ea5t ra. Ng\u01b0\u1eddi ta th\u01b0\u1eddng g\u1ecdi \u0111\u00f3 l\u00e0 model hay tool, v\u00e0 trong git-flow c\u00f3 5 ki\u1ec3u branch v\u1edbi m\u1ed7i vai tr\u00f2 kh\u00e1c nhau: master : l\u00e0 branch t\u1ed3n t\u1ea1i xuy\u00ean su\u1ed1t qu\u00e1 v\u00f2ng \u0111\u1eddi c\u1ee7a ph\u1ea7n m\u1ec1m \u0111\u01b0\u1ee3c t\u1ea1o m\u1eb7c \u0111\u1ecbnh trong Git khi ta t\u1ea1o repository. develop : l\u00e0 n\u01a1i c\u00e1c develop ph\u00e1t tri\u1ec3n ch\u00ednh branch lu\u00f4n t\u1ed3n t\u1ea1i song song v\u1edbi master feature : l\u00e0 nh\u00e1nh \u0111\u01b0\u1ee3c t\u00e1ch t\u1eeb develop nh\u1eb1m m\u1ee5c \u0111\u00edch x\u00e2y d\u1ef1ng c\u00e1c t\u00ednh n\u0103ng ri\u00eang m\u00e0 kh\u00f4ng ph\u1ee5 thu\u1ed9c v\u00e0o nhau release : l\u00e0 nh\u00e1nh t\u00e1ch t\u1eeb develop \u0111\u1ec3 ki\u1ec3m tra v\u00e0 fix bug chu\u1ea9n b\u1ecb cho vi\u1ec7c ra m\u1eaft s\u1ea3n ph\u1ea9m hotfix : l\u00e0 nh\u00e1nh t\u00e1ch t\u1eeb master \u0111\u1ec3 fix g\u1ea5p nh\u1eefng bug c\u00f2n t\u1ed3n \u0111\u1ecdng m\u00e0 tr\u00ean release ch\u01b0a x\u1eed l\u00fd h\u1ebft Git-flow extensions Develop Initialize git flow init Features Start a new feature git flow feature start MYFEATURE Finish up a feature git flow feature finish MYFEATURE Publish a feature git flow feature publish MYFEATURE Getting a published feature git flow feature pull origin MYFEATURE Release Start a release git flow release start RELEASE Publish a release git flow release publish RELEASE Finish up a release git flow release finish RELEASE Hotfixes Start a Hotfix git flow hotfix start VERSION [BASENAME] Finish up a Hotfix git flow hotfix finish VERSION Reference git-ssh 4 GIT\u2019S FILE STATUS LIFECYCLE File Status Lifecycle in Git Git commands 35+ Git Commands List Every Programmer Should Know git-flow cheatsheet","title":"Source Version Control (Git)"},{"location":"Source-Version-Control/Source-Version-Control/#source-version-control-git","text":"Concepts: repository, registry, ssh File states, workflow, .gitignore and .gitkeep Basic commands: clone, checkout, add, commit, push, pull, merge, revert, reset, log\u2026 Using git features on PHPStorm Git flow","title":"Source Version Control (Git)"},{"location":"Source-Version-Control/Source-Version-Control/#concepts","text":"","title":"Concepts"},{"location":"Source-Version-Control/Source-Version-Control/#repository","text":"Repository l\u00e0 n\u01a1i ch\u1ee9a v\u00e0 ghi l\u1ea1i states c\u1ee7a th\u01b0 m\u1ee5c v\u00e0 file. states l\u01b0u l\u1ea1i c\u00e1c th\u00f4ng tin, l\u1ecbch s\u1eed thay \u0111\u1ed5i c\u1ee7a th\u01b0 m\u1ee5c v\u00e0 file. GIT Repository \u0111\u01b0\u1ee3c ph\u00e2n th\u00e0nh 2 lo\u1ea1i l\u00e0 remote repository v\u00e0 local repository . Remote repository : L\u00e0 repository \u0111\u1ec3 chia s\u1ebb gi\u1eefa nhi\u1ec1u ng\u01b0\u1eddi v\u00e0 git \u0111\u1eb7t tr\u00ean server chuy\u00ean d\u1ee5ng c\u1ee7a n\u00f3. Local repository : L\u00e0 repository tr\u00ean m\u00e1y local.","title":"Repository"},{"location":"Source-Version-Control/Source-Version-Control/#registry","text":"Registry ho\u1ea1t \u0111\u1ed9ng nh\u01b0 m\u1ed9t kho ch\u1ee9a chung, public ho\u1eb7c private, cho nhi\u1ec1u repository . Th\u01b0\u1eddng d\u00f9ng chung cho 1 t\u1ed5 ch\u1ee9c, c\u00f3 th\u1ec3 publish v\u00e0 share packages, c\u00f3 th\u1ec3 d\u1ec5 d\u00e0ng s\u1eed d\u1ee5ng nh\u01b0 m\u1ed9t ph\u1ea7n dependency trong c\u00e1c d\u1ef1 \u00e1n. GitHub Packages GitLab Container Registry","title":"Registry"},{"location":"Source-Version-Control/Source-Version-Control/#ssh","text":"SSH l\u00e0 m\u1ed9t giao th\u1ee9c t\u01b0\u01a1ng t\u00e1c gi\u1eefa client-server c\u00f3 s\u1eed d\u1ee5ng c\u01a1 ch\u1ebf m\u00e3 ho\u00e1 m\u1ea1nh m\u1ebd nh\u1eb1m b\u1ea3o v\u1ec7 t\u00ednh to\u00e0n v\u1eb9n v\u00e0 b\u1ea3o m\u1eadt th\u00f4ng tin li\u00ean l\u1ea1c, ng\u0103n ch\u1eb7n c\u00e1c hi\u1ec7n t\u01b0\u1ee3ng \u0111\u00e1nh c\u1eafp th\u00f4ng tin tr\u00ean \u0111\u01b0\u1eddng truy\u1ec1n. Th\u01b0\u1eddng d\u00f9ng nh\u01b0 m\u1ed9t ph\u01b0\u01a1ng ph\u00e1p \u0111\u1ec3 \u0111\u0103ng nh\u1eadp t\u1eeb xa an to\u00e0n t\u1eeb m\u00e1y t\u00ednh n\u00e0y sang m\u00e1y t\u00ednh kh\u00e1c. GIT SSH : B\u1ea3o m\u1eadt c\u00e1c k\u1ebft n\u1ed1i c\u1ee7a local v\u1edbi server v\u00e0 kh\u00f4ng ph\u1ea3i nh\u1eadp m\u1eadt kh\u1ea9u github ho\u1eb7c gitlab m\u1ed7i l\u1ea7n pull ho\u1eb7c push code. C\u01a1 ch\u1ebf x\u00e1c th\u1ef1c c\u1ee7a GIT SSH : D\u00f9ng Public/Private key cryptography Public Key - l\u00e0 m\u1ed9t file text - n\u00f3 l\u1ea1i l\u01b0u \u1edf ph\u00eda Git Server SSH , n\u00f3 d\u00f9ng \u0111\u1ec3 khi Client g\u1eedi Private Key (file l\u01b0u \u1edf Client) l\u00ean \u0111\u1ec3 x\u00e1c th\u1ef1c th\u00ec ti\u1ebfn h\u00e0nh verify gi\u1eefa Private Key v\u00e0 Public Key n\u00e0y. N\u1ebfu c\u1eb7p key n\u00e0y \u0111\u00fang ( key pair \u0111\u01b0\u1ee3c gen t\u1eeb ssh-keygen ) th\u00ec k\u1ebft n\u1ed1i gi\u1eefa client - git server l\u00e0 an to\u00e0n. Private Key - l\u00e0 m\u1ed9t file text - d\u00f9ng \u0111\u1ec3 x\u00e1c th\u1ef1c s\u1ef1 ph\u00f9 h\u1ee3p c\u1ee7a Private Key v\u00e0 Public Key . Client mu\u1ed1n k\u1ebft n\u1ed1i v\u1edbi Git Server , thay v\u00ec nh\u1eadp m\u1eadt kh\u1ea9u th\u00ec client g\u1eedi Private Key qua SSH. T\u1ea1o GIT SSH Key d\u00f9ng ssh-keygen c\u1ee7a OpenSSH M\u1edf terminate (tr\u00ean Linux, macOS ho\u1eb7c cmd tr\u00ean Windows) r\u1ed3i g\u00f5 $ ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" \u0110\u1ea7u ti\u00ean n\u00f3 h\u1ecfi nh\u1eadp th\u01b0 m\u1ee5c s\u1ebd l\u01b0u key sinh ra, h\u00e3y nh\u1eadp th\u01b0 m\u1ee5c - t\u00ean file mu\u1ed1n l\u01b0u ho\u1eb7c nh\u1ea5n Enter \u0111\u1ec3 s\u1eed d\u1ee5ng \u0111\u01b0\u1eddng d\u1eabn n\u00f3 g\u1ee3i \u00fd (~/.ssh/id_rsa). Sau \u0111\u00f3 n\u00f3 y\u00eau c\u1ea7u nh\u1eadp passphase , c\u00f3 th\u1ec3 nh\u1ea5n Enter \u0111\u1ec3 r\u1ed7ng. Cu\u1ed1i c\u00f9ng n\u00f3 sinh ra hai file key c\u00f3 t\u00ean id_rsa v\u00e0 id_rsa.pub \u1edf th\u01b0 m\u1ee5c \u0111\u00e3 nh\u1eadp tr\u00ean. Start ssh-agent Win \u2192 Services \u2192 OpenSSH Authentication Agent \u2192 Automatic (Delayed Start). Xong g\u00f5 $ start-ssh-agent refer Adding new SSH key to GitHub account: refer Testing SSH connection ssh -T git@github.com Ho\u1eb7c","title":"SSH"},{"location":"Source-Version-Control/Source-Version-Control/#file-states-workflow-gitignore-and-gitkeep","text":"File states: File c\u00f3 2 states l\u00e0 tracked v\u00e0 untracked . D\u01b0\u1edbi \u0111\u00e2y l\u00e0 File status lifecycle Untracked state : Files \u0111ang \u1edf local directory, ch\u01b0a \u0111\u01b0\u1ee3c th\u00eam v\u00e0o github repository index . File khi n\u00e0y \u1edf untracked state Unmodified state : Files \u0111\u00e3 \u0111\u01b0\u1ee3c th\u00eam github repository index b\u1eb1ng l\u1ec7nh $git add file-name . File khi n\u00e0y \u1edf tracked state Modified state : Khi Files \u0111\u01b0\u1ee3c tracked tr\u01b0\u1edbc \u0111\u00f3 c\u00f3 c\u00e1c thay \u0111\u1ed5i, ch\u1ec9nh s\u1eeda nh\u01b0ng kh\u00f4ng th\u1ef1c hi\u1ec7n vi\u1ec7c commit the changes. Staged state : Khi Files \u0111\u01b0\u1ee3c commit v\u00e0 s\u1eb5n s\u00e0ng push v\u00e0o git repository . Workflow M\u1ed9t basic git workflow: git clone... ho\u1eb7c git pull ... git add... git commit -m ... git push... .gitignore : Li\u1ec7t k\u00ea nh\u1eefng file m\u00e0 m\u00ecnh kh\u00f4ng mong mu\u1ed1n push l\u00ean git. S\u1eed d\u1ee5ng c\u00e1c patterns: S\u1eed d\u1ee5ng # \u0111\u1ec3 comment v\u00e0 c\u00f3 th\u1ec3 \u0111\u1ec3 c\u00e1ch d\u00f2ng cho d\u1ec5 \u0111\u1ecdc. T\u00ean file c\u1ea7n ignore: example.exe C\u1ea3 th\u01b0 m\u1ee5c: example_folder/ S\u1eed d\u1ee5ng d\u1ea5u * \u0111\u1ec3 ignore c\u00e1c file c\u00f3 c\u00f9ng \u0111\u1ecbnh d\u1ea1ng. V\u00ed d\u1ee5 nh\u01b0 b\u1ea1n mu\u1ed1n ignore t\u1ea5t c\u1ea3 c\u00e1c file .xml trong project: *.xml . C\u00f2n n\u1ebfu d\u00f9ng config/*.xml th\u00ec n\u00f3 ch\u1ec9 ignore cho c\u00e1c file config/abc.xml m\u00e0 kh\u00f4ng ignore cho c\u00e1c file config/sub/abc.xml S\u1eed d\u1ee5ng ** \u0111\u1ec3 ignore cho c\u00e1c th\u01b0 m\u1ee5c kh\u00f4ng c\u1ea7n \u0111\u1ecbnh r\u00f5 t\u00ean. V\u00ed d\u1ee5: **/foo n\u00f3 s\u1ebd ignore cho t\u1ea5t c\u1ea3 file ho\u1eb7c th\u01b0 m\u1ee5c c\u00f3 t\u00ean l\u00e0 foo \u1edf m\u1ecdi n\u01a1i trong project. S\u1eed d\u1ee5ng ki\u1ec3u folder/** \u0111\u1ec3 ignore cho t\u1ea5t c\u1ea3 c\u00e1c file b\u00ean trong th\u01b0 m\u1ee5c. .gitkeep : Git kh\u00f4ng cho push c\u00e1c th\u01b0 m\u1ee5c tr\u1ed1ng. N\u1ebfu ta c\u1ed1 g\u1eafng push m\u1ed9t th\u01b0 m\u1ee5c kh\u00f4ng c\u00f3 g\u00ec trong \u0111\u00f3, m\u1eb7c d\u00f9 n\u00f3 s\u1ebd t\u1ed3n t\u1ea1i tr\u00ean m\u00e1y local nh\u01b0ng l\u1ea1i kh\u00f4ng \u0111\u01b0\u1ee3c push l\u00ean git repo. M\u1ed9t ph\u01b0\u01a1ng ph\u00e1p ph\u1ed5 bi\u1ebfn, \u0111\u01b0\u1ee3c ti\u00eau chu\u1ea9n h\u00f3a (ko ph\u1ea3i t\u00ednh n\u0103ng c\u1ee7a Git) \u0111\u1ec3 gi\u1ea3i quy\u1ebft v\u1ea5n \u0111\u1ec1 n\u00e0y l\u00e0 t\u1ea1o m\u1ed9t file .gitkeep (ho\u1eb7c t\u00ean g\u00ec c\u0169ng \u0111c) v\u00e0o c\u00e1c th\u01b0 m\u1ee5c tr\u1ed1ng sau \u0111\u00f3 push b\u00ecnh th\u01b0\u1eddng.","title":"File states, workflow, .gitignore and .gitkeep"},{"location":"Source-Version-Control/Source-Version-Control/#basic-commands","text":"","title":"Basic commands"},{"location":"Source-Version-Control/Source-Version-Control/#cau-hinh-va-khoi-tao-repo","text":"\u0110\u1ed5i t\u00ean/email ng\u01b0\u1eddi d\u00f9ng git config --global user.name newname git config --global user.email newmail@domain.com Kh\u1edfi t\u1ea1o m\u1ed9t Local Repository m\u1edbi git init Kh\u1edfi t\u1ea1o m\u1ed9t Remote Repository m\u1edbi \u1edf Git Server git init --bare","title":"C\u1ea5u h\u00ecnh v\u00e0 kh\u1edfi t\u1ea1o Repo"},{"location":"Source-Version-Control/Source-Version-Control/#lam-viec-voi-local-repo","text":"git status - git status xem tr\u1ea1ng th\u00e1i c\u1ee7a Repo - git status -s xem tr\u1ea1ng th\u00e1i c\u1ee7a Repo ng\u1eafn g\u1ecdn - git clone path clone m\u1ed9t Repository c\u00f3 \u0111\u1ecba ch\u1ec9 l\u00e0 path git add - git add c\u1eadp nh\u1eadt file state v\u00e0o staged - git add filename th\u00eam file v\u00e0o staged - git add *.c th\u00eam file c\u00f3 ph\u1ea7n m\u1edf r\u1ed9ng .c - git add -A th\u00eam m\u1ecdi th\u1ee9 c\u00f3 s\u1ef1 thay \u0111\u1ed5i (th\u00eam file m\u1edbi, x\u00f3a file, thay \u0111\u1ed5i n\u1ed9i dung ...) - git add . th\u00eam m\u1ecdi th\u1ee9 tr\u1eeb x\u00f3a file - git add - th\u00eam m\u1ecdi th\u1ee9 tr\u1eeb file m\u1edbi git commit git commit -m \"commit msg ...\" commit m\u1edbi git commit --amend -m \"commit msg ...\" commit + c\u1eadp nh\u1eadt v\u00e0o commit cu\u1ed1i git log git log xem l\u1ecbch s\u1eed commit git log -4 xem l\u1ecbch s\u1eed 4 commit git log -4 -p xem l\u1ecbch s\u1eed 4 commit + chi ti\u1ebft thay \u0111\u1ed5i git log --oneline hay git log --pretty=oneline hi\u1ec3n th\u1ecb log tr\u1ef1c quan tr\u00ean 1 d\u00f2ng git diff git diff Xem s\u1ef1 kh\u00e1c bi\u1ec7t gi\u1eefa th\u01b0 m\u1ee5c l\u00e0m vi\u1ec7c v\u00e0 staged git diff --staged Xem s\u1ef1 kh\u00e1c bi\u1ec7t gi\u1eefa staged v\u00e0 commit cu\u1ed1i git rm, git reset, git clean - git rm filename x\u00f3a file - git reset HEAD filename h\u1ee7y thay \u0111\u1ed5i c\u1ee7a file - git clean -d -fx . X\u00f3a c\u00e1c file kh\u00f4ng \u0111\u01b0\u1ee3c tracked, d\u00f9ng khi mu\u1ed1n x\u00f3a b\u1ecf nhanh c\u00e1c file kh\u00f4ng \u0111\u01b0\u1ee3c tracked git checkout git checkout <branchname> chuy\u1ec3n sang branchname \u0111\u1ec3 code git checkout -b <branchname> t\u1ea1o m\u1edbi branchname v\u00e0 chuy\u1ec3n sang branchname \u0111\u1ec3 code","title":"L\u00e0m vi\u1ec7c v\u1edbi Local Repo"},{"location":"Source-Version-Control/Source-Version-Control/#lam-viec-voi-remote-repo","text":"git remote git remote xem list c\u00e1c Remote git remote add name_remote addr_remote th\u00eam m\u1ed9t Remote v\u00e0o Local git remote show name_remote xem th\u00f4ng tin v\u1ec1 Remote git remote rename abc xyz \u0111\u1ed5i t\u00ean Remote git pull, git fetch git pull <remote> <branch> t\u1ea3i xu\u1ed1ng n\u1ed9i dung t\u1eeb Remote repository m\u00e0 kh\u00f4ng l\u00e0m thay \u0111\u1ed5i tr\u1ea1ng th\u00e1i c\u1ee7a Local repository git fetch <remote> <branch> : t\u1ea3i xu\u1ed1ng n\u1ed9i dung v\u00e0 c\u1ed1 g\u1eafng thay \u0111\u1ed5i tr\u1ea1ng th\u00e1i c\u1ee7a Local repository cho ph\u00f9 h\u1ee3p v\u1edbi n\u1ed9i dung \u0111\u00f3","title":"L\u00e0m vi\u1ec7c v\u1edbi Remote Repo"},{"location":"Source-Version-Control/Source-Version-Control/#lam-viec-voi-tag","text":"git tag xem danh s\u00e1ch tag git tag -a tagname -m \"tag msg\" t\u1ea1o tag cho commit hi\u1ec7n t\u1ea1i git tag -a tagname -m \"tag msg\" hash t\u1ea1o tag cho commit c\u0169 git show tagname xem th\u00f4ng tin v\u1ec1 commit c\u00f3 tagname git push origin tagname c\u1eadp nh\u1eadt l\u00ean remote t\u1ea5t c\u1ea3 tagname git push origin --tags c\u1eadp nh\u1eadn l\u00ean remote t\u1ea5t c\u1ea3 tag git checkout tagname xem v\u1ec1 phi\u00ean b\u1ea3n commit c\u00f3 tagname git checkout -b newbranchname tagname t\u1ea1o nh\u00e1nh m\u1edbi t\u1eeb phi\u00ean b\u1ea3n tagname git push --delete origin tagname x\u00f3a tag \u1edf remote git tag -d tagname x\u00f3a tag \u1edf local","title":"L\u00e0m vi\u1ec7c v\u1edbi Tag"},{"location":"Source-Version-Control/Source-Version-Control/#lam-viec-voi-branch","text":"git branch li\u1ec7t k\u00ea c\u00e1c branch git branch -v li\u1ec7t k\u00ea c\u00e1c branch + commit cu\u1ed1i git branch --merged c\u00e1c branch g\u1ed9p v\u00e0o branch \u0111ang checkin git branch --no-merged c\u00e1c branch kh\u00f4ng g\u1ed9p v\u00e0o branch \u0111ang checkin git branch branchname t\u1ea1o branch m\u1edbi git checkout -b branchname t\u1ea1o branch m\u1edbi, khi \u0111ang \u0111\u1ee9ng \u1edf m\u1ed9t snapshot c\u0169 git checkout branchname chuy\u1ec3n branch git merge branchname g\u1ed9p branch v\u1edbi branch hi\u1ec7n t\u1ea1i git base branchname g\u1ed9p branch v\u1edbi branch hi\u1ec7n t\u1ea1i git mergetool c\u00f4ng c\u1ee5 tr\u1ef1c quan x\u1eed l\u00fd xung \u0111\u1ed9t merge git branch -d branchname x\u00f3a branch","title":"L\u00e0m vi\u1ec7c v\u1edbi branch"},{"location":"Source-Version-Control/Source-Version-Control/#git-flow","text":"Git Flow l\u00e0 t\u00ean g\u1ecdi c\u1ee7a 1 tool (command) h\u1ed7 tr\u1ee3 branch model g\u1ecdi l\u00e0 A successful Git branching model do \u00f4ng Vincent Driessen \u0111\u1ec1 xu\u1ea5t ra. Ng\u01b0\u1eddi ta th\u01b0\u1eddng g\u1ecdi \u0111\u00f3 l\u00e0 model hay tool, v\u00e0 trong git-flow c\u00f3 5 ki\u1ec3u branch v\u1edbi m\u1ed7i vai tr\u00f2 kh\u00e1c nhau: master : l\u00e0 branch t\u1ed3n t\u1ea1i xuy\u00ean su\u1ed1t qu\u00e1 v\u00f2ng \u0111\u1eddi c\u1ee7a ph\u1ea7n m\u1ec1m \u0111\u01b0\u1ee3c t\u1ea1o m\u1eb7c \u0111\u1ecbnh trong Git khi ta t\u1ea1o repository. develop : l\u00e0 n\u01a1i c\u00e1c develop ph\u00e1t tri\u1ec3n ch\u00ednh branch lu\u00f4n t\u1ed3n t\u1ea1i song song v\u1edbi master feature : l\u00e0 nh\u00e1nh \u0111\u01b0\u1ee3c t\u00e1ch t\u1eeb develop nh\u1eb1m m\u1ee5c \u0111\u00edch x\u00e2y d\u1ef1ng c\u00e1c t\u00ednh n\u0103ng ri\u00eang m\u00e0 kh\u00f4ng ph\u1ee5 thu\u1ed9c v\u00e0o nhau release : l\u00e0 nh\u00e1nh t\u00e1ch t\u1eeb develop \u0111\u1ec3 ki\u1ec3m tra v\u00e0 fix bug chu\u1ea9n b\u1ecb cho vi\u1ec7c ra m\u1eaft s\u1ea3n ph\u1ea9m hotfix : l\u00e0 nh\u00e1nh t\u00e1ch t\u1eeb master \u0111\u1ec3 fix g\u1ea5p nh\u1eefng bug c\u00f2n t\u1ed3n \u0111\u1ecdng m\u00e0 tr\u00ean release ch\u01b0a x\u1eed l\u00fd h\u1ebft","title":"Git flow"},{"location":"Source-Version-Control/Source-Version-Control/#git-flow-extensions","text":"Develop Initialize git flow init Features Start a new feature git flow feature start MYFEATURE Finish up a feature git flow feature finish MYFEATURE Publish a feature git flow feature publish MYFEATURE Getting a published feature git flow feature pull origin MYFEATURE Release Start a release git flow release start RELEASE Publish a release git flow release publish RELEASE Finish up a release git flow release finish RELEASE Hotfixes Start a Hotfix git flow hotfix start VERSION [BASENAME] Finish up a Hotfix git flow hotfix finish VERSION","title":"Git-flow extensions"},{"location":"Source-Version-Control/Source-Version-Control/#reference","text":"git-ssh 4 GIT\u2019S FILE STATUS LIFECYCLE File Status Lifecycle in Git Git commands 35+ Git Commands List Every Programmer Should Know git-flow cheatsheet","title":"Reference"},{"location":"Testing/Tessting/","text":"Testing","title":"Testing"},{"location":"Testing/Tessting/#testing","text":"","title":"Testing"},{"location":"Web-Technologies/1.Web-Protocols/","text":"Web Protocols TCP HTTP TLS/SSL SSH Websocket Web Protocols l\u00e0 m\u1ed9t h\u1ec7 th\u1ed1ng c\u00e1c quy t\u1eafc v\u1ec1 \u0111\u1ecbnh d\u1ea1ng d\u1eef li\u1ec7u v\u00e0 c\u00e1ch th\u1ee9c d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c trao \u0111\u1ed5i gi\u1eefa c\u00e1c m\u00e1y t\u00ednh, c\u00e1c thi\u1ebft b\u1ecb, c\u00e1c \u1ee9ng d\u1ee5ng v\u1edbi nhau th\u00f4ng qua Internet. Open Systems Interconnection (OSI) \u0111\u01b0\u1ee3c coi l\u00e0 m\u00f4 h\u00ecnh ki\u1ebfn tr\u00fac ch\u00ednh cho vi\u1ec7c truy\u1ec1n d\u1eef li\u1ec7u tr\u00ean Internet, ph\u1ea7n l\u1edbn c\u00e1c giao th\u1ee9c m\u1ea1ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng ng\u00e0y nay c\u00f3 c\u1ea5u tr\u00fac d\u1ef1a tr\u00ean m\u00f4 h\u00ecnh OSI. M\u00f4 h\u00ecnh OSI chia qu\u00e1 tr\u00ecnh giao ti\u1ebfp gi\u1eefa hai thi\u1ebft b\u1ecb m\u1ea1ng th\u00e0nh 7 l\u1edbp. C\u00e1c nhi\u1ec7m v\u1ee5 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a cho m\u1ed7i l\u1edbp trong s\u1ed1 7 l\u1edbp n\u00e0y. T\u1ea5t c\u1ea3 c\u00e1c l\u1edbp \u0111\u1ec1u \u0111\u1ed9c l\u1eadp v\u00e0 c\u00e1c t\u00e1c v\u1ee5 c\u1ee7a m\u1ed7i l\u1edbp \u0111\u1ec1u c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c th\u1ef1c thi m\u1ed9t c\u00e1ch \u0111\u1ed9c l\u1eadp. Layers Description Layer 7: Application Giao ti\u1ebfp tr\u1ef1c ti\u1ebfp v\u1edbi c\u00e1c process c\u1ee7a \u1ee9ng d\u1ee5ng v\u00e0 th\u1ef1c thi c\u00e1c service c\u1ee7a c\u00e1c process \u0111\u00f3. G\u1eedi c\u00e1c request c\u1ee7a service t\u1edbi Presentation Layer. Layer 6: Presentation B\u1ecf \u0111i s\u1ef1 kh\u00e1c bi\u1ec7t v\u1ec1 \u0111\u1ecbnh d\u1ea1ng d\u1eef li\u1ec7u gi\u1eefa c\u00e1c h\u1ec7 th\u1ed1ng v\u1edbi nhau b\u1eb1ng c\u00e1ch m\u00e3 h\u00f3a v\u00e0 gi\u1ea3i m\u00e3 d\u1eef li\u1ec7u, c\u0169ng nh\u01b0 n\u00e9n v\u00e0 gi\u1ea3i n\u00e9n d\u1eef li\u1ec7u. Layer 5: Session Cung c\u1ea5p m\u1ed9t c\u01a1 ch\u1ebf \u0111\u1ec3 qu\u1ea3n l\u00fd phi\u00ean giao ti\u1ebfp gi\u1eefa c\u00e1c ti\u1ebfn tr\u00ecnh \u1ee9ng d\u1ee5ng Layer 4: Transport Qu\u1ea3n l\u00fd vi\u1ec7c g\u1eedi tin nh\u1eafn t\u1eeb \u0111\u1ea7u \u0111\u1ebfn cu\u1ed1i trong networks. Renders, delivery c\u00e1c g\u00f3i tin tu\u1ea7n t\u1ef1, b\u1ea3o m\u1eadt th\u00f4ng qua c\u01a1 ch\u1ebf error recovery v\u00e0 flow control Layer 3: Network \u0110\u1ecbnh tuy\u1ebfn c\u00e1c g\u00f3i tin theo \u0111\u1ecba ch\u1ec9 thi\u1ebft b\u1ecb m\u1ea1ng (unique ) v\u00e0 qu\u1ea3n l\u00fd renders flow tr\u00e1nh t\u00ecnh tr\u1ea1ng t\u1eafc ngh\u1ebdn, c\u1ea1n ki\u1ec7t t\u00e0i nguy\u00ean m\u1ea1ng Layer 2: Data link \u0110\u00f3ng g\u00f3i c\u00e1c g\u00f3i tin. Ph\u00e1t hi\u1ec7n v\u00e0 s\u1eeda l\u1ed7i truy\u1ec1n g\u00f3i tin. Layer 1: Physical X\u00e1c \u0111\u1ecbnh c\u00e1c \u0111\u1eb7c t\u00ednh v\u1eadt l\u00fd c\u1ee7a thi\u1ebft b\u1ecb v\u00e0 l\u00e0 Interface gi\u1eefa ph\u01b0\u01a1ng ti\u1ec7n m\u1ea1ng v\u1edbi thi\u1ebft b\u1ecb. TCP TCP Protocol - Transmission Control Protocol TCP l\u00e0 m\u1ed9t giao th\u1ee9c m\u1ea1ng quan tr\u1ecdng cho ph\u00e9p hai Server (hosts) k\u1ebft n\u1ed1i v\u00e0 trao \u0111\u1ed5i c\u00e1c d\u1eef li\u1ec7u, g\u00f3i tin th\u00f4ng qua data streams. TCP \u0111\u1ea3m b\u1ea3o vi\u1ec7c ph\u00e2n ph\u1ed1i d\u1eef li\u1ec7u v\u00e0 g\u00f3i tin theo th\u1ee9 t\u1ef1 nh\u01b0 khi ch\u00fang \u0111\u01b0\u1ee3c g\u1eedi \u0111i. Vai tr\u00f2 c\u1ee7a TCP: \u0110\u1ea3m b\u1ea3o c\u00e1c g\u00f3i tin \u0111\u01b0\u1ee3c ph\u00e2n ph\u1ed1i m\u1ed9t c\u00e1ch \u0111\u00e1ng tin c\u1eady, kh\u00f4ng c\u00f3 l\u1ed7i. C\u01a1 ch\u1ebf ho\u1ea1t \u0111\u00f4ng - 3 way handshake: + Client g\u1eedi cho Server m\u1ed9t g\u00f3i SYN \u2014 m\u1ed9t y\u00eau c\u1ea7u k\u1ebft n\u1ed1i t\u1eeb port ngu\u1ed3n c\u1ee7a n\u00f3 \u0111\u1ebfn port \u0111\u00edch \u0111\u1ebfn c\u1ee7a Server. + Server ph\u1ea3n h\u1ed3i b\u1eb1ng g\u00f3i SYN/ACK, x\u00e1c nh\u1eadn vi\u1ec7c nh\u1eadn \u0111\u01b0\u1ee3c y\u00eau c\u1ea7u k\u1ebft n\u1ed1i. + Client nh\u1eadn g\u00f3i SYN/ACK v\u00e0 tr\u1ea3 l\u1eddi b\u1eb1ng g\u00f3i ACK c\u1ee7a ch\u00ednh n\u00f3. HTTP HTTP Protocol - Hypertext Transfer Protocol HTTP l\u00e0 m\u1ed9t giao th\u1ee9c \u0111\u1ec3 fetching HTML resources. L\u00e0 n\u1ec1n t\u1ea3ng c\u1ee7a b\u1ea5t k\u1ef3 trao \u0111\u1ed5i d\u1eef li\u1ec7u n\u00e0o tr\u00ean Web. L\u00e0 m\u1ed9t giao th\u1ee9c gi\u1eefa client-server, c\u00e1c request \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o b\u1edfi client, th\u01b0\u1eddng l\u00e0 Browser, \u0111\u1ec3 g\u1eedi c\u00e1c data: video, image, text v.v t\u1edbi server v\u00e0 t\u01b0\u01a1ng t\u1ef1 server response data l\u1ea1i cho client. TLS/SSL TLS/SSL Protocol SSL Protocol - Secure Sockets Layer L\u00e0 ti\u00eau chu\u1ea9n \u0111\u1ec3 gi\u1eef k\u1ebft n\u1ed1i internet an to\u00e0n v\u00e0 b\u1ea3o v\u1ec7 m\u1ecdi d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c g\u1eedi gi\u1eefa hai h\u1ec7 th\u1ed1ng v\u1edbi nhau, x\u00e1c th\u1ef1c gi\u1eefa hai h\u1ec7 th\u1ed1ng v\u00e0 ng\u0103n t\u1ed9i ph\u1ea1m \u0111\u1ecdc v\u00e0 s\u1eeda \u0111\u1ed5i b\u1ea5t k\u1ef3 th\u00f4ng tin n\u00e0o \u0111\u01b0\u1ee3c truy\u1ec1n \u0111i. TLS Protocol - Transport Layer Security L\u00e0 m\u1ed9t updated, more secure version c\u1ee7a SSL SSH SSH Protocol - Secure Shell L\u00e0 m\u1ed9t ph\u01b0\u01a1ng ph\u00e1p \u0111\u1ec3 \u0111\u0103ng nh\u1eadp t\u1eeb xa an to\u00e0n t\u1eeb m\u00e1y t\u00ednh n\u00e0y sang m\u00e1y t\u00ednh kh\u00e1c. Cung c\u1ea5p m\u1ed9t s\u1ed1 optional \u0111\u1ec3 x\u00e1c th\u1ef1c v\u00e0 n\u00f3 b\u1ea3o v\u1ec7 t\u00ednh to\u00e0n v\u1eb9n v\u00e0 b\u1ea3o m\u1eadt th\u00f4ng tin li\u00ean l\u1ea1c b\u1eb1ng vi\u1ec7c m\u00e3 h\u00f3a. L\u00e0 m\u1ed9t gi\u1ea3i ph\u00e1p thay th\u1ebf an to\u00e0n cho c\u00e1c giao th\u1ee9c \u0111\u0103ng nh\u1eadp kh\u00f4ng \u0111\u01b0\u1ee3c b\u1ea3o v\u1ec7 (ch\u1eb3ng h\u1ea1n nh\u01b0 telnet, rlogin) v\u00e0 c\u00e1c ph\u01b0\u01a1ng th\u1ee9c truy\u1ec1n t\u1ec7p kh\u00f4ng an to\u00e0n (ch\u1eb3ng h\u1ea1n nh\u01b0 FTP). Example: Connecting to GitHub with SSH Websocket Websocket protocol H\u1ed7 tr\u1ee3 giao ti\u1ebfp hai chi\u1ec1u gi\u1eefa client v\u00e0 server \u0111\u1ec3 t\u1ea1o m\u1ed9t k\u1ebft n\u1ed1i trao \u0111\u1ed5i d\u1eef li\u1ec7u. Giao th\u1ee9c n\u00e0y kh\u00f4ng s\u1eed d\u1ee5ng HTTP m\u00e0 th\u1ef1c hi\u1ec7n n\u00f3 qua TCP. M\u1eb7c d\u00f9 \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 chuy\u00ean s\u1eed d\u1ee5ng cho c\u00e1c \u1ee9ng d\u1ee5ng web, l\u1eadp tr\u00ecnh vi\u00ean v\u1eabn c\u00f3 th\u1ec3 \u0111\u01b0a ch\u00fang v\u00e0o b\u1ea5t k\u00ec lo\u1ea1i \u1ee9ng d\u1ee5ng n\u00e0o. C\u00f3 \u0111\u1ed9 tr\u1ec5 th\u1ea5p v\u00e0 d\u1ec5 x\u1eed l\u00fd l\u1ed7i. Websocket th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho nh\u1eefng tr\u01b0\u1eddng h\u1ee3p y\u00eau c\u1ea7u real time nh\u01b0 chat, hi\u1ec3n th\u1ecb bi\u1ec3u \u0111\u1ed3 hay th\u00f4ng tin ch\u1ee9ng kho\u00e1n. Reference MDN Web Docs Network Protocols SSH protocol Connecting to GitHub with SSH Websocket Protocols tcp-3-way-handshake","title":"Web Protocols"},{"location":"Web-Technologies/1.Web-Protocols/#web-protocols","text":"TCP HTTP TLS/SSL SSH Websocket Web Protocols l\u00e0 m\u1ed9t h\u1ec7 th\u1ed1ng c\u00e1c quy t\u1eafc v\u1ec1 \u0111\u1ecbnh d\u1ea1ng d\u1eef li\u1ec7u v\u00e0 c\u00e1ch th\u1ee9c d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c trao \u0111\u1ed5i gi\u1eefa c\u00e1c m\u00e1y t\u00ednh, c\u00e1c thi\u1ebft b\u1ecb, c\u00e1c \u1ee9ng d\u1ee5ng v\u1edbi nhau th\u00f4ng qua Internet. Open Systems Interconnection (OSI) \u0111\u01b0\u1ee3c coi l\u00e0 m\u00f4 h\u00ecnh ki\u1ebfn tr\u00fac ch\u00ednh cho vi\u1ec7c truy\u1ec1n d\u1eef li\u1ec7u tr\u00ean Internet, ph\u1ea7n l\u1edbn c\u00e1c giao th\u1ee9c m\u1ea1ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng ng\u00e0y nay c\u00f3 c\u1ea5u tr\u00fac d\u1ef1a tr\u00ean m\u00f4 h\u00ecnh OSI. M\u00f4 h\u00ecnh OSI chia qu\u00e1 tr\u00ecnh giao ti\u1ebfp gi\u1eefa hai thi\u1ebft b\u1ecb m\u1ea1ng th\u00e0nh 7 l\u1edbp. C\u00e1c nhi\u1ec7m v\u1ee5 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a cho m\u1ed7i l\u1edbp trong s\u1ed1 7 l\u1edbp n\u00e0y. T\u1ea5t c\u1ea3 c\u00e1c l\u1edbp \u0111\u1ec1u \u0111\u1ed9c l\u1eadp v\u00e0 c\u00e1c t\u00e1c v\u1ee5 c\u1ee7a m\u1ed7i l\u1edbp \u0111\u1ec1u c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c th\u1ef1c thi m\u1ed9t c\u00e1ch \u0111\u1ed9c l\u1eadp. Layers Description Layer 7: Application Giao ti\u1ebfp tr\u1ef1c ti\u1ebfp v\u1edbi c\u00e1c process c\u1ee7a \u1ee9ng d\u1ee5ng v\u00e0 th\u1ef1c thi c\u00e1c service c\u1ee7a c\u00e1c process \u0111\u00f3. G\u1eedi c\u00e1c request c\u1ee7a service t\u1edbi Presentation Layer. Layer 6: Presentation B\u1ecf \u0111i s\u1ef1 kh\u00e1c bi\u1ec7t v\u1ec1 \u0111\u1ecbnh d\u1ea1ng d\u1eef li\u1ec7u gi\u1eefa c\u00e1c h\u1ec7 th\u1ed1ng v\u1edbi nhau b\u1eb1ng c\u00e1ch m\u00e3 h\u00f3a v\u00e0 gi\u1ea3i m\u00e3 d\u1eef li\u1ec7u, c\u0169ng nh\u01b0 n\u00e9n v\u00e0 gi\u1ea3i n\u00e9n d\u1eef li\u1ec7u. Layer 5: Session Cung c\u1ea5p m\u1ed9t c\u01a1 ch\u1ebf \u0111\u1ec3 qu\u1ea3n l\u00fd phi\u00ean giao ti\u1ebfp gi\u1eefa c\u00e1c ti\u1ebfn tr\u00ecnh \u1ee9ng d\u1ee5ng Layer 4: Transport Qu\u1ea3n l\u00fd vi\u1ec7c g\u1eedi tin nh\u1eafn t\u1eeb \u0111\u1ea7u \u0111\u1ebfn cu\u1ed1i trong networks. Renders, delivery c\u00e1c g\u00f3i tin tu\u1ea7n t\u1ef1, b\u1ea3o m\u1eadt th\u00f4ng qua c\u01a1 ch\u1ebf error recovery v\u00e0 flow control Layer 3: Network \u0110\u1ecbnh tuy\u1ebfn c\u00e1c g\u00f3i tin theo \u0111\u1ecba ch\u1ec9 thi\u1ebft b\u1ecb m\u1ea1ng (unique ) v\u00e0 qu\u1ea3n l\u00fd renders flow tr\u00e1nh t\u00ecnh tr\u1ea1ng t\u1eafc ngh\u1ebdn, c\u1ea1n ki\u1ec7t t\u00e0i nguy\u00ean m\u1ea1ng Layer 2: Data link \u0110\u00f3ng g\u00f3i c\u00e1c g\u00f3i tin. Ph\u00e1t hi\u1ec7n v\u00e0 s\u1eeda l\u1ed7i truy\u1ec1n g\u00f3i tin. Layer 1: Physical X\u00e1c \u0111\u1ecbnh c\u00e1c \u0111\u1eb7c t\u00ednh v\u1eadt l\u00fd c\u1ee7a thi\u1ebft b\u1ecb v\u00e0 l\u00e0 Interface gi\u1eefa ph\u01b0\u01a1ng ti\u1ec7n m\u1ea1ng v\u1edbi thi\u1ebft b\u1ecb.","title":"Web Protocols"},{"location":"Web-Technologies/1.Web-Protocols/#tcp","text":"TCP Protocol - Transmission Control Protocol TCP l\u00e0 m\u1ed9t giao th\u1ee9c m\u1ea1ng quan tr\u1ecdng cho ph\u00e9p hai Server (hosts) k\u1ebft n\u1ed1i v\u00e0 trao \u0111\u1ed5i c\u00e1c d\u1eef li\u1ec7u, g\u00f3i tin th\u00f4ng qua data streams. TCP \u0111\u1ea3m b\u1ea3o vi\u1ec7c ph\u00e2n ph\u1ed1i d\u1eef li\u1ec7u v\u00e0 g\u00f3i tin theo th\u1ee9 t\u1ef1 nh\u01b0 khi ch\u00fang \u0111\u01b0\u1ee3c g\u1eedi \u0111i. Vai tr\u00f2 c\u1ee7a TCP: \u0110\u1ea3m b\u1ea3o c\u00e1c g\u00f3i tin \u0111\u01b0\u1ee3c ph\u00e2n ph\u1ed1i m\u1ed9t c\u00e1ch \u0111\u00e1ng tin c\u1eady, kh\u00f4ng c\u00f3 l\u1ed7i. C\u01a1 ch\u1ebf ho\u1ea1t \u0111\u00f4ng - 3 way handshake: + Client g\u1eedi cho Server m\u1ed9t g\u00f3i SYN \u2014 m\u1ed9t y\u00eau c\u1ea7u k\u1ebft n\u1ed1i t\u1eeb port ngu\u1ed3n c\u1ee7a n\u00f3 \u0111\u1ebfn port \u0111\u00edch \u0111\u1ebfn c\u1ee7a Server. + Server ph\u1ea3n h\u1ed3i b\u1eb1ng g\u00f3i SYN/ACK, x\u00e1c nh\u1eadn vi\u1ec7c nh\u1eadn \u0111\u01b0\u1ee3c y\u00eau c\u1ea7u k\u1ebft n\u1ed1i. + Client nh\u1eadn g\u00f3i SYN/ACK v\u00e0 tr\u1ea3 l\u1eddi b\u1eb1ng g\u00f3i ACK c\u1ee7a ch\u00ednh n\u00f3.","title":"TCP"},{"location":"Web-Technologies/1.Web-Protocols/#http","text":"HTTP Protocol - Hypertext Transfer Protocol HTTP l\u00e0 m\u1ed9t giao th\u1ee9c \u0111\u1ec3 fetching HTML resources. L\u00e0 n\u1ec1n t\u1ea3ng c\u1ee7a b\u1ea5t k\u1ef3 trao \u0111\u1ed5i d\u1eef li\u1ec7u n\u00e0o tr\u00ean Web. L\u00e0 m\u1ed9t giao th\u1ee9c gi\u1eefa client-server, c\u00e1c request \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o b\u1edfi client, th\u01b0\u1eddng l\u00e0 Browser, \u0111\u1ec3 g\u1eedi c\u00e1c data: video, image, text v.v t\u1edbi server v\u00e0 t\u01b0\u01a1ng t\u1ef1 server response data l\u1ea1i cho client.","title":"HTTP"},{"location":"Web-Technologies/1.Web-Protocols/#tlsssl","text":"TLS/SSL Protocol SSL Protocol - Secure Sockets Layer L\u00e0 ti\u00eau chu\u1ea9n \u0111\u1ec3 gi\u1eef k\u1ebft n\u1ed1i internet an to\u00e0n v\u00e0 b\u1ea3o v\u1ec7 m\u1ecdi d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c g\u1eedi gi\u1eefa hai h\u1ec7 th\u1ed1ng v\u1edbi nhau, x\u00e1c th\u1ef1c gi\u1eefa hai h\u1ec7 th\u1ed1ng v\u00e0 ng\u0103n t\u1ed9i ph\u1ea1m \u0111\u1ecdc v\u00e0 s\u1eeda \u0111\u1ed5i b\u1ea5t k\u1ef3 th\u00f4ng tin n\u00e0o \u0111\u01b0\u1ee3c truy\u1ec1n \u0111i. TLS Protocol - Transport Layer Security L\u00e0 m\u1ed9t updated, more secure version c\u1ee7a SSL","title":"TLS/SSL"},{"location":"Web-Technologies/1.Web-Protocols/#ssh","text":"SSH Protocol - Secure Shell L\u00e0 m\u1ed9t ph\u01b0\u01a1ng ph\u00e1p \u0111\u1ec3 \u0111\u0103ng nh\u1eadp t\u1eeb xa an to\u00e0n t\u1eeb m\u00e1y t\u00ednh n\u00e0y sang m\u00e1y t\u00ednh kh\u00e1c. Cung c\u1ea5p m\u1ed9t s\u1ed1 optional \u0111\u1ec3 x\u00e1c th\u1ef1c v\u00e0 n\u00f3 b\u1ea3o v\u1ec7 t\u00ednh to\u00e0n v\u1eb9n v\u00e0 b\u1ea3o m\u1eadt th\u00f4ng tin li\u00ean l\u1ea1c b\u1eb1ng vi\u1ec7c m\u00e3 h\u00f3a. L\u00e0 m\u1ed9t gi\u1ea3i ph\u00e1p thay th\u1ebf an to\u00e0n cho c\u00e1c giao th\u1ee9c \u0111\u0103ng nh\u1eadp kh\u00f4ng \u0111\u01b0\u1ee3c b\u1ea3o v\u1ec7 (ch\u1eb3ng h\u1ea1n nh\u01b0 telnet, rlogin) v\u00e0 c\u00e1c ph\u01b0\u01a1ng th\u1ee9c truy\u1ec1n t\u1ec7p kh\u00f4ng an to\u00e0n (ch\u1eb3ng h\u1ea1n nh\u01b0 FTP). Example: Connecting to GitHub with SSH","title":"SSH"},{"location":"Web-Technologies/1.Web-Protocols/#websocket","text":"Websocket protocol H\u1ed7 tr\u1ee3 giao ti\u1ebfp hai chi\u1ec1u gi\u1eefa client v\u00e0 server \u0111\u1ec3 t\u1ea1o m\u1ed9t k\u1ebft n\u1ed1i trao \u0111\u1ed5i d\u1eef li\u1ec7u. Giao th\u1ee9c n\u00e0y kh\u00f4ng s\u1eed d\u1ee5ng HTTP m\u00e0 th\u1ef1c hi\u1ec7n n\u00f3 qua TCP. M\u1eb7c d\u00f9 \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 chuy\u00ean s\u1eed d\u1ee5ng cho c\u00e1c \u1ee9ng d\u1ee5ng web, l\u1eadp tr\u00ecnh vi\u00ean v\u1eabn c\u00f3 th\u1ec3 \u0111\u01b0a ch\u00fang v\u00e0o b\u1ea5t k\u00ec lo\u1ea1i \u1ee9ng d\u1ee5ng n\u00e0o. C\u00f3 \u0111\u1ed9 tr\u1ec5 th\u1ea5p v\u00e0 d\u1ec5 x\u1eed l\u00fd l\u1ed7i. Websocket th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho nh\u1eefng tr\u01b0\u1eddng h\u1ee3p y\u00eau c\u1ea7u real time nh\u01b0 chat, hi\u1ec3n th\u1ecb bi\u1ec3u \u0111\u1ed3 hay th\u00f4ng tin ch\u1ee9ng kho\u00e1n.","title":"Websocket"},{"location":"Web-Technologies/1.Web-Protocols/#reference","text":"MDN Web Docs Network Protocols SSH protocol Connecting to GitHub with SSH Websocket Protocols tcp-3-way-handshake","title":"Reference"},{"location":"Web-Technologies/2.HTTP-Protocol/","text":"HTTP Protocol Request headers and methods Response headers and status CORS Authentication Cookie, Cache Overview Hypertext Transfer Protocol (HTTP) l\u00e0 m\u1ed9t giao th\u1ee9c thu\u1ed9c t\u1ea7ng Application d\u00f9ng \u0111\u1ec3 truy\u1ec1n c\u00e1c hypermedia documents, ch\u1eb3ng h\u1ea1n nh\u01b0 HTML. HTTP tu\u00e2n theo m\u00f4 h\u00ecnh client-server, v\u1edbi client m\u1edf k\u1ebft n\u1ed1i \u0111\u1ec3 th\u1ef1c hi\u1ec7n request, sau \u0111\u00f3 \u0111\u1ee3i cho \u0111\u1ebfn khi nh\u1eadn \u0111\u01b0\u1ee3c respone t\u1eeb server. HTTP Headers : \u0110\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 m\u00f4 t\u1ea3 t\u00e0i nguy\u00ean ho\u1eb7c h\u00e0nh vi c\u1ee7a client/server. M\u1ed9t s\u1ed1 Header fields ph\u1ed5 bi\u1ebfn: Request headers: authority , method , path , scheme , accept , accept-encoding , accept-language , cookie , user-agent ... Response headers: access-control-allow-origin , content-length , content-type , date , server , set-cookie ... Header fields \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 trong IANA registry ho\u1eb7c HTTP Headers - MDN Web Docs Request headers and methods Concepts Request headers l\u00e0 m\u1ed9t HTTP Headers, d\u00f9ng trong 1 HTTP Request \u0111\u1ec3 cung c\u1ea5p th\u00f4ng tin v\u1ec1 request context, \u0111\u1ec3 server ti\u1ebfp nh\u1eadn, x\u1eed l\u00fd v\u00e0 g\u1eedi c\u00e1c Response v\u1ec1 cho clinet. Kh\u00f4ng ph\u1ea3i t\u1ea5t c\u1ea3 c\u00e1c headers xu\u1ea5t hi\u1ec7n trong m\u1ed9t request \u0111\u1ec1u \u0111\u01b0\u1ee3c l\u00e0 Request headers. V\u00ed d\u1ee5: Content-Type header \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 representation header . Example HTTP message d\u01b0\u1edbi \u0111\u00e2y minh h\u1ecda cho m\u1ed9t Request headers sau khi g\u1eedi m\u1ed9t GET mothod request: GET /home.html HTTP/1.1 Host: developer.mozilla.org User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:50.0) Gecko/20100101 Firefox/50.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate, br Referer: https://developer.mozilla.org/testpage.html Connection: keep-alive Upgrade-Insecure-Requests: 1 If-Modified-Since: Mon, 18 Jul 2016 02:36:04 GMT If-None-Match: \"c561c68d0ba92bbeb8b0fff2a9199f722e3a621a\" Cache-Control: max-age=0 Methods M\u1ed9t trong nh\u1eefng m\u1ee5c ti\u00eau ch\u00ednh c\u1ee7a ph\u01b0\u01a1ng ph\u00e1p RESTful API l\u00e0 s\u1eed d\u1ee5ng HTTP nh\u01b0 m\u1ed9t giao th\u1ee9c \u1ee9ng d\u1ee5ng \u0111\u1ec3 tr\u00e1nh \u0111\u1ecbnh h\u00ecnh m\u1ed9t API t\u1ef1 ch\u1ebf. Do \u0111\u00f3, ch\u00fang ta n\u00ean s\u1eed d\u1ee5ng c\u00e1c \u0111\u1ed9ng t\u1eeb HTTP m\u1ed9t c\u00e1ch c\u00f3 h\u1ec7 th\u1ed1ng \u0111\u1ec3 m\u00f4 t\u1ea3 nh\u1eefng h\u00e0nh \u0111\u1ed9ng n\u00e0o \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n tr\u00ean c\u00e1c t\u00e0i nguy\u00ean v\u00e0 thu\u1eadn l\u1ee3i cho vi\u1ec7c ph\u00e1t tri\u1ec3n khi x\u1eed l\u00fd c\u00e1c ho\u1ea1t \u0111\u1ed9ng CRUD l\u1eb7p l\u1ea1i. Demo 1. GET Ph\u01b0\u01a1ng th\u1ee9c GET \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 truy xu\u1ea5t th\u00f4ng tin t\u1eeb server th\u00f4ng qua m\u1ed9t URI nh\u1ea5t \u0111\u1ecbnh. C\u00e1c request s\u1eed d\u1ee5ng GET method ch\u1ec9 n\u00ean truy xu\u1ea5t d\u1eef li\u1ec7u v\u00e0 kh\u00f4ng c\u00f3 t\u00e1c d\u1ee5ng, \u1ea3nh h\u01b0\u1edfng n\u00e0o kh\u00e1c \u0111\u1ed1i v\u1edbi d\u1eef li\u1ec7u. Syntax: GET /index.html 2. POST - Ph\u01b0\u01a1ng th\u1ee9c POST \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 g\u1eedi d\u1eef li\u1ec7u \u0111\u1ebfn m\u00e1y ch\u1ee7, v\u00ed d\u1ee5: th\u00f4ng tin kh\u00e1ch h\u00e0ng, t\u1ea3i l\u00ean t\u1ec7p, v.v. b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng c\u00e1c HTML forms v\u00e0 d\u1eabn \u0111\u1ebfn thay \u0111\u1ed5i tr\u00ean server. Type of the body c\u1ee7a POST methods request \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 trong Content-Type header: application/x-www-form-urlencoded : c\u00e1c key v\u00e0 value trong key-value pair \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a, ph\u00e2n t\u00e1ch b\u1eb1ng & , v\u1edbi d\u1ea5u = gi\u1eefa key v\u00e0 value. Ngo\u00e0i ra k\u00fd t\u1ef1 kh\u00f4ng ph\u1ea3i ch\u1eef v\u00e0 s\u1ed1 \u0111\u1ec1u \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a theo % . multiart/form-data : m\u1ed7i values \u0111\u01b0\u1ee3c g\u1eedi d\u01b0\u1edbi d\u1ea1ng m\u1ed9t block of data. C\u00f2n c\u00e1c key \u0111\u01b0\u1ee3c k\u00e8m trong Content-Disposition header. => D\u00f9ng cho t\u1ea3i t\u1ec7p. text/plain : L\u00e0 m\u1ed9t ki\u1ec3u trong HTML 5, d\u1eef li\u1ec7u g\u1eedi l\u00ean m\u00e0 ko c\u00f3 m\u00e3 h\u00f3a. Syntax: POST /test Example: Form s\u1eed d\u1ee5ng application/x-www-form-urlencoded content type: POST /test HTTP/1.1 Host: foo.example Content-Type: application/x-www-form-urlencoded Content-Length: 27 field1=value1&field2=value2 Form s\u1eed d\u1ee5ng multipart/form-data content type: POST /test HTTP/1.1 Host: foo.example Content-Type: multipart/form-data;boundary=\"boundary\" --boundary Content-Disposition: form-data; name=\"field1\" value1 --boundary Content-Disposition: form-data; name=\"field2\"; filename=\"example.txt\" value2 --boundary-- 3. PUT T\u1ea1o m\u1edbi ho\u1eb7c thay th\u1ebf gi\u00e1 tr\u1ecb hi\u1ec7n t\u1ea1i c\u1ee7a t\u00e0i nguy\u00ean d\u1ef1a tr\u00ean c\u00e1c n\u1ed9i dung \u0111\u01b0\u1ee3c g\u1eedi. S\u1ef1 kh\u00e1c bi\u1ec7t gi\u1eefa PUT v\u00e0 POST : POST method \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 g\u1eedi c\u00e1c request k\u00e8m theo m\u1ed9t entity \u0111\u1ebfn server request t\u1ea1o m\u1ed9t t\u00e0i nguy\u00ean m\u1edbi d\u1ef1a tr\u00ean entity \u0111\u01b0\u1ee3c cung c\u1ea5p. PUT method th\u01b0\u1eddng k\u00e8m theo m\u1ed9t \u0111\u1ecbnh danh (th\u01b0\u1eddng l\u00e0 ID) c\u00f9ng v\u1edbi m\u1ed9t entity. N\u1ebfu m\u1ed9t t\u00e0i nguy\u00ean \u0111\u01b0\u1ee3c t\u00ecm th\u1ea5y b\u1edfi m\u00e3 \u0111\u1ecbnh danh k\u00e8m theo th\u00ec t\u00e0i nguy\u00ean n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c thay th\u1ebf b\u1edfi c\u00e1c gi\u00e1 tr\u1ecb trong entity k\u00e8m theo. Ng\u01b0\u1ee3c l\u1ea1i, PUT method s\u1ebd t\u1ea1o m\u1ed9t t\u00e0i nguy\u00ean d\u1ef1a tr\u00ean entity \u0111\u00e3 cung c\u1ea5p. N\u1ebfu g\u1ecdi PUT method nhi\u1ec1u l\u1ea7n th\u00ec s\u1ebd n\u00f3 t\u1ea1o ho\u1eb7c c\u1eadp nh\u1eadt c\u00f9ng m\u1ed9t t\u00e0i nguy\u00ean (d\u1ef1a v\u00e0o m\u00e3 \u0111\u1ecbnh danh). C\u00f2n v\u1edbi POST th\u00ec vi\u1ec7c ch\u00fang ta th\u1ef1c thi nhi\u1ec1u l\u1ea7n v\u1edbi c\u00f9ng m\u1ed9t enity th\u00ec n\u00f3 s\u1ebd t\u1ea1o ra nhi\u1ec1u t\u00e0i nguy\u00ean \u1edf ph\u00eda server c\u00f3 gi\u00e1 tr\u1ecb t\u01b0\u01a1ng t\u1ef1 nhau. Syntax: PUT /new.html HTTP/1.1 Example: G\u1eedi m\u1ed9t PUT method request: PUT /new.html HTTP/1.1 Host: example.com Content-type: text/html Content-length: 16 <p>New File</p> Response s\u1ebd c\u00f3 2TH: Target resource kh\u00f4ng c\u00f3 th\u00ec t\u1ea1o m\u1edbi: HTTP/1.1 201 Created Content-Location: /new.html target resource c\u00f3 th\u00ec c\u1eadp nh\u1eadt: HTTP/1.1 204 No Content Content-Location: /existing.html 4. PATCH - \u0110\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 th\u1ef1c hi\u1ec7n c\u00e1c c\u1eadp nh\u1eadt nh\u1ecf \u0111\u1ed1i v\u1edbi c\u00e1c t\u00e0i nguy\u00ean v\u00e0 n\u00f3 kh\u00f4ng b\u1eaft bu\u1ed9c ph\u1ea3i l\u00e0 t\u00e0i nguy\u00ean - So s\u00e1nh PATCH v\u1edbi PUT : + Khi s\u1eed d\u1ee5ng PUT \u0111\u1ec3 update, ta ph\u1ea3i g\u1eedi 1 record \u0111\u1ea7y \u0111\u1ee7 c\u00e1c field \u0111\u1ec3 request c\u1eadp nh\u1eadt. N\u1ebfu ch\u1ec9 g\u1eedi 1 s\u1ed1 field nh\u1ea5t \u0111\u1ecbnh th\u00ec nh\u1eefng field c\u00f2n l\u1ea1i s\u1ebd b\u1ecb null. + PATCH gi\u1ed1ng PUT v\u1ec1 \u00fd ngh\u0129a l\u00e0 \u0111\u1ec3 update resource nh\u01b0ng kh\u00e1c nhau v\u1ec1 c\u00e1ch l\u00e0m vi\u1ec7c, n\u00f3 ch\u1ec9 thay \u0111\u1ed5i nh\u1eefng field \u0111\u01b0\u1ee3c request thay v\u00ec thay \u0111\u1ed5i to\u00e0n b\u1ed9 record. Syntax: PATCH /file.txt HTTP/1.1 Example: G\u1eedi request: PATCH /file.txt HTTP/1.1 Host: www.example.com Content-Type: application/example If-Match: \"e0023aa4e\" Content-Length: 100 [description of changes] 5. DELETE - Lo\u1ea1i b\u1ecf t\u1ea5t c\u1ea3 c\u00e1c t\u00e0i nguy\u00ean \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh ( tr\u00ean URI). Syntax: DELETE /file.html HTTP/1.1 Example: G\u1eedi request: DELETE /file.html HTTP/1.1 Host: example.com N\u1ebfu DELETE \u0111\u01b0\u1ee3c \u00e1p d\u1ee5ng th\u00e0nh c\u00f4ng, c\u00f3 th\u1ec3 c\u00f3 m\u1ed9t s\u1ed1 response status codes sau: 202 ( Accepted ): Delete acctions c\u00f3 kh\u1ea3 n\u0103ng th\u00e0nh c\u00f4ng nh\u01b0ng ch\u01b0a \u0111\u01b0\u1ee3c th\u1ef1c thi. 204 ( No content ): Delete acctions \u0111\u00e3 \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n v\u00e0 kh\u00f4ng c\u00f3 th\u00eam th\u00f4ng tin n\u00e0o \u0111\u01b0\u1ee3c cung c\u1ea5p. 200 ( OK ): Delete acction \u0111\u00e3 \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n v\u00e0 th\u00f4ng b\u00e1o ph\u1ea3n h\u1ed3i th\u00e0nh c\u00f4ng. 6. HEAD Ph\u01b0\u01a1ng th\u1ee9c HTTP HEAD g\u1ea7n gi\u1ed1ng v\u1edbi GET , tuy nhi\u00ean n\u00f3 kh\u00f4ng c\u00f3 response body. Do kh\u00f4ng c\u00f3 response body n\u00ean th\u1eddi gian ph\u1ea3n h\u1ed3i nhanh h\u01a1n so v\u1edbi ph\u01b0\u01a1ng th\u1ee9c Get Syntax: HEAD /index.html Example: D\u00f9ng \u0111\u1ec3 ki\u1ec3m tra API c\u00f3 ho\u1ea1t \u0111\u1ed9ng kh\u00f4ng. S\u1eed d\u1ee5ng \u0111\u1ec3 ki\u1ebfm tra tr\u01b0\u1edbc khi download file do c\u1ee9 g\u1ecdi \u0111\u1ebfn api dowload s\u1ebd download file n\u00ean th\u00eam ph\u01b0\u01a1ng th\u1ee9c head v\u00e0o n\u00f3 ki\u1ec3m tra xem api c\u00f3 \u0111ang ho\u1ea1t \u0111\u1ed9ng t\u1ed1t kh\u00f4ng tr\u00e1nh down nhi\u1ec1u. 7. CONNECT - Ph\u01b0\u01a1ng th\u1ee9c HTTP CONNECT b\u1eaft \u0111\u1ea7u giao ti\u1ebfp hai chi\u1ec1u v\u1edbi t\u00e0i nguy\u00ean \u0111\u01b0\u1ee3c request. Th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 m\u1edf m\u1ed9t tunnel. Syntax: CONNECT www.example.com:443 HTTP/1.1 Example: Connect t\u1edbi proxy servers: CONNECT server.example.com:80 HTTP/1.1 Host: server.example.com:80 Proxy-Authorization: basic aGVsbG86d29ybGQ= 8. OPTIONS M\u00f4 t\u1ea3 c\u00e1c t\u00f9y ch\u1ecdn giao ti\u1ebfp cho resource. Syntax: OPTIONS /index.html HTTP/1.1 OPTIONS * HTTP/1.1 Example: curl -X OPTIONS https://example.org -i Sau \u0111\u00f3 response c\u00e1c ph\u01b0\u01a1ng th\u1ee9c c\u00f3 th\u1ec3 d\u00f9ng \u0111\u1ec3 giao ti\u1ebfp v\u1edbi resource: HTTP/1.1 204 No Content Allow: OPTIONS, GET, HEAD, POST Cache-Control: max-age=604800 Date: Thu, 13 Oct 2016 11:45:00 GMT Server: EOS (lax004/2813) 9. TRACE Th\u1ef1c hi\u1ec7n m\u1ed9t b\u00e0i test loop - back theo \u0111\u01b0\u1eddng d\u1eabn \u0111\u1ebfn resource. Syntax: TRACE /index.html Response headers and status 1. Concepts Sau khi nh\u1eadn v\u00e0 ph\u00e2n t\u00edch Request Header, Server s\u1ebd g\u1eedi Response Header v\u1edbi c\u00fa ph\u00e1p: <http-version> <status> <reason-pharse> <headers> <body> HTTP-version : phi\u00ean b\u1ea3n HTTP cao nh\u1ea5t m\u00e0 server h\u1ed7 tr\u1ee3. Status-Code : m\u00e3 c\u1ee7a k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 Reason-Phrase : m\u00f4 t\u1ea3 v\u1ec1 Status-Code. 2.HTTP response status codes HTTP response status codes cho bi\u1ebft tr\u1ea1ng th\u00e1i c\u1ee7a m\u1ed9t HTTP request c\u1ee5 th\u1ec3 \u0111\u00e3 \u0111\u01b0\u1ee3c ho\u00e0n t\u1ea5t th\u00e0nh c\u00f4ng hay ch\u01b0a. C\u00e1c c\u00e2u tr\u1ea3 l\u1eddi \u0111\u01b0\u1ee3c nh\u00f3m th\u00e0nh n\u0103m l\u1edbp: 1xx: Th\u00f4ng tin . M\u00e3 n\u00e0y ngh\u0129a l\u00e0 request \u0111\u00e3 \u0111\u01b0\u1ee3c nh\u1eadn v\u00e0 ti\u1ebfn tr\u00ecnh \u0111ang ti\u1ebfp t\u1ee5c. 2xx: Th\u00e0nh c\u00f4ng . M\u00e3 n\u00e0y ngh\u0129a l\u00e0 ho\u1ea1t \u0111\u1ed9ng \u0111\u00e3 \u0111\u01b0\u1ee3c nh\u1eadn, \u0111\u01b0\u1ee3c hi\u1ec3u, v\u00e0 \u0111\u01b0\u1ee3c ch\u1ea5p nh\u1eadn m\u1ed9t c\u00e1ch th\u00e0nh c\u00f4ng. 3xx: \u0110i\u1ec1u h\u01b0\u1edbng . M\u00e3 n\u00e0y ngh\u0129a l\u00e0 actions ti\u1ebfp theo ph\u1ea3i \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n \u0111\u1ec3 ho\u00e0n th\u00e0nh request. 4xx: L\u1ed7i Client . M\u00e3 n\u00e0y ngh\u0129a l\u00e0 request ch\u1ee9a c\u00fa ph\u00e1p kh\u00f4ng ch\u00ednh x\u00e1c ho\u1eb7c kh\u00f4ng \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n. 5xx: L\u1ed7i Server . M\u00e3 n\u00e0y ngh\u0129a l\u00e0 Server g\u1eb7p l\u1ed7i trong qu\u00e1 tr\u00ecnh th\u1ef1c hi\u1ec7n, x\u1eed l\u00fd m\u1ed9t request. 3.The mostly used status codes - 200 \u2013 OK : M\u1ecdi th\u1ee9 OK, ko c\u00f3 l\u1ed7i l\u1ea7m g\u00ec - 201 \u2013 CREATED : M\u1ed9t resource m\u1edbi \u0111\u00e3 \u0111\u01b0\u1ee3c t\u1ea1o th\u00e0nh c\u00f4ng - 204 \u2013 NO CONTENT : T\u00e0i nguy\u00ean \u0111\u00e3 \u0111\u01b0\u1ee3c x\u00f3a th\u00e0nh c\u00f4ng, kh\u00f4ng c\u00f3 response body. - 304 \u2013 NOT MODIFIED : D\u1eef li\u1ec7u \u0111\u00e3 l\u01b0u trong b\u1ed9 nh\u1edb \u0111\u1ec7m (d\u1eef li\u1ec7u kh\u00f4ng thay \u0111\u1ed5i). - 400 \u2013 BAD REQUEST : Request kh\u00f4ng h\u1ee3p l\u1ec7 ho\u1eb7c kh\u00f4ng th\u1ec3 \u0111\u01b0\u1ee3c ph\u1ee5c v\u1ee5. - 401 \u2013 UNATHORIZED : Request c\u1ea7n x\u00e1c th\u1ef1c ng\u01b0\u1eddi d\u00f9ng. - 403 \u2013 FORBIDDEN : M\u00e1y ch\u1ee7 \u0111\u00e3 hi\u1ec3u request nh\u01b0ng \u0111ang t\u1eeb ch\u1ed1i x\u1eed l\u00fd ho\u1eb7c kh\u00f4ng \u0111\u01b0\u1ee3c ph\u00e9p truy c\u1eadp. - 404 \u2013 NOT FOUND : Kh\u00f4ng t\u00ecm th\u1ea5y resource t\u1eeb URI. - 500 \u2013 INTERNAL SERVER ERROR : L\u1ed7i t\u1eeb ph\u00eda Server. CORS Cross-Origin Resource Sharing (CORS) l\u00e0 m\u1ed9t c\u01a1 ch\u1ebf d\u1ef1a tr\u00ean HTTP Header cho ph\u00e9p m\u00e1y ch\u1ee7 \u0111\u1ecbnh ngh\u0129a nhi\u1ec1u t\u00e0i nguy\u00ean kh\u00e1c nhau (fonts, Javascript, v.v\u2026) c\u1ee7a m\u1ed9t trang web c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c truy v\u1ea5n t\u1eeb domain kh\u00e1c v\u1edbi domain c\u1ee7a trang \u0111\u00f3. CORS \u0111\u01b0\u1ee3c sinh ra l\u00e0 v\u00ec same-origin policy, l\u00e0 m\u1ed9t ch\u00ednh s\u00e1ch li\u00ean quan \u0111\u1ebfn b\u1ea3o m\u1eadt \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t v\u00e0o to\u00e0n b\u1ed9 c\u00e1c tr\u00ecnh duy\u1ec7t hi\u1ec7n nay. Ch\u00ednh s\u00e1ch n\u00e0y ng\u0103n ch\u1eb7n vi\u1ec7c truy c\u1eadp t\u00e0i nguy\u00ean c\u1ee7a c\u00e1c domain kh\u00e1c m\u1ed9t c\u00e1ch v\u00f4 t\u1ed9i v\u1ea1. Khi \u0111\u00f3, CORS s\u1eed d\u1ee5ng c\u00e1c HTTP header \u0111\u1ec3 \u201cth\u00f4ng b\u00e1o\u201d cho tr\u00ecnh duy\u1ec7t r\u1eb1ng, m\u1ed9t \u1ee9ng d\u1ee5ng web ch\u1ea1y \u1edf origin n\u00e0y (th\u01b0\u1eddng l\u00e0 domain n\u00e0y) c\u00f3 th\u1ec3 truy c\u1eadp \u0111\u01b0\u1ee3c c\u00e1c t\u00e0i nguy\u00ean \u1edf origin kh\u00e1c (domain kh\u00e1c). CORS gi\u00fap th\u00fac \u0111\u1ea5y qu\u00e1 tr\u00ecnh trao \u0111\u1ed5i d\u1eef li\u1ec7u gi\u1eefa tr\u00ecnh duy\u1ec7t v\u00e0 m\u00e1y ch\u1ee7. CORS ho\u00e0n to\u00e0n kh\u00f4ng c\u00f3 li\u00ean quan g\u00ec \u0111\u1ebfn vi\u1ec7c trao \u0111\u1ed5i tr\u1ef1c ti\u1ebfp gi\u1eefa \u1ee9ng d\u1ee5ng web m\u00e0 m\u1ed9t m\u00e1y ch\u1ee7 web kh\u00e1c, v\u00ed d\u1ee5 backend c\u1ee7a \u1ee9ng d\u1ee5ng \u0111\u00f3 truy c\u1eadp \u0111\u1ebfn t\u00e0i nguy\u00ean tr\u00ean m\u1ed9t origin kh\u00e1c, n\u00f3 c\u0169ng kh\u00f4ng c\u1ea7n \u0111\u1ebfn CORS. 2. CORS in HTTP Headers Access-Control-Allow-Origin : Cho bi\u1ebft li\u1ec7u response c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c chia s\u1ebb hay kh\u00f4ng. Access-Control-Allow-Origin: * Access-Control-Allow-Origin: <origin> Access-Control-Allow-Origin: null Access-Control-Allow-Credentials : Cho bi\u1ebft li\u1ec7u response cho request c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c hi\u1ec3n th\u1ecb hay kh\u00f4ng khi credentials flag b\u1eb1ng true. Access-Control-Allow-Credentials: true 3. Access-Control-Allow-Methods : Ch\u1ec9 \u0111\u1ecbnh c\u00e1c ph\u01b0\u01a1ng th\u1ee9c \u0111\u01b0\u1ee3c ph\u00e9p khi truy c\u1eadp t\u00e0i nguy\u00ean \u0111\u1ec3 \u0111\u00e1p \u1ee9ng request. Access-Control-Allow-Methods: <method>, <method>, ... Access-Control-Allow-Methods: * 4. Access-Control-Expose-Headers : Li\u1ec7t k\u00ea t\u00ean c\u00e1c th\u00e0nh ph\u1ea7n c\u1ee7a header c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c hi\u1ec3n th\u1ecb nh\u01b0 m\u1ed9t ph\u1ea7n c\u1ee7a response. Access-Control-Expose-Headers: [<header-name>[, <header-name>]*] Access-Control-Expose-Headers: * 5. Origin : Cho bi\u1ebft n\u01a1i fetch origins (domain, hostname. schema, port). Origin: null Origin: <scheme>://<hostname> Origin: <scheme>://<hostname>:<port> 6. Timing-Allow-Origin : Ch\u1ec9 \u0111\u1ecbnh th\u1eddi gian cho ph\u00e9p truy c\u1eadp t\u1edbi origins Timing-Allow-Origin: * Timing-Allow-Origin: <origin>[, <origin>]* Authentication Giao th\u1ee9c HTTP cung c\u1ea5p m\u1ed9t khu\u00f4n kh\u1ed5 chung \u0111\u1ec3 ki\u1ec3m so\u00e1t v\u00e0 x\u00e1c th\u1ef1c quy\u1ec1n truy c\u1eadp t\u00e0i nguy\u00ean g\u1ecdi l\u00e0 HTTP Basic Authentication . Example: Cookie, Cache 1. Cookie \u0110\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 l\u01b0u nh\u1eefng th\u00f4ng tin t\u1ea1m th\u1eddi Cookie s\u1ebd \u0111\u01b0\u1ee3c truy\u1ec1n t\u1eeb server t\u1edbi browser v\u00e0 \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef t\u1ea1i \u0111\u00f3. M\u1ed7i khi ng\u01b0\u1eddi d\u00f9ng access \u1ee9ng d\u1ee5ng, browser s\u1ebd g\u1eedi request k\u00e8m theo cookie, gi\u00fap h\u1ea1n ch\u1ebf vi\u1ec7c server response v\u1ec1 nhi\u1ec1u l\u1ea7n c\u00f9ng 1 resource. T\u1ed3n t\u1ea1i c\u00f3 th\u1eddi h\u1ea1n. a. Creating cookies M\u1ed9t HTTP response header g\u1ed3m filed Set-Cookie s\u1ebd g\u1eedi cookie t\u1eeb server \u0111\u1ebfn client theo c\u00fa ph\u00e1p: Set-Cookie: <cookie-name>=<cookie-value> V\u00ed d\u1ee5: Server response v\u1ec1 browser k\u00e8m theo Set-Cookie : HTTP/2.0 200 OK Content-Type: text/html Set-Cookie: yummy_cookie=choco Set-Cookie: tasty_cookie=strawberry [page content] Sau \u0111\u00f3, v\u1edbi m\u1ed7i request ti\u1ebfp theo \u0111\u1ebfn server, browser s\u1ebd g\u1eedi t\u1ea5t c\u1ea3 c\u00e1c cookie \u0111\u00e3 l\u01b0u tr\u1eef tr\u01b0\u1edbc \u0111\u00f3 tr\u1edf l\u1ea1i server b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng title Cookie : GET /sample_page.html HTTP/2.0 Host: www.example.org Cookie: yummy_cookie=choco; tasty_cookie=strawberry b. Define the lifetime of a cookie Ta c\u00f3 th\u1ec3 set th\u1eddi gian t\u1ed3n t\u1ea1i c\u1ee7a cookie theo hai c\u00e1ch: Session cookies b\u1ecb x\u00f3a khi session gi\u1eefa client-server hi\u1ec7n t\u1ea1i k\u1ebft th\u00fac. Permanent cookies s\u1ebd b\u1ecb x\u00f3a v\u00e0o m\u1ed9t ng\u00e0y \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh b\u1edfi thu\u1ed9c t\u00ednh Expire s ho\u1eb7c sau m\u1ed9t kho\u1ea3ng th\u1eddi gian \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh b\u1edfi thu\u1ed9c t\u00ednh Max-Age . V\u00ed d\u1ee5: Set-Cookie: id=a3fWa; Expires=Thu, 31 Oct 2021 07:28:00 GMT; 2. Cache - Cache l\u00e0 b\u1ed9 nh\u1edb \u0111\u1ec7m, v\u00f9ng l\u01b0u tr\u1eef t\u1ea1m th\u1eddi trong m\u00e1y t\u00ednh. N\u00f3 kh\u00e1c v\u1edbi cookie \u1edf ch\u1ed7 th\u00f4ng tin l\u01b0u tr\u1eef \u1edf \u0111\u00e2y l\u00e0 c\u00e1c t\u00e0i li\u1ec7u web, c\u00e1c h\u00ecnh \u1ea3nh, c\u00e1c video, HTML, Cache bao g\u1ed3m b\u1ea3n sao c\u00e1c bit c\u1ee7a trang Web \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef tr\u00ean \u1ed5 \u0111\u0129a c\u1ee9ng. Browser s\u1ebd t\u1ea3i c\u00e1c bit khi user truy c\u1eadp m\u1ed9t trang Web n\u00e0o \u0111\u00f3, t\u1ed1c \u0111\u1ed9 truy c\u1eadp s\u1ebd nhanh h\u01a1n v\u00e0 ti\u1ebft ki\u1ec7m \u0111\u01b0\u1ee3c b\u0103ng th\u00f4ng khi download. B\u1ed9 nh\u1edb cache s\u1ebd \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef cho \u0111\u1ebfn khi user x\u00f3a n\u00f3 \u0111i. a. Types of caches - Private browser caches : D\u00e0nh ri\u00eang cho m\u1ed9t user. L\u01b0u gi\u1eef t\u1ea5t c\u1ea3 c\u00e1c t\u00e0i li\u1ec7u m\u00e0 ng\u01b0\u1eddi d\u00f9ng t\u1ea3i xu\u1ed1ng qua HTTP. Cache n\u00e0y \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 cung c\u1ea5p c\u00e1c t\u00e0i li\u1ec7u m\u00e0 ng\u01b0\u1eddi d\u00f9ng \u0111\u00e3 truy c\u1eadp \u0111\u1ec3 \u0111i\u1ec1u h\u01b0\u1edbng m\u00e0 kh\u00f4ng c\u1ea7n g\u1eedi request t\u1edbi server. - Shared proxy caches : L\u01b0u tr\u1eef c\u00e1c response \u0111\u1ec3 nhi\u1ec1u ng\u01b0\u1eddi d\u00f9ng s\u1eed d\u1ee5ng l\u1ea1i. V\u00ed d\u1ee5: Nh\u00e0 cung c\u1ea5p d\u1ecbch v\u1ee5 Internet (ISP) ho\u1eb7c c\u00f4ng ty c\u1ee7a b\u1ea1n c\u00f3 th\u1ec3 \u0111\u00e3 thi\u1ebft l\u1eadp proxy web nh\u01b0 m\u1ed9t ph\u1ea7n c\u1ee7a c\u01a1 s\u1edf h\u1ea1 t\u1ea7ng m\u1ea1ng c\u1ee5c b\u1ed9 \u0111\u1ec3 ph\u1ee5c v\u1ee5 nhi\u1ec1u ng\u01b0\u1eddi d\u00f9ng \u0111\u1ec3 c\u00e1c t\u00e0i nguy\u00ean ph\u1ed5 bi\u1ebfn \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng l\u1ea1i m\u1ed9t s\u1ed1 l\u1ea7n, gi\u1ea3m l\u01b0u l\u01b0\u1ee3ng m\u1ea1ng v\u00e0 \u0111\u1ed9 tr\u1ec5. b. Controlling caching HTTP Header c\u00f3 m\u1ed9t field l\u00e0 Cache-Control \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 ch\u1ec9 \u0111\u1ecbnh c\u01a1 ch\u1ebf b\u1ed9 nh\u1edb \u0111\u1ec7m trong c\u1ea3 request v\u00e0 response. No caching : Kh\u00f4ng l\u01b0u tr\u1eef b\u1ea5t k\u1ef3 th\u1ee9 g\u00ec v\u1ec1 request c\u1ee7a client ho\u1eb7c response c\u1ee7a server. Cache-Control: no-store - Cache but revalidate : Cache s\u1ebd g\u1eedi request \u0111\u1ebfn m\u00e1y ch\u1ee7 g\u1ed1c \u0111\u1ec3 x\u00e1c th\u1ef1c tr\u01b0\u1edbc khi \u0111\u01b0\u1ee3c l\u01b0u. Cache-Control: no-cache - Private and public caches : - Public caches: Response c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c l\u01b0u v\u00e0o b\u1ed9 \u0111\u1ec7m \u1ea9n b\u1edfi b\u1ea5t k\u1ef3 b\u1ed9 \u0111\u1ec7m n\u00e0o. - Private caches: ch\u1ec9 ra r\u1eb1ng response ch\u1ec9 d\u00e0nh cho m\u1ed9t ng\u01b0\u1eddi d\u00f9ng duy nh\u1ea5t v\u00e0 kh\u00f4ng \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef b\u1edfi b\u1ed9 nh\u1edb \u0111\u1ec7m d\u00f9ng chung. Cache-Control: private Cache-Control: public Expiration : Th\u1eddi h\u1ea1n t\u1ed3n t\u1ea1i c\u1ee7a cahe n\u1ebfu ch\u01b0a \u0111\u01b0\u1ee3c ng\u01b0\u1eddi d\u00f9ng x\u00f3a. Cache-Control: max-age=31536000 Validation : Cahe ph\u1ea3i x\u00e1c minh tr\u1ea1ng th\u00e1i c\u1ee7a t\u00e0i nguy\u00ean c\u0169 tr\u01b0\u1edbc khi s\u1eed d\u1ee5ng ch\u00fang. T\u00e0i nguy\u00ean \u0111\u00e3 h\u1ebft h\u1ea1n kh\u00f4ng n\u00ean \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng. Cache-Control: must-revalidate Reference HTTP Protocols HTTP Headers Message Headers Request Header Response Header HTTP Headers - MDN Web Docs CORS Authentication Cookies Caching","title":"HTTP Protocol"},{"location":"Web-Technologies/2.HTTP-Protocol/#http-protocol","text":"Request headers and methods Response headers and status CORS Authentication Cookie, Cache","title":"HTTP Protocol"},{"location":"Web-Technologies/2.HTTP-Protocol/#overview","text":"Hypertext Transfer Protocol (HTTP) l\u00e0 m\u1ed9t giao th\u1ee9c thu\u1ed9c t\u1ea7ng Application d\u00f9ng \u0111\u1ec3 truy\u1ec1n c\u00e1c hypermedia documents, ch\u1eb3ng h\u1ea1n nh\u01b0 HTML. HTTP tu\u00e2n theo m\u00f4 h\u00ecnh client-server, v\u1edbi client m\u1edf k\u1ebft n\u1ed1i \u0111\u1ec3 th\u1ef1c hi\u1ec7n request, sau \u0111\u00f3 \u0111\u1ee3i cho \u0111\u1ebfn khi nh\u1eadn \u0111\u01b0\u1ee3c respone t\u1eeb server. HTTP Headers : \u0110\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 m\u00f4 t\u1ea3 t\u00e0i nguy\u00ean ho\u1eb7c h\u00e0nh vi c\u1ee7a client/server. M\u1ed9t s\u1ed1 Header fields ph\u1ed5 bi\u1ebfn: Request headers: authority , method , path , scheme , accept , accept-encoding , accept-language , cookie , user-agent ... Response headers: access-control-allow-origin , content-length , content-type , date , server , set-cookie ... Header fields \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 trong IANA registry ho\u1eb7c HTTP Headers - MDN Web Docs","title":"Overview"},{"location":"Web-Technologies/2.HTTP-Protocol/#request-headers-and-methods","text":"","title":"Request headers and methods"},{"location":"Web-Technologies/2.HTTP-Protocol/#concepts","text":"Request headers l\u00e0 m\u1ed9t HTTP Headers, d\u00f9ng trong 1 HTTP Request \u0111\u1ec3 cung c\u1ea5p th\u00f4ng tin v\u1ec1 request context, \u0111\u1ec3 server ti\u1ebfp nh\u1eadn, x\u1eed l\u00fd v\u00e0 g\u1eedi c\u00e1c Response v\u1ec1 cho clinet. Kh\u00f4ng ph\u1ea3i t\u1ea5t c\u1ea3 c\u00e1c headers xu\u1ea5t hi\u1ec7n trong m\u1ed9t request \u0111\u1ec1u \u0111\u01b0\u1ee3c l\u00e0 Request headers. V\u00ed d\u1ee5: Content-Type header \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 representation header .","title":"Concepts"},{"location":"Web-Technologies/2.HTTP-Protocol/#example","text":"HTTP message d\u01b0\u1edbi \u0111\u00e2y minh h\u1ecda cho m\u1ed9t Request headers sau khi g\u1eedi m\u1ed9t GET mothod request: GET /home.html HTTP/1.1 Host: developer.mozilla.org User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:50.0) Gecko/20100101 Firefox/50.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate, br Referer: https://developer.mozilla.org/testpage.html Connection: keep-alive Upgrade-Insecure-Requests: 1 If-Modified-Since: Mon, 18 Jul 2016 02:36:04 GMT If-None-Match: \"c561c68d0ba92bbeb8b0fff2a9199f722e3a621a\" Cache-Control: max-age=0","title":"Example"},{"location":"Web-Technologies/2.HTTP-Protocol/#methods","text":"M\u1ed9t trong nh\u1eefng m\u1ee5c ti\u00eau ch\u00ednh c\u1ee7a ph\u01b0\u01a1ng ph\u00e1p RESTful API l\u00e0 s\u1eed d\u1ee5ng HTTP nh\u01b0 m\u1ed9t giao th\u1ee9c \u1ee9ng d\u1ee5ng \u0111\u1ec3 tr\u00e1nh \u0111\u1ecbnh h\u00ecnh m\u1ed9t API t\u1ef1 ch\u1ebf. Do \u0111\u00f3, ch\u00fang ta n\u00ean s\u1eed d\u1ee5ng c\u00e1c \u0111\u1ed9ng t\u1eeb HTTP m\u1ed9t c\u00e1ch c\u00f3 h\u1ec7 th\u1ed1ng \u0111\u1ec3 m\u00f4 t\u1ea3 nh\u1eefng h\u00e0nh \u0111\u1ed9ng n\u00e0o \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n tr\u00ean c\u00e1c t\u00e0i nguy\u00ean v\u00e0 thu\u1eadn l\u1ee3i cho vi\u1ec7c ph\u00e1t tri\u1ec3n khi x\u1eed l\u00fd c\u00e1c ho\u1ea1t \u0111\u1ed9ng CRUD l\u1eb7p l\u1ea1i. Demo 1. GET Ph\u01b0\u01a1ng th\u1ee9c GET \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 truy xu\u1ea5t th\u00f4ng tin t\u1eeb server th\u00f4ng qua m\u1ed9t URI nh\u1ea5t \u0111\u1ecbnh. C\u00e1c request s\u1eed d\u1ee5ng GET method ch\u1ec9 n\u00ean truy xu\u1ea5t d\u1eef li\u1ec7u v\u00e0 kh\u00f4ng c\u00f3 t\u00e1c d\u1ee5ng, \u1ea3nh h\u01b0\u1edfng n\u00e0o kh\u00e1c \u0111\u1ed1i v\u1edbi d\u1eef li\u1ec7u. Syntax: GET /index.html 2. POST - Ph\u01b0\u01a1ng th\u1ee9c POST \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 g\u1eedi d\u1eef li\u1ec7u \u0111\u1ebfn m\u00e1y ch\u1ee7, v\u00ed d\u1ee5: th\u00f4ng tin kh\u00e1ch h\u00e0ng, t\u1ea3i l\u00ean t\u1ec7p, v.v. b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng c\u00e1c HTML forms v\u00e0 d\u1eabn \u0111\u1ebfn thay \u0111\u1ed5i tr\u00ean server. Type of the body c\u1ee7a POST methods request \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 trong Content-Type header: application/x-www-form-urlencoded : c\u00e1c key v\u00e0 value trong key-value pair \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a, ph\u00e2n t\u00e1ch b\u1eb1ng & , v\u1edbi d\u1ea5u = gi\u1eefa key v\u00e0 value. Ngo\u00e0i ra k\u00fd t\u1ef1 kh\u00f4ng ph\u1ea3i ch\u1eef v\u00e0 s\u1ed1 \u0111\u1ec1u \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a theo % . multiart/form-data : m\u1ed7i values \u0111\u01b0\u1ee3c g\u1eedi d\u01b0\u1edbi d\u1ea1ng m\u1ed9t block of data. C\u00f2n c\u00e1c key \u0111\u01b0\u1ee3c k\u00e8m trong Content-Disposition header. => D\u00f9ng cho t\u1ea3i t\u1ec7p. text/plain : L\u00e0 m\u1ed9t ki\u1ec3u trong HTML 5, d\u1eef li\u1ec7u g\u1eedi l\u00ean m\u00e0 ko c\u00f3 m\u00e3 h\u00f3a. Syntax: POST /test Example: Form s\u1eed d\u1ee5ng application/x-www-form-urlencoded content type: POST /test HTTP/1.1 Host: foo.example Content-Type: application/x-www-form-urlencoded Content-Length: 27 field1=value1&field2=value2 Form s\u1eed d\u1ee5ng multipart/form-data content type: POST /test HTTP/1.1 Host: foo.example Content-Type: multipart/form-data;boundary=\"boundary\" --boundary Content-Disposition: form-data; name=\"field1\" value1 --boundary Content-Disposition: form-data; name=\"field2\"; filename=\"example.txt\" value2 --boundary-- 3. PUT T\u1ea1o m\u1edbi ho\u1eb7c thay th\u1ebf gi\u00e1 tr\u1ecb hi\u1ec7n t\u1ea1i c\u1ee7a t\u00e0i nguy\u00ean d\u1ef1a tr\u00ean c\u00e1c n\u1ed9i dung \u0111\u01b0\u1ee3c g\u1eedi. S\u1ef1 kh\u00e1c bi\u1ec7t gi\u1eefa PUT v\u00e0 POST : POST method \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 g\u1eedi c\u00e1c request k\u00e8m theo m\u1ed9t entity \u0111\u1ebfn server request t\u1ea1o m\u1ed9t t\u00e0i nguy\u00ean m\u1edbi d\u1ef1a tr\u00ean entity \u0111\u01b0\u1ee3c cung c\u1ea5p. PUT method th\u01b0\u1eddng k\u00e8m theo m\u1ed9t \u0111\u1ecbnh danh (th\u01b0\u1eddng l\u00e0 ID) c\u00f9ng v\u1edbi m\u1ed9t entity. N\u1ebfu m\u1ed9t t\u00e0i nguy\u00ean \u0111\u01b0\u1ee3c t\u00ecm th\u1ea5y b\u1edfi m\u00e3 \u0111\u1ecbnh danh k\u00e8m theo th\u00ec t\u00e0i nguy\u00ean n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c thay th\u1ebf b\u1edfi c\u00e1c gi\u00e1 tr\u1ecb trong entity k\u00e8m theo. Ng\u01b0\u1ee3c l\u1ea1i, PUT method s\u1ebd t\u1ea1o m\u1ed9t t\u00e0i nguy\u00ean d\u1ef1a tr\u00ean entity \u0111\u00e3 cung c\u1ea5p. N\u1ebfu g\u1ecdi PUT method nhi\u1ec1u l\u1ea7n th\u00ec s\u1ebd n\u00f3 t\u1ea1o ho\u1eb7c c\u1eadp nh\u1eadt c\u00f9ng m\u1ed9t t\u00e0i nguy\u00ean (d\u1ef1a v\u00e0o m\u00e3 \u0111\u1ecbnh danh). C\u00f2n v\u1edbi POST th\u00ec vi\u1ec7c ch\u00fang ta th\u1ef1c thi nhi\u1ec1u l\u1ea7n v\u1edbi c\u00f9ng m\u1ed9t enity th\u00ec n\u00f3 s\u1ebd t\u1ea1o ra nhi\u1ec1u t\u00e0i nguy\u00ean \u1edf ph\u00eda server c\u00f3 gi\u00e1 tr\u1ecb t\u01b0\u01a1ng t\u1ef1 nhau. Syntax: PUT /new.html HTTP/1.1 Example: G\u1eedi m\u1ed9t PUT method request: PUT /new.html HTTP/1.1 Host: example.com Content-type: text/html Content-length: 16 <p>New File</p> Response s\u1ebd c\u00f3 2TH: Target resource kh\u00f4ng c\u00f3 th\u00ec t\u1ea1o m\u1edbi: HTTP/1.1 201 Created Content-Location: /new.html target resource c\u00f3 th\u00ec c\u1eadp nh\u1eadt: HTTP/1.1 204 No Content Content-Location: /existing.html 4. PATCH - \u0110\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 th\u1ef1c hi\u1ec7n c\u00e1c c\u1eadp nh\u1eadt nh\u1ecf \u0111\u1ed1i v\u1edbi c\u00e1c t\u00e0i nguy\u00ean v\u00e0 n\u00f3 kh\u00f4ng b\u1eaft bu\u1ed9c ph\u1ea3i l\u00e0 t\u00e0i nguy\u00ean - So s\u00e1nh PATCH v\u1edbi PUT : + Khi s\u1eed d\u1ee5ng PUT \u0111\u1ec3 update, ta ph\u1ea3i g\u1eedi 1 record \u0111\u1ea7y \u0111\u1ee7 c\u00e1c field \u0111\u1ec3 request c\u1eadp nh\u1eadt. N\u1ebfu ch\u1ec9 g\u1eedi 1 s\u1ed1 field nh\u1ea5t \u0111\u1ecbnh th\u00ec nh\u1eefng field c\u00f2n l\u1ea1i s\u1ebd b\u1ecb null. + PATCH gi\u1ed1ng PUT v\u1ec1 \u00fd ngh\u0129a l\u00e0 \u0111\u1ec3 update resource nh\u01b0ng kh\u00e1c nhau v\u1ec1 c\u00e1ch l\u00e0m vi\u1ec7c, n\u00f3 ch\u1ec9 thay \u0111\u1ed5i nh\u1eefng field \u0111\u01b0\u1ee3c request thay v\u00ec thay \u0111\u1ed5i to\u00e0n b\u1ed9 record. Syntax: PATCH /file.txt HTTP/1.1 Example: G\u1eedi request: PATCH /file.txt HTTP/1.1 Host: www.example.com Content-Type: application/example If-Match: \"e0023aa4e\" Content-Length: 100 [description of changes] 5. DELETE - Lo\u1ea1i b\u1ecf t\u1ea5t c\u1ea3 c\u00e1c t\u00e0i nguy\u00ean \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh ( tr\u00ean URI). Syntax: DELETE /file.html HTTP/1.1 Example: G\u1eedi request: DELETE /file.html HTTP/1.1 Host: example.com N\u1ebfu DELETE \u0111\u01b0\u1ee3c \u00e1p d\u1ee5ng th\u00e0nh c\u00f4ng, c\u00f3 th\u1ec3 c\u00f3 m\u1ed9t s\u1ed1 response status codes sau: 202 ( Accepted ): Delete acctions c\u00f3 kh\u1ea3 n\u0103ng th\u00e0nh c\u00f4ng nh\u01b0ng ch\u01b0a \u0111\u01b0\u1ee3c th\u1ef1c thi. 204 ( No content ): Delete acctions \u0111\u00e3 \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n v\u00e0 kh\u00f4ng c\u00f3 th\u00eam th\u00f4ng tin n\u00e0o \u0111\u01b0\u1ee3c cung c\u1ea5p. 200 ( OK ): Delete acction \u0111\u00e3 \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n v\u00e0 th\u00f4ng b\u00e1o ph\u1ea3n h\u1ed3i th\u00e0nh c\u00f4ng. 6. HEAD Ph\u01b0\u01a1ng th\u1ee9c HTTP HEAD g\u1ea7n gi\u1ed1ng v\u1edbi GET , tuy nhi\u00ean n\u00f3 kh\u00f4ng c\u00f3 response body. Do kh\u00f4ng c\u00f3 response body n\u00ean th\u1eddi gian ph\u1ea3n h\u1ed3i nhanh h\u01a1n so v\u1edbi ph\u01b0\u01a1ng th\u1ee9c Get Syntax: HEAD /index.html Example: D\u00f9ng \u0111\u1ec3 ki\u1ec3m tra API c\u00f3 ho\u1ea1t \u0111\u1ed9ng kh\u00f4ng. S\u1eed d\u1ee5ng \u0111\u1ec3 ki\u1ebfm tra tr\u01b0\u1edbc khi download file do c\u1ee9 g\u1ecdi \u0111\u1ebfn api dowload s\u1ebd download file n\u00ean th\u00eam ph\u01b0\u01a1ng th\u1ee9c head v\u00e0o n\u00f3 ki\u1ec3m tra xem api c\u00f3 \u0111ang ho\u1ea1t \u0111\u1ed9ng t\u1ed1t kh\u00f4ng tr\u00e1nh down nhi\u1ec1u. 7. CONNECT - Ph\u01b0\u01a1ng th\u1ee9c HTTP CONNECT b\u1eaft \u0111\u1ea7u giao ti\u1ebfp hai chi\u1ec1u v\u1edbi t\u00e0i nguy\u00ean \u0111\u01b0\u1ee3c request. Th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 m\u1edf m\u1ed9t tunnel. Syntax: CONNECT www.example.com:443 HTTP/1.1 Example: Connect t\u1edbi proxy servers: CONNECT server.example.com:80 HTTP/1.1 Host: server.example.com:80 Proxy-Authorization: basic aGVsbG86d29ybGQ= 8. OPTIONS M\u00f4 t\u1ea3 c\u00e1c t\u00f9y ch\u1ecdn giao ti\u1ebfp cho resource. Syntax: OPTIONS /index.html HTTP/1.1 OPTIONS * HTTP/1.1 Example: curl -X OPTIONS https://example.org -i Sau \u0111\u00f3 response c\u00e1c ph\u01b0\u01a1ng th\u1ee9c c\u00f3 th\u1ec3 d\u00f9ng \u0111\u1ec3 giao ti\u1ebfp v\u1edbi resource: HTTP/1.1 204 No Content Allow: OPTIONS, GET, HEAD, POST Cache-Control: max-age=604800 Date: Thu, 13 Oct 2016 11:45:00 GMT Server: EOS (lax004/2813) 9. TRACE Th\u1ef1c hi\u1ec7n m\u1ed9t b\u00e0i test loop - back theo \u0111\u01b0\u1eddng d\u1eabn \u0111\u1ebfn resource. Syntax: TRACE /index.html","title":"Methods"},{"location":"Web-Technologies/2.HTTP-Protocol/#response-headers-and-status","text":"1. Concepts Sau khi nh\u1eadn v\u00e0 ph\u00e2n t\u00edch Request Header, Server s\u1ebd g\u1eedi Response Header v\u1edbi c\u00fa ph\u00e1p: <http-version> <status> <reason-pharse> <headers> <body> HTTP-version : phi\u00ean b\u1ea3n HTTP cao nh\u1ea5t m\u00e0 server h\u1ed7 tr\u1ee3. Status-Code : m\u00e3 c\u1ee7a k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 Reason-Phrase : m\u00f4 t\u1ea3 v\u1ec1 Status-Code. 2.HTTP response status codes HTTP response status codes cho bi\u1ebft tr\u1ea1ng th\u00e1i c\u1ee7a m\u1ed9t HTTP request c\u1ee5 th\u1ec3 \u0111\u00e3 \u0111\u01b0\u1ee3c ho\u00e0n t\u1ea5t th\u00e0nh c\u00f4ng hay ch\u01b0a. C\u00e1c c\u00e2u tr\u1ea3 l\u1eddi \u0111\u01b0\u1ee3c nh\u00f3m th\u00e0nh n\u0103m l\u1edbp: 1xx: Th\u00f4ng tin . M\u00e3 n\u00e0y ngh\u0129a l\u00e0 request \u0111\u00e3 \u0111\u01b0\u1ee3c nh\u1eadn v\u00e0 ti\u1ebfn tr\u00ecnh \u0111ang ti\u1ebfp t\u1ee5c. 2xx: Th\u00e0nh c\u00f4ng . M\u00e3 n\u00e0y ngh\u0129a l\u00e0 ho\u1ea1t \u0111\u1ed9ng \u0111\u00e3 \u0111\u01b0\u1ee3c nh\u1eadn, \u0111\u01b0\u1ee3c hi\u1ec3u, v\u00e0 \u0111\u01b0\u1ee3c ch\u1ea5p nh\u1eadn m\u1ed9t c\u00e1ch th\u00e0nh c\u00f4ng. 3xx: \u0110i\u1ec1u h\u01b0\u1edbng . M\u00e3 n\u00e0y ngh\u0129a l\u00e0 actions ti\u1ebfp theo ph\u1ea3i \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n \u0111\u1ec3 ho\u00e0n th\u00e0nh request. 4xx: L\u1ed7i Client . M\u00e3 n\u00e0y ngh\u0129a l\u00e0 request ch\u1ee9a c\u00fa ph\u00e1p kh\u00f4ng ch\u00ednh x\u00e1c ho\u1eb7c kh\u00f4ng \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n. 5xx: L\u1ed7i Server . M\u00e3 n\u00e0y ngh\u0129a l\u00e0 Server g\u1eb7p l\u1ed7i trong qu\u00e1 tr\u00ecnh th\u1ef1c hi\u1ec7n, x\u1eed l\u00fd m\u1ed9t request. 3.The mostly used status codes - 200 \u2013 OK : M\u1ecdi th\u1ee9 OK, ko c\u00f3 l\u1ed7i l\u1ea7m g\u00ec - 201 \u2013 CREATED : M\u1ed9t resource m\u1edbi \u0111\u00e3 \u0111\u01b0\u1ee3c t\u1ea1o th\u00e0nh c\u00f4ng - 204 \u2013 NO CONTENT : T\u00e0i nguy\u00ean \u0111\u00e3 \u0111\u01b0\u1ee3c x\u00f3a th\u00e0nh c\u00f4ng, kh\u00f4ng c\u00f3 response body. - 304 \u2013 NOT MODIFIED : D\u1eef li\u1ec7u \u0111\u00e3 l\u01b0u trong b\u1ed9 nh\u1edb \u0111\u1ec7m (d\u1eef li\u1ec7u kh\u00f4ng thay \u0111\u1ed5i). - 400 \u2013 BAD REQUEST : Request kh\u00f4ng h\u1ee3p l\u1ec7 ho\u1eb7c kh\u00f4ng th\u1ec3 \u0111\u01b0\u1ee3c ph\u1ee5c v\u1ee5. - 401 \u2013 UNATHORIZED : Request c\u1ea7n x\u00e1c th\u1ef1c ng\u01b0\u1eddi d\u00f9ng. - 403 \u2013 FORBIDDEN : M\u00e1y ch\u1ee7 \u0111\u00e3 hi\u1ec3u request nh\u01b0ng \u0111ang t\u1eeb ch\u1ed1i x\u1eed l\u00fd ho\u1eb7c kh\u00f4ng \u0111\u01b0\u1ee3c ph\u00e9p truy c\u1eadp. - 404 \u2013 NOT FOUND : Kh\u00f4ng t\u00ecm th\u1ea5y resource t\u1eeb URI. - 500 \u2013 INTERNAL SERVER ERROR : L\u1ed7i t\u1eeb ph\u00eda Server.","title":"Response headers and status"},{"location":"Web-Technologies/2.HTTP-Protocol/#cors","text":"Cross-Origin Resource Sharing (CORS) l\u00e0 m\u1ed9t c\u01a1 ch\u1ebf d\u1ef1a tr\u00ean HTTP Header cho ph\u00e9p m\u00e1y ch\u1ee7 \u0111\u1ecbnh ngh\u0129a nhi\u1ec1u t\u00e0i nguy\u00ean kh\u00e1c nhau (fonts, Javascript, v.v\u2026) c\u1ee7a m\u1ed9t trang web c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c truy v\u1ea5n t\u1eeb domain kh\u00e1c v\u1edbi domain c\u1ee7a trang \u0111\u00f3. CORS \u0111\u01b0\u1ee3c sinh ra l\u00e0 v\u00ec same-origin policy, l\u00e0 m\u1ed9t ch\u00ednh s\u00e1ch li\u00ean quan \u0111\u1ebfn b\u1ea3o m\u1eadt \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t v\u00e0o to\u00e0n b\u1ed9 c\u00e1c tr\u00ecnh duy\u1ec7t hi\u1ec7n nay. Ch\u00ednh s\u00e1ch n\u00e0y ng\u0103n ch\u1eb7n vi\u1ec7c truy c\u1eadp t\u00e0i nguy\u00ean c\u1ee7a c\u00e1c domain kh\u00e1c m\u1ed9t c\u00e1ch v\u00f4 t\u1ed9i v\u1ea1. Khi \u0111\u00f3, CORS s\u1eed d\u1ee5ng c\u00e1c HTTP header \u0111\u1ec3 \u201cth\u00f4ng b\u00e1o\u201d cho tr\u00ecnh duy\u1ec7t r\u1eb1ng, m\u1ed9t \u1ee9ng d\u1ee5ng web ch\u1ea1y \u1edf origin n\u00e0y (th\u01b0\u1eddng l\u00e0 domain n\u00e0y) c\u00f3 th\u1ec3 truy c\u1eadp \u0111\u01b0\u1ee3c c\u00e1c t\u00e0i nguy\u00ean \u1edf origin kh\u00e1c (domain kh\u00e1c). CORS gi\u00fap th\u00fac \u0111\u1ea5y qu\u00e1 tr\u00ecnh trao \u0111\u1ed5i d\u1eef li\u1ec7u gi\u1eefa tr\u00ecnh duy\u1ec7t v\u00e0 m\u00e1y ch\u1ee7. CORS ho\u00e0n to\u00e0n kh\u00f4ng c\u00f3 li\u00ean quan g\u00ec \u0111\u1ebfn vi\u1ec7c trao \u0111\u1ed5i tr\u1ef1c ti\u1ebfp gi\u1eefa \u1ee9ng d\u1ee5ng web m\u00e0 m\u1ed9t m\u00e1y ch\u1ee7 web kh\u00e1c, v\u00ed d\u1ee5 backend c\u1ee7a \u1ee9ng d\u1ee5ng \u0111\u00f3 truy c\u1eadp \u0111\u1ebfn t\u00e0i nguy\u00ean tr\u00ean m\u1ed9t origin kh\u00e1c, n\u00f3 c\u0169ng kh\u00f4ng c\u1ea7n \u0111\u1ebfn CORS. 2. CORS in HTTP Headers Access-Control-Allow-Origin : Cho bi\u1ebft li\u1ec7u response c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c chia s\u1ebb hay kh\u00f4ng. Access-Control-Allow-Origin: * Access-Control-Allow-Origin: <origin> Access-Control-Allow-Origin: null Access-Control-Allow-Credentials : Cho bi\u1ebft li\u1ec7u response cho request c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c hi\u1ec3n th\u1ecb hay kh\u00f4ng khi credentials flag b\u1eb1ng true. Access-Control-Allow-Credentials: true 3. Access-Control-Allow-Methods : Ch\u1ec9 \u0111\u1ecbnh c\u00e1c ph\u01b0\u01a1ng th\u1ee9c \u0111\u01b0\u1ee3c ph\u00e9p khi truy c\u1eadp t\u00e0i nguy\u00ean \u0111\u1ec3 \u0111\u00e1p \u1ee9ng request. Access-Control-Allow-Methods: <method>, <method>, ... Access-Control-Allow-Methods: * 4. Access-Control-Expose-Headers : Li\u1ec7t k\u00ea t\u00ean c\u00e1c th\u00e0nh ph\u1ea7n c\u1ee7a header c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c hi\u1ec3n th\u1ecb nh\u01b0 m\u1ed9t ph\u1ea7n c\u1ee7a response. Access-Control-Expose-Headers: [<header-name>[, <header-name>]*] Access-Control-Expose-Headers: * 5. Origin : Cho bi\u1ebft n\u01a1i fetch origins (domain, hostname. schema, port). Origin: null Origin: <scheme>://<hostname> Origin: <scheme>://<hostname>:<port> 6. Timing-Allow-Origin : Ch\u1ec9 \u0111\u1ecbnh th\u1eddi gian cho ph\u00e9p truy c\u1eadp t\u1edbi origins Timing-Allow-Origin: * Timing-Allow-Origin: <origin>[, <origin>]*","title":"CORS"},{"location":"Web-Technologies/2.HTTP-Protocol/#authentication","text":"Giao th\u1ee9c HTTP cung c\u1ea5p m\u1ed9t khu\u00f4n kh\u1ed5 chung \u0111\u1ec3 ki\u1ec3m so\u00e1t v\u00e0 x\u00e1c th\u1ef1c quy\u1ec1n truy c\u1eadp t\u00e0i nguy\u00ean g\u1ecdi l\u00e0 HTTP Basic Authentication . Example:","title":"Authentication"},{"location":"Web-Technologies/2.HTTP-Protocol/#cookie-cache","text":"1. Cookie \u0110\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 l\u01b0u nh\u1eefng th\u00f4ng tin t\u1ea1m th\u1eddi Cookie s\u1ebd \u0111\u01b0\u1ee3c truy\u1ec1n t\u1eeb server t\u1edbi browser v\u00e0 \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef t\u1ea1i \u0111\u00f3. M\u1ed7i khi ng\u01b0\u1eddi d\u00f9ng access \u1ee9ng d\u1ee5ng, browser s\u1ebd g\u1eedi request k\u00e8m theo cookie, gi\u00fap h\u1ea1n ch\u1ebf vi\u1ec7c server response v\u1ec1 nhi\u1ec1u l\u1ea7n c\u00f9ng 1 resource. T\u1ed3n t\u1ea1i c\u00f3 th\u1eddi h\u1ea1n. a. Creating cookies M\u1ed9t HTTP response header g\u1ed3m filed Set-Cookie s\u1ebd g\u1eedi cookie t\u1eeb server \u0111\u1ebfn client theo c\u00fa ph\u00e1p: Set-Cookie: <cookie-name>=<cookie-value> V\u00ed d\u1ee5: Server response v\u1ec1 browser k\u00e8m theo Set-Cookie : HTTP/2.0 200 OK Content-Type: text/html Set-Cookie: yummy_cookie=choco Set-Cookie: tasty_cookie=strawberry [page content] Sau \u0111\u00f3, v\u1edbi m\u1ed7i request ti\u1ebfp theo \u0111\u1ebfn server, browser s\u1ebd g\u1eedi t\u1ea5t c\u1ea3 c\u00e1c cookie \u0111\u00e3 l\u01b0u tr\u1eef tr\u01b0\u1edbc \u0111\u00f3 tr\u1edf l\u1ea1i server b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng title Cookie : GET /sample_page.html HTTP/2.0 Host: www.example.org Cookie: yummy_cookie=choco; tasty_cookie=strawberry b. Define the lifetime of a cookie Ta c\u00f3 th\u1ec3 set th\u1eddi gian t\u1ed3n t\u1ea1i c\u1ee7a cookie theo hai c\u00e1ch: Session cookies b\u1ecb x\u00f3a khi session gi\u1eefa client-server hi\u1ec7n t\u1ea1i k\u1ebft th\u00fac. Permanent cookies s\u1ebd b\u1ecb x\u00f3a v\u00e0o m\u1ed9t ng\u00e0y \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh b\u1edfi thu\u1ed9c t\u00ednh Expire s ho\u1eb7c sau m\u1ed9t kho\u1ea3ng th\u1eddi gian \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh b\u1edfi thu\u1ed9c t\u00ednh Max-Age . V\u00ed d\u1ee5: Set-Cookie: id=a3fWa; Expires=Thu, 31 Oct 2021 07:28:00 GMT; 2. Cache - Cache l\u00e0 b\u1ed9 nh\u1edb \u0111\u1ec7m, v\u00f9ng l\u01b0u tr\u1eef t\u1ea1m th\u1eddi trong m\u00e1y t\u00ednh. N\u00f3 kh\u00e1c v\u1edbi cookie \u1edf ch\u1ed7 th\u00f4ng tin l\u01b0u tr\u1eef \u1edf \u0111\u00e2y l\u00e0 c\u00e1c t\u00e0i li\u1ec7u web, c\u00e1c h\u00ecnh \u1ea3nh, c\u00e1c video, HTML, Cache bao g\u1ed3m b\u1ea3n sao c\u00e1c bit c\u1ee7a trang Web \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef tr\u00ean \u1ed5 \u0111\u0129a c\u1ee9ng. Browser s\u1ebd t\u1ea3i c\u00e1c bit khi user truy c\u1eadp m\u1ed9t trang Web n\u00e0o \u0111\u00f3, t\u1ed1c \u0111\u1ed9 truy c\u1eadp s\u1ebd nhanh h\u01a1n v\u00e0 ti\u1ebft ki\u1ec7m \u0111\u01b0\u1ee3c b\u0103ng th\u00f4ng khi download. B\u1ed9 nh\u1edb cache s\u1ebd \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef cho \u0111\u1ebfn khi user x\u00f3a n\u00f3 \u0111i. a. Types of caches - Private browser caches : D\u00e0nh ri\u00eang cho m\u1ed9t user. L\u01b0u gi\u1eef t\u1ea5t c\u1ea3 c\u00e1c t\u00e0i li\u1ec7u m\u00e0 ng\u01b0\u1eddi d\u00f9ng t\u1ea3i xu\u1ed1ng qua HTTP. Cache n\u00e0y \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 cung c\u1ea5p c\u00e1c t\u00e0i li\u1ec7u m\u00e0 ng\u01b0\u1eddi d\u00f9ng \u0111\u00e3 truy c\u1eadp \u0111\u1ec3 \u0111i\u1ec1u h\u01b0\u1edbng m\u00e0 kh\u00f4ng c\u1ea7n g\u1eedi request t\u1edbi server. - Shared proxy caches : L\u01b0u tr\u1eef c\u00e1c response \u0111\u1ec3 nhi\u1ec1u ng\u01b0\u1eddi d\u00f9ng s\u1eed d\u1ee5ng l\u1ea1i. V\u00ed d\u1ee5: Nh\u00e0 cung c\u1ea5p d\u1ecbch v\u1ee5 Internet (ISP) ho\u1eb7c c\u00f4ng ty c\u1ee7a b\u1ea1n c\u00f3 th\u1ec3 \u0111\u00e3 thi\u1ebft l\u1eadp proxy web nh\u01b0 m\u1ed9t ph\u1ea7n c\u1ee7a c\u01a1 s\u1edf h\u1ea1 t\u1ea7ng m\u1ea1ng c\u1ee5c b\u1ed9 \u0111\u1ec3 ph\u1ee5c v\u1ee5 nhi\u1ec1u ng\u01b0\u1eddi d\u00f9ng \u0111\u1ec3 c\u00e1c t\u00e0i nguy\u00ean ph\u1ed5 bi\u1ebfn \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng l\u1ea1i m\u1ed9t s\u1ed1 l\u1ea7n, gi\u1ea3m l\u01b0u l\u01b0\u1ee3ng m\u1ea1ng v\u00e0 \u0111\u1ed9 tr\u1ec5. b. Controlling caching HTTP Header c\u00f3 m\u1ed9t field l\u00e0 Cache-Control \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 ch\u1ec9 \u0111\u1ecbnh c\u01a1 ch\u1ebf b\u1ed9 nh\u1edb \u0111\u1ec7m trong c\u1ea3 request v\u00e0 response. No caching : Kh\u00f4ng l\u01b0u tr\u1eef b\u1ea5t k\u1ef3 th\u1ee9 g\u00ec v\u1ec1 request c\u1ee7a client ho\u1eb7c response c\u1ee7a server. Cache-Control: no-store - Cache but revalidate : Cache s\u1ebd g\u1eedi request \u0111\u1ebfn m\u00e1y ch\u1ee7 g\u1ed1c \u0111\u1ec3 x\u00e1c th\u1ef1c tr\u01b0\u1edbc khi \u0111\u01b0\u1ee3c l\u01b0u. Cache-Control: no-cache - Private and public caches : - Public caches: Response c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c l\u01b0u v\u00e0o b\u1ed9 \u0111\u1ec7m \u1ea9n b\u1edfi b\u1ea5t k\u1ef3 b\u1ed9 \u0111\u1ec7m n\u00e0o. - Private caches: ch\u1ec9 ra r\u1eb1ng response ch\u1ec9 d\u00e0nh cho m\u1ed9t ng\u01b0\u1eddi d\u00f9ng duy nh\u1ea5t v\u00e0 kh\u00f4ng \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef b\u1edfi b\u1ed9 nh\u1edb \u0111\u1ec7m d\u00f9ng chung. Cache-Control: private Cache-Control: public Expiration : Th\u1eddi h\u1ea1n t\u1ed3n t\u1ea1i c\u1ee7a cahe n\u1ebfu ch\u01b0a \u0111\u01b0\u1ee3c ng\u01b0\u1eddi d\u00f9ng x\u00f3a. Cache-Control: max-age=31536000 Validation : Cahe ph\u1ea3i x\u00e1c minh tr\u1ea1ng th\u00e1i c\u1ee7a t\u00e0i nguy\u00ean c\u0169 tr\u01b0\u1edbc khi s\u1eed d\u1ee5ng ch\u00fang. T\u00e0i nguy\u00ean \u0111\u00e3 h\u1ebft h\u1ea1n kh\u00f4ng n\u00ean \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng. Cache-Control: must-revalidate","title":"Cookie, Cache"},{"location":"Web-Technologies/2.HTTP-Protocol/#reference","text":"HTTP Protocols HTTP Headers Message Headers Request Header Response Header HTTP Headers - MDN Web Docs CORS Authentication Cookies Caching","title":"Reference"},{"location":"Web-Technologies/3.Web-server-and-proxy/","text":"Web server and proxy Nginx Reverse proxy / Forward Proxy PHP-FPM / Node Log Nginx 1. Concepts Tr\u00edch d\u1eabn \u0111\u1ecbnh ngh\u0129a v\u1ec1 NGINX tr\u00ean nginx.com NGINX is open source software for web serving, reverse proxying, caching, load balancing, media streaming, and more. It started out as a web server designed for maximum performance and stability. In addition to its HTTP server capabilities, NGINX can also function as a proxy server for email (IMAP, POP3, and SMTP) and a reverse proxy and load balancer for HTTP, TCP, and UDP servers. NGINX l\u00e0 m\u1ed9t web server m\u00e3 ngu\u1ed3n m\u1edf: Reverse proxying : Reverse proxy l\u00e0 m\u1ed9t lo\u1ea1i proxy server trung gian gi\u1eefa m\u1ed9t m\u00e1y ch\u1ee7 v\u00e0 c\u00e1c client g\u1eedi t\u1edbi c\u00e1c request. N\u00f3 ki\u1ec3m so\u00e1t request c\u1ee7a c\u00e1c client, n\u1ebfu h\u1ee3p l\u1ec7, s\u1ebd lu\u00e2n chuy\u1ec3n \u0111\u1ebfn c\u00e1c server t\u01b0\u01a1ng \u1ee9ng. Caching : Caching proxy l\u00e0 m\u1ed9t server l\u01b0u c\u00e1c files t\u0129nh \u0111\u1ec3 ph\u1ee5c v\u1ee5 cho vi\u1ec7c g\u1eedi tr\u1ea3 l\u1ea1i c\u00e1c response cho c\u00e1c request ph\u1ed5 bi\u1ebfn. N\u00f3 s\u1ebd ti\u1ebfp nh\u1eadn c\u00e1c request th\u00f4ng th\u01b0\u1eddng v\u00e0 nhanh ch\u00f3ng g\u1eedi response. Caching proxy s\u1ebd gi\u00fap m\u00e1y ch\u1ee7 ch\u00ednh c\u1ee7a b\u1ea1n kh\u00f4ng ph\u1ea3i x\u1eed l\u00fd c\u00e1c request n\u00e0y, do \u0111\u00f3 gi\u1ea3m g\u00e1nh n\u1eb7ng cho ph\u00eda server. Load balancing : Ph\u00e2n ph\u1ed1i l\u01b0u l\u01b0\u1ee3ng truy c\u1eadp c\u1ee7a nhi\u1ec1u users \u0111\u1ebfn m\u1ed9t nh\u00f3m backend servers, hay c\u00f2n \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 server farm ho\u1eb7c server pool. Media streaming : Streaming server l\u00e0 m\u00e1y ch\u1ee7 \u0111\u01b0\u1ee3c d\u00f9ng trong truy\u1ec1n ph\u00e1t Audio v\u00e0 Video. M\u1ed9t s\u1ed1 m\u00e1y ch\u1ee7 Streaming ch\u1ec9 c\u00f3 th\u1ec3 l\u00e0m vi\u1ec7c v\u1edbi c\u00e1c \u0111\u1ecbnh d\u1ea1ng c\u1ee5 th\u1ec3 v\u00e0 s\u1ed1 kh\u00e1c c\u00f3 kh\u1ea3 n\u0103ng x\u1eed l\u00fd nhi\u1ec1u ki\u1ec3u File kh\u00e1c nhau. and more... 2. Features Basic HTTP server features Serving cho c\u00e1c static files, t\u1ef1 \u0111\u1ed9ng l\u1eadp index T\u0103ng t\u1ed1c reverse proxy b\u1eb1ng b\u1ed9 nh\u1edb \u0111\u1ec7m (cache), c\u00e2n b\u1eb1ng t\u1ea3i \u0111\u01a1n gi\u1ea3n v\u00e0 kh\u1ea3 n\u0103ng ch\u1ecbu l\u1ed7i. H\u1ed7 tr\u1ee3 t\u0103ng t\u1ed1c v\u1edbi b\u1ed9 nh\u1edb \u0111\u1ec7m c\u1ee7a FastCGI, uwsgi, SCGI, v\u00e0 c\u00e1c m\u00e1y ch\u1ee7 memcached. Ki\u1ebfn tr\u00fac modular, t\u0103ng t\u1ed1c \u0111\u1ed9 n\u1ea1p trang b\u1eb1ng n\u00e9n gzip t\u1ef1 \u0111\u1ed9ng. H\u1ed7 tr\u1ee3 m\u00e3 ho\u00e1 SSL v\u00e0 TLS. C\u1ea5u h\u00ecnh linh ho\u1ea1t; l\u01b0u l\u1ea1i nh\u1eadt k\u00fd truy v\u1ea5n (logging) Gi\u1edbi h\u1ea1n s\u1ed1 k\u1ebft n\u1ed1i \u0111\u1ed3ng th\u1eddi ho\u1eb7c truy v\u1ea5n t\u1eeb 1 \u0111\u1ecba ch\u1ec9 Other HTTP server features M\u00e1y ch\u1ee7 \u1ea3o d\u1ef1a tr\u00ean t\u00ean v\u00e0 d\u1ef1a tr\u00ean IP Chuy\u1ec3n h\u01b0\u1edbng m\u00e3 l\u1ed7i 3XX-5XX Truy c\u1eadp t\u1edbi c\u00e1c \u0111\u1ecbnh d\u1ea1ng ghi log, buffered log , fast log v\u00e0 system log. Rewrite URL (URL rewriting) d\u00f9ng regular expressions H\u1ea1n ch\u1ebf t\u1ef7 l\u1ec7 \u0111\u00e1p \u1ee9ng truy v\u1ea5n Kh\u1ea3 n\u0103ng nh\u00fang m\u00e3 PERL H\u1ed7 tr\u1ee3 v\u00e0 t\u01b0\u01a1ng th\u00edch v\u1edbi IPv6 H\u1ed7 tr\u1ee3 WebSockets H\u1ed7 tr\u1ee3 truy\u1ec1n t\u1ea3i file FLV v\u00e0 MP4 Mail proxy server features Chuy\u1ec3n h\u01b0\u1edbng ng\u01b0\u1eddi d\u00f9ng \u0111\u1ebfn m\u00e1y ch\u1ee7 IMAP ho\u1eb7c POP3 b\u1eb1ng m\u00e1y ch\u1ee7 external HTTP authentication; X\u00e1c th\u1ef1c ng\u01b0\u1eddi d\u00f9ng b\u1eb1ng m\u00e1y ch\u1ee7 external HTTP authentication v\u00e0 chuy\u1ec3n h\u01b0\u1edbng k\u1ebft n\u1ed1i \u0111\u1ebfn m\u00e1y ch\u1ee7 SMTP n\u1ed9i b\u1ed9; H\u1ed7 tr\u1ee3 c\u00e1c ph\u01b0\u01a1ng ph\u00e1p x\u00e1c th\u1ef1c ng\u01b0\u1eddi d\u00f9ng: POP3: USER/PASS, APOP, AUTH LOGIN/PLAIN/CRAM-MD5; IMAP: LOGIN, AUTH LOGIN/PLAIN/CRAM-MD5; SMTP: AUTH LOGIN/PLAIN/CRAM-MD5; H\u1ed7 tr\u1ee3 SSL, STARTTLS v\u00e0 STLS TCP/UDP proxy server features D\u00f9ng chung Generic proxying cho c\u1ea3 TCP v\u00e0 UDP H\u1ed7 tr\u1ee3 SSL v\u00e0 TLS SNI cho TCP C\u00e2n b\u1eb1ng t\u1ea3i v\u00e0 kh\u1ea3 n\u0103ng ch\u1ecbu l\u1ed7i \u0110\u1ecbnh v\u1ecb \u0111\u1ecba l\u00fd d\u1ef1a tr\u00ean IP Ki\u1ec3m so\u00e1t truy c\u1eadp d\u1ef1a tr\u00ean client address; Th\u1ef1c thi c\u00e1c ch\u1ee9c n\u0103ng kh\u00e1c nhau t\u00f9y thu\u1ed9c v\u00e0o client address Gi\u1edbi h\u1ea1n s\u1ed1 l\u01b0\u1ee3ng k\u1ebft n\u1ed1i \u0111\u1ed3ng th\u1eddi \u0111\u1ebfn t\u1eeb m\u1ed9t \u0111\u1ecba ch\u1ec9 (client address) Truy c\u1eadp t\u1edbi c\u00e1c \u0111\u1ecbnh d\u1ea1ng ghi log, buffered log , fast log v\u00e0 system log. Reverse proxy / Forward Proxy 1. Reverse proxy a. Concepts Reverse Proxy \u0111\u00f3ng vai tr\u00f2 l\u00e0m c\u1ea7u n\u1ed1i gi\u1eefa client v\u00e0 server. N\u00f3 nh\u1eadn request c\u1ee7a client v\u00e0 chuy\u1ec3n l\u00ean server v\u00e0 nh\u1eadn response t\u1eeb server \u0111\u1ec3 chuy\u1ec3n t\u1edbi client, cho n\u00ean response t\u1eeb n\u00f3 gi\u1ed1ng nh\u01b0 l\u00e0 m\u1ed9t m\u00e1y ch\u1ee7. Client v\u00e0 server li\u00ean t\u1ee5c trao \u0111\u1ed5i th\u00f4ng tin. Th\u00f4ng th\u01b0\u1eddng, reverse proxies \u0111\u01b0\u1ee3c d\u00f9ng nh\u01b0 l\u00e0 m\u1ed9t web server. Reverse proxy hay gateway \u0111\u01b0\u1ee3c client coi nh\u01b0 l\u00e0 m\u1ed9t m\u00e1y ch\u1ee7 web, kh\u00f4ng c\u1ea7n c\u1ea5u h\u00ecnh g\u00ec \u0111\u1eb7c bi\u1ec7t. Client s\u1ebd g\u1eedi c\u00e1c l\u1ec7nh truy v\u1ea5n resource v\u00e0 reverse proxy s\u1ebd quy\u1ebft \u0111\u1ecbnh n\u01a1i chuy\u1ec3n th\u00f4ng tin \u0111\u1ebfn server v\u00e0 n\u01a1i response th\u00f4ng tin v\u1ec1 cho client. b. Fetures \u0110\u01a1n gi\u1ea3n \u0111\u1ec3 tri\u1ec3n khai, t\u1ea1o t\u00ednh b\u1ea3o m\u1eadt cao gi\u00fap ng\u0103n ch\u1eb7n t\u1ea5n c\u00f4ng web server nh\u01b0 DDoS v\u00e0 DoS Nginx Reverse proxy gi\u00fap t\u1ea1o c\u00e2n b\u1eb1ng t\u1ea3i gi\u1eefa nhi\u1ec1u server h\u1ea1 t\u1ea7ng v\u00e0 l\u00e0 gi\u1ea3i ph\u00e1p caching cho nh\u1eefng server ch\u1eadm. Nginx kh\u00f4ng \u0111\u00f2i h\u1ecfi thi\u1ebft l\u1eadp m\u1edbi cho t\u1eebng request t\u1eeb client. N\u00f3 m\u1eb7c \u0111\u1ecbnh d\u00f9ng m\u1ed9t process tr\u00ean m\u1ed7i CPU. Reverse proxy h\u1ed7 tr\u1ee3 nhi\u1ec1u giao th\u1ee9c \u0111a d\u1ea1ng: HTTP, HTTPS, TCP, UDP, SMTP, IMAP, v\u00e0 POP3 C\u00f3 th\u1ec3 x\u1eed l\u00fd h\u01a1n 10000 k\u1ebft n\u1ed1i nh\u01b0ng chi\u1ebfm \u00edt dung l\u01b0\u1ee3ng b\u1ed9 nh\u1edb. Gi\u00fap cho Nginx server c\u00f3 th\u1ec3 v\u1eadn h\u00e0nh nhi\u1ec1u web server kh\u00e1c nhau ch\u1ec9 t\u1eeb 1 IP v\u00e0 v\u1eabn c\u00f3 th\u1ec3 response \u0111\u00fang k\u1ebft qu\u1ea3 t\u1edbi \u0111\u00fang server trong m\u1ea1ng LAN. Reverse Proxy Nginx Server l\u00e0 m\u1ed9t trong c\u00e1c web server t\u1ed1t nh\u1ea5t c\u1ea3i thi\u1ec7n t\u1ed1c \u0111\u1ed9 load cho n\u1ed9i dung t\u0129nh. H\u01a1n n\u1eefa, n\u00f3 c\u0169ng h\u1eefu d\u1ee5ng khi \u0111\u00f3ng vai tr\u00f2 cache n\u1ed9i dung \u0111\u1ec3 th\u1ef1c hi\u1ec7n m\u00e3 h\u00f3a SSL \u0111\u1ec3 gi\u1ea3m t\u1ea3i cho web server ch\u00ednh N\u00f3 c\u0169ng h\u1eefu d\u1ee5ng \u0111\u1ec3 t\u1ed1i \u01b0u n\u1ed9i dung v\u00e0 n\u00e9n ch\u00fang \u0111\u1ec3 gi\u1ea3m th\u1eddi gian t\u1ea3i. 2. Forward proxy a. Concepts Forward Proxy l\u00e0 lo\u1ea1i proxy server \u0111\u01b0\u1ee3c d\u00f9ng ph\u00eda client (thay v\u00ec \u1edf server nh\u01b0 Reverse Proxy ), n\u00f3 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c \u0111\u1eb7t \u1edf trong m\u1ea1ng n\u1ed9i b\u1ed9 ho\u1eb7c tr\u00ean internet. Khi s\u1eed d\u1ee5ng forward proxy, c\u00e1c requests ph\u00eda client s\u1ebd t\u1edbi forward proxy server v\u00e0 forward proxy server n\u00e0y s\u1ebd chuy\u1ec3n ti\u1ebfp c\u00e1c requests n\u00e0y t\u1edbi Internet b. Fetures \u1ea8n \u0111\u1ecba ch\u1ec9 IP c\u1ee7a client khi truy c\u1eadp t\u1edbi c\u00e1c website tr\u00ean internet do ph\u00eda c\u00e1c website ch\u1ec9 c\u00f3 th\u1ec3 bi\u1ebft \u0111\u01b0\u1ee3c \u0111\u1ecba ch\u1ec9 c\u1ee7a forward proxy server. D\u00f9ng trong c\u00f4ng ty, t\u1ed5 ch\u1ee9c \u0111\u1ec3 ch\u1eb7n c\u00e1c website kh\u00f4ng mong mu\u1ed1n, qu\u1ea3n l\u00fd truy c\u1eadp v\u00e0 ch\u1eb7n c\u00e1c content \u0111\u1ed9c h\u1ea1i. C\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 Bypass firewall restriction \u0111\u1ec3 truy c\u1eadp c\u00e1c website b\u1ecb ch\u1eb7n b\u1edfi c\u00f4ng ty, ch\u00ednh ph\u1ee7, v. v... S\u1eed d\u1ee5ng l\u00e0m caching server \u0111\u1ec3 t\u0103ng t\u1ed1c \u0111\u1ed9. PHP-FPM / Node 1. PHP-FPM a. Concepts PHP-FPM vi\u1ebft t\u1eaft c\u1ee7a PHP - FastCGI Process Manager l\u00e0 ch\u01b0\u01a1ng tr\u00ecnh c\u00f3 ch\u1ee9c n\u0103ng phi\u00ean d\u1ecbch PHP khi ch\u1ea1y trang web cho web server. PHP-FPM \u0111\u01b0\u1ee3c h\u00ecnh th\u00e0nh d\u1ef1a tr\u00ean s\u1ef1 m\u1edf r\u1ed9ng c\u1ee7a CGI v\u00e0 c\u00f3 c\u1ed9ng \u0111\u1ed3ng s\u1eed d\u1ee5ng, support l\u1edbn. CGI - Common Gateway Interface l\u00e0 m\u1ed9t ph\u1ea7n m\u1ec1m l\u1eadp tr\u00ecnh c\u00f3 ch\u1ee9c n\u0103ng k\u1ebft n\u1ed1i gi\u1eefa m\u00e1y ch\u1ee7 v\u00e0 ch\u01b0\u01a1ng tr\u00ecnh, d\u1ef1a tr\u00ean c\u00e1c \u0111\u1ecbnh d\u1ea1ng \u0111\u1eb7c t\u1ea3 th\u00f4ng tin. CGI l\u00e0 m\u1ed9t ph\u1ea7n m\u1ec1m l\u1eadp tr\u00ecnh, c\u00f3 nhi\u1ec7m v\u1ee5 x\u00e2y d\u1ef1ng ch\u01b0\u01a1ng tr\u00ecnh t\u1eeb c\u00e1c trang web. Sau khi nh\u1eadn d\u1eef li\u1ec7u t\u1eeb c\u00e1c trang web d\u01b0\u1edbi \u0111\u1ecbnh d\u1ea1ng HTML, ph\u1ea7n m\u1ec1m n\u00e0y s\u1ebd truy\u1ec1n d\u1eef li\u1ec7u \u0111\u00f3 qua c\u1ed5ng th\u00f4ng tin Internet \u0111\u1ebfn m\u00e1y t\u00ednh c\u1ee7a ng\u01b0\u1eddi d\u00f9ng. FastCGI : l\u00e0 m\u1ed9t giao th\u1ee9c ph\u00e1t tri\u1ec3n m\u1edf r\u1ed9ng t\u1eeb CGI. M\u1ee5c \u0111\u00edch ch\u00ednh c\u1ee7a FastCGI l\u00e0 \u0111\u1ec3 web server t\u1ed1i \u01b0u trong vi\u1ec7c x\u1eed l\u00fd. \u0110\u1ed3ng th\u1eddi gi\u00fap m\u00e1y ch\u1ee7 c\u00f3 th\u1ec3 x\u1eed l\u00ed nhi\u1ec1u request t\u1eeb trang web trong c\u00f9ng m\u1ed9t l\u00fac. b. Features V\u1ec1 c\u01a1 b\u1ea3n, PHP-FPM c\u00f3 ch\u1ee9c n\u0103ng t\u1ed1i \u01b0u qu\u00e1 tr\u00ecnh x\u1eed l\u00fd th\u00f4ng tin c\u1ee7a c\u00e1c m\u00e1y ch\u1ee7 web, h\u1ed7 tr\u1ee3 vi\u1ec7c x\u1eed l\u00fd th\u00f4ng tin t\u1eeb nhi\u1ec1u trang web trong c\u00f9ng m\u1ed9t kho\u1ea3ng th\u1eddi gian m\u1ed9t c\u00e1ch nhanh nh\u1ea5t. V\u1edbi t\u1ed1c \u0111\u1ed9 x\u1eed l\u00fd PHP script nhanh c\u00f9ng t\u00ednh n\u0103ng t\u1ed1i \u01b0u ho\u00e1 cho nh\u1eefng trang web c\u00f3 k\u00edch th\u01b0\u1edbc l\u1edbn, gi\u00fap t\u0103ng l\u01b0\u1ee3ng truy c\u1eadp, PHP-FPM tr\u1edf n\u00ean ph\u1ed5 bi\u1ebfn v\u00e0 c\u00f3 c\u1ed9ng \u0111\u1ed3ng ng\u01b0\u1eddi d\u00f9ng l\u1edbn. Upside: T\u00ednh n\u0103ng v\u01b0\u1ee3t tr\u1ed9i nh\u1ea5t c\u1ee7a PHP-FPM l\u00e0 hi\u1ec7u su\u1ea5t cao, S\u1ef1 \u1ed5n \u0111\u1ecbnh v\u00e0 t\u00ednh b\u1ea3o m\u1eadt cao h\u01a1n nhi\u1ec1u so v\u1edbi CGI. Ph\u1ea7n m\u1ec1m n\u00e0y c\u00f3 th\u1ec3 ch\u1ea1y PHP Script d\u01b0\u1edbi quy\u1ec1n s\u1edf h\u1eefu PHP Scripts \u0111\u00f3. Khai th\u00e1c r\u1ea5t \u00edt t\u00e0i nguy\u00ean CPU khi ch\u1ea1y ch\u01b0\u01a1ng tr\u00ecnh \u2192 Gi\u00fap t\u1ed1c \u0111\u1ed9 t\u1ea3i trang nhanh h\u01a1n, vi\u1ec7c truy c\u1eadp c\u1ee7a ng\u01b0\u1eddi d\u00f9ng tr\u1edf n\u00ean d\u1ec5 d\u00e0ng \u2192 L\u01b0u l\u01b0\u1ee3ng truy c\u1eadp trang web s\u1ebd t\u0103ng cao h\u01a1n. Downside: Ti\u00eau t\u1ed1n dung l\u01b0\u1ee3ng RAM. 2. Node a. Concepts NodeJS l\u00e0 m\u1ed9t m\u00e3 ngu\u1ed3n m\u1edf, \u0111a n\u1ec1n t\u1ea3ng, ch\u1ea1y tr\u00ean m\u00f4i tr\u01b0\u1eddng JavaSript, \u0111\u01b0\u1ee3c x\u00e2y d\u1ef1ng tr\u00ean V8 JavaScript engine c\u1ee7a Chrome - V8 th\u1ef1c thi m\u00e3 JavaScript b\u00ean ngo\u00e0i tr\u00ecnh duy\u1ec7t. Asynchronous programming : V\u1ec1 b\u1ea3n ch\u1ea5t, n\u00f3 th\u1ef1c hi\u1ec7n c\u00e1c request \u0111\u1ed3ng th\u1eddi, ngay c\u1ea3 khi ch\u00fang \u1edf c\u00e1c ch\u1ee9c n\u0103ng kh\u00e1c nhau. M\u1ed9t single thread s\u1ebd \u0111\u01b0\u1ee3c handle multiple-requests trong event-loop . V\u00ec v\u1eady, vi\u1ec7c m\u1ed9t request b\u1ecb reject s\u1ebd kh\u00f4ng \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn request kh\u00e1c.NodeJS cho ph\u00e9p th\u1ef1c hi\u1ec7n l\u1eadp tr\u00ecnh b\u1ea5t \u0111\u1ed3ng b\u1ed9. Khi b\u1ea5t \u0111\u1ed3ng b\u1ed9 th\u1ef1c thi t\u1ea5t c\u1ea3 d\u00f2ng code c\u00f9ng m\u1ed9t l\u00fac. Synchronous programming : T\u1ea3i t\u00e0i nguy\u00ean m\u1ed9t c\u00e1ch \u0111\u01a1n l\u1ebb v\u00e0 tu\u1ea7n t\u1ef1, nh\u01b0 v\u1eady khi t\u00e0i nguy\u00ean trong h\u1ec7 th\u1ed1ng c\u00f3 ph\u00e2n c\u1ea5p kh\u00f4ng t\u1ea3i \u0111\u01b0\u1ee3c, th\u00ec nh\u1eefng t\u00e0i nguy\u00ean b\u00ean d\u01b0\u1edbi n\u00f3 s\u1ebd kh\u00f4ng t\u1ea3i \u0111\u01b0\u1ee3c lu\u00f4n. V\u1edbi NodeJS, \u1edf ch\u1ebf \u0111\u1ed9 \u0111\u1ed3ng b\u1ed9 th\u1ef1c thi t\u1eebng d\u00f2ng v\u00e0 ti\u1ebfn h\u00e0nh th\u1ef1c thi d\u00f2ng ti\u1ebfp theo khi d\u00f2ng hi\u1ec7n t\u1ea1i \u0111\u00e3 th\u1ef1c thi xong. NodeJS s\u1eed d\u1ee5ng I/O Model l\u1eadp tr\u00ecnh theo event, non-blocking \u2192 NodeJS kh\u00e1 g\u1ecdn nh\u1eb9 v\u00e0 hi\u1ec7u qu\u1ea3 \u2192 C\u00f4ng c\u1ee5 ho\u00e0n h\u1ea3o cho c\u00e1c \u1ee9ng d\u1ee5ng chuy\u00ean s\u00e2u v\u1ec1 d\u1eef li\u1ec7u realtime ch\u1ea1y tr\u00ean c\u00e1c Distributed control system. NodeJS l\u00e0 m\u00f4i tr\u01b0\u1eddng runtime m\u00e3 ngu\u1ed3n m\u1edf \u0111a n\u1ec1n t\u1ea3ng \u2192 S\u1eed d\u1ee5ng \u0111\u1ec3 ph\u00e1t tri\u1ec3n c\u00e1c \u1ee9ng d\u1ee5ng m\u1ea1ng v\u00e0 \u1ee9ng d\u1ee5ng server-side \u2192 c\u00f3 th\u1ec3 ch\u1ea1y tr\u00ean OS X, Microsoft Windows v\u00e0 Linux. b. Features Asynchronous and Event Driven : L\u1eadp tr\u00ecnh b\u1ea5t \u0111\u1ed3ng b\u1ed9 h\u01b0\u1edbng s\u1ef1 ki\u1ec7n. To\u00e0n b\u1ed9 API trong th\u01b0 vi\u1ec7n NodeJS \u0111\u1ec1u b\u1ea5t \u0111\u1ed3ng b\u1ed9, hay non-blocking. C\u00f3 ngh\u0129a l\u00e0 m\u1ed9t server s\u1eed d\u1ee5ng NodeJS s\u1ebd kh\u00f4ng ph\u1ea3i ch\u1edd m\u1ed9t API response v\u1ec1 data. Server c\u00f3 th\u1ec3 chuy\u1ec3n sang API kh\u00e1c sau khi g\u1ecdi API tr\u01b0\u1edbc \u0111\u00f3 v\u00e0 c\u01a1 ch\u1ebf th\u00f4ng b\u00e1o c\u1ee7a Events trong NodeJS gi\u00fap server nh\u1eadn \u0111\u01b0\u1ee3c response t\u1eeb l\u1ea7n g\u1ecdi API tr\u01b0\u1edbc. Very Fast : \u0110\u01b0\u1ee3c x\u00e2y d\u1ef1ng tr\u00ean C\u00f4ng c\u1ee5 JavaScript V8 c\u1ee7a Google Chrome, th\u01b0 vi\u1ec7n NodeJS c\u00f3 kh\u1ea3 n\u0103ng x\u1eed l\u00fd m\u00e3 v\u00f4 c\u00f9ng nhanh. Single Threaded but Highly Scalable : NodeJS s\u1eed d\u1ee5ng single threaded model v\u1edbi event looping. C\u01a1 ch\u1ebf event cho ph\u00e9p m\u00e1y ch\u1ee7 response non-blocking v\u00e0 c\u0169ng cho ph\u00e9p kh\u1ea3 n\u0103ng m\u1edf r\u1ed9ng cao h\u01a1n so v\u1edbi c\u00e1c server truy\u1ec1n th\u1ed1ng h\u1ed7 tr\u1ee3 gi\u1edbi h\u1ea1n c\u00e1c thread \u0111\u1ec3 x\u1eed l\u00fd c\u00e1c request. No Buffering : C\u00e1c \u1ee9ng d\u1ee5ng NodeJS kh\u00f4ng c\u00f3 v\u00f9ng nh\u1edb t\u1ea1m th\u1eddi (buffer) cho b\u1ea5t k\u1ef3 d\u1eef li\u1ec7u n\u00e0o. C\u00e1c \u1ee9ng d\u1ee5ng n\u00e0y ch\u1ec9 \u0111\u01a1n gi\u1ea3n xu\u1ea5t d\u1eef li\u1ec7u theo d\u1ea1ng block. License : NodeJS \u0111\u01b0\u1ee3c ph\u00e1t h\u00e0nh theo gi\u1ea5y ph\u00e9p MIT. Web Server Logs 1. Concepts Web Server Logs l\u00e0 c\u00e1c t\u1ec7p ghi l\u1ea1i nh\u1eadt k\u00fd c\u1ee7a m\u1ed9t web server, \u0111\u01b0\u1ee3c web server t\u1ef1 \u0111\u1ed9ng t\u1ea1o v\u00e0 \u0111\u1ecdc, ghi l\u1ea1i list of activities m\u00e0 web server \u0111\u00e3 th\u1ef1c hi\u1ec7n. W3C c\u00f4ng b\u1ed1 m\u1ed9t \u0111\u1ecbnh d\u1ea1ng chu\u1ea9n cho vi\u1ec7c ghi logs c\u1ee7a web server The Common Log Format v\u00e0 Extended Log File Format #Version: 1.0 #Date: 12-Jan-1996 00:00:00 #Fields: time cs-method cs-uri 00:34:23 GET /foo/bar.html 12:21:16 GET /foo/bar.html 12:45:52 GET /foo/bar.html 12:57:34 GET /foo/bar.html N\u1ed9i dung c\u1ee7a 1 file log th\u01b0\u1eddng g\u1ed3m index n\u1eb1m \u1edf cu\u1ed1i t\u1ec7p, th\u00f4ng tin v\u1ec1 request, bao g\u1ed3m \u0111\u1ecba ch\u1ec9 IP m\u00e1y client, ng\u00e0y/gi\u1edd c\u1ee7a request, URL c\u1ee7a trang \u0111\u01b0\u1ee3c request, HTTP code, bytes served, user agent v\u00e0 c\u00e1c referrer. Ngo\u00e0i ra, c\u00e1c d\u1eef li\u1ec7u n\u00e0y c\u00f3 th\u1ec3 t\u00e1ch th\u00e0nh c\u00e1c log ri\u00eang bi\u1ec7t nh\u01b0 AccessLog , ErorLog ho\u1eb7c ReferrerLog . User th\u00f4ng th\u01b0\u1eddng kh\u00f4ng th\u1ec3 truy c\u1eadp \u0111\u01b0\u1ee3c nh\u1eefng log files, ch\u1ec9 admin \u0111\u01b0\u1ee3c ph\u00e2n quy\u1ec1n m\u1edbi truy c\u1eadp \u0111\u01b0\u1ee3c. V\u00e0 th\u01b0\u1eddng admin s\u1ebd xem ph\u00e2n t\u00edch, th\u1ed1ng k\u00ea c\u1ee7a server log \u0111\u1ec3 ki\u1ec3m tra c\u00e1c l\u01b0u l\u01b0\u1ee3ng access theo th\u1eddi gian, xem c\u00e1c referrer ho\u1eb7c user agent, error. C\u00e1c ph\u00e2n t\u00edch n\u00e0y s\u1ebd h\u1ed7 tr\u1ee3 cho vi\u1ec7c qu\u1ea3n tr\u1ecb trang web hi\u1ec7u qu\u1ea3, t\u00e0i nguy\u00ean l\u01b0u tr\u1eef \u0111\u1ea7y \u0111\u1ee7 v\u00e0 \u0111i\u1ec1u ch\u1ec9nh c\u00e1c l\u1ed7i h\u1ec7 th\u1ed1ng. 2. Common values usually found in a Web Server Log Apache server log file: 192.168.198.92 - - [22/Dec/2002:23:08:37 -0400] \"GET / HTTP/1.1\" 200 6394 www.yahoo.com \"-\" \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1...)\" \"-\" 192.168.198.92 - - [22/Dec/2002:23:08:38 -0400] \"GET /images/logo.gif HTTP/1.1\" 200 807 www.yahoo.com \"http://www.some.com/\" \"Mozilla/4.0 (compatible; MSIE 6...)\" \"-\" 192.168.72.177 - - [22/Dec/2002:23:32:14 -0400] \"GET /news/sports.html HTTP/1.1\" 200 3500 www.yahoo.com \"http://www.some.com/\" \"Mozilla/4.0 (compatible; MSIE ...)\" \"-\" 192.168.72.177 - - [22/Dec/2002:23:32:14 -0400] \"GET /favicon.ico HTTP/1.1\" 404 1997 www.yahoo.com \"-\" \"Mozilla/5.0 (Windows; U; Windows NT 5.1; rv:1.7.3)...\" \"-\" 192.168.72.177 - - [22/Dec/2002:23:32:15 -0400] \"GET /style.css HTTP/1.1\" 200 4138 www.yahoo.com \"http://www.yahoo.com/index.html\" \"Mozilla/5.0 (Windows...\" \"-\" 192.168.72.177 - - [22/Dec/2002:23:32:16 -0400] \"GET /js/ads.js HTTP/1.1\" 200 10229 www.yahoo.com \"http://www.search.com/index.html\" \"Mozilla/5.0 (Windows...\" \"-\" 192.168.72.177 - - [22/Dec/2002:23:32:19 -0400] \"GET /search.php HTTP/1.1\" 400 1997 www.yahoo.com \"-\" \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; ...)\" \"-\" IIS (Internet Information Service) server log file: 02:49:12 127.0.0.1 GET / 200 02:49:35 127.0.0.1 GET /index.html 200 03:01:06 127.0.0.1 GET /images/sponsered.gif 304 03:52:36 127.0.0.1 GET /search.php 200 04:17:03 127.0.0.1 GET /admin/style.css 200 05:04:54 127.0.0.1 GET /favicon.ico 404 05:38:07 127.0.0.1 GET /js/ads.js 200 T\u1eeb nh\u1eefng log files n\u00e0y, c\u00f3 th\u1ec3 th\u1ed1ng k\u00ea \u0111\u01b0\u1ee3c c\u00e1c values: S\u1ed1 l\u01b0\u1ee3t truy c\u1eadp v\u00e0 s\u1ed1 l\u01b0\u1ee3ng client truy c\u1eadp Th\u1eddi l\u01b0\u1ee3ng truy c\u1eadp v\u00e0 l\u01b0\u1ee3t truy c\u1eadp cu\u1ed1i c\u00f9ng User \u0111\u01b0\u1ee3c x\u00e1c th\u1ef1c v\u00e0 l\u01b0\u1ee3t truy c\u1eadp \u0111\u01b0\u1ee3c x\u00e1c th\u1ef1c g\u1ea7n \u0111\u00e2y nh\u1ea5t Domains/countries - IP Address c\u1ee7a client Danh s\u00e1ch c\u00e1c host S\u1ed1 l\u01b0\u1ee3t page views C\u00e1c page \u0111\u01b0\u1ee3c access nhi\u1ec1u v\u00e0 \u00edt nh\u1ea5t C\u00e1c lo\u1ea1i t\u1eadp tin H\u1ec7 \u0111i\u1ec1u h\u00e0nh \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng c\u1ee7a c\u00e1c user C\u00e1c tr\u00ecnh duy\u1ec7t \u0111\u00e3 s\u1eed d\u1ee5ng Search engines: key phrases v\u00e0 keywords \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng nhi\u1ec1u Xem c\u00e1c HTTP status code, c\u1ee5 th\u1ec3 l\u00e0 HTTP errors code 3. Types of Web Server log files Source 4. NGINX Access Logs and Error Logs a. Logs in NGINX Theo m\u1eb7c \u0111\u1ecbnh, NGINX ghi c\u00e1c events c\u1ee7a n\u00f3 trong hai lo\u1ea1i logs l\u00e0 Access Logs v\u00e0 Error Logs . Trong h\u1ea7u h\u1ebft c\u00e1c distro c\u1ee7a Linux ph\u1ed5 bi\u1ebfn nh\u01b0 Ubuntu, CentOS ho\u1eb7c Debian, c\u1ea3 b\u1ea3n ghi Access Logs v\u00e0 Error Logs \u0111\u1ec1u c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c t\u00ecm th\u1ea5y trong /var/log/nginx . b. NGINX Access log NGINX ghi l\u1ea1i c\u00e1c activities c\u1ee7a t\u1ea5t c\u1ea3 nh\u1eefng user truy c\u1eadp v\u00e0o trang web trong Access Logs . T\u1eeb file Access Logs n\u00e0y, ta c\u00f3 th\u1ec3 t\u00ecm th\u1ea5y t\u1ec7p n\u00e0o \u0111\u01b0\u1ee3c truy c\u1eadp , c\u00e1ch NGINX ph\u1ea3n h\u1ed3i request , browser c\u1ee7a client \u0111ang s\u1eed d\u1ee5ng, \u0111\u1ecba ch\u1ec9 IP c\u1ee7a \u1ee9ng d\u1ee5ng kh\u00e1ch v\u00e0 h\u01a1n th\u1ebf n\u1eefa. C\u00f3 th\u1ec3 s\u1eed d\u1ee5ng th\u00f4ng tin t\u1eeb Access Logs \u0111\u1ec3 ph\u00e2n t\u00edch l\u01b0u l\u01b0\u1ee3ng truy c\u1eadp, c\u00f3 th\u1ec3 ph\u00e1t hi\u1ec7n ra c\u00e1c tr\u01b0\u1eddng h\u1ee3p ng\u01b0\u1eddi d\u00f9ng g\u1eedi m\u1ed9t s\u1ed1 request b\u1ea5t th\u01b0\u1eddng, t\u1eeb \u0111\u00f3 ng\u0103n ch\u1eb7n s\u1edbm c\u00e1c h\u00e0nh vi t\u1ea5n c\u00f4ng m\u1ea1ng. Enable NGINX access log trong http context: http { ... ... access_log /var/log/nginx/access.log ; server { listen 80 ; server_name domain1.com access_log /var/log/nginx/domain1.access.log ; ... ... } } # tail -f /var/log/nginx/domain1.access.log 47.29.201.179 - - [28/Feb/2019:13:17:10 +0000] \"GET /?p=1 HTTP/2.0\" 200 5316 \"https://domain1.com/?p=1\" \"Mozilla/5.0 (Windows NT 6 .1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36\" \"2.75\" c. NGINX Error log M\u1eb7t kh\u00e1c, n\u1ebfu NGINX g\u1eb7p b\u1ea5t k\u1ef3 tr\u1ee5c tr\u1eb7c n\u00e0o th\u00ec n\u00f3 s\u1ebd ghi l\u1ea1i event \u0111\u00f3 v\u00e0o Error Logs . N\u1ebfu c\u00f3 m\u1ed9t s\u1ed1 l\u1ed7i trong t\u1ec7p configuration d\u1eabn t\u1edbi NGINX kh\u00f4ng th\u1ec3 kh\u1edfi \u0111\u1ed9ng ho\u1eb7c stopped running th\u00ec ta n\u00ean check Error Logs \u0111\u1ec3 t\u00ecm nguy\u00ean nh\u00e2n v\u00e0 x\u1eed l\u00fd n\u00f3. Ngo\u00e0i ra ta c\u0169ng c\u00f3 th\u1ec3 t\u00ecm th\u1ea5y m\u1ed9t v\u00e0i warning trong nh\u1eadt Error Logs t\u1eeb \u0111\u00f3 tr\u00e1nh \u0111\u01b0\u1ee3c c\u00e1c s\u1ef1 c\u1ed1 c\u00f3 th\u1ec3 x\u1ea3y ra. Enable NGINX error log trong http context: http { ... ... error_log /var/log/nginx/error_log ; server { listen 80 ; server_name domain1.com ; error_log /var/log/nginx/domain1.error_log warn ; ... } server { listen 80 ; server_name domain2.com ; error_log /var/log/nginx/domain2.error_log debug ; ... } } C\u00e1c m\u1ee9c \u0111\u1ed9 nghi\u00eam tr\u1ecdng c\u1ee7a Nginx Error Log: emerg : Th\u00f4ng b\u00e1o kh\u1ea9n c\u1ea5p khi h\u1ec7 th\u1ed1ng c\u00f3 th\u1ec3 kh\u00f4ng \u1ed5n \u0111\u1ecbnh. alert : Alert messages v\u1ec1 c\u00e1c v\u1ea5n \u0111\u1ec1 nghi\u00eam tr\u1ecdng. crit : Critical issues quan tr\u1ecdng c\u1ea7n \u0111\u01b0\u1ee3c quan t\u00e2m ngay l\u1eadp t\u1ee9c. error : \u0110\u00e3 x\u1ea3y ra l\u1ed7i, x\u1ea3y ra s\u1ef1 c\u1ed1 khi x\u1eed l\u00fd m\u1ed9t request. warn : Warning messages m\u00e0 ta n\u00ean xem x\u00e9t. notice : Notice \u0111\u01a1n gi\u1ea3n, c\u00f3 th\u1ec3 ignore. info : Ch\u1ec9 l\u00e0 1 information messages m\u00e0 ta c\u00f3 th\u1ec3 mu\u1ed1n bi\u1ebft. debug : Th\u00f4ng tin v\u1ec1 Debugging \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh v\u1ecb tr\u00ed c\u1ee7a error. Reference NGINX/About What Is a Reverse Proxy Server? Reverse Proxy vs Forward Proxy FastCGI Process Manager (FPM) Synchronous vs. Asynchronous Programming Nodejs Features Server log Web Server logs Types of Web Server log files","title":"Web server and proxy"},{"location":"Web-Technologies/3.Web-server-and-proxy/#web-server-and-proxy","text":"Nginx Reverse proxy / Forward Proxy PHP-FPM / Node Log","title":"Web server and proxy"},{"location":"Web-Technologies/3.Web-server-and-proxy/#nginx","text":"","title":"Nginx"},{"location":"Web-Technologies/3.Web-server-and-proxy/#1-concepts","text":"Tr\u00edch d\u1eabn \u0111\u1ecbnh ngh\u0129a v\u1ec1 NGINX tr\u00ean nginx.com NGINX is open source software for web serving, reverse proxying, caching, load balancing, media streaming, and more. It started out as a web server designed for maximum performance and stability. In addition to its HTTP server capabilities, NGINX can also function as a proxy server for email (IMAP, POP3, and SMTP) and a reverse proxy and load balancer for HTTP, TCP, and UDP servers. NGINX l\u00e0 m\u1ed9t web server m\u00e3 ngu\u1ed3n m\u1edf: Reverse proxying : Reverse proxy l\u00e0 m\u1ed9t lo\u1ea1i proxy server trung gian gi\u1eefa m\u1ed9t m\u00e1y ch\u1ee7 v\u00e0 c\u00e1c client g\u1eedi t\u1edbi c\u00e1c request. N\u00f3 ki\u1ec3m so\u00e1t request c\u1ee7a c\u00e1c client, n\u1ebfu h\u1ee3p l\u1ec7, s\u1ebd lu\u00e2n chuy\u1ec3n \u0111\u1ebfn c\u00e1c server t\u01b0\u01a1ng \u1ee9ng. Caching : Caching proxy l\u00e0 m\u1ed9t server l\u01b0u c\u00e1c files t\u0129nh \u0111\u1ec3 ph\u1ee5c v\u1ee5 cho vi\u1ec7c g\u1eedi tr\u1ea3 l\u1ea1i c\u00e1c response cho c\u00e1c request ph\u1ed5 bi\u1ebfn. N\u00f3 s\u1ebd ti\u1ebfp nh\u1eadn c\u00e1c request th\u00f4ng th\u01b0\u1eddng v\u00e0 nhanh ch\u00f3ng g\u1eedi response. Caching proxy s\u1ebd gi\u00fap m\u00e1y ch\u1ee7 ch\u00ednh c\u1ee7a b\u1ea1n kh\u00f4ng ph\u1ea3i x\u1eed l\u00fd c\u00e1c request n\u00e0y, do \u0111\u00f3 gi\u1ea3m g\u00e1nh n\u1eb7ng cho ph\u00eda server. Load balancing : Ph\u00e2n ph\u1ed1i l\u01b0u l\u01b0\u1ee3ng truy c\u1eadp c\u1ee7a nhi\u1ec1u users \u0111\u1ebfn m\u1ed9t nh\u00f3m backend servers, hay c\u00f2n \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 server farm ho\u1eb7c server pool. Media streaming : Streaming server l\u00e0 m\u00e1y ch\u1ee7 \u0111\u01b0\u1ee3c d\u00f9ng trong truy\u1ec1n ph\u00e1t Audio v\u00e0 Video. M\u1ed9t s\u1ed1 m\u00e1y ch\u1ee7 Streaming ch\u1ec9 c\u00f3 th\u1ec3 l\u00e0m vi\u1ec7c v\u1edbi c\u00e1c \u0111\u1ecbnh d\u1ea1ng c\u1ee5 th\u1ec3 v\u00e0 s\u1ed1 kh\u00e1c c\u00f3 kh\u1ea3 n\u0103ng x\u1eed l\u00fd nhi\u1ec1u ki\u1ec3u File kh\u00e1c nhau. and more...","title":"1. Concepts"},{"location":"Web-Technologies/3.Web-server-and-proxy/#2-features","text":"Basic HTTP server features Serving cho c\u00e1c static files, t\u1ef1 \u0111\u1ed9ng l\u1eadp index T\u0103ng t\u1ed1c reverse proxy b\u1eb1ng b\u1ed9 nh\u1edb \u0111\u1ec7m (cache), c\u00e2n b\u1eb1ng t\u1ea3i \u0111\u01a1n gi\u1ea3n v\u00e0 kh\u1ea3 n\u0103ng ch\u1ecbu l\u1ed7i. H\u1ed7 tr\u1ee3 t\u0103ng t\u1ed1c v\u1edbi b\u1ed9 nh\u1edb \u0111\u1ec7m c\u1ee7a FastCGI, uwsgi, SCGI, v\u00e0 c\u00e1c m\u00e1y ch\u1ee7 memcached. Ki\u1ebfn tr\u00fac modular, t\u0103ng t\u1ed1c \u0111\u1ed9 n\u1ea1p trang b\u1eb1ng n\u00e9n gzip t\u1ef1 \u0111\u1ed9ng. H\u1ed7 tr\u1ee3 m\u00e3 ho\u00e1 SSL v\u00e0 TLS. C\u1ea5u h\u00ecnh linh ho\u1ea1t; l\u01b0u l\u1ea1i nh\u1eadt k\u00fd truy v\u1ea5n (logging) Gi\u1edbi h\u1ea1n s\u1ed1 k\u1ebft n\u1ed1i \u0111\u1ed3ng th\u1eddi ho\u1eb7c truy v\u1ea5n t\u1eeb 1 \u0111\u1ecba ch\u1ec9 Other HTTP server features M\u00e1y ch\u1ee7 \u1ea3o d\u1ef1a tr\u00ean t\u00ean v\u00e0 d\u1ef1a tr\u00ean IP Chuy\u1ec3n h\u01b0\u1edbng m\u00e3 l\u1ed7i 3XX-5XX Truy c\u1eadp t\u1edbi c\u00e1c \u0111\u1ecbnh d\u1ea1ng ghi log, buffered log , fast log v\u00e0 system log. Rewrite URL (URL rewriting) d\u00f9ng regular expressions H\u1ea1n ch\u1ebf t\u1ef7 l\u1ec7 \u0111\u00e1p \u1ee9ng truy v\u1ea5n Kh\u1ea3 n\u0103ng nh\u00fang m\u00e3 PERL H\u1ed7 tr\u1ee3 v\u00e0 t\u01b0\u01a1ng th\u00edch v\u1edbi IPv6 H\u1ed7 tr\u1ee3 WebSockets H\u1ed7 tr\u1ee3 truy\u1ec1n t\u1ea3i file FLV v\u00e0 MP4 Mail proxy server features Chuy\u1ec3n h\u01b0\u1edbng ng\u01b0\u1eddi d\u00f9ng \u0111\u1ebfn m\u00e1y ch\u1ee7 IMAP ho\u1eb7c POP3 b\u1eb1ng m\u00e1y ch\u1ee7 external HTTP authentication; X\u00e1c th\u1ef1c ng\u01b0\u1eddi d\u00f9ng b\u1eb1ng m\u00e1y ch\u1ee7 external HTTP authentication v\u00e0 chuy\u1ec3n h\u01b0\u1edbng k\u1ebft n\u1ed1i \u0111\u1ebfn m\u00e1y ch\u1ee7 SMTP n\u1ed9i b\u1ed9; H\u1ed7 tr\u1ee3 c\u00e1c ph\u01b0\u01a1ng ph\u00e1p x\u00e1c th\u1ef1c ng\u01b0\u1eddi d\u00f9ng: POP3: USER/PASS, APOP, AUTH LOGIN/PLAIN/CRAM-MD5; IMAP: LOGIN, AUTH LOGIN/PLAIN/CRAM-MD5; SMTP: AUTH LOGIN/PLAIN/CRAM-MD5; H\u1ed7 tr\u1ee3 SSL, STARTTLS v\u00e0 STLS TCP/UDP proxy server features D\u00f9ng chung Generic proxying cho c\u1ea3 TCP v\u00e0 UDP H\u1ed7 tr\u1ee3 SSL v\u00e0 TLS SNI cho TCP C\u00e2n b\u1eb1ng t\u1ea3i v\u00e0 kh\u1ea3 n\u0103ng ch\u1ecbu l\u1ed7i \u0110\u1ecbnh v\u1ecb \u0111\u1ecba l\u00fd d\u1ef1a tr\u00ean IP Ki\u1ec3m so\u00e1t truy c\u1eadp d\u1ef1a tr\u00ean client address; Th\u1ef1c thi c\u00e1c ch\u1ee9c n\u0103ng kh\u00e1c nhau t\u00f9y thu\u1ed9c v\u00e0o client address Gi\u1edbi h\u1ea1n s\u1ed1 l\u01b0\u1ee3ng k\u1ebft n\u1ed1i \u0111\u1ed3ng th\u1eddi \u0111\u1ebfn t\u1eeb m\u1ed9t \u0111\u1ecba ch\u1ec9 (client address) Truy c\u1eadp t\u1edbi c\u00e1c \u0111\u1ecbnh d\u1ea1ng ghi log, buffered log , fast log v\u00e0 system log.","title":"2. Features"},{"location":"Web-Technologies/3.Web-server-and-proxy/#reverse-proxy-forward-proxy","text":"","title":"Reverse proxy / Forward Proxy"},{"location":"Web-Technologies/3.Web-server-and-proxy/#1-reverse-proxy","text":"","title":"1. Reverse proxy"},{"location":"Web-Technologies/3.Web-server-and-proxy/#a-concepts","text":"Reverse Proxy \u0111\u00f3ng vai tr\u00f2 l\u00e0m c\u1ea7u n\u1ed1i gi\u1eefa client v\u00e0 server. N\u00f3 nh\u1eadn request c\u1ee7a client v\u00e0 chuy\u1ec3n l\u00ean server v\u00e0 nh\u1eadn response t\u1eeb server \u0111\u1ec3 chuy\u1ec3n t\u1edbi client, cho n\u00ean response t\u1eeb n\u00f3 gi\u1ed1ng nh\u01b0 l\u00e0 m\u1ed9t m\u00e1y ch\u1ee7. Client v\u00e0 server li\u00ean t\u1ee5c trao \u0111\u1ed5i th\u00f4ng tin. Th\u00f4ng th\u01b0\u1eddng, reverse proxies \u0111\u01b0\u1ee3c d\u00f9ng nh\u01b0 l\u00e0 m\u1ed9t web server. Reverse proxy hay gateway \u0111\u01b0\u1ee3c client coi nh\u01b0 l\u00e0 m\u1ed9t m\u00e1y ch\u1ee7 web, kh\u00f4ng c\u1ea7n c\u1ea5u h\u00ecnh g\u00ec \u0111\u1eb7c bi\u1ec7t. Client s\u1ebd g\u1eedi c\u00e1c l\u1ec7nh truy v\u1ea5n resource v\u00e0 reverse proxy s\u1ebd quy\u1ebft \u0111\u1ecbnh n\u01a1i chuy\u1ec3n th\u00f4ng tin \u0111\u1ebfn server v\u00e0 n\u01a1i response th\u00f4ng tin v\u1ec1 cho client.","title":"a. Concepts"},{"location":"Web-Technologies/3.Web-server-and-proxy/#b-fetures","text":"\u0110\u01a1n gi\u1ea3n \u0111\u1ec3 tri\u1ec3n khai, t\u1ea1o t\u00ednh b\u1ea3o m\u1eadt cao gi\u00fap ng\u0103n ch\u1eb7n t\u1ea5n c\u00f4ng web server nh\u01b0 DDoS v\u00e0 DoS Nginx Reverse proxy gi\u00fap t\u1ea1o c\u00e2n b\u1eb1ng t\u1ea3i gi\u1eefa nhi\u1ec1u server h\u1ea1 t\u1ea7ng v\u00e0 l\u00e0 gi\u1ea3i ph\u00e1p caching cho nh\u1eefng server ch\u1eadm. Nginx kh\u00f4ng \u0111\u00f2i h\u1ecfi thi\u1ebft l\u1eadp m\u1edbi cho t\u1eebng request t\u1eeb client. N\u00f3 m\u1eb7c \u0111\u1ecbnh d\u00f9ng m\u1ed9t process tr\u00ean m\u1ed7i CPU. Reverse proxy h\u1ed7 tr\u1ee3 nhi\u1ec1u giao th\u1ee9c \u0111a d\u1ea1ng: HTTP, HTTPS, TCP, UDP, SMTP, IMAP, v\u00e0 POP3 C\u00f3 th\u1ec3 x\u1eed l\u00fd h\u01a1n 10000 k\u1ebft n\u1ed1i nh\u01b0ng chi\u1ebfm \u00edt dung l\u01b0\u1ee3ng b\u1ed9 nh\u1edb. Gi\u00fap cho Nginx server c\u00f3 th\u1ec3 v\u1eadn h\u00e0nh nhi\u1ec1u web server kh\u00e1c nhau ch\u1ec9 t\u1eeb 1 IP v\u00e0 v\u1eabn c\u00f3 th\u1ec3 response \u0111\u00fang k\u1ebft qu\u1ea3 t\u1edbi \u0111\u00fang server trong m\u1ea1ng LAN. Reverse Proxy Nginx Server l\u00e0 m\u1ed9t trong c\u00e1c web server t\u1ed1t nh\u1ea5t c\u1ea3i thi\u1ec7n t\u1ed1c \u0111\u1ed9 load cho n\u1ed9i dung t\u0129nh. H\u01a1n n\u1eefa, n\u00f3 c\u0169ng h\u1eefu d\u1ee5ng khi \u0111\u00f3ng vai tr\u00f2 cache n\u1ed9i dung \u0111\u1ec3 th\u1ef1c hi\u1ec7n m\u00e3 h\u00f3a SSL \u0111\u1ec3 gi\u1ea3m t\u1ea3i cho web server ch\u00ednh N\u00f3 c\u0169ng h\u1eefu d\u1ee5ng \u0111\u1ec3 t\u1ed1i \u01b0u n\u1ed9i dung v\u00e0 n\u00e9n ch\u00fang \u0111\u1ec3 gi\u1ea3m th\u1eddi gian t\u1ea3i.","title":"b. Fetures"},{"location":"Web-Technologies/3.Web-server-and-proxy/#2-forward-proxy","text":"","title":"2. Forward proxy"},{"location":"Web-Technologies/3.Web-server-and-proxy/#a-concepts_1","text":"Forward Proxy l\u00e0 lo\u1ea1i proxy server \u0111\u01b0\u1ee3c d\u00f9ng ph\u00eda client (thay v\u00ec \u1edf server nh\u01b0 Reverse Proxy ), n\u00f3 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c \u0111\u1eb7t \u1edf trong m\u1ea1ng n\u1ed9i b\u1ed9 ho\u1eb7c tr\u00ean internet. Khi s\u1eed d\u1ee5ng forward proxy, c\u00e1c requests ph\u00eda client s\u1ebd t\u1edbi forward proxy server v\u00e0 forward proxy server n\u00e0y s\u1ebd chuy\u1ec3n ti\u1ebfp c\u00e1c requests n\u00e0y t\u1edbi Internet","title":"a. Concepts"},{"location":"Web-Technologies/3.Web-server-and-proxy/#b-fetures_1","text":"\u1ea8n \u0111\u1ecba ch\u1ec9 IP c\u1ee7a client khi truy c\u1eadp t\u1edbi c\u00e1c website tr\u00ean internet do ph\u00eda c\u00e1c website ch\u1ec9 c\u00f3 th\u1ec3 bi\u1ebft \u0111\u01b0\u1ee3c \u0111\u1ecba ch\u1ec9 c\u1ee7a forward proxy server. D\u00f9ng trong c\u00f4ng ty, t\u1ed5 ch\u1ee9c \u0111\u1ec3 ch\u1eb7n c\u00e1c website kh\u00f4ng mong mu\u1ed1n, qu\u1ea3n l\u00fd truy c\u1eadp v\u00e0 ch\u1eb7n c\u00e1c content \u0111\u1ed9c h\u1ea1i. C\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 Bypass firewall restriction \u0111\u1ec3 truy c\u1eadp c\u00e1c website b\u1ecb ch\u1eb7n b\u1edfi c\u00f4ng ty, ch\u00ednh ph\u1ee7, v. v... S\u1eed d\u1ee5ng l\u00e0m caching server \u0111\u1ec3 t\u0103ng t\u1ed1c \u0111\u1ed9.","title":"b. Fetures"},{"location":"Web-Technologies/3.Web-server-and-proxy/#php-fpm-node","text":"","title":"PHP-FPM / Node"},{"location":"Web-Technologies/3.Web-server-and-proxy/#1-php-fpm","text":"","title":"1. PHP-FPM"},{"location":"Web-Technologies/3.Web-server-and-proxy/#a-concepts_2","text":"PHP-FPM vi\u1ebft t\u1eaft c\u1ee7a PHP - FastCGI Process Manager l\u00e0 ch\u01b0\u01a1ng tr\u00ecnh c\u00f3 ch\u1ee9c n\u0103ng phi\u00ean d\u1ecbch PHP khi ch\u1ea1y trang web cho web server. PHP-FPM \u0111\u01b0\u1ee3c h\u00ecnh th\u00e0nh d\u1ef1a tr\u00ean s\u1ef1 m\u1edf r\u1ed9ng c\u1ee7a CGI v\u00e0 c\u00f3 c\u1ed9ng \u0111\u1ed3ng s\u1eed d\u1ee5ng, support l\u1edbn. CGI - Common Gateway Interface l\u00e0 m\u1ed9t ph\u1ea7n m\u1ec1m l\u1eadp tr\u00ecnh c\u00f3 ch\u1ee9c n\u0103ng k\u1ebft n\u1ed1i gi\u1eefa m\u00e1y ch\u1ee7 v\u00e0 ch\u01b0\u01a1ng tr\u00ecnh, d\u1ef1a tr\u00ean c\u00e1c \u0111\u1ecbnh d\u1ea1ng \u0111\u1eb7c t\u1ea3 th\u00f4ng tin. CGI l\u00e0 m\u1ed9t ph\u1ea7n m\u1ec1m l\u1eadp tr\u00ecnh, c\u00f3 nhi\u1ec7m v\u1ee5 x\u00e2y d\u1ef1ng ch\u01b0\u01a1ng tr\u00ecnh t\u1eeb c\u00e1c trang web. Sau khi nh\u1eadn d\u1eef li\u1ec7u t\u1eeb c\u00e1c trang web d\u01b0\u1edbi \u0111\u1ecbnh d\u1ea1ng HTML, ph\u1ea7n m\u1ec1m n\u00e0y s\u1ebd truy\u1ec1n d\u1eef li\u1ec7u \u0111\u00f3 qua c\u1ed5ng th\u00f4ng tin Internet \u0111\u1ebfn m\u00e1y t\u00ednh c\u1ee7a ng\u01b0\u1eddi d\u00f9ng. FastCGI : l\u00e0 m\u1ed9t giao th\u1ee9c ph\u00e1t tri\u1ec3n m\u1edf r\u1ed9ng t\u1eeb CGI. M\u1ee5c \u0111\u00edch ch\u00ednh c\u1ee7a FastCGI l\u00e0 \u0111\u1ec3 web server t\u1ed1i \u01b0u trong vi\u1ec7c x\u1eed l\u00fd. \u0110\u1ed3ng th\u1eddi gi\u00fap m\u00e1y ch\u1ee7 c\u00f3 th\u1ec3 x\u1eed l\u00ed nhi\u1ec1u request t\u1eeb trang web trong c\u00f9ng m\u1ed9t l\u00fac.","title":"a. Concepts"},{"location":"Web-Technologies/3.Web-server-and-proxy/#b-features","text":"V\u1ec1 c\u01a1 b\u1ea3n, PHP-FPM c\u00f3 ch\u1ee9c n\u0103ng t\u1ed1i \u01b0u qu\u00e1 tr\u00ecnh x\u1eed l\u00fd th\u00f4ng tin c\u1ee7a c\u00e1c m\u00e1y ch\u1ee7 web, h\u1ed7 tr\u1ee3 vi\u1ec7c x\u1eed l\u00fd th\u00f4ng tin t\u1eeb nhi\u1ec1u trang web trong c\u00f9ng m\u1ed9t kho\u1ea3ng th\u1eddi gian m\u1ed9t c\u00e1ch nhanh nh\u1ea5t. V\u1edbi t\u1ed1c \u0111\u1ed9 x\u1eed l\u00fd PHP script nhanh c\u00f9ng t\u00ednh n\u0103ng t\u1ed1i \u01b0u ho\u00e1 cho nh\u1eefng trang web c\u00f3 k\u00edch th\u01b0\u1edbc l\u1edbn, gi\u00fap t\u0103ng l\u01b0\u1ee3ng truy c\u1eadp, PHP-FPM tr\u1edf n\u00ean ph\u1ed5 bi\u1ebfn v\u00e0 c\u00f3 c\u1ed9ng \u0111\u1ed3ng ng\u01b0\u1eddi d\u00f9ng l\u1edbn. Upside: T\u00ednh n\u0103ng v\u01b0\u1ee3t tr\u1ed9i nh\u1ea5t c\u1ee7a PHP-FPM l\u00e0 hi\u1ec7u su\u1ea5t cao, S\u1ef1 \u1ed5n \u0111\u1ecbnh v\u00e0 t\u00ednh b\u1ea3o m\u1eadt cao h\u01a1n nhi\u1ec1u so v\u1edbi CGI. Ph\u1ea7n m\u1ec1m n\u00e0y c\u00f3 th\u1ec3 ch\u1ea1y PHP Script d\u01b0\u1edbi quy\u1ec1n s\u1edf h\u1eefu PHP Scripts \u0111\u00f3. Khai th\u00e1c r\u1ea5t \u00edt t\u00e0i nguy\u00ean CPU khi ch\u1ea1y ch\u01b0\u01a1ng tr\u00ecnh \u2192 Gi\u00fap t\u1ed1c \u0111\u1ed9 t\u1ea3i trang nhanh h\u01a1n, vi\u1ec7c truy c\u1eadp c\u1ee7a ng\u01b0\u1eddi d\u00f9ng tr\u1edf n\u00ean d\u1ec5 d\u00e0ng \u2192 L\u01b0u l\u01b0\u1ee3ng truy c\u1eadp trang web s\u1ebd t\u0103ng cao h\u01a1n. Downside: Ti\u00eau t\u1ed1n dung l\u01b0\u1ee3ng RAM.","title":"b. Features"},{"location":"Web-Technologies/3.Web-server-and-proxy/#2-node","text":"","title":"2. Node"},{"location":"Web-Technologies/3.Web-server-and-proxy/#a-concepts_3","text":"NodeJS l\u00e0 m\u1ed9t m\u00e3 ngu\u1ed3n m\u1edf, \u0111a n\u1ec1n t\u1ea3ng, ch\u1ea1y tr\u00ean m\u00f4i tr\u01b0\u1eddng JavaSript, \u0111\u01b0\u1ee3c x\u00e2y d\u1ef1ng tr\u00ean V8 JavaScript engine c\u1ee7a Chrome - V8 th\u1ef1c thi m\u00e3 JavaScript b\u00ean ngo\u00e0i tr\u00ecnh duy\u1ec7t. Asynchronous programming : V\u1ec1 b\u1ea3n ch\u1ea5t, n\u00f3 th\u1ef1c hi\u1ec7n c\u00e1c request \u0111\u1ed3ng th\u1eddi, ngay c\u1ea3 khi ch\u00fang \u1edf c\u00e1c ch\u1ee9c n\u0103ng kh\u00e1c nhau. M\u1ed9t single thread s\u1ebd \u0111\u01b0\u1ee3c handle multiple-requests trong event-loop . V\u00ec v\u1eady, vi\u1ec7c m\u1ed9t request b\u1ecb reject s\u1ebd kh\u00f4ng \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn request kh\u00e1c.NodeJS cho ph\u00e9p th\u1ef1c hi\u1ec7n l\u1eadp tr\u00ecnh b\u1ea5t \u0111\u1ed3ng b\u1ed9. Khi b\u1ea5t \u0111\u1ed3ng b\u1ed9 th\u1ef1c thi t\u1ea5t c\u1ea3 d\u00f2ng code c\u00f9ng m\u1ed9t l\u00fac. Synchronous programming : T\u1ea3i t\u00e0i nguy\u00ean m\u1ed9t c\u00e1ch \u0111\u01a1n l\u1ebb v\u00e0 tu\u1ea7n t\u1ef1, nh\u01b0 v\u1eady khi t\u00e0i nguy\u00ean trong h\u1ec7 th\u1ed1ng c\u00f3 ph\u00e2n c\u1ea5p kh\u00f4ng t\u1ea3i \u0111\u01b0\u1ee3c, th\u00ec nh\u1eefng t\u00e0i nguy\u00ean b\u00ean d\u01b0\u1edbi n\u00f3 s\u1ebd kh\u00f4ng t\u1ea3i \u0111\u01b0\u1ee3c lu\u00f4n. V\u1edbi NodeJS, \u1edf ch\u1ebf \u0111\u1ed9 \u0111\u1ed3ng b\u1ed9 th\u1ef1c thi t\u1eebng d\u00f2ng v\u00e0 ti\u1ebfn h\u00e0nh th\u1ef1c thi d\u00f2ng ti\u1ebfp theo khi d\u00f2ng hi\u1ec7n t\u1ea1i \u0111\u00e3 th\u1ef1c thi xong. NodeJS s\u1eed d\u1ee5ng I/O Model l\u1eadp tr\u00ecnh theo event, non-blocking \u2192 NodeJS kh\u00e1 g\u1ecdn nh\u1eb9 v\u00e0 hi\u1ec7u qu\u1ea3 \u2192 C\u00f4ng c\u1ee5 ho\u00e0n h\u1ea3o cho c\u00e1c \u1ee9ng d\u1ee5ng chuy\u00ean s\u00e2u v\u1ec1 d\u1eef li\u1ec7u realtime ch\u1ea1y tr\u00ean c\u00e1c Distributed control system. NodeJS l\u00e0 m\u00f4i tr\u01b0\u1eddng runtime m\u00e3 ngu\u1ed3n m\u1edf \u0111a n\u1ec1n t\u1ea3ng \u2192 S\u1eed d\u1ee5ng \u0111\u1ec3 ph\u00e1t tri\u1ec3n c\u00e1c \u1ee9ng d\u1ee5ng m\u1ea1ng v\u00e0 \u1ee9ng d\u1ee5ng server-side \u2192 c\u00f3 th\u1ec3 ch\u1ea1y tr\u00ean OS X, Microsoft Windows v\u00e0 Linux.","title":"a. Concepts"},{"location":"Web-Technologies/3.Web-server-and-proxy/#b-features_1","text":"Asynchronous and Event Driven : L\u1eadp tr\u00ecnh b\u1ea5t \u0111\u1ed3ng b\u1ed9 h\u01b0\u1edbng s\u1ef1 ki\u1ec7n. To\u00e0n b\u1ed9 API trong th\u01b0 vi\u1ec7n NodeJS \u0111\u1ec1u b\u1ea5t \u0111\u1ed3ng b\u1ed9, hay non-blocking. C\u00f3 ngh\u0129a l\u00e0 m\u1ed9t server s\u1eed d\u1ee5ng NodeJS s\u1ebd kh\u00f4ng ph\u1ea3i ch\u1edd m\u1ed9t API response v\u1ec1 data. Server c\u00f3 th\u1ec3 chuy\u1ec3n sang API kh\u00e1c sau khi g\u1ecdi API tr\u01b0\u1edbc \u0111\u00f3 v\u00e0 c\u01a1 ch\u1ebf th\u00f4ng b\u00e1o c\u1ee7a Events trong NodeJS gi\u00fap server nh\u1eadn \u0111\u01b0\u1ee3c response t\u1eeb l\u1ea7n g\u1ecdi API tr\u01b0\u1edbc. Very Fast : \u0110\u01b0\u1ee3c x\u00e2y d\u1ef1ng tr\u00ean C\u00f4ng c\u1ee5 JavaScript V8 c\u1ee7a Google Chrome, th\u01b0 vi\u1ec7n NodeJS c\u00f3 kh\u1ea3 n\u0103ng x\u1eed l\u00fd m\u00e3 v\u00f4 c\u00f9ng nhanh. Single Threaded but Highly Scalable : NodeJS s\u1eed d\u1ee5ng single threaded model v\u1edbi event looping. C\u01a1 ch\u1ebf event cho ph\u00e9p m\u00e1y ch\u1ee7 response non-blocking v\u00e0 c\u0169ng cho ph\u00e9p kh\u1ea3 n\u0103ng m\u1edf r\u1ed9ng cao h\u01a1n so v\u1edbi c\u00e1c server truy\u1ec1n th\u1ed1ng h\u1ed7 tr\u1ee3 gi\u1edbi h\u1ea1n c\u00e1c thread \u0111\u1ec3 x\u1eed l\u00fd c\u00e1c request. No Buffering : C\u00e1c \u1ee9ng d\u1ee5ng NodeJS kh\u00f4ng c\u00f3 v\u00f9ng nh\u1edb t\u1ea1m th\u1eddi (buffer) cho b\u1ea5t k\u1ef3 d\u1eef li\u1ec7u n\u00e0o. C\u00e1c \u1ee9ng d\u1ee5ng n\u00e0y ch\u1ec9 \u0111\u01a1n gi\u1ea3n xu\u1ea5t d\u1eef li\u1ec7u theo d\u1ea1ng block. License : NodeJS \u0111\u01b0\u1ee3c ph\u00e1t h\u00e0nh theo gi\u1ea5y ph\u00e9p MIT.","title":"b. Features"},{"location":"Web-Technologies/3.Web-server-and-proxy/#web-server-logs","text":"","title":"Web Server Logs"},{"location":"Web-Technologies/3.Web-server-and-proxy/#1-concepts_1","text":"Web Server Logs l\u00e0 c\u00e1c t\u1ec7p ghi l\u1ea1i nh\u1eadt k\u00fd c\u1ee7a m\u1ed9t web server, \u0111\u01b0\u1ee3c web server t\u1ef1 \u0111\u1ed9ng t\u1ea1o v\u00e0 \u0111\u1ecdc, ghi l\u1ea1i list of activities m\u00e0 web server \u0111\u00e3 th\u1ef1c hi\u1ec7n. W3C c\u00f4ng b\u1ed1 m\u1ed9t \u0111\u1ecbnh d\u1ea1ng chu\u1ea9n cho vi\u1ec7c ghi logs c\u1ee7a web server The Common Log Format v\u00e0 Extended Log File Format #Version: 1.0 #Date: 12-Jan-1996 00:00:00 #Fields: time cs-method cs-uri 00:34:23 GET /foo/bar.html 12:21:16 GET /foo/bar.html 12:45:52 GET /foo/bar.html 12:57:34 GET /foo/bar.html N\u1ed9i dung c\u1ee7a 1 file log th\u01b0\u1eddng g\u1ed3m index n\u1eb1m \u1edf cu\u1ed1i t\u1ec7p, th\u00f4ng tin v\u1ec1 request, bao g\u1ed3m \u0111\u1ecba ch\u1ec9 IP m\u00e1y client, ng\u00e0y/gi\u1edd c\u1ee7a request, URL c\u1ee7a trang \u0111\u01b0\u1ee3c request, HTTP code, bytes served, user agent v\u00e0 c\u00e1c referrer. Ngo\u00e0i ra, c\u00e1c d\u1eef li\u1ec7u n\u00e0y c\u00f3 th\u1ec3 t\u00e1ch th\u00e0nh c\u00e1c log ri\u00eang bi\u1ec7t nh\u01b0 AccessLog , ErorLog ho\u1eb7c ReferrerLog . User th\u00f4ng th\u01b0\u1eddng kh\u00f4ng th\u1ec3 truy c\u1eadp \u0111\u01b0\u1ee3c nh\u1eefng log files, ch\u1ec9 admin \u0111\u01b0\u1ee3c ph\u00e2n quy\u1ec1n m\u1edbi truy c\u1eadp \u0111\u01b0\u1ee3c. V\u00e0 th\u01b0\u1eddng admin s\u1ebd xem ph\u00e2n t\u00edch, th\u1ed1ng k\u00ea c\u1ee7a server log \u0111\u1ec3 ki\u1ec3m tra c\u00e1c l\u01b0u l\u01b0\u1ee3ng access theo th\u1eddi gian, xem c\u00e1c referrer ho\u1eb7c user agent, error. C\u00e1c ph\u00e2n t\u00edch n\u00e0y s\u1ebd h\u1ed7 tr\u1ee3 cho vi\u1ec7c qu\u1ea3n tr\u1ecb trang web hi\u1ec7u qu\u1ea3, t\u00e0i nguy\u00ean l\u01b0u tr\u1eef \u0111\u1ea7y \u0111\u1ee7 v\u00e0 \u0111i\u1ec1u ch\u1ec9nh c\u00e1c l\u1ed7i h\u1ec7 th\u1ed1ng.","title":"1. Concepts"},{"location":"Web-Technologies/3.Web-server-and-proxy/#2-common-values-usually-found-in-a-web-server-log","text":"Apache server log file: 192.168.198.92 - - [22/Dec/2002:23:08:37 -0400] \"GET / HTTP/1.1\" 200 6394 www.yahoo.com \"-\" \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1...)\" \"-\" 192.168.198.92 - - [22/Dec/2002:23:08:38 -0400] \"GET /images/logo.gif HTTP/1.1\" 200 807 www.yahoo.com \"http://www.some.com/\" \"Mozilla/4.0 (compatible; MSIE 6...)\" \"-\" 192.168.72.177 - - [22/Dec/2002:23:32:14 -0400] \"GET /news/sports.html HTTP/1.1\" 200 3500 www.yahoo.com \"http://www.some.com/\" \"Mozilla/4.0 (compatible; MSIE ...)\" \"-\" 192.168.72.177 - - [22/Dec/2002:23:32:14 -0400] \"GET /favicon.ico HTTP/1.1\" 404 1997 www.yahoo.com \"-\" \"Mozilla/5.0 (Windows; U; Windows NT 5.1; rv:1.7.3)...\" \"-\" 192.168.72.177 - - [22/Dec/2002:23:32:15 -0400] \"GET /style.css HTTP/1.1\" 200 4138 www.yahoo.com \"http://www.yahoo.com/index.html\" \"Mozilla/5.0 (Windows...\" \"-\" 192.168.72.177 - - [22/Dec/2002:23:32:16 -0400] \"GET /js/ads.js HTTP/1.1\" 200 10229 www.yahoo.com \"http://www.search.com/index.html\" \"Mozilla/5.0 (Windows...\" \"-\" 192.168.72.177 - - [22/Dec/2002:23:32:19 -0400] \"GET /search.php HTTP/1.1\" 400 1997 www.yahoo.com \"-\" \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; ...)\" \"-\" IIS (Internet Information Service) server log file: 02:49:12 127.0.0.1 GET / 200 02:49:35 127.0.0.1 GET /index.html 200 03:01:06 127.0.0.1 GET /images/sponsered.gif 304 03:52:36 127.0.0.1 GET /search.php 200 04:17:03 127.0.0.1 GET /admin/style.css 200 05:04:54 127.0.0.1 GET /favicon.ico 404 05:38:07 127.0.0.1 GET /js/ads.js 200 T\u1eeb nh\u1eefng log files n\u00e0y, c\u00f3 th\u1ec3 th\u1ed1ng k\u00ea \u0111\u01b0\u1ee3c c\u00e1c values: S\u1ed1 l\u01b0\u1ee3t truy c\u1eadp v\u00e0 s\u1ed1 l\u01b0\u1ee3ng client truy c\u1eadp Th\u1eddi l\u01b0\u1ee3ng truy c\u1eadp v\u00e0 l\u01b0\u1ee3t truy c\u1eadp cu\u1ed1i c\u00f9ng User \u0111\u01b0\u1ee3c x\u00e1c th\u1ef1c v\u00e0 l\u01b0\u1ee3t truy c\u1eadp \u0111\u01b0\u1ee3c x\u00e1c th\u1ef1c g\u1ea7n \u0111\u00e2y nh\u1ea5t Domains/countries - IP Address c\u1ee7a client Danh s\u00e1ch c\u00e1c host S\u1ed1 l\u01b0\u1ee3t page views C\u00e1c page \u0111\u01b0\u1ee3c access nhi\u1ec1u v\u00e0 \u00edt nh\u1ea5t C\u00e1c lo\u1ea1i t\u1eadp tin H\u1ec7 \u0111i\u1ec1u h\u00e0nh \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng c\u1ee7a c\u00e1c user C\u00e1c tr\u00ecnh duy\u1ec7t \u0111\u00e3 s\u1eed d\u1ee5ng Search engines: key phrases v\u00e0 keywords \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng nhi\u1ec1u Xem c\u00e1c HTTP status code, c\u1ee5 th\u1ec3 l\u00e0 HTTP errors code","title":"2. Common values usually found in a Web Server Log"},{"location":"Web-Technologies/3.Web-server-and-proxy/#3-types-of-web-server-log-files","text":"Source","title":"3. Types of Web Server log files"},{"location":"Web-Technologies/3.Web-server-and-proxy/#4-nginx-access-logs-and-error-logs","text":"","title":"4. NGINX Access Logs and Error Logs"},{"location":"Web-Technologies/3.Web-server-and-proxy/#a-logs-in-nginx","text":"Theo m\u1eb7c \u0111\u1ecbnh, NGINX ghi c\u00e1c events c\u1ee7a n\u00f3 trong hai lo\u1ea1i logs l\u00e0 Access Logs v\u00e0 Error Logs . Trong h\u1ea7u h\u1ebft c\u00e1c distro c\u1ee7a Linux ph\u1ed5 bi\u1ebfn nh\u01b0 Ubuntu, CentOS ho\u1eb7c Debian, c\u1ea3 b\u1ea3n ghi Access Logs v\u00e0 Error Logs \u0111\u1ec1u c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c t\u00ecm th\u1ea5y trong /var/log/nginx .","title":"a. Logs in NGINX"},{"location":"Web-Technologies/3.Web-server-and-proxy/#b-nginx-access-log","text":"NGINX ghi l\u1ea1i c\u00e1c activities c\u1ee7a t\u1ea5t c\u1ea3 nh\u1eefng user truy c\u1eadp v\u00e0o trang web trong Access Logs . T\u1eeb file Access Logs n\u00e0y, ta c\u00f3 th\u1ec3 t\u00ecm th\u1ea5y t\u1ec7p n\u00e0o \u0111\u01b0\u1ee3c truy c\u1eadp , c\u00e1ch NGINX ph\u1ea3n h\u1ed3i request , browser c\u1ee7a client \u0111ang s\u1eed d\u1ee5ng, \u0111\u1ecba ch\u1ec9 IP c\u1ee7a \u1ee9ng d\u1ee5ng kh\u00e1ch v\u00e0 h\u01a1n th\u1ebf n\u1eefa. C\u00f3 th\u1ec3 s\u1eed d\u1ee5ng th\u00f4ng tin t\u1eeb Access Logs \u0111\u1ec3 ph\u00e2n t\u00edch l\u01b0u l\u01b0\u1ee3ng truy c\u1eadp, c\u00f3 th\u1ec3 ph\u00e1t hi\u1ec7n ra c\u00e1c tr\u01b0\u1eddng h\u1ee3p ng\u01b0\u1eddi d\u00f9ng g\u1eedi m\u1ed9t s\u1ed1 request b\u1ea5t th\u01b0\u1eddng, t\u1eeb \u0111\u00f3 ng\u0103n ch\u1eb7n s\u1edbm c\u00e1c h\u00e0nh vi t\u1ea5n c\u00f4ng m\u1ea1ng. Enable NGINX access log trong http context: http { ... ... access_log /var/log/nginx/access.log ; server { listen 80 ; server_name domain1.com access_log /var/log/nginx/domain1.access.log ; ... ... } } # tail -f /var/log/nginx/domain1.access.log 47.29.201.179 - - [28/Feb/2019:13:17:10 +0000] \"GET /?p=1 HTTP/2.0\" 200 5316 \"https://domain1.com/?p=1\" \"Mozilla/5.0 (Windows NT 6 .1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36\" \"2.75\"","title":"b. NGINX Access log"},{"location":"Web-Technologies/3.Web-server-and-proxy/#c-nginx-error-log","text":"M\u1eb7t kh\u00e1c, n\u1ebfu NGINX g\u1eb7p b\u1ea5t k\u1ef3 tr\u1ee5c tr\u1eb7c n\u00e0o th\u00ec n\u00f3 s\u1ebd ghi l\u1ea1i event \u0111\u00f3 v\u00e0o Error Logs . N\u1ebfu c\u00f3 m\u1ed9t s\u1ed1 l\u1ed7i trong t\u1ec7p configuration d\u1eabn t\u1edbi NGINX kh\u00f4ng th\u1ec3 kh\u1edfi \u0111\u1ed9ng ho\u1eb7c stopped running th\u00ec ta n\u00ean check Error Logs \u0111\u1ec3 t\u00ecm nguy\u00ean nh\u00e2n v\u00e0 x\u1eed l\u00fd n\u00f3. Ngo\u00e0i ra ta c\u0169ng c\u00f3 th\u1ec3 t\u00ecm th\u1ea5y m\u1ed9t v\u00e0i warning trong nh\u1eadt Error Logs t\u1eeb \u0111\u00f3 tr\u00e1nh \u0111\u01b0\u1ee3c c\u00e1c s\u1ef1 c\u1ed1 c\u00f3 th\u1ec3 x\u1ea3y ra. Enable NGINX error log trong http context: http { ... ... error_log /var/log/nginx/error_log ; server { listen 80 ; server_name domain1.com ; error_log /var/log/nginx/domain1.error_log warn ; ... } server { listen 80 ; server_name domain2.com ; error_log /var/log/nginx/domain2.error_log debug ; ... } } C\u00e1c m\u1ee9c \u0111\u1ed9 nghi\u00eam tr\u1ecdng c\u1ee7a Nginx Error Log: emerg : Th\u00f4ng b\u00e1o kh\u1ea9n c\u1ea5p khi h\u1ec7 th\u1ed1ng c\u00f3 th\u1ec3 kh\u00f4ng \u1ed5n \u0111\u1ecbnh. alert : Alert messages v\u1ec1 c\u00e1c v\u1ea5n \u0111\u1ec1 nghi\u00eam tr\u1ecdng. crit : Critical issues quan tr\u1ecdng c\u1ea7n \u0111\u01b0\u1ee3c quan t\u00e2m ngay l\u1eadp t\u1ee9c. error : \u0110\u00e3 x\u1ea3y ra l\u1ed7i, x\u1ea3y ra s\u1ef1 c\u1ed1 khi x\u1eed l\u00fd m\u1ed9t request. warn : Warning messages m\u00e0 ta n\u00ean xem x\u00e9t. notice : Notice \u0111\u01a1n gi\u1ea3n, c\u00f3 th\u1ec3 ignore. info : Ch\u1ec9 l\u00e0 1 information messages m\u00e0 ta c\u00f3 th\u1ec3 mu\u1ed1n bi\u1ebft. debug : Th\u00f4ng tin v\u1ec1 Debugging \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh v\u1ecb tr\u00ed c\u1ee7a error.","title":"c. NGINX Error log"},{"location":"Web-Technologies/3.Web-server-and-proxy/#reference","text":"NGINX/About What Is a Reverse Proxy Server? Reverse Proxy vs Forward Proxy FastCGI Process Manager (FPM) Synchronous vs. Asynchronous Programming Nodejs Features Server log Web Server logs Types of Web Server log files","title":"Reference"},{"location":"Web-Technologies/4.Programming/","text":"Programming Processes and threads Error handling Async programming Memory management Processes and threads Concepts program : t\u1ed3n t\u1ea1i trong b\u1ed9 nh\u1edb ho\u1eb7c \u1edf tr\u1ea1ng th\u00e1i ngh\u1ec9, program c\u00f3 th\u1ec3 l\u00e0 m\u1ed9t t\u1eadp l\u1ec7nh d\u1ef1a tr\u00ean v\u0103n b\u1ea3n (t\u1ec7p DOS, t\u1eadp l\u1ec7nh Windows Powershell, t\u1eadp l\u1ec7nh bash shell, Javascript, v.v.) ho\u1eb7c t\u1eadp l\u1ec7nh th\u1ef1c thi d\u1ef1a tr\u00ean nh\u1ecb ph\u00e2n (.exe). process : L\u00e0 m\u1ed9t program \u0111\u01b0\u1ee3c n\u1ea1p v\u00e0o b\u1ed9 nh\u1edb \u0111\u1ec3 b\u1ed9 x\u1eed l\u00fd, th\u1ef1c thi. ( loaded into the memory to be executed by the processor. ) thread : L\u00e0 \u0111\u01a1n v\u1ecb th\u1ef1c thi t\u1ed1i thi\u1ec3u c\u1ee7a c\u00e1c \u0111o\u1ea1n m\u00e3 do h\u1ec7 \u0111i\u1ec1u h\u00e0nh qu\u1ea3n l\u00fd. Trong h\u1ec7 \u0111i\u1ec1u h\u00e0nh, m\u1ed9t process c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c chia th\u00e0nh c\u00e1c thread . Process vs. Thread Comparison Basis Process Thread Definition L\u00e0 m\u1ed9t program \u0111ang \u0111\u01b0\u1ee3c th\u1ef1c thi L\u00e0 m\u1ed9t process \u0111\u01b0\u1ee3c chia nh\u1ecf, c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c qu\u1ea3n l\u00fd \u0111\u1ed9c l\u1eadp b\u1edfi schedular Context switching time \u0110\u00f2i h\u1ecfi nhi\u1ec1u th\u1eddi gian h\u01a1n \u0111\u1ec3 chuy\u1ec3n \u0111\u1ed5i context v\u00ec ch\u00fang n\u1eb7ng h\u01a1n Y\u00eau c\u1ea7u \u00edt th\u1eddi gian h\u01a1n \u0111\u1ec3 chuy\u1ec3n \u0111\u1ed5i context v\u00ec ch\u00fang nh\u1eb9 h\u01a1n Memory Sharing Ho\u00e0n to\u00e0n \u0111\u1ed9c l\u1eadp v\u00e0 kh\u00f4ng chia s\u1ebb b\u1ed9 nh\u1edb C\u00f3 th\u1ec3 chia s\u1ebb m\u1ed9t s\u1ed1 b\u1ed9 nh\u1edb v\u1edbi c\u00e1c thread ngang h\u00e0ng c\u1ee7a n\u00f3. Communication \u0110\u00f2i h\u1ecfi nhi\u1ec1u th\u1eddi gian h\u01a1n Y\u00eau c\u1ea7u \u00edt th\u1eddi gian h\u01a1n Blocked Trong m\u1ed9t nh\u00f3m process ngang c\u1ea5p, n\u1ebfu m\u1ed9t process b\u1ecb block, c\u00e1c process c\u00f2n l\u1ea1i c\u00f3 th\u1ec3 ti\u1ebfp t\u1ee5c th\u1ef1c thi. N\u1ebfu m\u1ed9t thread b\u1ecb block, t\u1ea5t c\u1ea3 c\u00e1c thread ngang h\u00e0ng c\u1ee7a n\u00f3 c\u0169ng b\u1ecb block. Resource Consumption Y\u00eau c\u1ea7u nhi\u1ec1u t\u00e0i nguy\u00ean h\u01a1n C\u1ea7n \u00edt t\u00e0i nguy\u00ean h\u01a1n Dependency C\u00e1c process \u0111\u1ed9c l\u1eadp v\u1edbi nhau thread l\u00e0 c\u00e1c ph\u1ea7n c\u1ee7a m\u1ed9t process v\u00e0 do \u0111\u00f3 ch\u00fang ph\u1ee5 thu\u1ed9c v\u00e0o process Data and Code sharing C\u00f3 data v\u00e0 code segment \u0111\u1ed9c l\u1eadp M\u1ed9t thread chia s\u1ebb data segment, code segment, file, v.v... v\u1edbi c\u00e1c thread ngang h\u00e0ng Treatment by OS T\u1ea5t c\u1ea3 c\u00e1c process kh\u00e1c nhau \u0111\u01b0\u1ee3c h\u1ec7 \u0111i\u1ec1u h\u00e0nh x\u1eed l\u00fd ri\u00eang bi\u1ec7t. T\u1ea5t c\u1ea3 c\u00e1c thread ngang h\u00e0ng nhau \u0111\u01b0\u1ee3c h\u1ec7 \u0111i\u1ec1u h\u00e0nh coi nh\u01b0 m\u1ed9t t\u00e1c v\u1ee5 duy nh\u1ea5t. Time for creation T\u1ea1o t\u1ed1n nhi\u1ec1u th\u1eddi gian h\u01a1n T\u1ea1o t\u1ed1n \u00edt th\u1eddi gian h\u01a1n Time for termination C\u1ea7n nhi\u1ec1u th\u1eddi gian h\u01a1n \u0111\u1ec3 k\u1ebft th\u00fac C\u1ea7n \u00edt th\u1eddi gian h\u01a1n \u0111\u1ec3 k\u1ebft th\u00fac Error handling Concepts Khi m\u1ed9t process th\u1ef1c thi b\u1ecb th\u1ea5t b\u1ea1i th\u00ec program s\u1ebd b\u1ecb error . V\u00e0 qu\u00e1 tr\u00ecnh \u0111i t\u1eeb d\u1ef1 \u0111o\u00e1n, ph\u00e1t hi\u1ec7n v\u00e0 gi\u1ea3i quy\u1ebft c\u00e1c error n\u00e0y, gi\u00fap cho c\u00e1c process th\u1ef1c thi th\u00e0nh c\u00f4ng \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 Error handling . Qu\u00e1 tr\u00ecnh Error handling bao g\u1ed3m ph\u1ea7n c\u1ee9ng v\u00e0 ph\u1ea7n m\u1ec1m. Vi\u1ec7c x\u1eed l\u00fd l\u1ed7i th\u01b0\u1eddng \u0111\u01b0\u1ee3c ph\u00e1t hi\u1ec7n b\u1eb1ng vi\u1ec7c tr\u1ea3 v\u1ec1 c\u00e1c Error code ho\u1eb7c c\u00e1c Error message c\u1ee5 th\u1ec3. Trong qu\u00e1 tr\u00ecnh Runtime c\u1ee7a program , c\u00f3 th\u1ec3 x\u1ea3y ra t\u00ecnh tr\u1ea1ng l\u1ed7i qua c\u00e1c exception events , d\u1eabn t\u1edbi error : d\u1eef li\u1ec7u kh\u00f4ng h\u1ee3p l\u1ec7, kh\u00f4ng t\u00ecm th\u1ea5y file, tr\u00e0n b\u1ed9 nh\u1edb v.v. V\u00e0 \u0111\u1ec3 x\u1eed l\u00fd t\u00ecnh tr\u1ea1ng n\u00e0y, ng\u01b0\u1eddi ta d\u00f9ng k\u1ef9 thu\u1eadt Exception Handling - m\u1ed9t k\u1ef9 thu\u1eadt x\u1eed l\u00fd c\u00e1c Runtime Error , Exception Events . K\u1ef9 thu\u1eadt n\u00e0y gi\u00fap duy tr\u00ec c\u00e1c process ch\u1ea1y theo \u0111\u00fang ngh\u0129a c\u1ee7a n\u00f3, n\u1ebfu c\u00f3 l\u1ed7i th\u00ec s\u1ebd catch c\u00e1c Error code ho\u1eb7c c\u00e1c Error message c\u1ee5 th\u1ec3. Error handling in Nodejs Errors in Node.js are handled through exceptions. M\u1ed9t exception \u0111\u01b0\u1ee3c t\u1ea1o b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a throw : throw value Sau khi JavaScript th\u1ef1c thi d\u00f2ng n\u00e0y, ch\u01b0\u01a1ng tr\u00ecnh t\u1ea1m d\u1eebng v\u00e0 l\u1ed7i \u0111\u01b0\u1ee3c g\u1eedi t\u1edbi exception handler - m\u1ed9t c\u00e2u l\u1ec7nh try/catch : try { //lines of code } catch ( e ) {} Trong Node.js, kh\u00f4ng throw strings , m\u00e0 l\u00e0 throw Error objects : throw new Error ( 'Ran out of coffee' ) ho\u1eb7c class NotEnoughCoffeeError extends Error { //... } throw new NotEnoughCoffeeError () Error handling trong NodeJS v\u1edbi async/await : async function someFunction () { try { await someOtherFunction () } catch ( err ) { console . error ( err . message ) } } Async programming Concepts Javascript Engine : V8 Javascript Engine - optimized version, bao g\u1ed3m hai th\u00e0nh ph\u1ea7n ch\u00ednh: Call Stack : stack ch\u1ee9a c\u00e1c l\u1eddi g\u1ecdi h\u00e0m khi code \u0111\u01b0\u1ee3c th\u1ef1c thi. Memory Heap : C\u1ea5p ph\u00e1t b\u1ed9 nh\u1edb cho c\u00e1c process Event Loop v\u00e0 Callback Queue : B\u00ean c\u1ea1nh Javascript Engine , browser c\u00f2n cung c\u1ea5p c\u00e1c Node APIs , m\u1ed9t Event Loop v\u00e0 m\u1ed9t Callback Queue . Ch\u00fang ch\u1ea1y tr\u00ean c\u00e1c thread ri\u00eang v\u00e0 \u0111\u01b0\u1ee3c browser ki\u1ec3m so\u00e1t \u0111\u1ed3ng th\u1eddi ( concurrency ). C\u00e1c h\u00e0m async callback s\u1ebd \u0111\u01b0\u1ee3c th\u00eam v\u00e0o Callback Queue . Nhi\u1ec7m v\u1ee5 c\u1ee7a Event Loop l\u00e0 \u0111\u1ee3i \u0111\u1ebfn khi Call Stack r\u1ed7ng, v\u00e0 quay l\u1ea1i ki\u1ec3m tra trong Callback Queue c\u00f3 g\u00ec kh\u00f4ng, n\u1ebfu c\u00f3 th\u00ec l\u1ea5y l\u1ea7n l\u01b0\u1ee3t ch\u00fang \u0111\u1ea9y v\u00e0o trong Call Stack \u0111\u1ec3 ch\u1ea1y ti\u1ebfp. Asynchronous programming : V\u1ec1 b\u1ea3n ch\u1ea5t, n\u00f3 th\u1ef1c hi\u1ec7n c\u00e1c request \u0111\u1ed3ng th\u1eddi, ngay c\u1ea3 khi ch\u00fang \u1edf c\u00e1c ch\u1ee9c n\u0103ng kh\u00e1c nhau. M\u1ed9t single thread s\u1ebd \u0111\u01b0\u1ee3c handle multiple-requests trong event-loop . V\u00ec v\u1eady, vi\u1ec7c m\u1ed9t request b\u1ecb reject s\u1ebd kh\u00f4ng \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn request kh\u00e1c.NodeJS cho ph\u00e9p th\u1ef1c hi\u1ec7n l\u1eadp tr\u00ecnh b\u1ea5t \u0111\u1ed3ng b\u1ed9. Khi b\u1ea5t \u0111\u1ed3ng b\u1ed9 th\u1ef1c thi t\u1ea5t c\u1ea3 d\u00f2ng code c\u00f9ng m\u1ed9t l\u00fac. Synchronous programming : T\u1ea3i t\u00e0i nguy\u00ean m\u1ed9t c\u00e1ch \u0111\u01a1n l\u1ebb v\u00e0 tu\u1ea7n t\u1ef1, nh\u01b0 v\u1eady khi 1 t\u00e0i nguy\u00ean trong h\u1ec7 th\u1ed1ng c\u00f3 ph\u00e2n c\u1ea5p kh\u00f4ng t\u1ea3i \u0111\u01b0\u1ee3c, th\u00ec nh\u1eefng t\u00e0i nguy\u00ean b\u00ean d\u01b0\u1edbi n\u00f3 s\u1ebd kh\u00f4ng t\u1ea3i \u0111\u01b0\u1ee3c lu\u00f4n. V\u1edbi NodeJS, \u1edf ch\u1ebf \u0111\u1ed9 \u0111\u1ed3ng b\u1ed9 th\u1ef1c thi t\u1eebng d\u00f2ng v\u00e0 ti\u1ebfn h\u00e0nh th\u1ef1c thi d\u00f2ng ti\u1ebfp theo khi d\u00f2ng hi\u1ec7n t\u1ea1i \u0111\u00e3 th\u1ef1c thi xong. Synchronous vs. Asynchronous Programming Synchronous T\u1ea3i t\u00e0i nguy\u00ean m\u1ed9t c\u00e1ch \u0111\u01a1n l\u1ebb v\u00e0 tu\u1ea7n t\u1ef1, khi m\u1ed9t t\u00e0i nguy\u00ean trong h\u1ec7 th\u1ed1ng c\u00f3 ph\u00e2n c\u1ea5p kh\u00f4ng t\u1ea3i \u0111\u01b0\u1ee3c, th\u00ec nh\u1eefng t\u00e0i nguy\u00ean b\u00ean d\u01b0\u1edbi n\u00f3 s\u1ebd kh\u00f4ng response. C\u00e1c request s\u1ebd \u0111\u01b0\u1ee3c ho\u1ea1t \u0111\u1ed9ng \u0111\u1ed3ng b\u1ed9 v\u1edbi giao th\u1ee9c \u0111a lu\u1ed3ng. M\u1ed7i thread s\u1ebd x\u1eed l\u00fd 1 request ri\u00eang bi\u1ec7t, \u0111\u1ed9c l\u1eadp. V\u00ec v\u1eady, m\u1ed7i thread s\u1ebd c\u00f3 1 kho\u1ea3ng th\u1eddi gian execution v\u00e0 loads completely tr\u01b0\u1edbc khi th\u1ef1c hi\u1ec7n event ti\u1ebfp theo. Do \u0111\u00f3, vi\u1ec7c execution v\u00e0 loads completely trong m\u1ed9t thread s\u1ebd block c\u00e1c thread kh\u00e1c, c\u00e1c thread kh\u00e1c ph\u1ea3i \u0111\u1ee3i thread tr\u01b0\u1edbc n\u00f3 done r\u1ed3i m\u1edbi t\u1edbi l\u01b0\u1ee3t execution v\u00e0 loads completely . L\u1eadp tr\u00ecnh \u0111\u1ed3ng b\u1ed9 \u0111\u1ea3m b\u1ea3o r\u1eb1ng ph\u00eda client s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c response t\u1eeb request \u0111\u1ea7u ti\u00ean tr\u01b0\u1edbc khi th\u1ef1c hi\u1ec7n request ti\u1ebfp theo (FIFS). \u0110i\u1ec1u n\u00e0y c\u00f3 th\u1ec3 d\u1eabn \u0111\u1ebfn s\u1ef1 ch\u1eadm tr\u1ec5 kh\u00f4ng c\u1ea7n thi\u1ebft v\u00e0 \u1ea3nh h\u01b0\u1edfng x\u1ea5u \u0111\u1ebfn UX. Asynchronous Trong Asynchronous Programming, m\u1ed9t apps s\u1ebd serve c\u00e1c request v\u00e0 response b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng giao th\u1ee9c non-blocking I/O. Kh\u00e1c v\u1edbi l\u1eadp tr\u00ecnh \u0111\u1ed3ng b\u1ed9, m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh kh\u00f4ng \u0111\u1ed3ng b\u1ed9 kh\u00f4ng th\u1ef1c hi\u1ec7n c\u00e1c actions m\u1ed9t c\u00e1ch tu\u1ea7n t\u1ef1, th\u1ee9 b\u1eadc. V\u00ec v\u1eady, ch\u01b0\u01a1ng tr\u00ecnh s\u1ebd kh\u00f4ng \u0111\u1ee3i th\u1ef1c hi\u1ec7n m\u1ed9t request tr\u01b0\u1edbc khi tr\u1ea3 l\u1eddi m\u1ed9t request kh\u00e1c. V\u1ec1 b\u1ea3n ch\u1ea5t, n\u00f3 th\u1ef1c hi\u1ec7n c\u00e1c request \u0111\u1ed3ng th\u1eddi, ngay c\u1ea3 khi ch\u00fang \u1edf c\u00e1c ch\u1ee9c n\u0103ng kh\u00e1c nhau. T\u1eeb \u0111\u00f3 mang l\u1ea1i hi\u1ec7u qu\u1ea3 l\u00e0 m\u1ed9t \u1ee9ng d\u1ee5ng \u0111\u01b0\u1ee3c ph\u00e1t tri\u1ec3n b\u1eb1ng Asynchronous Programming s\u1ebd ch\u1ec9 t\u1ea3i to\u00e0n b\u1ed9 n\u1ed9i dung c\u1ee7a n\u00f3 m\u1ed9t l\u1ea7n. M\u1ed9t single thread x\u1eed l\u00fd nhi\u1ec1u request trong m\u1ed9t event loop . V\u00ec v\u1eady, vi\u1ec7c m\u1ed9t request kh\u00f4ng th\u00e0nh c\u00f4ng s\u1ebd kh\u00f4ng \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn request kia. V\u00ec asynchronous loading theo ki\u1ec3u non-blocking, n\u00ean c\u00e1c \u1ee9ng d\u1ee5ng web ho\u1ea1t \u0111\u1ed9ng theo nguy\u00ean t\u1eafc n\u00e0y c\u00f3 th\u1ec3 tr\u1edf th\u00e0nh c\u00e1c single-page applications. Asynchronous programming in NodeJs M\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh \u0111\u01b0\u1ee3c th\u1ef1c thi b\u1ea5t \u0111\u1ed3ng b\u1ed9 \u0111em l\u1ea1i tr\u1ea3i nghi\u1ec7m, t\u1ed1c \u0111\u1ed9 x\u1eed l\u00fd t\u1ed1t h\u01a1n, tuy nhi\u00ean ch\u00ednh v\u00ec s\u1ef1 b\u1ea5t nguy\u00ean t\u1eafc, kh\u00f4ng c\u00f3 th\u1ee9 t\u1ef1 th\u1ef1c hi\u1ec7n nh\u01b0 v\u1eady n\u00ean vi\u1ec7c qu\u1ea3n l\u00fd c\u00e1c ti\u1ebfn tr\u00ecnh tr\u1edf n\u00ean ph\u1ee9c t\u1ea1p v\u00e0 kh\u00f3 kh\u0103n h\u01a1n, x\u00e9t v\u00ed d\u1ee5 d\u01b0\u1edbi \u0111\u00e2y: const fs = require ( 'fs' ); let content ; try { content = fs . readFileSync ( 'file.md' , 'utf-8' ); } catch ( err ) { console . log ( err ); } console . log ( content ); V\u1ea5n \u0111\u1ec1 \u1edf \u0111\u00e2y l\u00e0 c\u00e1c thread s\u1ebd b\u1ecb block khi fs.readFileSync() \u0111ang th\u1ef1c thi, th\u1ef1c thi xong th\u00ec m\u1edbi ch\u1ea1y t\u1edbi c\u00e1c thread kh\u00e1c, t\u1ed1n perfomance, th\u1eddi gian. VD n\u1ebfu c\u00f3 l\u1ed7i trong qu\u00e1 tr\u00ecnh \u0111\u1ecdc file, ph\u1ea3i \u0111\u1ee3i \u0111\u1ebfn khi \u0111\u1ecdc file xong m\u1edbi log ra \u0111\u01b0\u1ee3c l\u1ed7i. C\u00e1ch gi\u1ea3i quy\u1ebft \u1edf \u0111\u00e2y l\u00e0 s\u1eed d\u1ee5ng callback truy\u1ec1n v\u00e0o fs.readFileSync() : const fs = require ( 'fs' ); console . log ( 'start reading a file...' ); fs . readFile ( 'file.md' , 'utf-8' , function ( err , content ) { if ( err ) { console . log ( 'error happened during reading the file' ) return console . log ( err ) } console . log ( content ) }); console . log ( 'end of the file' ); V\u1edbi v\u00ed d\u1ee5 n\u00e0y, Ta c\u00f3 th\u1ec3 d\u00f9ng Promise \u0111\u1ec3 \u0111\u1ecdc nhi\u1ec1u file: const fs = require ( 'fs' ); function readMultipleFile ( file ) { return new Promise (( resolve , reject ) => { fs . readFile ( file , ( err , content ) => { if ( err ) { return reject ( err ); } resolve ( content ); }); }); } Promise . all ([ readMultipleFile ( \"file1\" ), readFile ( \"file2\" ), readFile ( \"file3\" )]) . then (( content ) => console . log ( content )) . catch (( content ) => console . log ( content )); Vi\u1ec7c d\u00f9ng callback hay Promise nh\u01b0 tr\u00ean c\u00f3 th\u1ec3 d\u1eabn t\u1edbi hi\u1ec7n t\u01b0\u1ee3ng callback hell v\u00e0 Promise chain . V\u00e0 t\u00ednh n\u0103ng Async/Await trong Javascript ra \u0111\u1eddi \u0111\u1ec3 gi\u1ea3i quy\u1ebft t\u00ecnh tr\u1ea1ng tr\u00ean, gi\u00fap ch\u00fang ta l\u00e0m vi\u1ec7c v\u1edbi c\u00e1c h\u00e0m b\u1ea5t \u0111\u1ed3ng b\u1ed9 ng\u1eafn g\u1ecdn v\u00e0 d\u1ec5 hi\u1ec3u h\u01a1n. Async/Await \u0111\u01b0\u1ee3c x\u00e2y d\u1ef1ng tr\u00ean Promise v\u00e0 t\u01b0\u01a1ng th\u00edch v\u1edbi t\u1ea5t c\u1ea3 c\u00e1c Promise d\u1ef1a tr\u00ean API, trong \u0111\u00f3: Async - khai b\u00e1o m\u1ed9t h\u00e0m b\u1ea5t \u0111\u1ed3ng b\u1ed9 ki\u1ec3u async function someName (){...}) T\u1ef1 \u0111\u1ed9ng bi\u1ebfn \u0111\u1ed5i m\u1ed9t h\u00e0m th\u00f4ng th\u01b0\u1eddng th\u00e0nh m\u1ed9t Promise . Khi g\u1ecdi t\u1edbi h\u00e0m async n\u00f3 s\u1ebd x\u1eed l\u00fd m\u1ecdi th\u1ee9 v\u00e0 \u0111\u01b0\u1ee3c tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3 trong h\u00e0m c\u1ee7a n\u00f3. Async cho ph\u00e9p s\u1eed d\u1ee5ng Await . Await - t\u1ea1m d\u1eebng vi\u1ec7c th\u1ef1c hi\u1ec7n c\u00e1c h\u00e0m async. const result = await someAsyncCall (){...} Khi \u0111\u01b0\u1ee3c \u0111\u1eb7t tr\u01b0\u1edbc m\u1ed9t Promise , n\u00f3 s\u1ebd \u0111\u1ee3i cho \u0111\u1ebfn khi Promise k\u1ebft th\u00fac v\u00e0 tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3. Await ch\u1ec9 l\u00e0m vi\u1ec7c v\u1edbi Promise , n\u00f3 kh\u00f4ng ho\u1ea1t \u0111\u1ed9ng v\u1edbi callback . Await ch\u1ec9 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng b\u00ean trong c\u00e1c function async . const fs = require ( 'fs' ); const readFileAsync = async function ( file ){ try { let content = await fs . readFile ( file ); return content ; } catch ( error ) { return error ; } } const contents = await Promise . all ([ readFileAsync ( \"file1\" ), readFileAsync ( \"file2\" ), readFileAsync ( \"file3\" )]); console . log ( contents ); Memory management Concepts and Memory life cycle M\u1ecdi \u1ee9ng d\u1ee5ng \u0111\u1ec1u c\u1ea7n b\u1ed9 nh\u1edb \u0111\u1ec3 ho\u1ea1t \u0111\u1ed9ng b\u00ecnh th\u01b0\u1eddng. Memory management - Qu\u1ea3n l\u00fd b\u1ed9 nh\u1edb l\u00e0 qu\u00e1 tr\u00ecnh ph\u00e2n ph\u1ed1i dynamically c\u00e1c memory chunks cho programs khi ch\u00fang c\u1ea7n v\u00e0 gi\u1ea3i ph\u00f3ng \u0111\u1ec3 th\u1eb1ng kh\u00e1c x\u00e0i khi programs kh\u00f4ng c\u00f2n c\u1ea7n b\u1ed9 nh\u1edb \u0111\u00f3 n\u1eefa. Vi\u1ec7c qu\u1ea3n l\u00fd b\u1ed9 nh\u1edb \u1edf Application-level c\u00f3 th\u1ec3 l\u00e0 th\u1ee7 c\u00f4ng ho\u1eb7c t\u1ef1 \u0111\u1ed9ng. C\u00e1c ng\u00f4n ng\u1eef b\u1eadc th\u1ea5p nh\u01b0 C, qu\u1ea3n l\u00fd b\u1ed9 nh\u1edb th\u1ee7 c\u00f4ng nh\u01b0 malloc() v\u00e0 free() . Vi\u1ec7c qu\u1ea3n l\u00fd b\u1ed9 nh\u1edb th\u1ee7 c\u00f4ng c\u00f3 th\u1ec3 g\u00e2y ra m\u1ed9t s\u1ed1 l\u1ed7i l\u1edbn cho \u1ee9ng d\u1ee5ng, ch\u1eb3ng h\u1ea1n vi\u1ec7c b\u1ed9 nh\u1edb b\u1ecb r\u00f2 r\u1ec9 khi kh\u00f4ng gian b\u1ed9 nh\u1edb \u0111\u00e3 s\u1eed d\u1ee5ng kh\u00f4ng bao gi\u1edd \u0111\u01b0\u1ee3c gi\u1ea3i ph\u00f3ng. Trong JavaScript hay NodeJs \u0111\u1ec1u h\u1ed7 tr\u1ee3 garbage collector - tr\u00ecnh thu gom r\u00e1c, t\u1ef1 \u0111\u1ed9ng c\u1ea5p ph\u00e1t b\u1ed9 nh\u1edb khi c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng \u0111\u01b0\u1ee3c t\u1ea1o v\u00e0 gi\u1ea3i ph\u00f3ng n\u00f3 khi ch\u00fang kh\u00f4ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng n\u1eefa. Memory life cycle : B\u1ea5t k\u1ec3 ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh g\u00ec, Memory life cycle lu\u00f4n gi\u1ed1ng nhau: Ph\u00e2n b\u1ed5 b\u1ed9 nh\u1edb cho process process s\u1eed d\u1ee5ng b\u1ed9 nh\u1edb \u0111\u01b0\u1ee3c c\u1ea5p ph\u00e1t (\u0111\u1ecdc, ghi) Gi\u1ea3i ph\u00f3ng b\u1ed9 nh\u1edb \u0111\u01b0\u1ee3c c\u1ea5p ph\u00e1t khi process kh\u00f4ng c\u1ea7n thi\u1ebft n\u1eefa. Memory management with Garbage Collection Garbage collection : L\u00e0 c\u01a1 ch\u1ebf thu d\u1ecdn v\u00e0 x\u00f3a s\u1ed5 nh\u1eefng object/gi\u00e1 tr\u1ecb kh\u00f4ng c\u00f2n \u0111\u01b0\u1ee3c d\u00f9ng t\u1edbi, tr\u1ea3 l\u1ea1i b\u1ed9 nh\u1edb \u0111\u1ec3 d\u00f9ng cho vi\u1ec7c kh\u00e1c. GC c\u1ee7a V8 l\u00e0 m\u1ed9t Generational Garbage Collector . Trong qu\u00e1 tr\u00ecnh th\u1ef1c thi, c\u00e1c gi\u00e1 tr\u1ecb (bi\u1ebfn, object,...) \u0111\u01b0\u1ee3c t\u1ea1o ra n\u1eb1m trong Memory Heap . V8 chia Memory Heap ra l\u00e0m nhi\u1ec1u khu v\u1ef1c, trong \u0111\u00f3 c\u00f3 hai khu v\u1ef1c ch\u00ednh l\u00e0 new-space - ch\u1ee9a c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng nh\u1ecf, c\u00f3 v\u00f2ng \u0111\u1eddi ng\u1eafn v\u00e0 old-space - ch\u1ee9a c\u00e1c th\u00e0nh ph\u1ea7n s\u1ed1ng dai h\u01a1n, b\u1ef1 h\u01a1n. C\u01a1 ch\u1ebf ho\u1ea1t \u0111\u1ed9ng: Khi ch\u00fang ta khai b\u00e1o m\u1ed9t gi\u00e1 tr\u1ecb m\u1edbi, gi\u00e1 tr\u1ecb n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c c\u1ea5p ph\u00e1t n\u1eb1m r\u1ea3i r\u00e1c trong khu v\u1ef1c new-space , khu v\u1ef1c n\u00e0y c\u00f3 m\u1ed9t k\u00edch th\u01b0\u1edbc nh\u1ea5t \u0111\u1ecbnh, th\u01b0\u1eddng l\u00e0 r\u1ea5t nh\u1ecf (kho\u1ea3ng 1MB \u0111\u1ebfn 8MB, t\u00f9y v\u00e0o c\u00e1ch ho\u1ea1t \u0111\u1ed9ng c\u1ee7a \u1ee9ng d\u1ee5ng). Vi\u1ec7c khai b\u00e1o nh\u01b0 th\u1ebf n\u00e0y t\u1ea1o ra nhi\u1ec1u kho\u1ea3ng tr\u1ed1ng kh\u00f4ng th\u1ec3 s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c trong b\u1ed9 nh\u1edb. Khi new-space \u0111\u1ea7y, th\u00ec thu\u1eadt to\u00e1n scavenge s\u1ebd \u0111\u01b0\u1ee3c k\u00edch ho\u1ea1t \u0111\u1ec3 d\u1ecdn d\u1eb9p c\u00e1c v\u00f9ng nh\u1edb \"ch\u1ebft\", gi\u1ea3i ph\u00f3ng m\u1eb7t b\u1eb1ng, c\u00f3 th\u1ec3 s\u1ebd gom g\u00f3p c\u00e1c v\u00f9ng nh\u1edb r\u1eddi r\u1ea1c l\u1ea1i g\u1ea7n nhau cho h\u1ee3p l\u00fd. V\u00ec new-space r\u1ea5t nh\u1ecf, n\u00ean scavenge \u0111\u01b0\u1ee3c k\u00edch ho\u1ea1t r\u1ea5t th\u01b0\u1eddng xuy\u00ean. Trong qu\u00e1 tri\u1ec3n khai scavenge , n\u1ebfu c\u00e1c v\u00f9ng nh\u1edb n\u00e0o c\u00f2n tr\u1ee5 l\u1ea1i \u0111\u01b0\u1ee3c sau 2 chu k\u1ef3, th\u00ec \u0111\u01b0\u1ee3c \u0111\u01b0a l\u00ean (promote) khu v\u1ef1c old-space , n\u01a1i m\u00e0 c\u00f3 s\u1ee9c ch\u1ee9a l\u00ean \u0111\u1ebfn h\u00e0ng tr\u0103m megabytes, v\u00e0 l\u00e0 n\u01a1i m\u00e0 thu\u1eadt to\u00e1n mark-sweep ho\u1eb7c mark-compact ho\u1ea1t \u0111\u1ed9ng, v\u1edbi chu k\u1ef3 d\u00e0i h\u01a1n, \u00edt th\u01b0\u1eddng xuy\u00ean h\u01a1n. T\u00f3m l\u1ea1i, c\u01a1 ch\u1ebf GC tr\u00ean \u0111\u1ec1u ho\u1ea1t \u0111\u1ed9ng th\u00f4ng qua hai b\u01b0\u1edbc ch\u00ednh l\u00e0: B\u01b0\u1edbc \u0111\u00e1nh d\u1ea5u: thu\u1eadt to\u00e1n s\u1ebd duy\u1ec7t qua t\u1ea5t c\u1ea3 c\u00e1c gi\u00e1 tr\u1ecb c\u00f3 trong khu v\u1ef1c b\u1ed9 nh\u1edb m\u00e0 n\u00f3 qu\u1ea3n l\u00fd, b\u01b0\u1edbc duy\u1ec7t n\u00e0y d\u00f9ng depth-first search , t\u00ecm g\u1eb7p v\u00e0 \u0111\u00e1nh d\u1ea5u. B\u01b0\u1edbc x\u1eed l\u00fd: sau qu\u00e1 tr\u00ecnh duy\u1ec7t, t\u1ea5t c\u1ea3 nh\u1eefng gi\u00e1 tr\u1ecb ch\u01b0a \u0111\u01b0\u1ee3c \u0111\u00e1nh d\u1ea5u, s\u1ebd b\u1ecb coi l\u00e0 \u0111\u00e3 \"ch\u1ebft\", v\u00e0 s\u1ebd b\u1ecb x\u00f3a b\u1ecf, tr\u1ea3 l\u1ea1i b\u1ed9 nh\u1edb tr\u1ed1ng (sweep), ho\u1eb7c gom g\u00f3p l\u1ea1i \u0111\u1ec3 l\u1ea5y l\u1ea1i c\u00e1c kho\u1ea3ng tr\u1ed1ng trong b\u1ed9 nh\u1edb kh\u00f4ng s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c (compact). Avoid Memory leaks L\u00fd do ch\u00ednh c\u1ee7a memory leaks trong c\u00e1c ng\u00f4n ng\u1eef c\u00f3 c\u01a1 ch\u1ebf garbage collection l\u00e0 c\u00e1c c\u00f3 c\u00e1c unwanted references - l\u00e0 m\u1ed9t v\u00f9ng nh\u1edb \u0111\u01b0\u1ee3c tr\u1ecf \u0111\u1ebfn m\u00e0 l\u1ea1i kh\u00f4ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong \u1ee9ng d\u1ee5ng nh\u01b0ng v\u00ec l\u00fd do n\u00e0o \u0111\u00f3 m\u00e0 n\u00f3 v\u1eabn \u0111\u01b0\u1ee3c gi\u1eef l\u1ea1i trong h\u1ec7 th\u1ed1ng. Khi s\u1ed1 l\u01b0\u1ee3ng unwanted references nhi\u1ec1u, free memory kh\u00f4ng \u0111\u1ee7 \u0111\u1ec3 cung c\u1ea5p s\u1ebd d\u1ea5n \u0111\u1ebfn h\u01b0\u1ee3ng t\u01b0\u1ee3ng memory leaks . Trong JS, nh\u1eefng unwanted references n\u00e0y th\u01b0\u1eddng l\u00e0 c\u00e1c variables n\u1eb1m \u0111\u00e2u \u0111\u00f3 trong code v\u00e0 n\u00f3 kh\u00f4ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ebfn nh\u01b0ng l\u1ea1i chi\u1ebfm m\u1ed9t ph\u1ea7n c\u1ee7a b\u1ed9 nh\u1edb. C\u00f3 3 lo\u1ea1i memory leaks trong JS: Global variable : Javascript c\u00f3 m\u1ed9t c\u01a1 ch\u1ebf l\u00e0 \u0111\u1eb7t bi\u1ebfn m\u00e0 kh\u00f4ng c\u1ea7n khai b\u00e1o. V\u00ed d\u1ee5: a = \"value\" ; Khi m\u1ed9t bi\u1ebfn \u0111\u01b0\u1ee3c khai b\u00e1o nh\u01b0 tr\u00ean th\u00ec JS s\u1ebd t\u1ef1 \u0111\u1ed9ng g\u00e1n n\u00f3 v\u00e0o global object (window tr\u00ean browser). N\u1ebfu nh\u01b0 bi\u1ebfn n\u00e0y ch\u1ec9 ho\u1ea1t \u0111\u1ed9ng tr\u00ean ph\u1ea1m vi global scope th\u00ec c\u0169ng kh\u00f4ng c\u00f3 s\u1ef1 kh\u00e1c bi\u1ec7t cho l\u1eafm. Tuy nhi\u00ean, n\u1ebfu n\u00f3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong m\u1ed9t h\u00e0m th\u00ec \u0111\u00f3 l\u1ea1i l\u00e0 chuy\u1ec7n kh\u00e1c. V\u00ed d\u1ee5: function foo (){ bar = \"\u0111\u00e2y l\u00e0 bi\u1ebfn to\u00e0n c\u1ee5c \u1ea9n\" } N\u1ebfu khai b\u00e1o bar trong ph\u1ea1m vi c\u1ee7a h\u00e0m foo() m\u00e0 l\u1ea1i kh\u00f4ng s\u1eed d\u1ee5ng var \u0111\u1ec3 khai b\u00e1o th\u00ec bi\u1ebfn bar s\u1ebd \u0111\u01b0\u1ee3c t\u1ea1o v\u1edbi global scope . Khi \u0111\u00f3 tuy l\u00e0 ch\u1ec9 khi g\u1ecdi h\u00e0m foo() th\u00ec m\u1edbi c\u1ea7n d\u00f9ng t\u1edbi bi\u1ebfn bar , tuy nhi\u00ean l\u00e0 global scope n\u00ean l\u00fac n\u00e0o \u00f4ng bar c\u0169ng chi\u1ebfm 1 ph\u1ea7n b\u1ed9 nh\u1edb, v\u00e0 \u0111\u00e2y l\u00e0 m\u1ed9t v\u00ed d\u1ee5 \u0111i\u1ec3n h\u00ecnh v\u1ec1 memory leaks . Callback v\u00e0 timer b\u1ecb l\u00e3ng qu\u00ean m\u1ed9t v\u00ed d\u1ee5 d\u1eabn \u0111\u1ebfn memory leak khi s\u1eed d\u1ee5ng setInterval var data = getData (); setInterval ( function (){ var node = document . getElementById ( \"Node\" ); if ( node ){ node . innerHTML = JSON . stringify ( someResource )); } }, 1000 ); Timer b\u1ecb treo t\u1ee9c khi timer tham chi\u1ebfu \u0111\u1ebfn c\u00e1c node ho\u1eb7c d\u1eef li\u1ec7u m\u00e0 kh\u00f4ng c\u00f2n \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng n\u1eefa. \u1ede v\u00ed d\u1ee5 tr\u00ean, n\u1ebfu nh\u01b0 node b\u1ecb x\u00f3a \u1edf m\u1ed9t l\u00fac n\u00e0o \u0111\u1ea5y th\u00ec to\u00e0n b\u1ed9 \u0111o\u1ea1n code x\u1eed l\u00fd trong h\u00e0m callback c\u1ee7a interval s\u1ebd kh\u00f4ng c\u1ea7n \u0111\u1ebfn n\u1eefa. Tuy nhi\u00ean, tr\u01b0\u1eddng h\u1ee3p node b\u1ecb x\u00f3a trong khi interval v\u1eabn c\u00f2n ho\u1ea1t \u0111\u1ed9ng th\u00ec c\u00e1c v\u00f9ng nh\u1edb \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong h\u00e0m callback c\u1ee7a interval c\u0169ng kh\u00f4ng \u0111\u01b0\u1ee3c gi\u1ea3i ph\u00f3ng (mu\u1ed1n gi\u1ea3i ph\u00f3ng c\u1ea7n d\u1eebng interval l\u1ea1i). Ti\u1ebfp \u0111\u00f3, c\u00e1c object t\u1eeb b\u00ean ngo\u00e0i m\u00e0 \u0111\u01b0\u1ee3c h\u00e0m callback c\u1ee7a interval tham chi\u1ebfu \u0111\u1ebfn c\u0169ng kh\u00f4ng th\u1ec3 \u0111\u01b0\u1ee3c gi\u1ea3i ph\u00f3ng v\u00ec v\u1eabn c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c g\u1ecdi th\u00f4ng qua h\u00e0m callback kia. Tr\u01b0\u1eddng h\u1ee3p n\u00e0y c\u0169ng d\u1ea5n \u0111\u1ebfn memory leaks . Tham chi\u1ebfu t\u1edbi c\u00e1c DOM \u0111\u00e3 b\u1ecb x\u00f3a Khi c\u1ea7n l\u01b0u DOM v\u00e0o m\u1ed9t s\u1ed1 c\u1ea5u tr\u00fac d\u1eef li\u1ec7u nh\u01b0 m\u1ea3ng ho\u1eb7c object trong JS code \u0111\u1ec3 l\u00e0m m\u1ed9t lo\u1ea1t c\u00e1c t\u00e1c v\u1ee5 n\u00e0o \u0111\u00f3. V\u00ed d\u1ee5 update d\u1eef li\u1ec7u c\u1ee7a m\u1ed9t v\u00e0i DOM element n\u00e0o \u0111\u00f3, ta c\u1ea7n l\u01b0u c\u00e1c element n\u00e0y v\u00e0o m\u1ed9t m\u1ea3ng, object trong JS. N\u1ebfu ta update xong ta x\u00f3a c\u00e1c DOM element c\u0169 \u0111i, khi \u0111\u00f3 node con (element) c\u00f2n tham chi\u1ebfu \u0111\u1ebfn node cha (array, object) n\u00ean n\u00f3 s\u1ebd \u0111\u01b0\u1ee3c GC coi l\u00e0 v\u1eabn \u0111\u01b0\u1ee3c tham chi\u1ebfu v\u00e0 b\u1ecf qua n\u00f3, t\u1eeb \u0111\u00f3 c\u00f3 th\u1ec3 d\u1eabn \u0111\u1ebfn memory leaks . N\u00ean c\u1ea9n th\u1eadn khi tham chi\u1ebfu \u0111\u1ebfn c\u00e1c DOM. Closures Closures l\u00e0 h\u00e0m n\u1eb1m trong scope c\u1ee7a m\u1ed9t h\u00e0m kh\u00e1c c\u00f3 th\u1ec3 tham chi\u1ebfu t\u1edbi c\u00e1c bi\u1ebfn c\u1ee7a h\u00e0m bao n\u00f3. Khi m\u1ed9t scope \u0111\u01b0\u1ee3c t\u1ea1o ra cho c\u00e1c closures m\u00e0 c\u00f3 c\u00f9ng scope cha, ch\u00fang s\u1ebd c\u00f9ng chia s\u1ebb scope \u0111\u00f3. M\u1eb7c d\u00f9 scope con kh\u00f4ng \u0111\u01b0\u1ee3c g\u1ecdi \u0111\u1ebfn nh\u01b0ng v\u00ec n\u00f3 c\u00f3 tham chi\u1ebfu \u0111\u1ebfn scope cha n\u00ean n\u00f3 s\u1ebd \u0111\u01b0\u1ee3c GC coi l\u00e0 v\u1eabn \u0111ang ho\u1ea1t \u0111\u1ed9ng, t\u1eeb \u0111\u00f3 c\u00f3 th\u1ec3 d\u1eabn \u0111\u1ebfn memory leaks . Reference program-process-and-thread Difference between Process and Thread Error handling in Nodejs Synchronous vs. Asynchronous Programming Node Hero \u2013 Understanding Async Programming in Node.js Memory Management Glossary 4 Types of Memory Leaks in JavaScript and How to Get Rid Of Them Memory Management","title":"Programming"},{"location":"Web-Technologies/4.Programming/#programming","text":"Processes and threads Error handling Async programming Memory management","title":"Programming"},{"location":"Web-Technologies/4.Programming/#processes-and-threads","text":"","title":"Processes and threads"},{"location":"Web-Technologies/4.Programming/#concepts","text":"program : t\u1ed3n t\u1ea1i trong b\u1ed9 nh\u1edb ho\u1eb7c \u1edf tr\u1ea1ng th\u00e1i ngh\u1ec9, program c\u00f3 th\u1ec3 l\u00e0 m\u1ed9t t\u1eadp l\u1ec7nh d\u1ef1a tr\u00ean v\u0103n b\u1ea3n (t\u1ec7p DOS, t\u1eadp l\u1ec7nh Windows Powershell, t\u1eadp l\u1ec7nh bash shell, Javascript, v.v.) ho\u1eb7c t\u1eadp l\u1ec7nh th\u1ef1c thi d\u1ef1a tr\u00ean nh\u1ecb ph\u00e2n (.exe). process : L\u00e0 m\u1ed9t program \u0111\u01b0\u1ee3c n\u1ea1p v\u00e0o b\u1ed9 nh\u1edb \u0111\u1ec3 b\u1ed9 x\u1eed l\u00fd, th\u1ef1c thi. ( loaded into the memory to be executed by the processor. ) thread : L\u00e0 \u0111\u01a1n v\u1ecb th\u1ef1c thi t\u1ed1i thi\u1ec3u c\u1ee7a c\u00e1c \u0111o\u1ea1n m\u00e3 do h\u1ec7 \u0111i\u1ec1u h\u00e0nh qu\u1ea3n l\u00fd. Trong h\u1ec7 \u0111i\u1ec1u h\u00e0nh, m\u1ed9t process c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c chia th\u00e0nh c\u00e1c thread .","title":"Concepts"},{"location":"Web-Technologies/4.Programming/#process-vs-thread","text":"Comparison Basis Process Thread Definition L\u00e0 m\u1ed9t program \u0111ang \u0111\u01b0\u1ee3c th\u1ef1c thi L\u00e0 m\u1ed9t process \u0111\u01b0\u1ee3c chia nh\u1ecf, c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c qu\u1ea3n l\u00fd \u0111\u1ed9c l\u1eadp b\u1edfi schedular Context switching time \u0110\u00f2i h\u1ecfi nhi\u1ec1u th\u1eddi gian h\u01a1n \u0111\u1ec3 chuy\u1ec3n \u0111\u1ed5i context v\u00ec ch\u00fang n\u1eb7ng h\u01a1n Y\u00eau c\u1ea7u \u00edt th\u1eddi gian h\u01a1n \u0111\u1ec3 chuy\u1ec3n \u0111\u1ed5i context v\u00ec ch\u00fang nh\u1eb9 h\u01a1n Memory Sharing Ho\u00e0n to\u00e0n \u0111\u1ed9c l\u1eadp v\u00e0 kh\u00f4ng chia s\u1ebb b\u1ed9 nh\u1edb C\u00f3 th\u1ec3 chia s\u1ebb m\u1ed9t s\u1ed1 b\u1ed9 nh\u1edb v\u1edbi c\u00e1c thread ngang h\u00e0ng c\u1ee7a n\u00f3. Communication \u0110\u00f2i h\u1ecfi nhi\u1ec1u th\u1eddi gian h\u01a1n Y\u00eau c\u1ea7u \u00edt th\u1eddi gian h\u01a1n Blocked Trong m\u1ed9t nh\u00f3m process ngang c\u1ea5p, n\u1ebfu m\u1ed9t process b\u1ecb block, c\u00e1c process c\u00f2n l\u1ea1i c\u00f3 th\u1ec3 ti\u1ebfp t\u1ee5c th\u1ef1c thi. N\u1ebfu m\u1ed9t thread b\u1ecb block, t\u1ea5t c\u1ea3 c\u00e1c thread ngang h\u00e0ng c\u1ee7a n\u00f3 c\u0169ng b\u1ecb block. Resource Consumption Y\u00eau c\u1ea7u nhi\u1ec1u t\u00e0i nguy\u00ean h\u01a1n C\u1ea7n \u00edt t\u00e0i nguy\u00ean h\u01a1n Dependency C\u00e1c process \u0111\u1ed9c l\u1eadp v\u1edbi nhau thread l\u00e0 c\u00e1c ph\u1ea7n c\u1ee7a m\u1ed9t process v\u00e0 do \u0111\u00f3 ch\u00fang ph\u1ee5 thu\u1ed9c v\u00e0o process Data and Code sharing C\u00f3 data v\u00e0 code segment \u0111\u1ed9c l\u1eadp M\u1ed9t thread chia s\u1ebb data segment, code segment, file, v.v... v\u1edbi c\u00e1c thread ngang h\u00e0ng Treatment by OS T\u1ea5t c\u1ea3 c\u00e1c process kh\u00e1c nhau \u0111\u01b0\u1ee3c h\u1ec7 \u0111i\u1ec1u h\u00e0nh x\u1eed l\u00fd ri\u00eang bi\u1ec7t. T\u1ea5t c\u1ea3 c\u00e1c thread ngang h\u00e0ng nhau \u0111\u01b0\u1ee3c h\u1ec7 \u0111i\u1ec1u h\u00e0nh coi nh\u01b0 m\u1ed9t t\u00e1c v\u1ee5 duy nh\u1ea5t. Time for creation T\u1ea1o t\u1ed1n nhi\u1ec1u th\u1eddi gian h\u01a1n T\u1ea1o t\u1ed1n \u00edt th\u1eddi gian h\u01a1n Time for termination C\u1ea7n nhi\u1ec1u th\u1eddi gian h\u01a1n \u0111\u1ec3 k\u1ebft th\u00fac C\u1ea7n \u00edt th\u1eddi gian h\u01a1n \u0111\u1ec3 k\u1ebft th\u00fac","title":"Process vs. Thread"},{"location":"Web-Technologies/4.Programming/#error-handling","text":"","title":"Error handling"},{"location":"Web-Technologies/4.Programming/#concepts_1","text":"Khi m\u1ed9t process th\u1ef1c thi b\u1ecb th\u1ea5t b\u1ea1i th\u00ec program s\u1ebd b\u1ecb error . V\u00e0 qu\u00e1 tr\u00ecnh \u0111i t\u1eeb d\u1ef1 \u0111o\u00e1n, ph\u00e1t hi\u1ec7n v\u00e0 gi\u1ea3i quy\u1ebft c\u00e1c error n\u00e0y, gi\u00fap cho c\u00e1c process th\u1ef1c thi th\u00e0nh c\u00f4ng \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 Error handling . Qu\u00e1 tr\u00ecnh Error handling bao g\u1ed3m ph\u1ea7n c\u1ee9ng v\u00e0 ph\u1ea7n m\u1ec1m. Vi\u1ec7c x\u1eed l\u00fd l\u1ed7i th\u01b0\u1eddng \u0111\u01b0\u1ee3c ph\u00e1t hi\u1ec7n b\u1eb1ng vi\u1ec7c tr\u1ea3 v\u1ec1 c\u00e1c Error code ho\u1eb7c c\u00e1c Error message c\u1ee5 th\u1ec3. Trong qu\u00e1 tr\u00ecnh Runtime c\u1ee7a program , c\u00f3 th\u1ec3 x\u1ea3y ra t\u00ecnh tr\u1ea1ng l\u1ed7i qua c\u00e1c exception events , d\u1eabn t\u1edbi error : d\u1eef li\u1ec7u kh\u00f4ng h\u1ee3p l\u1ec7, kh\u00f4ng t\u00ecm th\u1ea5y file, tr\u00e0n b\u1ed9 nh\u1edb v.v. V\u00e0 \u0111\u1ec3 x\u1eed l\u00fd t\u00ecnh tr\u1ea1ng n\u00e0y, ng\u01b0\u1eddi ta d\u00f9ng k\u1ef9 thu\u1eadt Exception Handling - m\u1ed9t k\u1ef9 thu\u1eadt x\u1eed l\u00fd c\u00e1c Runtime Error , Exception Events . K\u1ef9 thu\u1eadt n\u00e0y gi\u00fap duy tr\u00ec c\u00e1c process ch\u1ea1y theo \u0111\u00fang ngh\u0129a c\u1ee7a n\u00f3, n\u1ebfu c\u00f3 l\u1ed7i th\u00ec s\u1ebd catch c\u00e1c Error code ho\u1eb7c c\u00e1c Error message c\u1ee5 th\u1ec3.","title":"Concepts"},{"location":"Web-Technologies/4.Programming/#error-handling-in-nodejs","text":"Errors in Node.js are handled through exceptions. M\u1ed9t exception \u0111\u01b0\u1ee3c t\u1ea1o b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng t\u1eeb kh\u00f3a throw : throw value Sau khi JavaScript th\u1ef1c thi d\u00f2ng n\u00e0y, ch\u01b0\u01a1ng tr\u00ecnh t\u1ea1m d\u1eebng v\u00e0 l\u1ed7i \u0111\u01b0\u1ee3c g\u1eedi t\u1edbi exception handler - m\u1ed9t c\u00e2u l\u1ec7nh try/catch : try { //lines of code } catch ( e ) {} Trong Node.js, kh\u00f4ng throw strings , m\u00e0 l\u00e0 throw Error objects : throw new Error ( 'Ran out of coffee' ) ho\u1eb7c class NotEnoughCoffeeError extends Error { //... } throw new NotEnoughCoffeeError () Error handling trong NodeJS v\u1edbi async/await : async function someFunction () { try { await someOtherFunction () } catch ( err ) { console . error ( err . message ) } }","title":"Error handling in Nodejs"},{"location":"Web-Technologies/4.Programming/#async-programming","text":"","title":"Async programming"},{"location":"Web-Technologies/4.Programming/#concepts_2","text":"Javascript Engine : V8 Javascript Engine - optimized version, bao g\u1ed3m hai th\u00e0nh ph\u1ea7n ch\u00ednh: Call Stack : stack ch\u1ee9a c\u00e1c l\u1eddi g\u1ecdi h\u00e0m khi code \u0111\u01b0\u1ee3c th\u1ef1c thi. Memory Heap : C\u1ea5p ph\u00e1t b\u1ed9 nh\u1edb cho c\u00e1c process Event Loop v\u00e0 Callback Queue : B\u00ean c\u1ea1nh Javascript Engine , browser c\u00f2n cung c\u1ea5p c\u00e1c Node APIs , m\u1ed9t Event Loop v\u00e0 m\u1ed9t Callback Queue . Ch\u00fang ch\u1ea1y tr\u00ean c\u00e1c thread ri\u00eang v\u00e0 \u0111\u01b0\u1ee3c browser ki\u1ec3m so\u00e1t \u0111\u1ed3ng th\u1eddi ( concurrency ). C\u00e1c h\u00e0m async callback s\u1ebd \u0111\u01b0\u1ee3c th\u00eam v\u00e0o Callback Queue . Nhi\u1ec7m v\u1ee5 c\u1ee7a Event Loop l\u00e0 \u0111\u1ee3i \u0111\u1ebfn khi Call Stack r\u1ed7ng, v\u00e0 quay l\u1ea1i ki\u1ec3m tra trong Callback Queue c\u00f3 g\u00ec kh\u00f4ng, n\u1ebfu c\u00f3 th\u00ec l\u1ea5y l\u1ea7n l\u01b0\u1ee3t ch\u00fang \u0111\u1ea9y v\u00e0o trong Call Stack \u0111\u1ec3 ch\u1ea1y ti\u1ebfp. Asynchronous programming : V\u1ec1 b\u1ea3n ch\u1ea5t, n\u00f3 th\u1ef1c hi\u1ec7n c\u00e1c request \u0111\u1ed3ng th\u1eddi, ngay c\u1ea3 khi ch\u00fang \u1edf c\u00e1c ch\u1ee9c n\u0103ng kh\u00e1c nhau. M\u1ed9t single thread s\u1ebd \u0111\u01b0\u1ee3c handle multiple-requests trong event-loop . V\u00ec v\u1eady, vi\u1ec7c m\u1ed9t request b\u1ecb reject s\u1ebd kh\u00f4ng \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn request kh\u00e1c.NodeJS cho ph\u00e9p th\u1ef1c hi\u1ec7n l\u1eadp tr\u00ecnh b\u1ea5t \u0111\u1ed3ng b\u1ed9. Khi b\u1ea5t \u0111\u1ed3ng b\u1ed9 th\u1ef1c thi t\u1ea5t c\u1ea3 d\u00f2ng code c\u00f9ng m\u1ed9t l\u00fac. Synchronous programming : T\u1ea3i t\u00e0i nguy\u00ean m\u1ed9t c\u00e1ch \u0111\u01a1n l\u1ebb v\u00e0 tu\u1ea7n t\u1ef1, nh\u01b0 v\u1eady khi 1 t\u00e0i nguy\u00ean trong h\u1ec7 th\u1ed1ng c\u00f3 ph\u00e2n c\u1ea5p kh\u00f4ng t\u1ea3i \u0111\u01b0\u1ee3c, th\u00ec nh\u1eefng t\u00e0i nguy\u00ean b\u00ean d\u01b0\u1edbi n\u00f3 s\u1ebd kh\u00f4ng t\u1ea3i \u0111\u01b0\u1ee3c lu\u00f4n. V\u1edbi NodeJS, \u1edf ch\u1ebf \u0111\u1ed9 \u0111\u1ed3ng b\u1ed9 th\u1ef1c thi t\u1eebng d\u00f2ng v\u00e0 ti\u1ebfn h\u00e0nh th\u1ef1c thi d\u00f2ng ti\u1ebfp theo khi d\u00f2ng hi\u1ec7n t\u1ea1i \u0111\u00e3 th\u1ef1c thi xong.","title":"Concepts"},{"location":"Web-Technologies/4.Programming/#synchronous-vs-asynchronous-programming","text":"Synchronous T\u1ea3i t\u00e0i nguy\u00ean m\u1ed9t c\u00e1ch \u0111\u01a1n l\u1ebb v\u00e0 tu\u1ea7n t\u1ef1, khi m\u1ed9t t\u00e0i nguy\u00ean trong h\u1ec7 th\u1ed1ng c\u00f3 ph\u00e2n c\u1ea5p kh\u00f4ng t\u1ea3i \u0111\u01b0\u1ee3c, th\u00ec nh\u1eefng t\u00e0i nguy\u00ean b\u00ean d\u01b0\u1edbi n\u00f3 s\u1ebd kh\u00f4ng response. C\u00e1c request s\u1ebd \u0111\u01b0\u1ee3c ho\u1ea1t \u0111\u1ed9ng \u0111\u1ed3ng b\u1ed9 v\u1edbi giao th\u1ee9c \u0111a lu\u1ed3ng. M\u1ed7i thread s\u1ebd x\u1eed l\u00fd 1 request ri\u00eang bi\u1ec7t, \u0111\u1ed9c l\u1eadp. V\u00ec v\u1eady, m\u1ed7i thread s\u1ebd c\u00f3 1 kho\u1ea3ng th\u1eddi gian execution v\u00e0 loads completely tr\u01b0\u1edbc khi th\u1ef1c hi\u1ec7n event ti\u1ebfp theo. Do \u0111\u00f3, vi\u1ec7c execution v\u00e0 loads completely trong m\u1ed9t thread s\u1ebd block c\u00e1c thread kh\u00e1c, c\u00e1c thread kh\u00e1c ph\u1ea3i \u0111\u1ee3i thread tr\u01b0\u1edbc n\u00f3 done r\u1ed3i m\u1edbi t\u1edbi l\u01b0\u1ee3t execution v\u00e0 loads completely . L\u1eadp tr\u00ecnh \u0111\u1ed3ng b\u1ed9 \u0111\u1ea3m b\u1ea3o r\u1eb1ng ph\u00eda client s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c response t\u1eeb request \u0111\u1ea7u ti\u00ean tr\u01b0\u1edbc khi th\u1ef1c hi\u1ec7n request ti\u1ebfp theo (FIFS). \u0110i\u1ec1u n\u00e0y c\u00f3 th\u1ec3 d\u1eabn \u0111\u1ebfn s\u1ef1 ch\u1eadm tr\u1ec5 kh\u00f4ng c\u1ea7n thi\u1ebft v\u00e0 \u1ea3nh h\u01b0\u1edfng x\u1ea5u \u0111\u1ebfn UX. Asynchronous Trong Asynchronous Programming, m\u1ed9t apps s\u1ebd serve c\u00e1c request v\u00e0 response b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng giao th\u1ee9c non-blocking I/O. Kh\u00e1c v\u1edbi l\u1eadp tr\u00ecnh \u0111\u1ed3ng b\u1ed9, m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh kh\u00f4ng \u0111\u1ed3ng b\u1ed9 kh\u00f4ng th\u1ef1c hi\u1ec7n c\u00e1c actions m\u1ed9t c\u00e1ch tu\u1ea7n t\u1ef1, th\u1ee9 b\u1eadc. V\u00ec v\u1eady, ch\u01b0\u01a1ng tr\u00ecnh s\u1ebd kh\u00f4ng \u0111\u1ee3i th\u1ef1c hi\u1ec7n m\u1ed9t request tr\u01b0\u1edbc khi tr\u1ea3 l\u1eddi m\u1ed9t request kh\u00e1c. V\u1ec1 b\u1ea3n ch\u1ea5t, n\u00f3 th\u1ef1c hi\u1ec7n c\u00e1c request \u0111\u1ed3ng th\u1eddi, ngay c\u1ea3 khi ch\u00fang \u1edf c\u00e1c ch\u1ee9c n\u0103ng kh\u00e1c nhau. T\u1eeb \u0111\u00f3 mang l\u1ea1i hi\u1ec7u qu\u1ea3 l\u00e0 m\u1ed9t \u1ee9ng d\u1ee5ng \u0111\u01b0\u1ee3c ph\u00e1t tri\u1ec3n b\u1eb1ng Asynchronous Programming s\u1ebd ch\u1ec9 t\u1ea3i to\u00e0n b\u1ed9 n\u1ed9i dung c\u1ee7a n\u00f3 m\u1ed9t l\u1ea7n. M\u1ed9t single thread x\u1eed l\u00fd nhi\u1ec1u request trong m\u1ed9t event loop . V\u00ec v\u1eady, vi\u1ec7c m\u1ed9t request kh\u00f4ng th\u00e0nh c\u00f4ng s\u1ebd kh\u00f4ng \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn request kia. V\u00ec asynchronous loading theo ki\u1ec3u non-blocking, n\u00ean c\u00e1c \u1ee9ng d\u1ee5ng web ho\u1ea1t \u0111\u1ed9ng theo nguy\u00ean t\u1eafc n\u00e0y c\u00f3 th\u1ec3 tr\u1edf th\u00e0nh c\u00e1c single-page applications.","title":"Synchronous vs. Asynchronous Programming"},{"location":"Web-Technologies/4.Programming/#asynchronous-programming-in-nodejs","text":"M\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh \u0111\u01b0\u1ee3c th\u1ef1c thi b\u1ea5t \u0111\u1ed3ng b\u1ed9 \u0111em l\u1ea1i tr\u1ea3i nghi\u1ec7m, t\u1ed1c \u0111\u1ed9 x\u1eed l\u00fd t\u1ed1t h\u01a1n, tuy nhi\u00ean ch\u00ednh v\u00ec s\u1ef1 b\u1ea5t nguy\u00ean t\u1eafc, kh\u00f4ng c\u00f3 th\u1ee9 t\u1ef1 th\u1ef1c hi\u1ec7n nh\u01b0 v\u1eady n\u00ean vi\u1ec7c qu\u1ea3n l\u00fd c\u00e1c ti\u1ebfn tr\u00ecnh tr\u1edf n\u00ean ph\u1ee9c t\u1ea1p v\u00e0 kh\u00f3 kh\u0103n h\u01a1n, x\u00e9t v\u00ed d\u1ee5 d\u01b0\u1edbi \u0111\u00e2y: const fs = require ( 'fs' ); let content ; try { content = fs . readFileSync ( 'file.md' , 'utf-8' ); } catch ( err ) { console . log ( err ); } console . log ( content ); V\u1ea5n \u0111\u1ec1 \u1edf \u0111\u00e2y l\u00e0 c\u00e1c thread s\u1ebd b\u1ecb block khi fs.readFileSync() \u0111ang th\u1ef1c thi, th\u1ef1c thi xong th\u00ec m\u1edbi ch\u1ea1y t\u1edbi c\u00e1c thread kh\u00e1c, t\u1ed1n perfomance, th\u1eddi gian. VD n\u1ebfu c\u00f3 l\u1ed7i trong qu\u00e1 tr\u00ecnh \u0111\u1ecdc file, ph\u1ea3i \u0111\u1ee3i \u0111\u1ebfn khi \u0111\u1ecdc file xong m\u1edbi log ra \u0111\u01b0\u1ee3c l\u1ed7i. C\u00e1ch gi\u1ea3i quy\u1ebft \u1edf \u0111\u00e2y l\u00e0 s\u1eed d\u1ee5ng callback truy\u1ec1n v\u00e0o fs.readFileSync() : const fs = require ( 'fs' ); console . log ( 'start reading a file...' ); fs . readFile ( 'file.md' , 'utf-8' , function ( err , content ) { if ( err ) { console . log ( 'error happened during reading the file' ) return console . log ( err ) } console . log ( content ) }); console . log ( 'end of the file' ); V\u1edbi v\u00ed d\u1ee5 n\u00e0y, Ta c\u00f3 th\u1ec3 d\u00f9ng Promise \u0111\u1ec3 \u0111\u1ecdc nhi\u1ec1u file: const fs = require ( 'fs' ); function readMultipleFile ( file ) { return new Promise (( resolve , reject ) => { fs . readFile ( file , ( err , content ) => { if ( err ) { return reject ( err ); } resolve ( content ); }); }); } Promise . all ([ readMultipleFile ( \"file1\" ), readFile ( \"file2\" ), readFile ( \"file3\" )]) . then (( content ) => console . log ( content )) . catch (( content ) => console . log ( content )); Vi\u1ec7c d\u00f9ng callback hay Promise nh\u01b0 tr\u00ean c\u00f3 th\u1ec3 d\u1eabn t\u1edbi hi\u1ec7n t\u01b0\u1ee3ng callback hell v\u00e0 Promise chain . V\u00e0 t\u00ednh n\u0103ng Async/Await trong Javascript ra \u0111\u1eddi \u0111\u1ec3 gi\u1ea3i quy\u1ebft t\u00ecnh tr\u1ea1ng tr\u00ean, gi\u00fap ch\u00fang ta l\u00e0m vi\u1ec7c v\u1edbi c\u00e1c h\u00e0m b\u1ea5t \u0111\u1ed3ng b\u1ed9 ng\u1eafn g\u1ecdn v\u00e0 d\u1ec5 hi\u1ec3u h\u01a1n. Async/Await \u0111\u01b0\u1ee3c x\u00e2y d\u1ef1ng tr\u00ean Promise v\u00e0 t\u01b0\u01a1ng th\u00edch v\u1edbi t\u1ea5t c\u1ea3 c\u00e1c Promise d\u1ef1a tr\u00ean API, trong \u0111\u00f3: Async - khai b\u00e1o m\u1ed9t h\u00e0m b\u1ea5t \u0111\u1ed3ng b\u1ed9 ki\u1ec3u async function someName (){...}) T\u1ef1 \u0111\u1ed9ng bi\u1ebfn \u0111\u1ed5i m\u1ed9t h\u00e0m th\u00f4ng th\u01b0\u1eddng th\u00e0nh m\u1ed9t Promise . Khi g\u1ecdi t\u1edbi h\u00e0m async n\u00f3 s\u1ebd x\u1eed l\u00fd m\u1ecdi th\u1ee9 v\u00e0 \u0111\u01b0\u1ee3c tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3 trong h\u00e0m c\u1ee7a n\u00f3. Async cho ph\u00e9p s\u1eed d\u1ee5ng Await . Await - t\u1ea1m d\u1eebng vi\u1ec7c th\u1ef1c hi\u1ec7n c\u00e1c h\u00e0m async. const result = await someAsyncCall (){...} Khi \u0111\u01b0\u1ee3c \u0111\u1eb7t tr\u01b0\u1edbc m\u1ed9t Promise , n\u00f3 s\u1ebd \u0111\u1ee3i cho \u0111\u1ebfn khi Promise k\u1ebft th\u00fac v\u00e0 tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3. Await ch\u1ec9 l\u00e0m vi\u1ec7c v\u1edbi Promise , n\u00f3 kh\u00f4ng ho\u1ea1t \u0111\u1ed9ng v\u1edbi callback . Await ch\u1ec9 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng b\u00ean trong c\u00e1c function async . const fs = require ( 'fs' ); const readFileAsync = async function ( file ){ try { let content = await fs . readFile ( file ); return content ; } catch ( error ) { return error ; } } const contents = await Promise . all ([ readFileAsync ( \"file1\" ), readFileAsync ( \"file2\" ), readFileAsync ( \"file3\" )]); console . log ( contents );","title":"Asynchronous programming in NodeJs"},{"location":"Web-Technologies/4.Programming/#memory-management","text":"","title":"Memory management"},{"location":"Web-Technologies/4.Programming/#concepts-and-memory-life-cycle","text":"M\u1ecdi \u1ee9ng d\u1ee5ng \u0111\u1ec1u c\u1ea7n b\u1ed9 nh\u1edb \u0111\u1ec3 ho\u1ea1t \u0111\u1ed9ng b\u00ecnh th\u01b0\u1eddng. Memory management - Qu\u1ea3n l\u00fd b\u1ed9 nh\u1edb l\u00e0 qu\u00e1 tr\u00ecnh ph\u00e2n ph\u1ed1i dynamically c\u00e1c memory chunks cho programs khi ch\u00fang c\u1ea7n v\u00e0 gi\u1ea3i ph\u00f3ng \u0111\u1ec3 th\u1eb1ng kh\u00e1c x\u00e0i khi programs kh\u00f4ng c\u00f2n c\u1ea7n b\u1ed9 nh\u1edb \u0111\u00f3 n\u1eefa. Vi\u1ec7c qu\u1ea3n l\u00fd b\u1ed9 nh\u1edb \u1edf Application-level c\u00f3 th\u1ec3 l\u00e0 th\u1ee7 c\u00f4ng ho\u1eb7c t\u1ef1 \u0111\u1ed9ng. C\u00e1c ng\u00f4n ng\u1eef b\u1eadc th\u1ea5p nh\u01b0 C, qu\u1ea3n l\u00fd b\u1ed9 nh\u1edb th\u1ee7 c\u00f4ng nh\u01b0 malloc() v\u00e0 free() . Vi\u1ec7c qu\u1ea3n l\u00fd b\u1ed9 nh\u1edb th\u1ee7 c\u00f4ng c\u00f3 th\u1ec3 g\u00e2y ra m\u1ed9t s\u1ed1 l\u1ed7i l\u1edbn cho \u1ee9ng d\u1ee5ng, ch\u1eb3ng h\u1ea1n vi\u1ec7c b\u1ed9 nh\u1edb b\u1ecb r\u00f2 r\u1ec9 khi kh\u00f4ng gian b\u1ed9 nh\u1edb \u0111\u00e3 s\u1eed d\u1ee5ng kh\u00f4ng bao gi\u1edd \u0111\u01b0\u1ee3c gi\u1ea3i ph\u00f3ng. Trong JavaScript hay NodeJs \u0111\u1ec1u h\u1ed7 tr\u1ee3 garbage collector - tr\u00ecnh thu gom r\u00e1c, t\u1ef1 \u0111\u1ed9ng c\u1ea5p ph\u00e1t b\u1ed9 nh\u1edb khi c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng \u0111\u01b0\u1ee3c t\u1ea1o v\u00e0 gi\u1ea3i ph\u00f3ng n\u00f3 khi ch\u00fang kh\u00f4ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng n\u1eefa. Memory life cycle : B\u1ea5t k\u1ec3 ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh g\u00ec, Memory life cycle lu\u00f4n gi\u1ed1ng nhau: Ph\u00e2n b\u1ed5 b\u1ed9 nh\u1edb cho process process s\u1eed d\u1ee5ng b\u1ed9 nh\u1edb \u0111\u01b0\u1ee3c c\u1ea5p ph\u00e1t (\u0111\u1ecdc, ghi) Gi\u1ea3i ph\u00f3ng b\u1ed9 nh\u1edb \u0111\u01b0\u1ee3c c\u1ea5p ph\u00e1t khi process kh\u00f4ng c\u1ea7n thi\u1ebft n\u1eefa.","title":"Concepts and Memory life cycle"},{"location":"Web-Technologies/4.Programming/#memory-management-with-garbage-collection","text":"Garbage collection : L\u00e0 c\u01a1 ch\u1ebf thu d\u1ecdn v\u00e0 x\u00f3a s\u1ed5 nh\u1eefng object/gi\u00e1 tr\u1ecb kh\u00f4ng c\u00f2n \u0111\u01b0\u1ee3c d\u00f9ng t\u1edbi, tr\u1ea3 l\u1ea1i b\u1ed9 nh\u1edb \u0111\u1ec3 d\u00f9ng cho vi\u1ec7c kh\u00e1c. GC c\u1ee7a V8 l\u00e0 m\u1ed9t Generational Garbage Collector . Trong qu\u00e1 tr\u00ecnh th\u1ef1c thi, c\u00e1c gi\u00e1 tr\u1ecb (bi\u1ebfn, object,...) \u0111\u01b0\u1ee3c t\u1ea1o ra n\u1eb1m trong Memory Heap . V8 chia Memory Heap ra l\u00e0m nhi\u1ec1u khu v\u1ef1c, trong \u0111\u00f3 c\u00f3 hai khu v\u1ef1c ch\u00ednh l\u00e0 new-space - ch\u1ee9a c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng nh\u1ecf, c\u00f3 v\u00f2ng \u0111\u1eddi ng\u1eafn v\u00e0 old-space - ch\u1ee9a c\u00e1c th\u00e0nh ph\u1ea7n s\u1ed1ng dai h\u01a1n, b\u1ef1 h\u01a1n. C\u01a1 ch\u1ebf ho\u1ea1t \u0111\u1ed9ng: Khi ch\u00fang ta khai b\u00e1o m\u1ed9t gi\u00e1 tr\u1ecb m\u1edbi, gi\u00e1 tr\u1ecb n\u00e0y s\u1ebd \u0111\u01b0\u1ee3c c\u1ea5p ph\u00e1t n\u1eb1m r\u1ea3i r\u00e1c trong khu v\u1ef1c new-space , khu v\u1ef1c n\u00e0y c\u00f3 m\u1ed9t k\u00edch th\u01b0\u1edbc nh\u1ea5t \u0111\u1ecbnh, th\u01b0\u1eddng l\u00e0 r\u1ea5t nh\u1ecf (kho\u1ea3ng 1MB \u0111\u1ebfn 8MB, t\u00f9y v\u00e0o c\u00e1ch ho\u1ea1t \u0111\u1ed9ng c\u1ee7a \u1ee9ng d\u1ee5ng). Vi\u1ec7c khai b\u00e1o nh\u01b0 th\u1ebf n\u00e0y t\u1ea1o ra nhi\u1ec1u kho\u1ea3ng tr\u1ed1ng kh\u00f4ng th\u1ec3 s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c trong b\u1ed9 nh\u1edb. Khi new-space \u0111\u1ea7y, th\u00ec thu\u1eadt to\u00e1n scavenge s\u1ebd \u0111\u01b0\u1ee3c k\u00edch ho\u1ea1t \u0111\u1ec3 d\u1ecdn d\u1eb9p c\u00e1c v\u00f9ng nh\u1edb \"ch\u1ebft\", gi\u1ea3i ph\u00f3ng m\u1eb7t b\u1eb1ng, c\u00f3 th\u1ec3 s\u1ebd gom g\u00f3p c\u00e1c v\u00f9ng nh\u1edb r\u1eddi r\u1ea1c l\u1ea1i g\u1ea7n nhau cho h\u1ee3p l\u00fd. V\u00ec new-space r\u1ea5t nh\u1ecf, n\u00ean scavenge \u0111\u01b0\u1ee3c k\u00edch ho\u1ea1t r\u1ea5t th\u01b0\u1eddng xuy\u00ean. Trong qu\u00e1 tri\u1ec3n khai scavenge , n\u1ebfu c\u00e1c v\u00f9ng nh\u1edb n\u00e0o c\u00f2n tr\u1ee5 l\u1ea1i \u0111\u01b0\u1ee3c sau 2 chu k\u1ef3, th\u00ec \u0111\u01b0\u1ee3c \u0111\u01b0a l\u00ean (promote) khu v\u1ef1c old-space , n\u01a1i m\u00e0 c\u00f3 s\u1ee9c ch\u1ee9a l\u00ean \u0111\u1ebfn h\u00e0ng tr\u0103m megabytes, v\u00e0 l\u00e0 n\u01a1i m\u00e0 thu\u1eadt to\u00e1n mark-sweep ho\u1eb7c mark-compact ho\u1ea1t \u0111\u1ed9ng, v\u1edbi chu k\u1ef3 d\u00e0i h\u01a1n, \u00edt th\u01b0\u1eddng xuy\u00ean h\u01a1n. T\u00f3m l\u1ea1i, c\u01a1 ch\u1ebf GC tr\u00ean \u0111\u1ec1u ho\u1ea1t \u0111\u1ed9ng th\u00f4ng qua hai b\u01b0\u1edbc ch\u00ednh l\u00e0: B\u01b0\u1edbc \u0111\u00e1nh d\u1ea5u: thu\u1eadt to\u00e1n s\u1ebd duy\u1ec7t qua t\u1ea5t c\u1ea3 c\u00e1c gi\u00e1 tr\u1ecb c\u00f3 trong khu v\u1ef1c b\u1ed9 nh\u1edb m\u00e0 n\u00f3 qu\u1ea3n l\u00fd, b\u01b0\u1edbc duy\u1ec7t n\u00e0y d\u00f9ng depth-first search , t\u00ecm g\u1eb7p v\u00e0 \u0111\u00e1nh d\u1ea5u. B\u01b0\u1edbc x\u1eed l\u00fd: sau qu\u00e1 tr\u00ecnh duy\u1ec7t, t\u1ea5t c\u1ea3 nh\u1eefng gi\u00e1 tr\u1ecb ch\u01b0a \u0111\u01b0\u1ee3c \u0111\u00e1nh d\u1ea5u, s\u1ebd b\u1ecb coi l\u00e0 \u0111\u00e3 \"ch\u1ebft\", v\u00e0 s\u1ebd b\u1ecb x\u00f3a b\u1ecf, tr\u1ea3 l\u1ea1i b\u1ed9 nh\u1edb tr\u1ed1ng (sweep), ho\u1eb7c gom g\u00f3p l\u1ea1i \u0111\u1ec3 l\u1ea5y l\u1ea1i c\u00e1c kho\u1ea3ng tr\u1ed1ng trong b\u1ed9 nh\u1edb kh\u00f4ng s\u1eed d\u1ee5ng \u0111\u01b0\u1ee3c (compact).","title":"Memory management with Garbage Collection"},{"location":"Web-Technologies/4.Programming/#avoid-memory-leaks","text":"L\u00fd do ch\u00ednh c\u1ee7a memory leaks trong c\u00e1c ng\u00f4n ng\u1eef c\u00f3 c\u01a1 ch\u1ebf garbage collection l\u00e0 c\u00e1c c\u00f3 c\u00e1c unwanted references - l\u00e0 m\u1ed9t v\u00f9ng nh\u1edb \u0111\u01b0\u1ee3c tr\u1ecf \u0111\u1ebfn m\u00e0 l\u1ea1i kh\u00f4ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong \u1ee9ng d\u1ee5ng nh\u01b0ng v\u00ec l\u00fd do n\u00e0o \u0111\u00f3 m\u00e0 n\u00f3 v\u1eabn \u0111\u01b0\u1ee3c gi\u1eef l\u1ea1i trong h\u1ec7 th\u1ed1ng. Khi s\u1ed1 l\u01b0\u1ee3ng unwanted references nhi\u1ec1u, free memory kh\u00f4ng \u0111\u1ee7 \u0111\u1ec3 cung c\u1ea5p s\u1ebd d\u1ea5n \u0111\u1ebfn h\u01b0\u1ee3ng t\u01b0\u1ee3ng memory leaks . Trong JS, nh\u1eefng unwanted references n\u00e0y th\u01b0\u1eddng l\u00e0 c\u00e1c variables n\u1eb1m \u0111\u00e2u \u0111\u00f3 trong code v\u00e0 n\u00f3 kh\u00f4ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ebfn nh\u01b0ng l\u1ea1i chi\u1ebfm m\u1ed9t ph\u1ea7n c\u1ee7a b\u1ed9 nh\u1edb. C\u00f3 3 lo\u1ea1i memory leaks trong JS: Global variable : Javascript c\u00f3 m\u1ed9t c\u01a1 ch\u1ebf l\u00e0 \u0111\u1eb7t bi\u1ebfn m\u00e0 kh\u00f4ng c\u1ea7n khai b\u00e1o. V\u00ed d\u1ee5: a = \"value\" ; Khi m\u1ed9t bi\u1ebfn \u0111\u01b0\u1ee3c khai b\u00e1o nh\u01b0 tr\u00ean th\u00ec JS s\u1ebd t\u1ef1 \u0111\u1ed9ng g\u00e1n n\u00f3 v\u00e0o global object (window tr\u00ean browser). N\u1ebfu nh\u01b0 bi\u1ebfn n\u00e0y ch\u1ec9 ho\u1ea1t \u0111\u1ed9ng tr\u00ean ph\u1ea1m vi global scope th\u00ec c\u0169ng kh\u00f4ng c\u00f3 s\u1ef1 kh\u00e1c bi\u1ec7t cho l\u1eafm. Tuy nhi\u00ean, n\u1ebfu n\u00f3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a trong m\u1ed9t h\u00e0m th\u00ec \u0111\u00f3 l\u1ea1i l\u00e0 chuy\u1ec7n kh\u00e1c. V\u00ed d\u1ee5: function foo (){ bar = \"\u0111\u00e2y l\u00e0 bi\u1ebfn to\u00e0n c\u1ee5c \u1ea9n\" } N\u1ebfu khai b\u00e1o bar trong ph\u1ea1m vi c\u1ee7a h\u00e0m foo() m\u00e0 l\u1ea1i kh\u00f4ng s\u1eed d\u1ee5ng var \u0111\u1ec3 khai b\u00e1o th\u00ec bi\u1ebfn bar s\u1ebd \u0111\u01b0\u1ee3c t\u1ea1o v\u1edbi global scope . Khi \u0111\u00f3 tuy l\u00e0 ch\u1ec9 khi g\u1ecdi h\u00e0m foo() th\u00ec m\u1edbi c\u1ea7n d\u00f9ng t\u1edbi bi\u1ebfn bar , tuy nhi\u00ean l\u00e0 global scope n\u00ean l\u00fac n\u00e0o \u00f4ng bar c\u0169ng chi\u1ebfm 1 ph\u1ea7n b\u1ed9 nh\u1edb, v\u00e0 \u0111\u00e2y l\u00e0 m\u1ed9t v\u00ed d\u1ee5 \u0111i\u1ec3n h\u00ecnh v\u1ec1 memory leaks . Callback v\u00e0 timer b\u1ecb l\u00e3ng qu\u00ean m\u1ed9t v\u00ed d\u1ee5 d\u1eabn \u0111\u1ebfn memory leak khi s\u1eed d\u1ee5ng setInterval var data = getData (); setInterval ( function (){ var node = document . getElementById ( \"Node\" ); if ( node ){ node . innerHTML = JSON . stringify ( someResource )); } }, 1000 ); Timer b\u1ecb treo t\u1ee9c khi timer tham chi\u1ebfu \u0111\u1ebfn c\u00e1c node ho\u1eb7c d\u1eef li\u1ec7u m\u00e0 kh\u00f4ng c\u00f2n \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng n\u1eefa. \u1ede v\u00ed d\u1ee5 tr\u00ean, n\u1ebfu nh\u01b0 node b\u1ecb x\u00f3a \u1edf m\u1ed9t l\u00fac n\u00e0o \u0111\u1ea5y th\u00ec to\u00e0n b\u1ed9 \u0111o\u1ea1n code x\u1eed l\u00fd trong h\u00e0m callback c\u1ee7a interval s\u1ebd kh\u00f4ng c\u1ea7n \u0111\u1ebfn n\u1eefa. Tuy nhi\u00ean, tr\u01b0\u1eddng h\u1ee3p node b\u1ecb x\u00f3a trong khi interval v\u1eabn c\u00f2n ho\u1ea1t \u0111\u1ed9ng th\u00ec c\u00e1c v\u00f9ng nh\u1edb \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong h\u00e0m callback c\u1ee7a interval c\u0169ng kh\u00f4ng \u0111\u01b0\u1ee3c gi\u1ea3i ph\u00f3ng (mu\u1ed1n gi\u1ea3i ph\u00f3ng c\u1ea7n d\u1eebng interval l\u1ea1i). Ti\u1ebfp \u0111\u00f3, c\u00e1c object t\u1eeb b\u00ean ngo\u00e0i m\u00e0 \u0111\u01b0\u1ee3c h\u00e0m callback c\u1ee7a interval tham chi\u1ebfu \u0111\u1ebfn c\u0169ng kh\u00f4ng th\u1ec3 \u0111\u01b0\u1ee3c gi\u1ea3i ph\u00f3ng v\u00ec v\u1eabn c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c g\u1ecdi th\u00f4ng qua h\u00e0m callback kia. Tr\u01b0\u1eddng h\u1ee3p n\u00e0y c\u0169ng d\u1ea5n \u0111\u1ebfn memory leaks . Tham chi\u1ebfu t\u1edbi c\u00e1c DOM \u0111\u00e3 b\u1ecb x\u00f3a Khi c\u1ea7n l\u01b0u DOM v\u00e0o m\u1ed9t s\u1ed1 c\u1ea5u tr\u00fac d\u1eef li\u1ec7u nh\u01b0 m\u1ea3ng ho\u1eb7c object trong JS code \u0111\u1ec3 l\u00e0m m\u1ed9t lo\u1ea1t c\u00e1c t\u00e1c v\u1ee5 n\u00e0o \u0111\u00f3. V\u00ed d\u1ee5 update d\u1eef li\u1ec7u c\u1ee7a m\u1ed9t v\u00e0i DOM element n\u00e0o \u0111\u00f3, ta c\u1ea7n l\u01b0u c\u00e1c element n\u00e0y v\u00e0o m\u1ed9t m\u1ea3ng, object trong JS. N\u1ebfu ta update xong ta x\u00f3a c\u00e1c DOM element c\u0169 \u0111i, khi \u0111\u00f3 node con (element) c\u00f2n tham chi\u1ebfu \u0111\u1ebfn node cha (array, object) n\u00ean n\u00f3 s\u1ebd \u0111\u01b0\u1ee3c GC coi l\u00e0 v\u1eabn \u0111\u01b0\u1ee3c tham chi\u1ebfu v\u00e0 b\u1ecf qua n\u00f3, t\u1eeb \u0111\u00f3 c\u00f3 th\u1ec3 d\u1eabn \u0111\u1ebfn memory leaks . N\u00ean c\u1ea9n th\u1eadn khi tham chi\u1ebfu \u0111\u1ebfn c\u00e1c DOM. Closures Closures l\u00e0 h\u00e0m n\u1eb1m trong scope c\u1ee7a m\u1ed9t h\u00e0m kh\u00e1c c\u00f3 th\u1ec3 tham chi\u1ebfu t\u1edbi c\u00e1c bi\u1ebfn c\u1ee7a h\u00e0m bao n\u00f3. Khi m\u1ed9t scope \u0111\u01b0\u1ee3c t\u1ea1o ra cho c\u00e1c closures m\u00e0 c\u00f3 c\u00f9ng scope cha, ch\u00fang s\u1ebd c\u00f9ng chia s\u1ebb scope \u0111\u00f3. M\u1eb7c d\u00f9 scope con kh\u00f4ng \u0111\u01b0\u1ee3c g\u1ecdi \u0111\u1ebfn nh\u01b0ng v\u00ec n\u00f3 c\u00f3 tham chi\u1ebfu \u0111\u1ebfn scope cha n\u00ean n\u00f3 s\u1ebd \u0111\u01b0\u1ee3c GC coi l\u00e0 v\u1eabn \u0111ang ho\u1ea1t \u0111\u1ed9ng, t\u1eeb \u0111\u00f3 c\u00f3 th\u1ec3 d\u1eabn \u0111\u1ebfn memory leaks .","title":"Avoid Memory leaks"},{"location":"Web-Technologies/4.Programming/#reference","text":"program-process-and-thread Difference between Process and Thread Error handling in Nodejs Synchronous vs. Asynchronous Programming Node Hero \u2013 Understanding Async Programming in Node.js Memory Management Glossary 4 Types of Memory Leaks in JavaScript and How to Get Rid Of Them Memory Management","title":"Reference"},{"location":"Web-Technologies/5.Supervisor%20and%20workers%20management/","text":"Supervisor and workers management Overview Supervisor is a client/server system that allows its users to control a number of processes on UNIX-like operating systems. Supervisor l\u00e0 m\u1ed9t h\u1ec7 th\u1ed1ng client/server gi\u00fap qu\u1ea3n l\u00fd c\u00e1c ti\u1ebfn tr\u00ecnh ch\u1ea1y tr\u00ean Linux (ho\u1eb7c UNIX-like). M\u1ed9t s\u1ed1 \u01b0u \u0111i\u1ec3m m\u00e0 Supervisor nh\u01b0: Convenience : T\u00ednh ti\u1ec7n d\u1ee5ng \u1edf \u0111\u00e2y l\u00e0 Supervisor b\u1eaft \u0111\u1ea7u processes khi subprocesses c\u1ee7a n\u00f3 v\u00e0 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh c\u1ea5u h\u00ecnh \u0111\u1ec3 t\u1ef1 \u0111\u1ed9ng kh\u1edfi \u0111\u1ed9ng l\u1ea1i ch\u00fang khi g\u1eb7p s\u1ef1 c\u1ed1. N\u00f3 c\u0169ng c\u00f3 th\u1ec3 t\u1ef1 \u0111\u1ed9ng \u0111\u01b0\u1ee3c c\u1ea5u h\u00ecnh \u0111\u1ec3 b\u1eaft \u0111\u1ea7u c\u00e1c processes tr\u00ean l\u1ec7nh g\u1ecdi c\u1ee7a ch\u00ednh n\u00f3 lu\u00f4n. Accuracy : Supervisord lu\u00f4n ki\u1ec3m so\u00e1t \u0111\u01b0\u1ee3c tr\u1ea1ng th\u00e1i up/down th\u1ef1c s\u1ef1 c\u1ee7a c\u00e1c subprocesses v\u00e0 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c truy v\u1ea5n ch\u00ednh x\u00e1c status n\u00e0y b\u1ea5t c\u1ee9 lsuc n\u00e0o. Delegation : \u0110\u1ea3m b\u1ea3o m\u1ed9t ti\u1ebfn tr\u00ecnh n\u00e0o \u0111\u00f3 lu\u00f4n lu\u00f4n ch\u1ea1y kh\u00f4ng ng\u1eebng ngh\u1ec9. N\u1ebfu v\u00ec l\u00fd do g\u00ec m\u00e0 n\u00f3 b\u1ecb t\u1eaft, Supervisor s\u1ebd kh\u1edfi \u0111\u1ed9ng process \u0111\u00f3 l\u1ea1i. Process Groups : Qu\u1ea3n l\u00fd nhi\u1ec1u ti\u1ebfn tr\u00ecnh d\u01b0\u1edbi d\u1ea1ng m\u1ed9t group c\u00e1c ti\u1ebfn tr\u00ecnh, t\u1eeb \u0111\u00f3 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c b\u1eadt/t\u1eaft c\u00f9ng l\u00fac. Trong tr\u01b0\u1eddng h\u1ee3p ti\u1ebfn tr\u00ecnh m\u00e0 supervisor th\u1ef1c thi ph\u00e1t sinh l\u1ed7i, c\u00f3 th\u1ec3 c\u1ea5u h\u00ecnh \u0111\u1ec3 Supervisor retry l\u1ea1i m\u1ed9t s\u1ed1 l\u1ea7n nh\u1ea5t \u0111\u1ecbnh tr\u01b0\u1edbc khi ch\u00ednh th\u1ee9c b\u00e1o fail. Features Supervisor c\u00f3 c\u00e1c ti\u1ec7n \u00edch sau: Simple - \u0110\u01a1n gi\u1ea3n: \u0111\u01b0\u1ee3c c\u1ea5u h\u00ecnh th\u00f4ng qua t\u1ec7p c\u1ea5u h\u00ecnh ki\u1ec3u INI-style, \u0111\u01a1n gi\u1ea3n d\u1ec5 h\u1ecdc. N\u00f3 cung c\u1ea5p nhi\u1ec1u t\u00f9y ch\u1ecdn cho m\u1ed7i process nh\u01b0 kh\u1edfi \u0111\u1ed9ng l\u1ea1i c\u00e1c process b\u1ecb l\u1ed7i v\u00e0 t\u1ef1 \u0111\u1ed9ng h\u00f3a vi\u1ec7c ghi log. Centralized - T\u1eadp trung: Supervisor cung c\u1ea5p c\u01a1 ch\u1ebf \u0111\u1ec3 start, stop, v\u00e0 monitor c\u00e1c process theo ki\u1ec3u ri\u00eang l\u1ebb t\u1eebng process ho\u1eb7c nh\u00f3m c\u00e1c process. Efficient - Hi\u1ec7u qu\u1ea3: Supervisor start c\u00e1c subprocesses c\u1ee7a n\u00f3 th\u00f4ng qua c\u01a1 ch\u1ebf fork/execute v\u00e0 c\u00e1c subprocesses kh\u00f4ng daemonize , t\u0103ng hi\u1ec7u n\u0103ng. Extensible - C\u00f3 th\u1ec3 m\u1edf r\u1ed9ng: Supervisor c\u00f3 m\u1ed9t giao th\u1ee9c event notification protocol d\u00f9ng \u0111\u1ec3 th\u00f4ng b\u00e1o s\u1ef1 ki\u1ec7n, c\u00e1c ch\u01b0\u01a1ng tr\u00ecnh \u0111\u01b0\u1ee3c vi\u1ebft b\u1eb1ng b\u1ea5t k\u1ef3 ng\u00f4n ng\u1eef n\u00e0o c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u1ec3 theo d\u00f5i c\u00e1c event v\u00e0 d\u00f9ng XML-RPC interface \u0111\u1ec3 qu\u1ea3n l\u00fd. Compatible - T\u01b0\u01a1ng th\u00edch: Supervisor ho\u1ea1t \u0111\u1ed9ng tr\u00ean m\u1ecdi th\u1ee9 ngo\u1ea1i tr\u1eeb Windows. N\u00f3 h\u1ed7 tr\u1ee3 tr\u00ean Linux, Mac OS X, Solaris v\u00e0 FreeBSD. N\u00f3 \u0111\u01b0\u1ee3c vi\u1ebft ho\u00e0n to\u00e0n b\u1eb1ng Python, v\u00ec v\u1eady vi\u1ec7c c\u00e0i \u0111\u1eb7t kh\u00f4ng y\u00eau c\u1ea7u C-compiler . Proven : Supervisor \u0111\u00e3 xu\u1ea5t hi\u1ec7n trong nhi\u1ec1u n\u0103m v\u00e0 \u0111\u00e3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng tr\u00ean nhi\u1ec1u m\u00e1y ch\u1ee7. Supervisor Components Supervisor c\u00f3 2 ph\u1ea7n l\u00e0 supervisord (server) v\u00e0 supervisorctl (client). Thi\u1ebft k\u1ebf nh\u01b0 v\u1eady \u0111\u1ec3 ta c\u00f3 th\u1ec3 d\u1ef1ng nhi\u1ec1u server v\u00e0 d\u00f9ng client k\u1ebft n\u1ed1i t\u1edbi nhi\u1ec1u server \u0111\u1ec3 qu\u1ea3n l\u00fd. Supervisord (vai tr\u00f2 server) : Hay c\u00f2n g\u1ecdi l\u00e0 supervisor daemon \u0111\u00f3ng vai tr\u00f2 nh\u01b0 server, ch\u1ecbu tr\u00e1ch nhi\u1ec7m start c\u00e1c programs, tr\u1ea3 l\u1eddi c\u00e1c l\u1ec7nh t\u1eeb client, restart c\u00e1c subprocess b\u1ecb crash ho\u1eb7c t\u1eaft, ghi log stdout & stderr t\u1eeb c\u00e1c subprocess v\u00e0 x\u1eed l\u00fd c\u00e1c events t\u01b0\u01a1ng \u1ee9ng trong v\u00f2ng \u0111\u1eddi c\u1ee7a 1 subproces. Server n\u00e0y s\u1ebd x\u1eed l\u00fd d\u1ef1a tr\u00ean file config d\u1ea1ng \"Windows-INI\". M\u1eb7c \u0111\u1ecbnh l\u00e0 /etc/supervisord.conf . Supervisorctl (vai tr\u00f2 client) : cung c\u1ea5p giao di\u1ec7n d\u00f2ng l\u1ec7nh \u0111\u1ec3 ta thao t\u00e1c, ra l\u1ec7nh cho remote server (supervisord. T\u1eeb supervisorctl , ta c\u00f3 th\u1ec3 connect t\u1edbi supervisord, stop, start, l\u1ea5y status c\u1ee7a c\u00e1c subprocesses. client s\u1ebd n\u00f3i chuy\u1ec7n v\u1edbi server qua UNIX domain socket hay TCP socket. Reference Supervisord introduction","title":"Supervisor and workers management"},{"location":"Web-Technologies/5.Supervisor%20and%20workers%20management/#supervisor-and-workers-management","text":"","title":"Supervisor and workers management"},{"location":"Web-Technologies/5.Supervisor%20and%20workers%20management/#overview","text":"Supervisor is a client/server system that allows its users to control a number of processes on UNIX-like operating systems. Supervisor l\u00e0 m\u1ed9t h\u1ec7 th\u1ed1ng client/server gi\u00fap qu\u1ea3n l\u00fd c\u00e1c ti\u1ebfn tr\u00ecnh ch\u1ea1y tr\u00ean Linux (ho\u1eb7c UNIX-like). M\u1ed9t s\u1ed1 \u01b0u \u0111i\u1ec3m m\u00e0 Supervisor nh\u01b0: Convenience : T\u00ednh ti\u1ec7n d\u1ee5ng \u1edf \u0111\u00e2y l\u00e0 Supervisor b\u1eaft \u0111\u1ea7u processes khi subprocesses c\u1ee7a n\u00f3 v\u00e0 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh c\u1ea5u h\u00ecnh \u0111\u1ec3 t\u1ef1 \u0111\u1ed9ng kh\u1edfi \u0111\u1ed9ng l\u1ea1i ch\u00fang khi g\u1eb7p s\u1ef1 c\u1ed1. N\u00f3 c\u0169ng c\u00f3 th\u1ec3 t\u1ef1 \u0111\u1ed9ng \u0111\u01b0\u1ee3c c\u1ea5u h\u00ecnh \u0111\u1ec3 b\u1eaft \u0111\u1ea7u c\u00e1c processes tr\u00ean l\u1ec7nh g\u1ecdi c\u1ee7a ch\u00ednh n\u00f3 lu\u00f4n. Accuracy : Supervisord lu\u00f4n ki\u1ec3m so\u00e1t \u0111\u01b0\u1ee3c tr\u1ea1ng th\u00e1i up/down th\u1ef1c s\u1ef1 c\u1ee7a c\u00e1c subprocesses v\u00e0 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c truy v\u1ea5n ch\u00ednh x\u00e1c status n\u00e0y b\u1ea5t c\u1ee9 lsuc n\u00e0o. Delegation : \u0110\u1ea3m b\u1ea3o m\u1ed9t ti\u1ebfn tr\u00ecnh n\u00e0o \u0111\u00f3 lu\u00f4n lu\u00f4n ch\u1ea1y kh\u00f4ng ng\u1eebng ngh\u1ec9. N\u1ebfu v\u00ec l\u00fd do g\u00ec m\u00e0 n\u00f3 b\u1ecb t\u1eaft, Supervisor s\u1ebd kh\u1edfi \u0111\u1ed9ng process \u0111\u00f3 l\u1ea1i. Process Groups : Qu\u1ea3n l\u00fd nhi\u1ec1u ti\u1ebfn tr\u00ecnh d\u01b0\u1edbi d\u1ea1ng m\u1ed9t group c\u00e1c ti\u1ebfn tr\u00ecnh, t\u1eeb \u0111\u00f3 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c b\u1eadt/t\u1eaft c\u00f9ng l\u00fac. Trong tr\u01b0\u1eddng h\u1ee3p ti\u1ebfn tr\u00ecnh m\u00e0 supervisor th\u1ef1c thi ph\u00e1t sinh l\u1ed7i, c\u00f3 th\u1ec3 c\u1ea5u h\u00ecnh \u0111\u1ec3 Supervisor retry l\u1ea1i m\u1ed9t s\u1ed1 l\u1ea7n nh\u1ea5t \u0111\u1ecbnh tr\u01b0\u1edbc khi ch\u00ednh th\u1ee9c b\u00e1o fail.","title":"Overview"},{"location":"Web-Technologies/5.Supervisor%20and%20workers%20management/#features","text":"Supervisor c\u00f3 c\u00e1c ti\u1ec7n \u00edch sau: Simple - \u0110\u01a1n gi\u1ea3n: \u0111\u01b0\u1ee3c c\u1ea5u h\u00ecnh th\u00f4ng qua t\u1ec7p c\u1ea5u h\u00ecnh ki\u1ec3u INI-style, \u0111\u01a1n gi\u1ea3n d\u1ec5 h\u1ecdc. N\u00f3 cung c\u1ea5p nhi\u1ec1u t\u00f9y ch\u1ecdn cho m\u1ed7i process nh\u01b0 kh\u1edfi \u0111\u1ed9ng l\u1ea1i c\u00e1c process b\u1ecb l\u1ed7i v\u00e0 t\u1ef1 \u0111\u1ed9ng h\u00f3a vi\u1ec7c ghi log. Centralized - T\u1eadp trung: Supervisor cung c\u1ea5p c\u01a1 ch\u1ebf \u0111\u1ec3 start, stop, v\u00e0 monitor c\u00e1c process theo ki\u1ec3u ri\u00eang l\u1ebb t\u1eebng process ho\u1eb7c nh\u00f3m c\u00e1c process. Efficient - Hi\u1ec7u qu\u1ea3: Supervisor start c\u00e1c subprocesses c\u1ee7a n\u00f3 th\u00f4ng qua c\u01a1 ch\u1ebf fork/execute v\u00e0 c\u00e1c subprocesses kh\u00f4ng daemonize , t\u0103ng hi\u1ec7u n\u0103ng. Extensible - C\u00f3 th\u1ec3 m\u1edf r\u1ed9ng: Supervisor c\u00f3 m\u1ed9t giao th\u1ee9c event notification protocol d\u00f9ng \u0111\u1ec3 th\u00f4ng b\u00e1o s\u1ef1 ki\u1ec7n, c\u00e1c ch\u01b0\u01a1ng tr\u00ecnh \u0111\u01b0\u1ee3c vi\u1ebft b\u1eb1ng b\u1ea5t k\u1ef3 ng\u00f4n ng\u1eef n\u00e0o c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u1ec3 theo d\u00f5i c\u00e1c event v\u00e0 d\u00f9ng XML-RPC interface \u0111\u1ec3 qu\u1ea3n l\u00fd. Compatible - T\u01b0\u01a1ng th\u00edch: Supervisor ho\u1ea1t \u0111\u1ed9ng tr\u00ean m\u1ecdi th\u1ee9 ngo\u1ea1i tr\u1eeb Windows. N\u00f3 h\u1ed7 tr\u1ee3 tr\u00ean Linux, Mac OS X, Solaris v\u00e0 FreeBSD. N\u00f3 \u0111\u01b0\u1ee3c vi\u1ebft ho\u00e0n to\u00e0n b\u1eb1ng Python, v\u00ec v\u1eady vi\u1ec7c c\u00e0i \u0111\u1eb7t kh\u00f4ng y\u00eau c\u1ea7u C-compiler . Proven : Supervisor \u0111\u00e3 xu\u1ea5t hi\u1ec7n trong nhi\u1ec1u n\u0103m v\u00e0 \u0111\u00e3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng tr\u00ean nhi\u1ec1u m\u00e1y ch\u1ee7.","title":"Features"},{"location":"Web-Technologies/5.Supervisor%20and%20workers%20management/#supervisor-components","text":"Supervisor c\u00f3 2 ph\u1ea7n l\u00e0 supervisord (server) v\u00e0 supervisorctl (client). Thi\u1ebft k\u1ebf nh\u01b0 v\u1eady \u0111\u1ec3 ta c\u00f3 th\u1ec3 d\u1ef1ng nhi\u1ec1u server v\u00e0 d\u00f9ng client k\u1ebft n\u1ed1i t\u1edbi nhi\u1ec1u server \u0111\u1ec3 qu\u1ea3n l\u00fd. Supervisord (vai tr\u00f2 server) : Hay c\u00f2n g\u1ecdi l\u00e0 supervisor daemon \u0111\u00f3ng vai tr\u00f2 nh\u01b0 server, ch\u1ecbu tr\u00e1ch nhi\u1ec7m start c\u00e1c programs, tr\u1ea3 l\u1eddi c\u00e1c l\u1ec7nh t\u1eeb client, restart c\u00e1c subprocess b\u1ecb crash ho\u1eb7c t\u1eaft, ghi log stdout & stderr t\u1eeb c\u00e1c subprocess v\u00e0 x\u1eed l\u00fd c\u00e1c events t\u01b0\u01a1ng \u1ee9ng trong v\u00f2ng \u0111\u1eddi c\u1ee7a 1 subproces. Server n\u00e0y s\u1ebd x\u1eed l\u00fd d\u1ef1a tr\u00ean file config d\u1ea1ng \"Windows-INI\". M\u1eb7c \u0111\u1ecbnh l\u00e0 /etc/supervisord.conf . Supervisorctl (vai tr\u00f2 client) : cung c\u1ea5p giao di\u1ec7n d\u00f2ng l\u1ec7nh \u0111\u1ec3 ta thao t\u00e1c, ra l\u1ec7nh cho remote server (supervisord. T\u1eeb supervisorctl , ta c\u00f3 th\u1ec3 connect t\u1edbi supervisord, stop, start, l\u1ea5y status c\u1ee7a c\u00e1c subprocesses. client s\u1ebd n\u00f3i chuy\u1ec7n v\u1edbi server qua UNIX domain socket hay TCP socket.","title":"Supervisor Components"},{"location":"Web-Technologies/5.Supervisor%20and%20workers%20management/#reference","text":"Supervisord introduction","title":"Reference"},{"location":"Web-Technologies/6.RESTful/","text":"RESTful Concept Methods and Api design best practice Api document (Swagger) Concepts Web services L\u00e0 ph\u01b0\u01a1ng th\u1ee9c giao ti\u1ebfp gi\u1eefa hai thi\u1ebft b\u1ecb qua Internet L\u00e0 m\u1ed9t module ph\u1ea7n m\u1ec1m \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 th\u1ef1c hi\u1ec7n m\u1ed9t nh\u00f3m c\u00e1c t\u00e1c v\u1ee5 nh\u1ea5t \u0111\u1ecbnh. L\u00e0 t\u1eadp h\u1ee3p c\u00e1c ti\u00eau chu\u1ea9n ho\u1eb7c giao th\u1ee9c \u0111\u1ec3 trao \u0111\u1ed5i th\u00f4ng tin gi\u1eefa hai thi\u1ebft b\u1ecb, \u1ee9ng d\u1ee5ng v\u1edbi nhau. API - Application Programming Interface L\u00e0 c\u00e1c ph\u01b0\u01a1ng th\u1ee9c, giao th\u1ee9c k\u1ebft n\u1ed1i v\u1edbi c\u00e1c \u1ee9ng d\u1ee5ng v\u1edbi nhau. Cung c\u1ea5p kh\u1ea3 n\u0103ng truy xu\u1ea5t, trao \u0111\u1ed5i d\u1eef li\u1ec7u gi\u1eefa c\u00e1c \u1ee9ng d\u1ee5ng. REST - REpresentational State Transfer L\u00e0 1 ki\u1ec3u ki\u1ebfn tr\u00fac l\u1eadp tr\u00ecnh, \u0111\u1ecbnh ngh\u0129a c\u00e1c quy t\u1eafc \u0111\u1ec3 thi\u1ebft k\u1ebf web service ch\u00fa tr\u1ecdng v\u00e0o resource Ho\u1ea1t \u0111\u1ed9ng theo m\u00f4 h\u00ecnh Client - Server . S\u1eed d\u1ee5ng HTTP Protocol , REST g\u1eedi HTTP request/response \u0111\u1ebfn m\u1ed9t URL \u0111\u1ec3 trao \u0111\u1ed5i, x\u1eed l\u00fd d\u1eef li\u1ec7u. M\u1ecdi th\u1ee9 trong REST \u0111\u1ec1u \u0111\u01b0\u1ee3c coi l\u00e0 resource v\u00e0 \u0111\u01b0\u1ee3c \u0111\u1ecbnh danh th\u00f4ng qua URI, v\u00e0 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c bi\u1ec3u di\u1ec5n th\u00f4ng qua d\u1ea1ng v\u0103n b\u1ea3n, XML, JSON v.v RESTful l\u00e0 nh\u1eefng \u1ee9ng d\u1ee5ng m\u00e0 c\u00f3 s\u1eed d\u1ee5ng ki\u1ebfn tr\u00fac REST RESTful Web services v\u00e0 RESTful API : RESTful API l\u00e0 m\u1ed9t API tu\u00e2n th\u1ee7 REST architecture . RESTful Web services l\u00e0 m\u1ed9t Web services tu\u00e2n th\u1ee7 REST architecture . REST th\u01b0\u1eddng \u0111\u01b0\u1ee3c tri\u1ec3n khai b\u1eb1ng Web tech , n\u00ean c\u00f3 th\u1ec3 hi\u1ec3u v\u1ec1 RESTful API l\u00e0 m\u1ed9t lo\u1ea1i c\u1ee7a Web services . REST API paradigm client-app ho\u1eb7c software , g\u1ecdi chung l\u00e0 REST Client : Ch\u1ea1y tr\u00ean thi\u1ebft b\u1ecb c\u1ee7a user v\u00e0 initiates cho s\u1ef1 giao ti\u1ebfp, trao \u0111\u1ed5i d\u1eef li\u1ec7u gi\u1eefa REST Client v\u1edbi REST Server . REST Server : Cung c\u1ea5p m\u1ed9t API v\u1edbi vai tr\u00f2 l\u00e0 m\u1ed9t ph\u01b0\u01a1ng ti\u1ec7n \u0111\u1ec3 user truy c\u1eadp v\u00e0o d\u1eef li\u1ec7u ho\u1eb7c c\u00e1c t\u00ednh n\u0103ng c\u1ee7a n\u00f3. resource : L\u00e0 b\u1ea5t k\u1ef3 ph\u1ea7n n\u1ed9i dung, d\u1eef li\u1ec7u n\u00e0o m\u00e0 server c\u00f3 th\u1ec3 cung c\u1ea5p cho client. \u0110\u1ec3 c\u00f3 quy\u1ec1n truy c\u1eadp v\u00e0o resource , REST Client s\u1ebd g\u1eedi m\u1ed9t HTTP request t\u1edbi REST Server . Sau \u0111\u00f3 REST Server t\u1ea1o HTTP response v\u1edbi resource \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a. C\u1ea3 hai lo\u1ea1i REST messages nh\u01b0 tr\u00ean \u0111\u1ec1 mang t\u00ednh self-descriptive , ngh\u0129a l\u00e0 m\u1ed9t REST messages s\u1ebd ch\u00fang ch\u1ee9a th\u00f4ng tin v\u1ec1 c\u00e1ch x\u1eed l\u00fd v\u00e0 di\u1ec5n gi\u1ea3i cho REST messages \u0111\u00f3. REST messages structure REST Request HTTP method : M\u00f4 t\u1ea3 nh\u1eefng actions, methods g\u00ec s\u1ebd \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n v\u1edbi m\u1ed9t resource . Endpoint : ch\u1ee9a Uniform Resource Identifier - URI cho bi\u1ebft v\u1ecb tr\u00ed v\u00e0 c\u00e1ch truy c\u1eadp resource tr\u00ean Internet. Lo\u1ea1i URI ph\u1ed5 bi\u1ebfn nh\u1ea5t l\u00e0 Unique Resource Location - URL , \u0111\u00f3ng vai tr\u00f2 nh\u01b0 m\u1ed9t \u0111\u1ecba ch\u1ec9 web ho\u00e0n ch\u1ec9nh. Headers : Ch\u1ee9a th\u00f4ng tin li\u00ean quan \u0111\u1ebfn client v\u00e0 server Body : Ch\u1ee9a th\u00f4ng tin c\u1ea7n g\u1eedi \u0111\u1ebfn server REST Response Server kh\u00f4ng g\u1eedi ch\u00ednh x\u00e1c resource \u0111\u01b0\u1ee3c request m\u00e0 l\u00e0 representation b\u1ea3n \u0111\u1ea1i di\u1ec7n c\u1ee7a n\u00f3 - m\u1ed9t m\u00f4 t\u1ea3 m\u00e0 ph\u00eda client c\u00f3 th\u1ec3 \u0111\u1ecdc \u0111\u01b0\u1ee3c v\u1ec1 state hi\u1ec7n t\u1ea1i c\u1ee7a n\u00f3. C\u00f9ng m\u1ed9t resource c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c bi\u1ec3u di\u1ec5n \u1edf c\u00e1c \u0111\u1ecbnh d\u1ea1ng kh\u00e1c nhau, nh\u01b0ng nh\u1eefng \u0111\u1ecbnh d\u1ea1ng ph\u1ed5 bi\u1ebfn nh\u1ea5t l\u00e0 XML v\u00e0 JSON. Methods and Api design best practice 1. REST guiding principles C\u00e1c nguy\u00ean t\u1eafc h\u01b0\u1edbng d\u1eabn v\u1ec1 REST \u0111\u01b0\u1ee3c \u0111\u1ec1 ra b\u1edfi Fielding: Client\u2013server : B\u1eb1ng c\u00e1ch t\u00e1ch c\u00e1c v\u1ea5n \u0111\u1ec1 c\u1ee7a user interface kh\u1ecfi c\u00e1c v\u1ea5n \u0111\u1ec1 c\u1ee7a vi\u1ec7c l\u01b0u tr\u1eef d\u1eef li\u1ec7u, vi\u1ec7c \u00e1p d\u1ee5ng m\u00f4 h\u00ecnh Client\u2013server s\u1ebd c\u1ea3i thi\u1ec7n t\u00ednh linh \u0111\u1ed9ng c\u1ee7a user interface v\u00e0 c\u1ea3i thi\u1ec7n kh\u1ea3 n\u0103ng m\u1edf r\u1ed9ng c\u1ee7a app. Stateless : M\u1ed7i request t\u1eeb client \u0111\u1ebfn server ph\u1ea3i ch\u1ee9a to\u00e0n b\u1ed9 c\u00e1c th\u00f4ng tin c\u1ea7n thi\u1ebft \u0111\u1ec3 server c\u00f3 th\u1ec3 hi\u1ec3u request v\u00e0 kh\u00f4ng l\u01b0u context n\u00e0o tr\u00ean server m\u00e0 s\u1ebd \u0111\u01b0\u1ee3c \u1edf local. Visibility - ch\u1ec9 c\u1ea7n nh\u00ecn v\u00e0o 1 request \u0111\u1ec3 hi\u1ec3u \u0111\u01b0\u1ee3c b\u1ea3n ch\u1ea5t \u0111\u1ea7y \u0111\u1ee7 c\u1ee7a n\u00f3, Reliability : L\u00e0 stateless n\u00ean nhi\u1ec7m v\u1ee5 kh\u00f4i ph\u1ee5c d\u1eef li\u1ec7u sau c\u00e1c l\u1ed7i tr\u1edf n\u00ean \u0111\u01a1n gi\u1ea3n h\u01a1n r\u1ea5t nhi\u1ec1u. Scalability - Server kh\u00f4ng ph\u1ea3i l\u01b0u tr\u1eef tr\u1ea1ng th\u00e1i gi\u1eefa c\u00e1c request, kh\u00f4ng ph\u1ea3i qu\u1ea3n l\u00fd vi\u1ec7c s\u1eed d\u1ee5ng t\u00e0i nguy\u00ean gi\u1eefa c\u00e1c request \u2192 cho ph\u00e9p m\u00e1y ch\u1ee7 nhanh ch\u00f3ng gi\u1ea3i ph\u00f3ng t\u00e0i nguy\u00ean v\u00e0 \u0111\u01a1n gi\u1ea3n h\u00f3a h\u01a1n n\u1eefa vi\u1ec7c tri\u1ec3n khai. Cacheable \u2013 Th\u00f4ng tin response v\u1ec1 client s\u1ebd \u0111\u01b0\u1ee3c \u0111\u00e1nh d\u1ea5u l\u00e0 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c cache hay kh\u00f4ng. N\u1ebfu response l\u00e0 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c cache th\u00ec client s\u1ebd \u0111\u01b0\u1ee3c quy\u1ec1n t\u00e1i s\u1eed d\u1ee5ng c\u00e1c d\u1eef li\u1ec7u response \u0111\u00f3 cho c\u00e1c l\u1ea7n s\u1eed d\u1ee5ng ti\u1ebfp theo. Uniform interface \u2013 REST \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a b\u1edfi 4 r\u00e0ng bu\u1ed9c v\u1ec1 interface: URI - \u0110\u1ecbnh danh resource Resource method : C\u00e1c thao t\u00e1c tr\u00ean resource, \u0111\u01b0\u1ee3c ti\u1ebfn h\u00e0nh th\u00f4ng qua c\u00e1c \u0111\u1ea1i di\u1ec7n (representations) H\u1ec7 th\u1ed1ng message mang t\u00ednh t\u1ef1 m\u00f4 t\u1ea3 Hypermedia s\u1ebd l\u00e0 engine c\u1ee7a application state Layered system \u2013 Cho ph\u00e9p ki\u1ebfn tr\u00fac \u0111\u01b0\u1ee3c c\u1ea5u th\u00e0nh b\u1edfi c\u00e1c l\u1edbp ph\u00e2n c\u1ea5p trong \u0111\u00f3 m\u1ed7i th\u00e0nh ph\u1ea7n s\u1ebd kh\u00f4ng th\u1ec3 t\u01b0\u01a1ng t\u00e1c v\u1edbi c\u00e1c l\u1edbp kh\u00e1c ngo\u00e0i l\u1edbp m\u00e0 ch\u00fang \u0111ang t\u01b0\u01a1ng t\u00e1c tr\u1ef1c ti\u1ebfp. Code on demand (optional) \u2013 REST cho ph\u00e9p ch\u1ee9c n\u0103ng c\u1ee7a client \u0111\u01b0\u1ee3c m\u1edf r\u1ed9ng th\u00f4ng qua vi\u1ec7c download v\u00e0 th\u1ef1c hi\u1ec7n code d\u1ea1ng applet ho\u1eb7c scripts khi\u1ebfn client tr\u1edf n\u00ean \u0111\u01a1n gi\u1ea3n h\u01a1n th\u00f4ng qua vi\u1ec7c gi\u1ea3m s\u1ed1 l\u01b0\u1ee3ng c\u00e1c t\u00ednh n\u0103ng c\u1ea7n \u0111\u01b0\u1ee3c ph\u00e1t tri\u1ec3n tr\u01b0\u1edbc. Nh\u01b0 v\u1eady ta th\u1ea5y REST b\u1ea3n th\u00e2n n\u00f3 l\u00e0 1 architectural style v\u00e0 n\u1ebfu ta design m\u1ed9t API hay Web Service m\u00e0 kh\u00f4ng tu\u00e2n th\u1ee7 nh\u1eefng guiding principles nh\u01b0 tr\u00ean th\u00ec n\u00f3 kh\u00f4ng ph\u1ea3i l\u00e0 REST . Ng\u01b0\u1ee3c l\u1ea1i n\u1ebfu n\u00f3 tu\u00e2n th\u1ee7 6 guiding principles nh\u01b0 tr\u00ean th\u00ec n\u00f3 \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 RESTful . 2. Richardson Maturity Model Chung m\u1ed9t c\u00e2u h\u1ecfi v\u1ec1 m\u1ee9c \u0111\u1ed9 tu\u00e2n th\u1ee7 c\u1ee7a thi\u1ebft k\u1ebf cho c\u00e1c ti\u00eau chu\u1ea9n c\u1ee7a REST, Leonard Richardson \u0111\u00e3 ti\u1ebfn h\u00e0nh ph\u00e2n t\u00edch h\u00e0ng tr\u0103m m\u1eabu thi\u1ebft k\u1ebf web service v\u00e0 chia ch\u00fang th\u00e0nh 4 categories d\u1ef1a tr\u00ean m\u1ee9c \u0111\u1ed9 tu\u00e2n tu\u00e2n th\u1ee7 REST. M\u00f4 h\u00ecnh n\u00e0y \u0111\u01b0\u1ee3c \u0111\u1eb7t theo t\u00ean \u00f4ng : Richardson Maturity Model Richardson s\u1eed d\u1ee5ng 3 th\u00e0nh t\u1ed1 ( factors ) \u0111\u1ec3 quy\u1ebft \u0111\u1ecbnh m\u1ee9c \u0111\u1ed9 tr\u01b0\u1edfng th\u00e0nh c\u1ee7a m\u1ed9t service trong vi\u1ec7c tu\u00e2n th\u1ee7 REST : URI HTTP HATEOAS (Hypertext As The Engine Of Application State) Ngo\u00e0i ra c\u00f2n c\u00f3 1 factors s\u1ed1 0 l\u00e0 POX Swamp - (Plain Old XML Swamp) \u2192 C\u00e1c service, api c\u00e0ng s\u1eed d\u1ee5ng nhi\u1ec1u c\u00e1c th\u00e0nh t\u1ed1 n\u00e0y th\u00ec ch\u00fang c\u00e0ng \u0111\u01b0\u1ee3c coi l\u00e0 tr\u01b0\u1edfng th\u00e0nh. 3. Practice Accept and respond with JSON: app . use ( bodyParser . json ()); S\u1eed d\u1ee5ng nouns thay v\u00ec verbs cho endpoint paths: /user CRUD operations: GET: /users POST: /user PATCH: /user/:id DELETE: /user/:id Handle errors, v\u00e0 return standard status codes Api document (Swagger) Overview API Document l\u00e0 m\u1ed9t d\u1ea1ng t\u00e0i li\u1ec7u k\u1ef9 thu\u1eadt, bao g\u1ed3m c\u00e1c h\u01b0\u1edbng d\u1eabn v\u1ec1 c\u00e1ch s\u1eed d\u1ee5ng hi\u1ec7u qu\u1ea3 v\u00e0 t\u00edch h\u1ee3p cho m\u1ed9t API. N\u00f3 ph\u1ea3i ng\u1eafn g\u1ecdn nh\u01b0ng ch\u1ee9a \u0111\u1ee7 t\u1ea5t c\u1ea3 c\u00e1c th\u00f4ng tin \u0111\u1ec3 l\u00e0m vi\u1ec7c v\u1edbi API, nh\u01b0 c\u00e1c th\u00f4ng tin chi ti\u1ebft v\u1ec1 c\u00e1c function , class , return type , c\u00e1c argument ,... \u0111\u01b0\u1ee3c \u0111\u1eb7c t\u1ea3 b\u1edfi c\u00e1c h\u01b0\u1edbng d\u1eabn v\u00e0 v\u00ed d\u1ee5. API Document c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng c\u00e1c c\u00f4ng c\u1ee5 t\u1ea1o, ch\u1ec9nh s\u1eeda n\u1ed9i dung v\u00e0 tr\u00ecnh so\u1ea1n th\u1ea3o v\u0103n b\u1ea3n th\u00f4ng th\u01b0\u1eddng. Tuy nhi\u00ean vi\u1ec7c s\u1eed d\u1ee5ng c\u00e1c c\u00f4ng c\u1ee5 d\u00e0nh ri\u00eang cho vi\u1ec7c \u0111\u1ecbnh ngh\u0129a API Document gi\u1ed1ng nh\u01b0 OpenAPI / Swagger Specification hay Postman s\u1ebd t\u1ef1 \u0111\u1ed9ng h\u00f3a qu\u00e1 tr\u00ecnh x\u1eed l\u00fd API Document , gi\u00fap c\u00e1c team d\u1ec5 d\u00e0ng h\u01a1n trong vi\u1ec7c t\u1ea1o v\u00e0 ch\u1ec9nh s\u1eeda API Document . Vai tr\u00f2 c\u1ee7a API Document : N\u00e2ng cao s\u1ef1 ch\u1ea5p nh\u1eadn c\u1ee7a ng\u01b0\u1eddi d\u00f9ng: N\u1ebfu API Docs \u0111\u1ee7 t\u1ed1t, kh\u00e1ch h\u00e0ng s\u1ebd nhanh ch\u00f3ng th\u1ea5y \u0111\u01b0\u1ee3c hi\u1ec7u qu\u1ea3 khi d\u00f9ng API, thu h\u00fat \u0111\u01b0\u1ee3c kh\u00e1ch h\u00e0ng. N\u00e2ng cao nh\u1eadn th\u1ee9c: Nh\u1edd c\u00f3 API Docs kh\u00e1ch h\u00e0ng c\u00f3 th\u1ec3 d\u00f9ng API nhanh v\u00e0 hi\u1ec7u qu\u1ea3, h\u1ecd s\u1ebd tr\u1edf th\u00e0nh kh\u00e1ch h\u00e0ng th\u00e2n thi\u1ebft, t\u0103ng Network effect. H\u1ed7 tr\u1ee3 cho team dev trong vi\u1ec7c tri\u1ec3n khai API. Gi\u00fap API tr\u1edf n\u00ean d\u1ec5 hi\u1ec3u h\u01a1n v\u00e0 \u0111\u01b0\u1ee3c nhi\u1ec1u ng\u01b0\u1eddi bi\u1ebft \u0111\u1ebfn Ti\u1ebft ki\u1ec7m chi ph\u00ed v\u00e0 th\u1eddi gian trong vi\u1ec7c h\u1ed7 tr\u1ee3 s\u1eed d\u1ee5ng, ph\u00e1t tri\u1ec3n API D\u1ec5 b\u1ea3o tr\u00ec h\u01a1n: Kh\u00e1ch h\u00e0ng v\u00e0 team dev d\u1ec5 d\u00e0ng hi\u1ec3u v\u00e0 nhanh ch\u00f3ng ph\u00e1t hi\u1ec7n n\u1ebfu c\u00f3 l\u1ed7i, gi\u00fap b\u1ea3o tr\u00ec nhanh h\u01a1n. Swagger Tools Explore Swagger Tools Swagger l\u00e0 1 open source d\u00f9ng \u0111\u1ec3 ph\u00e1t tri\u1ec3n, thi\u1ebft k\u1ebf, x\u00e2y d\u1ef1ng v\u00e0 l\u00e0m t\u00e0i li\u1ec7u cho c\u00e1c h\u1ec7 th\u1ed1ng RESTfull Web Service . Demo c\u1ee7a Swagger Swagger cung c\u1ea5p c\u00e1c c\u00f4ng c\u1ee5 h\u1ed7 tr\u1ee3 vi\u1ec7c t\u1ea1o API Docs : Swagger UI , Swagger Editor , Swagger Codegen , Swagger Hub , Swagger Inspector . Trong \u0111\u00f3 3 c\u00f4ng c\u1ee5 \u0111\u1ea7u ti\u00ean l\u00e0 open source, Swagger Hub v\u00e0 Swagger Inspector l\u00e0 nh\u1eefng c\u00f4ng c\u1ee5 cao c\u1ea5p h\u01a1n v\u00e0 s\u1ebd ph\u1ea3i tr\u1ea3 ph\u00ed. C\u1ea5u tr\u00fac c\u01a1 b\u1ea3n c\u1ee7a Swagger Specification : editor.swagger.io . V\u00e0 \u0111\u01b0\u1ee3c config v\u1edbi c\u00fa ph\u00e1p yaml file : info : M\u1ed7i OpenAPI Specifications s\u1ebd b\u1eaft \u0111\u1ea7u v\u1edbi t\u1eeb kh\u00f3a khai b\u00e1o phi\u00ean b\u1ea3n (VD: openapi : \"1.0.0\" hay swagger : \"2.0\"). Phi\u00ean b\u1ea3n n\u00e0y s\u1ebd \u0111\u1ecbnh ngh\u0129a to\u00e0n b\u1ed9 c\u1ea5u tr\u00fac c\u1ee7a API. C\u00f2n ph\u1ea7n info s\u1ebd ch\u1ee9a nh\u1eefng th\u00f4ng tin c\u1ee7a API nh\u01b0: title , desscription (optional), version . swagger : \"2.0\" info : description : \"This is a sample server Petstore server. You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/). For this sample, you can use the api key `special-key` to test the authorization filters.\" version : \"1.0.0\" title : \"Swagger Petstore\" termsOfService : \"http://swagger.io/terms/\" contact : email : \"apiteam@swagger.io\" license : name : \"Apache 2.0\" url : \"http://www.apache.org/licenses/LICENSE-2.0.html\" host : domain c\u1ee7a host host : \"petstore.swagger.io\" basePath : \u0110\u01b0\u1eddng d\u1eabn g\u1ed1c \u0111\u1ebfn th\u01b0 m\u1ee5c API c\u1ee7a project basePath : \"/v2\" tags : \u0110\u1ecbnh ngh\u0129a nh\u1eefng c\u00e1i tags, c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u1ec3 gom nh\u1eefng API trong c\u00f9ng m\u1ed9t controllers v\u1ec1 m\u1ed9t nh\u00f3m. tags : - name : \"pet\" description : \"Everything about your Pets\" externalDocs : description : \"Find out more\" url : \"http://swagger.io\" - name : \"store\" description : \"Access to Petstore orders\" - name : \"user\" description : \"Operations about user\" externalDocs : description : \"Find out more about our store\" url : \"http://swagger.io\" 5. paths : \u0110\u00e2y l\u00e0 ph\u1ea7n tr\u1ecdng t\u00e2m c\u1ee7a API Docs . Ph\u1ea7n n\u00e0y s\u1ebd \u0111\u1ecbnh ngh\u0129a nh\u1eefng paths trong API c\u0169ng nh\u01b0 ph\u01b0\u01a1ng th\u1ee9c, tham s\u1ed1 trong API: Path trong API (VD: /user/{userId}). Ph\u01b0\u01a1ng th\u1ee9c c\u1ee7a API (VD: GET, POST, DELETE, PUT \u2026). summary l\u00e0 ph\u1ea7n m\u00f4 t\u1ea3 t\u00f3m t\u1eaft c\u1ee7a API. parameters : s\u1ebd l\u00e0 nh\u1eefng tham s\u1ed1 truy\u1ec1n v\u00e0o API. response l\u00e0 ph\u1ea7n tr\u1ea3 v\u1ec1 c\u1ee7a server. C\u00f3 th\u1ec3 \u0111\u1ecbnh ngh\u0129a nh\u1eefng HTTP Status code : 200, 404, 500 \u2026 v\u1edbi nh\u1eefng m\u00f4 t\u1ea3 cho t\u1eebng tr\u01b0\u1eddng h\u1ee3p. paths : /pet : post : tags : - \"pet\" summary : \"Add a new pet to the store\" description : \"\" operationId : \"addPet\" consumes : - \"application/json\" - \"application/xml\" produces : - \"application/xml\" - \"application/json\" parameters : - in : \"body\" name : \"body\" description : \"Pet object that needs to be added to the store\" required : true schema : $ref : \"#/definitions/Pet\" responses : \"405\" : description : \"Invalid input\" security : - petstore_auth : - \"write:pets\" - \"read:pets\" * C\u00e1c parameters c\u00f3 kh\u00e1 nhi\u1ec1u khai b\u00e1o sau t\u1eeb kh\u00f3a in : in: body : t\u1ea1o cho ng\u01b0\u1eddi d\u00f9ng m\u1ed9t input-text area m\u00e0 \u1edf \u0111\u00f3 ng\u01b0\u1eddi ta c\u00f3 th\u1ec3 nh\u1eadp data body request v\u00e0o (s\u1eed d\u1ee5ng cho methods PATH/ PUT). in: formData : t\u1ea1o cho ng\u01b0\u1eddi d\u00f9ng nh\u1eefng input \u0111\u00e3 \u0111\u1ecbnh tr\u01b0\u1edbc m\u00e0 ng\u01b0\u1eddi ta s\u1ebd nh\u1eadp data request theo t\u1eebng field \u0111\u00e3 \u0111\u1ecbnh s\u1eb5n v\u00e0o (s\u1eed d\u1ee5ng cho methods PATH/ PUT). in: path : t\u1ea1o cho ng\u01b0\u1eddi d\u00f9ng m\u1ed9t input nh\u1eadp v\u00e0o gi\u00e1 tr\u1ecb khai b\u00e1o trong routes, th\u01b0\u1eddng l\u00e0 id. in: query : t\u1ea1o cho ng\u01b0\u1eddi d\u00f9ng m\u1ed9t input nh\u1eadp v\u00e0o gi\u00e1 tr\u1ecb theo c\u00e1c field \u0111\u1ecbnh s\u1eb5n \u0111\u1ec3 g\u1eedi nh\u1eefng query request (s\u1eed d\u1ee5ng trong methods GET). in: header : khai b\u00e1o nh\u1eefng gi\u00e1 tr\u1ecb trong header c\u1ee7a request m\u00e0 b\u1ea1n c\u1ea7n truy\u1ec1n l\u00ean. securityDefinitions : Authentication m\u00e0 APIs s\u1eed d\u1ee5ng \u0111\u1ec3 \u1ee7y quy\u1ec1n truy c\u1eadp t\u00e0i nguy\u00ean. securityDefinitions : petstore_auth : type : \"oauth2\" authorizationUrl : \"http://petstore.swagger.io/oauth/dialog\" flow : \"implicit\" scopes : write:pets : \"modify pets in your account\" read:pets : \"read your pets\" api_key : type : \"apiKey\" name : \"api_key\" in : \"header\" 7. definitions : \u0110\u1ecbnh ngh\u0129a c\u00e1c model s\u1eed d\u1ee5ng b\u1edfi APIs, bao g\u1ed3m: Tham s\u1ed1 \u0111\u1ea7u ti\u00ean l\u00e0 t\u00ean c\u1ee7a Model. Ti\u1ebfp \u0111\u00f3 s\u1ebd l\u00e0 ph\u1ea7n ki\u1ec3u (type) \u0111\u1ecbnh d\u1ea1ng (object). Sau \u0111\u00f3 l\u00e0 ph\u1ea7n thu\u1ed9c t\u00ednh (properties) c\u1ee7a Model n\u00e0y definitions : User : type : \"object\" properties : id : type : \"integer\" format : \"int64\" username : type : \"string\" firstName : type : \"string\" lastName : type : \"string\" email : type : \"string\" password : type : \"string\" phone : type : \"string\" userStatus : type : \"integer\" format : \"int32\" description : \"User Status\" Reference Concepts of RESTful JSON web services REST API: Key Concepts, Best Practices, and Benefits REST & Richardson Maturity Model The REST Architecture REST best practices: what makes an API RESTful Best practices for REST API design How To Perform CRUD Operations with Mongoose and MongoDB Atlas","title":"RESTful"},{"location":"Web-Technologies/6.RESTful/#restful","text":"Concept Methods and Api design best practice Api document (Swagger)","title":"RESTful"},{"location":"Web-Technologies/6.RESTful/#concepts","text":"Web services L\u00e0 ph\u01b0\u01a1ng th\u1ee9c giao ti\u1ebfp gi\u1eefa hai thi\u1ebft b\u1ecb qua Internet L\u00e0 m\u1ed9t module ph\u1ea7n m\u1ec1m \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf \u0111\u1ec3 th\u1ef1c hi\u1ec7n m\u1ed9t nh\u00f3m c\u00e1c t\u00e1c v\u1ee5 nh\u1ea5t \u0111\u1ecbnh. L\u00e0 t\u1eadp h\u1ee3p c\u00e1c ti\u00eau chu\u1ea9n ho\u1eb7c giao th\u1ee9c \u0111\u1ec3 trao \u0111\u1ed5i th\u00f4ng tin gi\u1eefa hai thi\u1ebft b\u1ecb, \u1ee9ng d\u1ee5ng v\u1edbi nhau. API - Application Programming Interface L\u00e0 c\u00e1c ph\u01b0\u01a1ng th\u1ee9c, giao th\u1ee9c k\u1ebft n\u1ed1i v\u1edbi c\u00e1c \u1ee9ng d\u1ee5ng v\u1edbi nhau. Cung c\u1ea5p kh\u1ea3 n\u0103ng truy xu\u1ea5t, trao \u0111\u1ed5i d\u1eef li\u1ec7u gi\u1eefa c\u00e1c \u1ee9ng d\u1ee5ng. REST - REpresentational State Transfer L\u00e0 1 ki\u1ec3u ki\u1ebfn tr\u00fac l\u1eadp tr\u00ecnh, \u0111\u1ecbnh ngh\u0129a c\u00e1c quy t\u1eafc \u0111\u1ec3 thi\u1ebft k\u1ebf web service ch\u00fa tr\u1ecdng v\u00e0o resource Ho\u1ea1t \u0111\u1ed9ng theo m\u00f4 h\u00ecnh Client - Server . S\u1eed d\u1ee5ng HTTP Protocol , REST g\u1eedi HTTP request/response \u0111\u1ebfn m\u1ed9t URL \u0111\u1ec3 trao \u0111\u1ed5i, x\u1eed l\u00fd d\u1eef li\u1ec7u. M\u1ecdi th\u1ee9 trong REST \u0111\u1ec1u \u0111\u01b0\u1ee3c coi l\u00e0 resource v\u00e0 \u0111\u01b0\u1ee3c \u0111\u1ecbnh danh th\u00f4ng qua URI, v\u00e0 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c bi\u1ec3u di\u1ec5n th\u00f4ng qua d\u1ea1ng v\u0103n b\u1ea3n, XML, JSON v.v RESTful l\u00e0 nh\u1eefng \u1ee9ng d\u1ee5ng m\u00e0 c\u00f3 s\u1eed d\u1ee5ng ki\u1ebfn tr\u00fac REST RESTful Web services v\u00e0 RESTful API : RESTful API l\u00e0 m\u1ed9t API tu\u00e2n th\u1ee7 REST architecture . RESTful Web services l\u00e0 m\u1ed9t Web services tu\u00e2n th\u1ee7 REST architecture . REST th\u01b0\u1eddng \u0111\u01b0\u1ee3c tri\u1ec3n khai b\u1eb1ng Web tech , n\u00ean c\u00f3 th\u1ec3 hi\u1ec3u v\u1ec1 RESTful API l\u00e0 m\u1ed9t lo\u1ea1i c\u1ee7a Web services .","title":"Concepts"},{"location":"Web-Technologies/6.RESTful/#rest-api-paradigm","text":"client-app ho\u1eb7c software , g\u1ecdi chung l\u00e0 REST Client : Ch\u1ea1y tr\u00ean thi\u1ebft b\u1ecb c\u1ee7a user v\u00e0 initiates cho s\u1ef1 giao ti\u1ebfp, trao \u0111\u1ed5i d\u1eef li\u1ec7u gi\u1eefa REST Client v\u1edbi REST Server . REST Server : Cung c\u1ea5p m\u1ed9t API v\u1edbi vai tr\u00f2 l\u00e0 m\u1ed9t ph\u01b0\u01a1ng ti\u1ec7n \u0111\u1ec3 user truy c\u1eadp v\u00e0o d\u1eef li\u1ec7u ho\u1eb7c c\u00e1c t\u00ednh n\u0103ng c\u1ee7a n\u00f3. resource : L\u00e0 b\u1ea5t k\u1ef3 ph\u1ea7n n\u1ed9i dung, d\u1eef li\u1ec7u n\u00e0o m\u00e0 server c\u00f3 th\u1ec3 cung c\u1ea5p cho client. \u0110\u1ec3 c\u00f3 quy\u1ec1n truy c\u1eadp v\u00e0o resource , REST Client s\u1ebd g\u1eedi m\u1ed9t HTTP request t\u1edbi REST Server . Sau \u0111\u00f3 REST Server t\u1ea1o HTTP response v\u1edbi resource \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a. C\u1ea3 hai lo\u1ea1i REST messages nh\u01b0 tr\u00ean \u0111\u1ec1 mang t\u00ednh self-descriptive , ngh\u0129a l\u00e0 m\u1ed9t REST messages s\u1ebd ch\u00fang ch\u1ee9a th\u00f4ng tin v\u1ec1 c\u00e1ch x\u1eed l\u00fd v\u00e0 di\u1ec5n gi\u1ea3i cho REST messages \u0111\u00f3. REST messages structure REST Request HTTP method : M\u00f4 t\u1ea3 nh\u1eefng actions, methods g\u00ec s\u1ebd \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n v\u1edbi m\u1ed9t resource . Endpoint : ch\u1ee9a Uniform Resource Identifier - URI cho bi\u1ebft v\u1ecb tr\u00ed v\u00e0 c\u00e1ch truy c\u1eadp resource tr\u00ean Internet. Lo\u1ea1i URI ph\u1ed5 bi\u1ebfn nh\u1ea5t l\u00e0 Unique Resource Location - URL , \u0111\u00f3ng vai tr\u00f2 nh\u01b0 m\u1ed9t \u0111\u1ecba ch\u1ec9 web ho\u00e0n ch\u1ec9nh. Headers : Ch\u1ee9a th\u00f4ng tin li\u00ean quan \u0111\u1ebfn client v\u00e0 server Body : Ch\u1ee9a th\u00f4ng tin c\u1ea7n g\u1eedi \u0111\u1ebfn server REST Response Server kh\u00f4ng g\u1eedi ch\u00ednh x\u00e1c resource \u0111\u01b0\u1ee3c request m\u00e0 l\u00e0 representation b\u1ea3n \u0111\u1ea1i di\u1ec7n c\u1ee7a n\u00f3 - m\u1ed9t m\u00f4 t\u1ea3 m\u00e0 ph\u00eda client c\u00f3 th\u1ec3 \u0111\u1ecdc \u0111\u01b0\u1ee3c v\u1ec1 state hi\u1ec7n t\u1ea1i c\u1ee7a n\u00f3. C\u00f9ng m\u1ed9t resource c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c bi\u1ec3u di\u1ec5n \u1edf c\u00e1c \u0111\u1ecbnh d\u1ea1ng kh\u00e1c nhau, nh\u01b0ng nh\u1eefng \u0111\u1ecbnh d\u1ea1ng ph\u1ed5 bi\u1ebfn nh\u1ea5t l\u00e0 XML v\u00e0 JSON.","title":"REST API paradigm"},{"location":"Web-Technologies/6.RESTful/#methods-and-api-design-best-practice","text":"","title":"Methods and Api design best practice"},{"location":"Web-Technologies/6.RESTful/#1-rest-guiding-principles","text":"C\u00e1c nguy\u00ean t\u1eafc h\u01b0\u1edbng d\u1eabn v\u1ec1 REST \u0111\u01b0\u1ee3c \u0111\u1ec1 ra b\u1edfi Fielding: Client\u2013server : B\u1eb1ng c\u00e1ch t\u00e1ch c\u00e1c v\u1ea5n \u0111\u1ec1 c\u1ee7a user interface kh\u1ecfi c\u00e1c v\u1ea5n \u0111\u1ec1 c\u1ee7a vi\u1ec7c l\u01b0u tr\u1eef d\u1eef li\u1ec7u, vi\u1ec7c \u00e1p d\u1ee5ng m\u00f4 h\u00ecnh Client\u2013server s\u1ebd c\u1ea3i thi\u1ec7n t\u00ednh linh \u0111\u1ed9ng c\u1ee7a user interface v\u00e0 c\u1ea3i thi\u1ec7n kh\u1ea3 n\u0103ng m\u1edf r\u1ed9ng c\u1ee7a app. Stateless : M\u1ed7i request t\u1eeb client \u0111\u1ebfn server ph\u1ea3i ch\u1ee9a to\u00e0n b\u1ed9 c\u00e1c th\u00f4ng tin c\u1ea7n thi\u1ebft \u0111\u1ec3 server c\u00f3 th\u1ec3 hi\u1ec3u request v\u00e0 kh\u00f4ng l\u01b0u context n\u00e0o tr\u00ean server m\u00e0 s\u1ebd \u0111\u01b0\u1ee3c \u1edf local. Visibility - ch\u1ec9 c\u1ea7n nh\u00ecn v\u00e0o 1 request \u0111\u1ec3 hi\u1ec3u \u0111\u01b0\u1ee3c b\u1ea3n ch\u1ea5t \u0111\u1ea7y \u0111\u1ee7 c\u1ee7a n\u00f3, Reliability : L\u00e0 stateless n\u00ean nhi\u1ec7m v\u1ee5 kh\u00f4i ph\u1ee5c d\u1eef li\u1ec7u sau c\u00e1c l\u1ed7i tr\u1edf n\u00ean \u0111\u01a1n gi\u1ea3n h\u01a1n r\u1ea5t nhi\u1ec1u. Scalability - Server kh\u00f4ng ph\u1ea3i l\u01b0u tr\u1eef tr\u1ea1ng th\u00e1i gi\u1eefa c\u00e1c request, kh\u00f4ng ph\u1ea3i qu\u1ea3n l\u00fd vi\u1ec7c s\u1eed d\u1ee5ng t\u00e0i nguy\u00ean gi\u1eefa c\u00e1c request \u2192 cho ph\u00e9p m\u00e1y ch\u1ee7 nhanh ch\u00f3ng gi\u1ea3i ph\u00f3ng t\u00e0i nguy\u00ean v\u00e0 \u0111\u01a1n gi\u1ea3n h\u00f3a h\u01a1n n\u1eefa vi\u1ec7c tri\u1ec3n khai. Cacheable \u2013 Th\u00f4ng tin response v\u1ec1 client s\u1ebd \u0111\u01b0\u1ee3c \u0111\u00e1nh d\u1ea5u l\u00e0 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c cache hay kh\u00f4ng. N\u1ebfu response l\u00e0 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c cache th\u00ec client s\u1ebd \u0111\u01b0\u1ee3c quy\u1ec1n t\u00e1i s\u1eed d\u1ee5ng c\u00e1c d\u1eef li\u1ec7u response \u0111\u00f3 cho c\u00e1c l\u1ea7n s\u1eed d\u1ee5ng ti\u1ebfp theo. Uniform interface \u2013 REST \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a b\u1edfi 4 r\u00e0ng bu\u1ed9c v\u1ec1 interface: URI - \u0110\u1ecbnh danh resource Resource method : C\u00e1c thao t\u00e1c tr\u00ean resource, \u0111\u01b0\u1ee3c ti\u1ebfn h\u00e0nh th\u00f4ng qua c\u00e1c \u0111\u1ea1i di\u1ec7n (representations) H\u1ec7 th\u1ed1ng message mang t\u00ednh t\u1ef1 m\u00f4 t\u1ea3 Hypermedia s\u1ebd l\u00e0 engine c\u1ee7a application state Layered system \u2013 Cho ph\u00e9p ki\u1ebfn tr\u00fac \u0111\u01b0\u1ee3c c\u1ea5u th\u00e0nh b\u1edfi c\u00e1c l\u1edbp ph\u00e2n c\u1ea5p trong \u0111\u00f3 m\u1ed7i th\u00e0nh ph\u1ea7n s\u1ebd kh\u00f4ng th\u1ec3 t\u01b0\u01a1ng t\u00e1c v\u1edbi c\u00e1c l\u1edbp kh\u00e1c ngo\u00e0i l\u1edbp m\u00e0 ch\u00fang \u0111ang t\u01b0\u01a1ng t\u00e1c tr\u1ef1c ti\u1ebfp. Code on demand (optional) \u2013 REST cho ph\u00e9p ch\u1ee9c n\u0103ng c\u1ee7a client \u0111\u01b0\u1ee3c m\u1edf r\u1ed9ng th\u00f4ng qua vi\u1ec7c download v\u00e0 th\u1ef1c hi\u1ec7n code d\u1ea1ng applet ho\u1eb7c scripts khi\u1ebfn client tr\u1edf n\u00ean \u0111\u01a1n gi\u1ea3n h\u01a1n th\u00f4ng qua vi\u1ec7c gi\u1ea3m s\u1ed1 l\u01b0\u1ee3ng c\u00e1c t\u00ednh n\u0103ng c\u1ea7n \u0111\u01b0\u1ee3c ph\u00e1t tri\u1ec3n tr\u01b0\u1edbc. Nh\u01b0 v\u1eady ta th\u1ea5y REST b\u1ea3n th\u00e2n n\u00f3 l\u00e0 1 architectural style v\u00e0 n\u1ebfu ta design m\u1ed9t API hay Web Service m\u00e0 kh\u00f4ng tu\u00e2n th\u1ee7 nh\u1eefng guiding principles nh\u01b0 tr\u00ean th\u00ec n\u00f3 kh\u00f4ng ph\u1ea3i l\u00e0 REST . Ng\u01b0\u1ee3c l\u1ea1i n\u1ebfu n\u00f3 tu\u00e2n th\u1ee7 6 guiding principles nh\u01b0 tr\u00ean th\u00ec n\u00f3 \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 RESTful .","title":"1. REST guiding principles"},{"location":"Web-Technologies/6.RESTful/#2-richardson-maturity-model","text":"Chung m\u1ed9t c\u00e2u h\u1ecfi v\u1ec1 m\u1ee9c \u0111\u1ed9 tu\u00e2n th\u1ee7 c\u1ee7a thi\u1ebft k\u1ebf cho c\u00e1c ti\u00eau chu\u1ea9n c\u1ee7a REST, Leonard Richardson \u0111\u00e3 ti\u1ebfn h\u00e0nh ph\u00e2n t\u00edch h\u00e0ng tr\u0103m m\u1eabu thi\u1ebft k\u1ebf web service v\u00e0 chia ch\u00fang th\u00e0nh 4 categories d\u1ef1a tr\u00ean m\u1ee9c \u0111\u1ed9 tu\u00e2n tu\u00e2n th\u1ee7 REST. M\u00f4 h\u00ecnh n\u00e0y \u0111\u01b0\u1ee3c \u0111\u1eb7t theo t\u00ean \u00f4ng : Richardson Maturity Model Richardson s\u1eed d\u1ee5ng 3 th\u00e0nh t\u1ed1 ( factors ) \u0111\u1ec3 quy\u1ebft \u0111\u1ecbnh m\u1ee9c \u0111\u1ed9 tr\u01b0\u1edfng th\u00e0nh c\u1ee7a m\u1ed9t service trong vi\u1ec7c tu\u00e2n th\u1ee7 REST : URI HTTP HATEOAS (Hypertext As The Engine Of Application State) Ngo\u00e0i ra c\u00f2n c\u00f3 1 factors s\u1ed1 0 l\u00e0 POX Swamp - (Plain Old XML Swamp) \u2192 C\u00e1c service, api c\u00e0ng s\u1eed d\u1ee5ng nhi\u1ec1u c\u00e1c th\u00e0nh t\u1ed1 n\u00e0y th\u00ec ch\u00fang c\u00e0ng \u0111\u01b0\u1ee3c coi l\u00e0 tr\u01b0\u1edfng th\u00e0nh.","title":"2. Richardson Maturity Model"},{"location":"Web-Technologies/6.RESTful/#3-practice","text":"Accept and respond with JSON: app . use ( bodyParser . json ()); S\u1eed d\u1ee5ng nouns thay v\u00ec verbs cho endpoint paths: /user CRUD operations: GET: /users POST: /user PATCH: /user/:id DELETE: /user/:id Handle errors, v\u00e0 return standard status codes","title":"3. Practice"},{"location":"Web-Technologies/6.RESTful/#api-document-swagger","text":"","title":"Api document (Swagger)"},{"location":"Web-Technologies/6.RESTful/#overview","text":"API Document l\u00e0 m\u1ed9t d\u1ea1ng t\u00e0i li\u1ec7u k\u1ef9 thu\u1eadt, bao g\u1ed3m c\u00e1c h\u01b0\u1edbng d\u1eabn v\u1ec1 c\u00e1ch s\u1eed d\u1ee5ng hi\u1ec7u qu\u1ea3 v\u00e0 t\u00edch h\u1ee3p cho m\u1ed9t API. N\u00f3 ph\u1ea3i ng\u1eafn g\u1ecdn nh\u01b0ng ch\u1ee9a \u0111\u1ee7 t\u1ea5t c\u1ea3 c\u00e1c th\u00f4ng tin \u0111\u1ec3 l\u00e0m vi\u1ec7c v\u1edbi API, nh\u01b0 c\u00e1c th\u00f4ng tin chi ti\u1ebft v\u1ec1 c\u00e1c function , class , return type , c\u00e1c argument ,... \u0111\u01b0\u1ee3c \u0111\u1eb7c t\u1ea3 b\u1edfi c\u00e1c h\u01b0\u1edbng d\u1eabn v\u00e0 v\u00ed d\u1ee5. API Document c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng c\u00e1c c\u00f4ng c\u1ee5 t\u1ea1o, ch\u1ec9nh s\u1eeda n\u1ed9i dung v\u00e0 tr\u00ecnh so\u1ea1n th\u1ea3o v\u0103n b\u1ea3n th\u00f4ng th\u01b0\u1eddng. Tuy nhi\u00ean vi\u1ec7c s\u1eed d\u1ee5ng c\u00e1c c\u00f4ng c\u1ee5 d\u00e0nh ri\u00eang cho vi\u1ec7c \u0111\u1ecbnh ngh\u0129a API Document gi\u1ed1ng nh\u01b0 OpenAPI / Swagger Specification hay Postman s\u1ebd t\u1ef1 \u0111\u1ed9ng h\u00f3a qu\u00e1 tr\u00ecnh x\u1eed l\u00fd API Document , gi\u00fap c\u00e1c team d\u1ec5 d\u00e0ng h\u01a1n trong vi\u1ec7c t\u1ea1o v\u00e0 ch\u1ec9nh s\u1eeda API Document . Vai tr\u00f2 c\u1ee7a API Document : N\u00e2ng cao s\u1ef1 ch\u1ea5p nh\u1eadn c\u1ee7a ng\u01b0\u1eddi d\u00f9ng: N\u1ebfu API Docs \u0111\u1ee7 t\u1ed1t, kh\u00e1ch h\u00e0ng s\u1ebd nhanh ch\u00f3ng th\u1ea5y \u0111\u01b0\u1ee3c hi\u1ec7u qu\u1ea3 khi d\u00f9ng API, thu h\u00fat \u0111\u01b0\u1ee3c kh\u00e1ch h\u00e0ng. N\u00e2ng cao nh\u1eadn th\u1ee9c: Nh\u1edd c\u00f3 API Docs kh\u00e1ch h\u00e0ng c\u00f3 th\u1ec3 d\u00f9ng API nhanh v\u00e0 hi\u1ec7u qu\u1ea3, h\u1ecd s\u1ebd tr\u1edf th\u00e0nh kh\u00e1ch h\u00e0ng th\u00e2n thi\u1ebft, t\u0103ng Network effect. H\u1ed7 tr\u1ee3 cho team dev trong vi\u1ec7c tri\u1ec3n khai API. Gi\u00fap API tr\u1edf n\u00ean d\u1ec5 hi\u1ec3u h\u01a1n v\u00e0 \u0111\u01b0\u1ee3c nhi\u1ec1u ng\u01b0\u1eddi bi\u1ebft \u0111\u1ebfn Ti\u1ebft ki\u1ec7m chi ph\u00ed v\u00e0 th\u1eddi gian trong vi\u1ec7c h\u1ed7 tr\u1ee3 s\u1eed d\u1ee5ng, ph\u00e1t tri\u1ec3n API D\u1ec5 b\u1ea3o tr\u00ec h\u01a1n: Kh\u00e1ch h\u00e0ng v\u00e0 team dev d\u1ec5 d\u00e0ng hi\u1ec3u v\u00e0 nhanh ch\u00f3ng ph\u00e1t hi\u1ec7n n\u1ebfu c\u00f3 l\u1ed7i, gi\u00fap b\u1ea3o tr\u00ec nhanh h\u01a1n.","title":"Overview"},{"location":"Web-Technologies/6.RESTful/#swagger-tools","text":"Explore Swagger Tools Swagger l\u00e0 1 open source d\u00f9ng \u0111\u1ec3 ph\u00e1t tri\u1ec3n, thi\u1ebft k\u1ebf, x\u00e2y d\u1ef1ng v\u00e0 l\u00e0m t\u00e0i li\u1ec7u cho c\u00e1c h\u1ec7 th\u1ed1ng RESTfull Web Service . Demo c\u1ee7a Swagger Swagger cung c\u1ea5p c\u00e1c c\u00f4ng c\u1ee5 h\u1ed7 tr\u1ee3 vi\u1ec7c t\u1ea1o API Docs : Swagger UI , Swagger Editor , Swagger Codegen , Swagger Hub , Swagger Inspector . Trong \u0111\u00f3 3 c\u00f4ng c\u1ee5 \u0111\u1ea7u ti\u00ean l\u00e0 open source, Swagger Hub v\u00e0 Swagger Inspector l\u00e0 nh\u1eefng c\u00f4ng c\u1ee5 cao c\u1ea5p h\u01a1n v\u00e0 s\u1ebd ph\u1ea3i tr\u1ea3 ph\u00ed. C\u1ea5u tr\u00fac c\u01a1 b\u1ea3n c\u1ee7a Swagger Specification : editor.swagger.io . V\u00e0 \u0111\u01b0\u1ee3c config v\u1edbi c\u00fa ph\u00e1p yaml file : info : M\u1ed7i OpenAPI Specifications s\u1ebd b\u1eaft \u0111\u1ea7u v\u1edbi t\u1eeb kh\u00f3a khai b\u00e1o phi\u00ean b\u1ea3n (VD: openapi : \"1.0.0\" hay swagger : \"2.0\"). Phi\u00ean b\u1ea3n n\u00e0y s\u1ebd \u0111\u1ecbnh ngh\u0129a to\u00e0n b\u1ed9 c\u1ea5u tr\u00fac c\u1ee7a API. C\u00f2n ph\u1ea7n info s\u1ebd ch\u1ee9a nh\u1eefng th\u00f4ng tin c\u1ee7a API nh\u01b0: title , desscription (optional), version . swagger : \"2.0\" info : description : \"This is a sample server Petstore server. You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/). For this sample, you can use the api key `special-key` to test the authorization filters.\" version : \"1.0.0\" title : \"Swagger Petstore\" termsOfService : \"http://swagger.io/terms/\" contact : email : \"apiteam@swagger.io\" license : name : \"Apache 2.0\" url : \"http://www.apache.org/licenses/LICENSE-2.0.html\" host : domain c\u1ee7a host host : \"petstore.swagger.io\" basePath : \u0110\u01b0\u1eddng d\u1eabn g\u1ed1c \u0111\u1ebfn th\u01b0 m\u1ee5c API c\u1ee7a project basePath : \"/v2\" tags : \u0110\u1ecbnh ngh\u0129a nh\u1eefng c\u00e1i tags, c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u1ec3 gom nh\u1eefng API trong c\u00f9ng m\u1ed9t controllers v\u1ec1 m\u1ed9t nh\u00f3m. tags : - name : \"pet\" description : \"Everything about your Pets\" externalDocs : description : \"Find out more\" url : \"http://swagger.io\" - name : \"store\" description : \"Access to Petstore orders\" - name : \"user\" description : \"Operations about user\" externalDocs : description : \"Find out more about our store\" url : \"http://swagger.io\" 5. paths : \u0110\u00e2y l\u00e0 ph\u1ea7n tr\u1ecdng t\u00e2m c\u1ee7a API Docs . Ph\u1ea7n n\u00e0y s\u1ebd \u0111\u1ecbnh ngh\u0129a nh\u1eefng paths trong API c\u0169ng nh\u01b0 ph\u01b0\u01a1ng th\u1ee9c, tham s\u1ed1 trong API: Path trong API (VD: /user/{userId}). Ph\u01b0\u01a1ng th\u1ee9c c\u1ee7a API (VD: GET, POST, DELETE, PUT \u2026). summary l\u00e0 ph\u1ea7n m\u00f4 t\u1ea3 t\u00f3m t\u1eaft c\u1ee7a API. parameters : s\u1ebd l\u00e0 nh\u1eefng tham s\u1ed1 truy\u1ec1n v\u00e0o API. response l\u00e0 ph\u1ea7n tr\u1ea3 v\u1ec1 c\u1ee7a server. C\u00f3 th\u1ec3 \u0111\u1ecbnh ngh\u0129a nh\u1eefng HTTP Status code : 200, 404, 500 \u2026 v\u1edbi nh\u1eefng m\u00f4 t\u1ea3 cho t\u1eebng tr\u01b0\u1eddng h\u1ee3p. paths : /pet : post : tags : - \"pet\" summary : \"Add a new pet to the store\" description : \"\" operationId : \"addPet\" consumes : - \"application/json\" - \"application/xml\" produces : - \"application/xml\" - \"application/json\" parameters : - in : \"body\" name : \"body\" description : \"Pet object that needs to be added to the store\" required : true schema : $ref : \"#/definitions/Pet\" responses : \"405\" : description : \"Invalid input\" security : - petstore_auth : - \"write:pets\" - \"read:pets\" * C\u00e1c parameters c\u00f3 kh\u00e1 nhi\u1ec1u khai b\u00e1o sau t\u1eeb kh\u00f3a in : in: body : t\u1ea1o cho ng\u01b0\u1eddi d\u00f9ng m\u1ed9t input-text area m\u00e0 \u1edf \u0111\u00f3 ng\u01b0\u1eddi ta c\u00f3 th\u1ec3 nh\u1eadp data body request v\u00e0o (s\u1eed d\u1ee5ng cho methods PATH/ PUT). in: formData : t\u1ea1o cho ng\u01b0\u1eddi d\u00f9ng nh\u1eefng input \u0111\u00e3 \u0111\u1ecbnh tr\u01b0\u1edbc m\u00e0 ng\u01b0\u1eddi ta s\u1ebd nh\u1eadp data request theo t\u1eebng field \u0111\u00e3 \u0111\u1ecbnh s\u1eb5n v\u00e0o (s\u1eed d\u1ee5ng cho methods PATH/ PUT). in: path : t\u1ea1o cho ng\u01b0\u1eddi d\u00f9ng m\u1ed9t input nh\u1eadp v\u00e0o gi\u00e1 tr\u1ecb khai b\u00e1o trong routes, th\u01b0\u1eddng l\u00e0 id. in: query : t\u1ea1o cho ng\u01b0\u1eddi d\u00f9ng m\u1ed9t input nh\u1eadp v\u00e0o gi\u00e1 tr\u1ecb theo c\u00e1c field \u0111\u1ecbnh s\u1eb5n \u0111\u1ec3 g\u1eedi nh\u1eefng query request (s\u1eed d\u1ee5ng trong methods GET). in: header : khai b\u00e1o nh\u1eefng gi\u00e1 tr\u1ecb trong header c\u1ee7a request m\u00e0 b\u1ea1n c\u1ea7n truy\u1ec1n l\u00ean. securityDefinitions : Authentication m\u00e0 APIs s\u1eed d\u1ee5ng \u0111\u1ec3 \u1ee7y quy\u1ec1n truy c\u1eadp t\u00e0i nguy\u00ean. securityDefinitions : petstore_auth : type : \"oauth2\" authorizationUrl : \"http://petstore.swagger.io/oauth/dialog\" flow : \"implicit\" scopes : write:pets : \"modify pets in your account\" read:pets : \"read your pets\" api_key : type : \"apiKey\" name : \"api_key\" in : \"header\" 7. definitions : \u0110\u1ecbnh ngh\u0129a c\u00e1c model s\u1eed d\u1ee5ng b\u1edfi APIs, bao g\u1ed3m: Tham s\u1ed1 \u0111\u1ea7u ti\u00ean l\u00e0 t\u00ean c\u1ee7a Model. Ti\u1ebfp \u0111\u00f3 s\u1ebd l\u00e0 ph\u1ea7n ki\u1ec3u (type) \u0111\u1ecbnh d\u1ea1ng (object). Sau \u0111\u00f3 l\u00e0 ph\u1ea7n thu\u1ed9c t\u00ednh (properties) c\u1ee7a Model n\u00e0y definitions : User : type : \"object\" properties : id : type : \"integer\" format : \"int64\" username : type : \"string\" firstName : type : \"string\" lastName : type : \"string\" email : type : \"string\" password : type : \"string\" phone : type : \"string\" userStatus : type : \"integer\" format : \"int32\" description : \"User Status\"","title":"Swagger Tools"},{"location":"Web-Technologies/6.RESTful/#reference","text":"Concepts of RESTful JSON web services REST API: Key Concepts, Best Practices, and Benefits REST & Richardson Maturity Model The REST Architecture REST best practices: what makes an API RESTful Best practices for REST API design How To Perform CRUD Operations with Mongoose and MongoDB Atlas","title":"Reference"},{"location":"Web-Technologies/7.Authentication/","text":"Authentication - Authorization Authentication - Authorization Oauth2 JWT Authentication - Authorization Concepts Authentication - X\u00e1c th\u1ef1c : l\u00e0 m\u1ed9t qu\u00e1 tr\u00ecnh ki\u1ec3m tra danh t\u00ednh c\u1ee7a m\u1ed9t t\u00e0i kho\u1ea3n \u0111ang v\u00e0o trong h\u1ec7 th\u1ed1ng hi\u1ec7n t\u1ea1i th\u00f4ng qua m\u1ed9t h\u1ec7 th\u1ed1ng x\u00e1c th\u1ef1c. \u0110\u00e2y \u0111\u01b0\u1ee3c xem l\u00e0 b\u01b0\u1edbc ban \u0111\u1ea7u c\u1ee7a m\u1ecdi h\u1ec7 th\u1ed1ng c\u00f3 y\u1ebfu t\u1ed1 ng\u01b0\u1eddi d\u00f9ng. B\u1ea3n ch\u1ea5t c\u1ee7a Authentication ch\u00ednh l\u00e0 th\u1ef1c hi\u1ec7n x\u00e1c nh\u1eadn HTTP request \u0111\u01b0\u1ee3c g\u1eedi \u0111\u1ebfn t\u1eeb client. Authorization - \u1ee6y quy\u1ec1n : l\u00e0 qu\u00e1 tr\u00ecnh \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh xem ng\u01b0\u1eddi d\u00f9ng \u0111\u00e3 \u0111\u01b0\u1ee3c x\u00e1c th\u1ef1c c\u00f3 quy\u1ec1n truy c\u1eadp v\u00e0o c\u00e1c t\u00e0i nguy\u00ean n\u00e0o c\u1ee7a h\u1ec7 th\u1ed1ng. Th\u01b0\u1eddn l\u00e0 b\u01b0\u1edbc ti\u1ebfp theo sau khi b\u01b0\u1edbc x\u00e1c th\u1ef1c user th\u00e0nh c\u00f4ng. Classification of Authentication : HTTP Basic Authentication : Client s\u1ebd g\u1eedi info \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a d\u01b0\u1edbi d\u1ea1ng Base64 trong header c\u1ee7a request. Authorization: Basic bG9sOnNlY3VyZQ== Multi - factor Authentication (MFA) : X\u00e1c th\u1ef1c \u0111a nh\u00e2n t\u1ed1, t\u0103ng t\u00ednh x\u00e1c th\u01b0c + b\u1ea3o m\u1eadt: Security token , Biometric verification . Password - based Authentication : x\u00e1c th\u1ef1c d\u1ef1a tr\u00ean m\u1eadt kh\u1ea9u: strong password, hashed password, OTP, PIN Authentication vs. Authorization Authentication Authorization B\u1ea1n l\u00e0 ai? \u2192 X\u00e1c nh\u1eadn danh t\u00ednh, c\u1ea5p quy\u1ec1n truy c\u1eadp v\u00e0o h\u1ec7 th\u1ed1ng B\u1ea1n c\u00f3 nh\u1eefng quy\u1ec1n g\u00ec? \u2192 X\u00e1c \u0111\u1ecbnh xem b\u1ea1n c\u00f3 \u0111\u01b0\u1ee3c ph\u00e9p truy c\u1eadp t\u00e0i nguy\u00ean kh\u00f4ng B\u01b0\u1edbc \u0111\u1ea7u ti\u00ean Di\u1ec5n ra sau khi authentication th\u00e0nh c\u00f4ng Tr\u1ea3 v\u1ec1 l\u1ed7i 401 Tr\u1ea3 v\u1ec1 l\u1ed7i 403 D\u00f9ng password, OTP, PIN, 2FA/MFA, ... D\u00f9ng t\u00f9y thu\u1ed9c v\u00e0o m\u1ee9c \u0111\u1ed9 b\u1ea3o m\u1eadt, \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh permissions, th\u01b0\u1eddng l\u00e0 JWT Transmits info th\u00f4ng qua ID Token Transmits info th\u00f4ng qua Access Token Th\u01b0\u1eddng \u0111\u01b0\u1ee3c qu\u1ea3n tr\u1ecb b\u1edfi giao th\u1ee9c OpenID Connect (OIDC) Th\u01b0\u1eddng \u0111\u01b0\u1ee3c qu\u1ea3n tr\u1ecb b\u1edfi OAuth 2.0 framework 4 Most Used REST API Authentication Methods HTTP Authentication Schemes (Basic & Bearer) Giao th\u1ee9c HTTP cung c\u1ea5p c\u00e1c Authentication Schemes nh\u01b0: Basic , Bearer , Digest , OAuth v. v... Basic Authentication : Client s\u1ebd g\u1eedi username, password \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a d\u01b0\u1edbi d\u1ea1ng Base64 trong header c\u1ee7a request. Authorization: Basic bG9sOnNlY3VyZQ== Baear Authentication : \"C\u1ea5p quy\u1ec1n truy c\u1eadp cho user mang (bearer) token n\u00e0y\". Bearer token s\u1ebd cho ph\u00e9p truy c\u1eadp \u0111\u1ebfn m\u1ed9t s\u1ed1 t\u00e0i nguy\u00ean ho\u1eb7c url nh\u1ea5t \u0111\u1ecbnh v\u00e0 th\u01b0\u1eddng l\u00e0 m\u1ed9t chu\u1ed7i string \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a, sinh ra b\u1edfi server trong l\u1ea7n response c\u00e1i request login. Authorization: Bearer <token> Api Keys API Keys b\u1ed5 sung c\u00e1c v\u1ea5n \u0111\u1ec1 x\u00e1c th\u1ef1c c\u1ee7a HTTP Authentication . Trong ph\u01b0\u01a1ng ph\u00e1p n\u00e0y, m\u1ed9t key: api-key duy nh\u1ea5t \u0111\u01b0\u1ee3c t\u1ea1o ra v\u00e0 assigned cho m\u1ed7i user trong l\u1ea7n \u0111\u1ea7u ti\u00ean access t\u1edbi API. Gi\u00e1 tr\u1ecb api-key th\u01b0\u1eddng \u0111\u01b0\u1ee3c t\u1ea1o t\u1eeb s\u1ef1 k\u1ebft h\u1ee3p ph\u1ea7n c\u1ee9ng v\u00e0 d\u1eef li\u1ec7u user-agent, IP c\u1ee7a user. OAuth (2.0) OAuth2 k\u1ebft h\u1ee3p Authentication v\u00e0 Authorization \u0111\u1ec3 cho ph\u00e9p ki\u1ec3m so\u00e1t danh t\u00ednh, ph\u1ea1m vi truy c\u1eadp c\u1ee7a ng\u01b0\u1eddi d\u00f9ng h\u1ee3p l\u1ec7 ph\u1ee9c t\u1ea1p h\u01a1n. C\u00f3 c\u00e1c phi\u00ean b\u1ea3n OAuth 1.0 v\u00e0 1.0a, ph\u1ee9c t\u1ea1p h\u01a1n so v\u1edbi OAuth 2.0. Thay \u0111\u1ed5i l\u1edbn trong phi\u00ean b\u1ea3n 2.0 l\u00e0 kh\u00f4ng c\u00f2n b\u1eaft bu\u1ed9c c\u00e1i hashed-key trong m\u1ed7i l\u1ea7n request n\u1eefa, thay v\u00e0o \u0111\u00f3 d\u00f9ng: access token : \u0110\u01b0\u1ee3c g\u1eedi gi\u1ed1ng nh\u01b0 api-key , cho ph\u00e9p \u1ee9ng d\u1ee5ng truy c\u1eadp v\u00e0o d\u1eef li\u1ec7u c\u1ee7a ng\u01b0\u1eddi d\u00f9ng, c\u00f3 th\u1ec3 h\u1ebft h\u1ea1n . refresh token : \u0110\u1ec3 l\u1ea5y m\u1ed9t token m\u1edbi, n\u1ebfu access token h\u1ebft h\u1ea1n. OpenID Connect OpenID Connect l\u00e0 m\u1ed9t ti\u00eau chu\u1ea9n m\u1edf v\u00e0 l\u00e0 m\u1ed9t giao th\u1ee9c Authentication ph\u00e2n c\u1ea5p, Cho ph\u00e9p user c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c authen b\u1edfi nhi\u1ec1u website s\u1eed d\u1ee5ng service c\u1ee7a b\u00ean th\u1ee9 3 \u2192 Gi\u1ea3m \u0111\u01b0\u1ee3c vi\u1ec7c ph\u1ea3i thi\u1ebft l\u1eadp ri\u00eang logic sign-up/login cho m\u1ed7i website, cho ph\u00e9p c\u00e1c user c\u00f3 th\u1ec3 login t\u1edbi nhi\u1ec1u webstie ko h\u1ec1 li\u00ean quan t\u1edbi nhau m\u00e0 ko c\u1ea7n ph\u1ea3i c\u00f3 nh\u1eefng \u0111\u1ecbnh danh v\u00e0 password ri\u00eang cho m\u1ed7i site. C\u01a1 ch\u1ebf OpenID, d\u00f9ng duy nh\u1ea5t identity provider t\u1eeb b\u00ean th\u1ee9 3, ho\u1eb7c server chuy\u00ean auth \u0111\u1ec3 qu\u1ea3n l\u00fd password, v\u00e0 provider n\u00e0y s\u1ebd confirm identity c\u1ee7a user t\u1edbi c\u00e1c website, ko c\u00f3 m\u1ed9t website n\u00e0o c\u00f3 th\u1ec3 bi\u1ebft \u0111\u01b0\u1ee3c password c\u1ee7a user \u2192 y\u1ebfu t\u1ed1 b\u1ea3o m\u1eadt r\u1ea5t cao. Trong c\u01a1 ch\u1ebf OpenID Connect , khi provider th\u1ee9 3 ho\u1eb7c authentication server x\u00e1c th\u1ef1c user th\u00e0nh c\u00f4ng, n\u00f3 s\u1ebd tr\u1ea3 v\u1ec1 cho client m\u1ed9t c\u00e1i token \u0111\u1ec3 client d\u00f9ng c\u00e1i token n\u00e0y g\u1eedi k\u00e8m v\u1edbi c\u00e1c request trong header t\u1edbi server, server s\u1ebd gi\u1ea3i m\u00e3 token n\u00e0y v\u00e0 bi\u1ebft \u0111\u01b0\u1ee3c user \u0111\u00f3 c\u00f3 nh\u1eefng permission g\u00ec, t\u1eeb \u0111\u00f3 serve chu\u1ea9n. \u2192 d\u00f9ng JWT Oauth2 OAuth l\u00e0 vi\u1ebft t\u1eaft c\u1ee7a Open v\u1edbi Authentication ho\u1eb7c Authorization, l\u00e0 s\u1ef1 k\u1ebft h\u1ee3p gi\u1eefa k\u1ebft h\u1ee3p Authentication v\u00e0 Authorization . OAuth 2.0 - l\u00e0 m\u1ed9t giao th\u1ee9c cho ph\u00e9p ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 c\u1ea5p quy\u1ec1n truy c\u1eadp \u1ee9ng d\u1ee5ng ho\u1eb7c trang web c\u1ee7a b\u00ean th\u1ee9 ba v\u00e0o c\u00e1c t\u00e0i nguy\u00ean \u0111\u01b0\u1ee3c b\u1ea3o v\u1ec7 c\u1ee7a c\u1ee7a h\u1ecd m\u00e0 kh\u00f4ng nh\u1ea5t thi\u1ebft ph\u1ea3i ti\u1ebft l\u1ed9 th\u00f4ng tin \u0111\u0103ng nh\u1eadp ho\u1eb7c th\u1eadm ch\u00ed danh t\u00ednh c\u1ee7a h\u1ecd. 1. Roles Trong OAuth2 \u0111\u1ecbnh ngh\u0129a 4 vai tr\u00f2: Resource owner (or the End User): L\u00e0 nh\u1eefng user c\u00f3 kh\u1ea3 n\u0103ng c\u1ea5p quy\u1ec1n truy c\u1eadp, ch\u1ee7 s\u1edf h\u1eefu c\u1ee7a t\u00e0i nguy\u00ean m\u00e0 \u1ee9ng d\u1ee5ng mu\u1ed1n l\u1ea5y. Resource server (or API Gateway): N\u01a1i l\u01b0u tr\u1eef c\u00e1c t\u00e0i nguy\u00ean, c\u00f3 kh\u1ea3 n\u0103ng x\u1eed l\u00fd c\u00e1c request truy c\u1eadp \u0111\u1ebfn c\u00e1c t\u00e0i nguy\u00ean \u0111\u01b0\u1ee3c b\u1ea3o v\u1ec7. Client Application (or the Client): L\u00e0 nh\u1eefng \u1ee9ng d\u1ee5ng b\u00ean th\u1ee9 3 mu\u1ed1n truy c\u1eadp v\u00e0o ph\u1ea7n t\u00e0i nguy\u00ean \u0111\u01b0\u1ee3c chia s\u1ebb v\u1edbi t\u01b0 c\u00e1ch c\u1ee7a ng\u01b0\u1eddi s\u1edf h\u1eefu (resource owner) v\u00e0 tr\u01b0\u1edbc khi truy c\u1eadp \u1ee9ng d\u1ee5ng c\u1ea7n \u0111\u01b0\u1ee3c s\u1ef1 \u1ee7y quy\u1ec1n c\u1ee7a user . Authorization server : L\u00e0m nhi\u1ec7m v\u1ee5 x\u00e1c th\u1ef1c, ki\u1ec3m tra th\u00f4ng tin m\u00e0 user g\u1eedi \u0111\u1ebfn t\u1eeb \u0111\u00f3 c\u1ea5p quy\u1ec1n truy c\u1eadp cho \u1ee9ng d\u1ee5ng b\u1eb1ng vi\u1ec7c sinh ra c\u00e1c access token . \u0110\u00f4i khi authorization server c\u0169ng ch\u00ednh l\u00e0 resource server . 2. Authorization Grant Types Khi Client Application y\u00eau c\u1ea7u \u1ee7y quy\u1ec1n \u0111\u1ec3 truy c\u1eadp v\u00e0o Resource Server th\u00f4ng qua Resource owner . N\u1ebfu Resource owner \u1ee7y quy\u1ec1n cho y\u00eau c\u1ea7u tr\u00ean, Application s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c gi\u1ea5y \u1ee7y quy\u1ec1n - Authorization Grant t\u1eeb ph\u00eda Resource owner . C\u00f3 4 lo\u1ea1i Authorization Grant : Authorization Code : \u0110\u00e2y l\u00e0 lo\u1ea1i gi\u1ea5y \u1ee7y quy\u1ec1n \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng nh\u01b0 l\u00e0 m\u1ed9t access tokens (v\u00e0 optional l\u00e0 refresh token ). Th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng v\u1edbi c\u00e1c server-side Application. T\u1ed1i \u01b0u h\u00f3a cho confidential clients . Implicit : \u0110\u01b0\u1ee3c s\u1eed d\u1ee5ng v\u1edbi c\u00e1c Mobile App (\u1ee9ng d\u1ee5ng ch\u1ea1y tr\u00ean thi\u1ebft b\u1ecb c\u1ee7a User) ho\u1eb7c Web App (c\u00f3 th\u1ec3 hi\u1ec3u l\u00e0 Browser App, vd Chrome Extension). T\u1ed1i \u01b0u h\u00f3a cho public clients . Client Credentials: S\u1eed d\u1ee5ng v\u1edbi c\u00e1c \u1ee9ng d\u1ee5ng truy c\u1eadp th\u00f4ng qua API. T\u1ed1i \u01b0u h\u00f3a cho client-only authentication Resource Owner Password Credentials : S\u1eed d\u1ee5ng v\u1edbi c\u00e1c Trusted Application, ki\u1ec3u nh\u01b0 nh\u1eefng \u1ee9ng d\u1ee5ng v\u1ec1 Security. Khi \u0111\u00f3 Resource Owner c\u00f3 m\u1ed1i quan h\u1ec7 tin c\u1eady v\u1edbi Client Application v\u00e0 Client Application c\u00f3 kh\u1ea3 n\u0103ng l\u1ea5y th\u00f4ng tin \u0111\u0103ng nh\u1eadp c\u1ee7a Resource Owner . 3. API Gateway API Gateway c\u00f3 th\u1ec3 coi l\u00e0 m\u1ed9t c\u1ed5ng trung gian, c\u1ed5ng v\u00e0o duy nh\u1ea5t t\u1edbi h\u1ec7 th\u1ed1ng microservices , khi \u0111\u00f3 API Gateway s\u1ebd nh\u1eadn c\u00e1c requests t\u1eeb ph\u00eda client, x\u00e1c th\u1ef1c v\u00e0 \u0111i\u1ec1u h\u01b0\u1edbng ch\u00fang \u0111\u1ebfn c\u00e1c API c\u1ee5 th\u1ec3 tr\u00ean c\u00e1c behavior services. API Gateway c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng nh\u01b0 m\u1ed9t Authorization server v\u00e0 m\u1ed9t Resource server . a. API Gateway as a Resource Server Khi API Gateway \u0111\u00f3ng vai tr\u00f2 l\u00e0 m\u1ed9t Resource server , n\u00f3 l\u01b0u tr\u1eef c\u00e1c protected resources , \u0111\u1ed3ng th\u1eddi ti\u1ebfp nh\u1eadn v\u00e0 ph\u1ea3n h\u1ed3i c\u00e1c y\u00eau c\u1ea7u c\u1ee7a Client Application trong \u0111\u00f3 bao g\u1ed3m m\u00e3 access token . Client Application s\u1ebd g\u1eedi access token trong Header c\u1ee7a Request v\u1edbi c\u00e1i field l\u00e0 Authorization s\u1eed d\u1ee5ng Bearer authentication scheme . Sau \u0111\u00f3 Resource server ti\u1ebfn h\u00e0nh x\u00e1c th\u1ef1c access token , n\u1ebfu access token h\u1ee3p l\u1ec7 th\u00ec Client Application c\u00f3 quy\u1ec1n truy c\u1eadp protected resources , n\u1ebfu kh\u00f4ng h\u1ee3p l\u1ec7, c\u00e1i request s\u1ebd b\u1ecb rejects. b. API Gateway as an Authorization Server Khi API Gateway ho\u1ea1t \u0111\u1ed9ng nh\u01b0 m\u1ed9t Authorization Server , n\u00f3 s\u1ebd nh\u1eadn c\u00e1c y\u00eau c\u1ea7u \u1ee7y quy\u1ec1n t\u1eeb Client Application v\u00e0 x\u1eed l\u00fd c\u00e1c t\u01b0\u01a1ng t\u00e1c gi\u1eefa Client Application , Resource server v\u00e0 Resource owner \u0111\u1ec3 approve cho c\u00e1i request \u1ee7y quy\u1ec1n \u0111\u00f3. C\u1ee5 th\u1ec3: API Gateway s\u1ebd c\u1ea5p 1 access token cho c\u00e1c Client Application thay m\u1eb7t cho Resource owner \u0111\u1ec3 s\u1eed d\u1ee5ng trong vi\u1ec7c x\u00e1c th\u1ef1c c\u00e1c l\u1ec7nh g\u1ecdi API t\u1edbi Resource server . Resource server ti\u1ebfp nh\u1eadn access token t\u1eeb ph\u00eda Client Application v\u00e0 x\u00e9t: N\u1ebfu Client Application \u0111\u01b0\u1ee3c ph\u00e9p truy c\u1eadp protected resources , Resource server s\u1ebd th\u1ef1c thi c\u00e1i request n\u00e0y. V\u00e0 Authorization Server , khi n\u00e0y \u0111ang l\u00e0 API Gateway s\u1ebd gi\u1eef l\u1ea1i th\u00f4ng tin v\u1ec1 c\u00e1c access token m\u00e0 n\u00f3 ph\u00e1t h\u00e0nh, bao g\u1ed3m c\u1ea3 th\u00f4ng tin ng\u01b0\u1eddi d\u00f9ng ( Resource owner ). Khi Resource owner xu\u1ea5t tr\u00ecnh access token cho Resource server , Resource server s\u1ebd g\u1eedi access token \u0111\u1ebfn Authorization Server \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o r\u1eb1ng access token h\u1ee3p l\u1ec7 v\u00e0 c\u00e1i kh\u1ea3 n\u0103ng service cho c\u00e1i request n\u00e0y n\u1eb1m trong scope c\u1ee7a access token . Scope l\u00e0 \u0111\u1ecbnh ngh\u0129a c\u1ee7a c\u00e1c t\u00e0i nguy\u00ean m\u00e0 Client Application c\u00f3 th\u1ec3 truy c\u1eadp thay m\u1eb7t cho Resource owner . N\u1ebfu Client Application kh\u00f4ng c\u00f3 quy\u1ec1n truy c\u1eadp t\u00e0i nguy\u00ean, Resource server s\u1ebd t\u1eeb ch\u1ed1i y\u00eau c\u1ea7u. 4. OAuth 2.0 Workflow Workflow c\u1ee7a OAuth 2.0 th\u00f4ng qua 4 b\u01b0\u1edbc, \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 nh\u01b0 sau: End-user \u0111\u0103ng nh\u1eadp, Client Application g\u1eedi y\u00eau c\u1ea7u x\u00e1c th\u1ef1c ( k\u00e8m id token ) \u0111\u1ebfn m\u00e1y ch\u1ee7 \u1ee7y quy\u1ec1n \u0111\u1ec3 l\u1ea5y access token . Authorization Server x\u00e1c th\u1ef1c y\u00eau c\u1ea7u v\u00e0 t\u1ea1o access token cho Client Application Client Application s\u1eed d\u1ee5ng access token n\u00e0y \u0111\u1ec3 g\u1eedi c\u00e1c y\u00eau c\u1ea7u HTTP \u0111\u1ebfn API Gateway . API Gateway sau \u0111\u00f3 th\u1ef1c hi\u1ec7n nh\u01b0 sau: a. X\u00e1c \u0111\u1ecbnh danh t\u00ednh c\u1ee7a Client Application b\u1eb1ng clientId . b. Ti\u1ebfn h\u00e0nh verify c\u00e1i access token (locally ho\u1eb7c remotely) c. Ki\u1ec3m tra xem t\u00e0i nguy\u00ean \u0111\u01b0\u1ee3c y\u00eau c\u1ea7u trong c\u00e1i request thu\u1ed9c scope c\u1ee7a access token hay kh\u00f4ng. d.Ki\u1ec3m tra c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng \u0111i k\u00e8m trong request. N\u1ebfu t\u1ea5t c\u1ea3 nh\u1eefng \u0111i\u1ec1u tr\u00ean \u0111\u01b0\u1ee3c x\u00e1c th\u1ef1c, API Gateway s\u1ebd cung c\u1ea5p quy\u1ec1n truy c\u1eadp v\u00e0o protected resources . Trong tr\u01b0\u1eddng h\u1ee3p access token h\u1ebft h\u1ea1n, Authorization Server s\u1ebd tr\u1ea3 v\u1ec1 ph\u1ea3n h\u1ed3i l\u1ed7i c\u1ee5 th\u1ec3. Sau \u0111\u00f3, \u1ee9ng d\u1ee5ng kh\u00e1ch c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng refresh token \u0111\u1ec3 y\u00eau c\u1ea7u m\u1ed9t access token m\u1edbi. Authorization Server s\u1ebd tr\u1ea3 v\u1ec1 access token m\u1edbi \u0111\u1ec3 ti\u1ebfp t\u1ee5c d\u00f9ng cho vi\u1ec7c truy c\u1eadp protected resources . JWT 1. Concepts JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed. JWTs can be signed using a secret (with the HMAC algorithm) or a public/private key pair using RSA or ECDSA. Source JWT - JSON Web Token l\u00e0 m\u1ed9t ti\u00eau chu\u1ea9n m\u1edf d\u1ef1a tr\u00ean JSON (RFC 7519) , ph\u01b0\u01a1ng ti\u1ec7n \u0111\u1ea1i di\u1ec7n cho m\u1ed9t t\u1eadp h\u1ee3p th\u00f4ng tin \u0111\u01b0\u1ee3c truy\u1ec1n m\u1ed9t c\u00e1ch an to\u00e0n gi\u1eefa client-server d\u01b0\u1edbi d\u1ea1ng JSON object . T\u1eadp h\u1ee3p th\u00f4ng tin n\u00e0y \u0111\u01b0\u1ee3c \u0111\u1ea1i di\u1ec7n b\u1edfi JWT v\u00e0 n\u00f3 \u0111\u01b0\u1ee3c x\u00e1c minh , b\u1ea3o m\u1eadt v\u00e0 \u0111\u00e1ng tin c\u1eady v\u00ec n\u00f3 \u0111\u01b0\u1ee3c digitally signed . digitally signed b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng m\u1ed9t secret-key (\u0111\u1ed1i v\u1edbi thu\u1eadt to\u00e1n HMAC) ho\u1eb7c public/private key pair d\u00f9ng chu\u1ea9n RSA ho\u1eb7c ECDSA. T\u00f3m l\u1ea1i l\u00e0: D\u00f9ng \u0111\u1ec3 truy\u1ec1n th\u00f4ng tin m\u1ed9t c\u00e1ch an to\u00e0n. C\u00f3 ph\u1ea7n ch\u1eef k\u00fd n\u00ean \u0111\u1ea3m b\u1ea3o d\u1eef li\u1ec7u kh\u00f4ng b\u1ecb thay \u0111\u1ed5i, ch\u1ec9nh s\u1eeda tr\u00ean \u0111\u01b0\u1eddng \u0111i. 2. JWT Structure M\u1ed9t JWT s\u1ebd c\u00f3 c\u1ea5u tr\u00fac ki\u1ec3u: asdfasdfasdf.aD\u00e1daSDasd.FdfSDFsdfSDF Header : G\u1ed3m c\u00f3 2 ph\u1ea7n l\u00e0: lo\u1ea1i m\u00e3 token, v\u00e0 thu\u1eadt to\u00e1n \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 sinh ra ph\u1ea7n Signature . 2 ph\u1ea7n n\u00e0y \u0111\u01b0\u1ee3c define nh\u01b0 l\u00e0 1 json object v\u00e0 sau \u0111\u00f3, JSON n\u00e0y \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a Base64Url \u0111\u1ec3 t\u1ea1o th\u00e0nh ph\u1ea7n \u0111\u1ea7u ti\u00ean c\u1ee7a JWT. Payload : Ch\u1ee9a c\u00e1c claims . Claims th\u01b0\u1eddng ch\u1ee9a c\u00e1c thu\u1ed9c t\u00ednh nh\u01b0 typically , th\u00f4ng tin user v\u00e0 c\u00e1c d\u1eef li\u1ec7u b\u1ed5 sung. C\u00f3 3 lo\u1ea1i claims: registered , public , v\u00e0 private claims. Danh s\u00e1ch \u0111\u1ea7y \u0111\u1ee7 c\u00e1c Claims xem t\u1ea1i JSON Web Token Claims . Ph\u1ea7n n\u00e0y c\u0169ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a v\u00e0 m\u00e3 h\u00f3a t\u01b0\u01a1ng t\u1ef1 Header . Signature : M\u1ed9t chu\u1ed7i \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a b\u1edfi header , payload c\u00f9ng v\u1edbi thu\u1eadt to\u00e1n m\u00e3 h\u00f3a \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh trong header. Signature \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 x\u00e1c minh data trong payload kh\u00f4ng b\u1ecb thay \u0111\u1ed5i trong qu\u00e1 tr\u00ecnh \u0111i t\u1eeb client-server v\u00e0 trong tr\u01b0\u1eddng h\u1ee3p token \u0111\u01b0\u1ee3c sign b\u1eb1ng private key , n\u00f3 c\u0169ng c\u00f3 th\u1ec3 x\u00e1c minh \u0111\u01b0\u1ee3c danh t\u00ednh c\u1ee7a ng\u01b0\u1eddi g\u1eedi JWT . Demo API Gateway & JWT Usecase API Gateway s\u1eed d\u1ee5ng JWT d\u1ef1a tr\u00ean RSA \u0111\u1ec3 cung c\u1ea5p kh\u1ea3 n\u0103ng b\u1ea3o v\u1ec7 m\u1ea1nh m\u1ebd h\u01a1n cho JWT khi API Gateway l\u00e0 nh\u00e0 ph\u00e1t h\u00e0nh token . JWT ch\u1ee9a 1 ho\u1eb7c nhi\u1ec1u claims n\u1eb1m trong Payload c\u1ee7a JWT. API Gateway tr\u00edch xu\u1ea5t c\u00e1c y\u00eau c\u1ea7u t\u1eeb JWT , \u0111\u1ecbnh danh cho application v\u00e0 sau \u0111\u00f3 cho ph\u00e9p application truy c\u1eadp v\u00e0o protected resources . JWT Authorization Workflow Workflow gi\u1eefa requests v\u00e0 responses \u0111\u01b0\u1ee3c \u1ee7y quy\u1ec1n, gi\u1eefa end-user , client-app , n\u01a1i ph\u00e1t h\u00e0nh JWT v\u00e0 resource server nh\u01b0 \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 trong h\u00ecnh sau: End-user \u0111\u0103ng nh\u1eadp, Client app g\u1eedi y\u00eau c\u1ea7u x\u00e1c th\u1ef1c \u0111\u1ebfn API Gateway ho\u1eb7c \u0111\u1ebfn b\u1ea5t k\u1ef3 b\u00ean th\u1ee9 ba n\u00e0o \u0111\u1ec3 l\u1ea5y m\u00e3 JWT . N\u1ebfu th\u00f4ng tin \u0111\u0103ng nh\u1eadp c\u1ee7a End-user \u0111\u01b0\u1ee3c g\u1eedi t\u1eeb Client app h\u1ee3p l\u1ec7, API Gateway s\u1ebd t\u1ea1o m\u00e3 JWT b\u1eb1ng c\u00e1c logic, thu\u1eadt to\u00e1n s\u1ebd t\u00ecm hi\u1ec3u b\u00ean d\u01b0\u1edbi v\u00e0 g\u1eedi JWT \u0111\u00e3 t\u1ea1o \u0111\u1ebfn Client app . N\u1ebfu th\u00f4ng tin x\u00e1c th\u1ef1c c\u1ee7a ng\u01b0\u1eddi d\u00f9ng kh\u00f4ng h\u1ee3p l\u1ec7, API Gateway tr\u1ea3 v\u1ec1 m\u1ed9t ph\u1ea3n h\u1ed3i l\u1ed7i c\u1ee5 th\u1ec3. Client app g\u1eedi JWT \u0111\u00e3 t\u1ea1o ch\u1ee9a trong Header c\u1ee7a request header d\u01b0\u1edbi d\u1ea1ng HTTP Bearer Authorization token \u0111\u1ec3 truy c\u1eadp t\u1edbi protected resources \u0111\u01b0\u1ee3c b\u1ea3o v\u1ec7 trong API Gateway. API Gateway s\u1ebd x\u00e1c th\u1ef1c client-app tr\u01b0\u1edbc, d\u1ef1a tr\u00ean th\u00f4ng tin l\u1ea5y t\u1eeb JWT, sau \u0111\u00f3 x\u00e1c th\u1ef1c JWT b\u1eb1ng c\u00e1c thu\u1eadt to\u00e1n, logic v\u00e0 cung c\u1ea5p quy\u1ec1n truy c\u1eadp v\u00e0o c\u00e1c protected resources . N\u1ebfu x\u00e1c th\u1ef1c kh\u00f4ng th\u00e0nh c\u00f4ng, API Gateway tr\u1ea3 v\u1ec1 ph\u1ea3n h\u1ed3i l\u1ed7i c\u1ee5 th\u1ec3. Reference AUTHeNtication VS AUTHoriZation - dev.to Difference between Authentication and Authorization Authentication vs. Authorization - auth0.com 4 Most Used Authentication Methods OAuth2 Authentication Use case and Workflow JWT Authentication Use case and Workflow JWT Structure","title":"Authentication - Authorization"},{"location":"Web-Technologies/7.Authentication/#authentication-authorization","text":"Authentication - Authorization Oauth2 JWT","title":"Authentication - Authorization"},{"location":"Web-Technologies/7.Authentication/#authentication-authorization_1","text":"","title":"Authentication - Authorization"},{"location":"Web-Technologies/7.Authentication/#concepts","text":"Authentication - X\u00e1c th\u1ef1c : l\u00e0 m\u1ed9t qu\u00e1 tr\u00ecnh ki\u1ec3m tra danh t\u00ednh c\u1ee7a m\u1ed9t t\u00e0i kho\u1ea3n \u0111ang v\u00e0o trong h\u1ec7 th\u1ed1ng hi\u1ec7n t\u1ea1i th\u00f4ng qua m\u1ed9t h\u1ec7 th\u1ed1ng x\u00e1c th\u1ef1c. \u0110\u00e2y \u0111\u01b0\u1ee3c xem l\u00e0 b\u01b0\u1edbc ban \u0111\u1ea7u c\u1ee7a m\u1ecdi h\u1ec7 th\u1ed1ng c\u00f3 y\u1ebfu t\u1ed1 ng\u01b0\u1eddi d\u00f9ng. B\u1ea3n ch\u1ea5t c\u1ee7a Authentication ch\u00ednh l\u00e0 th\u1ef1c hi\u1ec7n x\u00e1c nh\u1eadn HTTP request \u0111\u01b0\u1ee3c g\u1eedi \u0111\u1ebfn t\u1eeb client. Authorization - \u1ee6y quy\u1ec1n : l\u00e0 qu\u00e1 tr\u00ecnh \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh xem ng\u01b0\u1eddi d\u00f9ng \u0111\u00e3 \u0111\u01b0\u1ee3c x\u00e1c th\u1ef1c c\u00f3 quy\u1ec1n truy c\u1eadp v\u00e0o c\u00e1c t\u00e0i nguy\u00ean n\u00e0o c\u1ee7a h\u1ec7 th\u1ed1ng. Th\u01b0\u1eddn l\u00e0 b\u01b0\u1edbc ti\u1ebfp theo sau khi b\u01b0\u1edbc x\u00e1c th\u1ef1c user th\u00e0nh c\u00f4ng. Classification of Authentication : HTTP Basic Authentication : Client s\u1ebd g\u1eedi info \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a d\u01b0\u1edbi d\u1ea1ng Base64 trong header c\u1ee7a request. Authorization: Basic bG9sOnNlY3VyZQ== Multi - factor Authentication (MFA) : X\u00e1c th\u1ef1c \u0111a nh\u00e2n t\u1ed1, t\u0103ng t\u00ednh x\u00e1c th\u01b0c + b\u1ea3o m\u1eadt: Security token , Biometric verification . Password - based Authentication : x\u00e1c th\u1ef1c d\u1ef1a tr\u00ean m\u1eadt kh\u1ea9u: strong password, hashed password, OTP, PIN","title":"Concepts"},{"location":"Web-Technologies/7.Authentication/#authentication-vs-authorization","text":"Authentication Authorization B\u1ea1n l\u00e0 ai? \u2192 X\u00e1c nh\u1eadn danh t\u00ednh, c\u1ea5p quy\u1ec1n truy c\u1eadp v\u00e0o h\u1ec7 th\u1ed1ng B\u1ea1n c\u00f3 nh\u1eefng quy\u1ec1n g\u00ec? \u2192 X\u00e1c \u0111\u1ecbnh xem b\u1ea1n c\u00f3 \u0111\u01b0\u1ee3c ph\u00e9p truy c\u1eadp t\u00e0i nguy\u00ean kh\u00f4ng B\u01b0\u1edbc \u0111\u1ea7u ti\u00ean Di\u1ec5n ra sau khi authentication th\u00e0nh c\u00f4ng Tr\u1ea3 v\u1ec1 l\u1ed7i 401 Tr\u1ea3 v\u1ec1 l\u1ed7i 403 D\u00f9ng password, OTP, PIN, 2FA/MFA, ... D\u00f9ng t\u00f9y thu\u1ed9c v\u00e0o m\u1ee9c \u0111\u1ed9 b\u1ea3o m\u1eadt, \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh permissions, th\u01b0\u1eddng l\u00e0 JWT Transmits info th\u00f4ng qua ID Token Transmits info th\u00f4ng qua Access Token Th\u01b0\u1eddng \u0111\u01b0\u1ee3c qu\u1ea3n tr\u1ecb b\u1edfi giao th\u1ee9c OpenID Connect (OIDC) Th\u01b0\u1eddng \u0111\u01b0\u1ee3c qu\u1ea3n tr\u1ecb b\u1edfi OAuth 2.0 framework","title":"Authentication vs. Authorization"},{"location":"Web-Technologies/7.Authentication/#4-most-used-rest-api-authentication-methods","text":"HTTP Authentication Schemes (Basic & Bearer) Giao th\u1ee9c HTTP cung c\u1ea5p c\u00e1c Authentication Schemes nh\u01b0: Basic , Bearer , Digest , OAuth v. v... Basic Authentication : Client s\u1ebd g\u1eedi username, password \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a d\u01b0\u1edbi d\u1ea1ng Base64 trong header c\u1ee7a request. Authorization: Basic bG9sOnNlY3VyZQ== Baear Authentication : \"C\u1ea5p quy\u1ec1n truy c\u1eadp cho user mang (bearer) token n\u00e0y\". Bearer token s\u1ebd cho ph\u00e9p truy c\u1eadp \u0111\u1ebfn m\u1ed9t s\u1ed1 t\u00e0i nguy\u00ean ho\u1eb7c url nh\u1ea5t \u0111\u1ecbnh v\u00e0 th\u01b0\u1eddng l\u00e0 m\u1ed9t chu\u1ed7i string \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a, sinh ra b\u1edfi server trong l\u1ea7n response c\u00e1i request login. Authorization: Bearer <token> Api Keys API Keys b\u1ed5 sung c\u00e1c v\u1ea5n \u0111\u1ec1 x\u00e1c th\u1ef1c c\u1ee7a HTTP Authentication . Trong ph\u01b0\u01a1ng ph\u00e1p n\u00e0y, m\u1ed9t key: api-key duy nh\u1ea5t \u0111\u01b0\u1ee3c t\u1ea1o ra v\u00e0 assigned cho m\u1ed7i user trong l\u1ea7n \u0111\u1ea7u ti\u00ean access t\u1edbi API. Gi\u00e1 tr\u1ecb api-key th\u01b0\u1eddng \u0111\u01b0\u1ee3c t\u1ea1o t\u1eeb s\u1ef1 k\u1ebft h\u1ee3p ph\u1ea7n c\u1ee9ng v\u00e0 d\u1eef li\u1ec7u user-agent, IP c\u1ee7a user. OAuth (2.0) OAuth2 k\u1ebft h\u1ee3p Authentication v\u00e0 Authorization \u0111\u1ec3 cho ph\u00e9p ki\u1ec3m so\u00e1t danh t\u00ednh, ph\u1ea1m vi truy c\u1eadp c\u1ee7a ng\u01b0\u1eddi d\u00f9ng h\u1ee3p l\u1ec7 ph\u1ee9c t\u1ea1p h\u01a1n. C\u00f3 c\u00e1c phi\u00ean b\u1ea3n OAuth 1.0 v\u00e0 1.0a, ph\u1ee9c t\u1ea1p h\u01a1n so v\u1edbi OAuth 2.0. Thay \u0111\u1ed5i l\u1edbn trong phi\u00ean b\u1ea3n 2.0 l\u00e0 kh\u00f4ng c\u00f2n b\u1eaft bu\u1ed9c c\u00e1i hashed-key trong m\u1ed7i l\u1ea7n request n\u1eefa, thay v\u00e0o \u0111\u00f3 d\u00f9ng: access token : \u0110\u01b0\u1ee3c g\u1eedi gi\u1ed1ng nh\u01b0 api-key , cho ph\u00e9p \u1ee9ng d\u1ee5ng truy c\u1eadp v\u00e0o d\u1eef li\u1ec7u c\u1ee7a ng\u01b0\u1eddi d\u00f9ng, c\u00f3 th\u1ec3 h\u1ebft h\u1ea1n . refresh token : \u0110\u1ec3 l\u1ea5y m\u1ed9t token m\u1edbi, n\u1ebfu access token h\u1ebft h\u1ea1n. OpenID Connect OpenID Connect l\u00e0 m\u1ed9t ti\u00eau chu\u1ea9n m\u1edf v\u00e0 l\u00e0 m\u1ed9t giao th\u1ee9c Authentication ph\u00e2n c\u1ea5p, Cho ph\u00e9p user c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c authen b\u1edfi nhi\u1ec1u website s\u1eed d\u1ee5ng service c\u1ee7a b\u00ean th\u1ee9 3 \u2192 Gi\u1ea3m \u0111\u01b0\u1ee3c vi\u1ec7c ph\u1ea3i thi\u1ebft l\u1eadp ri\u00eang logic sign-up/login cho m\u1ed7i website, cho ph\u00e9p c\u00e1c user c\u00f3 th\u1ec3 login t\u1edbi nhi\u1ec1u webstie ko h\u1ec1 li\u00ean quan t\u1edbi nhau m\u00e0 ko c\u1ea7n ph\u1ea3i c\u00f3 nh\u1eefng \u0111\u1ecbnh danh v\u00e0 password ri\u00eang cho m\u1ed7i site. C\u01a1 ch\u1ebf OpenID, d\u00f9ng duy nh\u1ea5t identity provider t\u1eeb b\u00ean th\u1ee9 3, ho\u1eb7c server chuy\u00ean auth \u0111\u1ec3 qu\u1ea3n l\u00fd password, v\u00e0 provider n\u00e0y s\u1ebd confirm identity c\u1ee7a user t\u1edbi c\u00e1c website, ko c\u00f3 m\u1ed9t website n\u00e0o c\u00f3 th\u1ec3 bi\u1ebft \u0111\u01b0\u1ee3c password c\u1ee7a user \u2192 y\u1ebfu t\u1ed1 b\u1ea3o m\u1eadt r\u1ea5t cao. Trong c\u01a1 ch\u1ebf OpenID Connect , khi provider th\u1ee9 3 ho\u1eb7c authentication server x\u00e1c th\u1ef1c user th\u00e0nh c\u00f4ng, n\u00f3 s\u1ebd tr\u1ea3 v\u1ec1 cho client m\u1ed9t c\u00e1i token \u0111\u1ec3 client d\u00f9ng c\u00e1i token n\u00e0y g\u1eedi k\u00e8m v\u1edbi c\u00e1c request trong header t\u1edbi server, server s\u1ebd gi\u1ea3i m\u00e3 token n\u00e0y v\u00e0 bi\u1ebft \u0111\u01b0\u1ee3c user \u0111\u00f3 c\u00f3 nh\u1eefng permission g\u00ec, t\u1eeb \u0111\u00f3 serve chu\u1ea9n. \u2192 d\u00f9ng JWT","title":"4 Most Used REST API Authentication Methods"},{"location":"Web-Technologies/7.Authentication/#oauth2","text":"OAuth l\u00e0 vi\u1ebft t\u1eaft c\u1ee7a Open v\u1edbi Authentication ho\u1eb7c Authorization, l\u00e0 s\u1ef1 k\u1ebft h\u1ee3p gi\u1eefa k\u1ebft h\u1ee3p Authentication v\u00e0 Authorization . OAuth 2.0 - l\u00e0 m\u1ed9t giao th\u1ee9c cho ph\u00e9p ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 c\u1ea5p quy\u1ec1n truy c\u1eadp \u1ee9ng d\u1ee5ng ho\u1eb7c trang web c\u1ee7a b\u00ean th\u1ee9 ba v\u00e0o c\u00e1c t\u00e0i nguy\u00ean \u0111\u01b0\u1ee3c b\u1ea3o v\u1ec7 c\u1ee7a c\u1ee7a h\u1ecd m\u00e0 kh\u00f4ng nh\u1ea5t thi\u1ebft ph\u1ea3i ti\u1ebft l\u1ed9 th\u00f4ng tin \u0111\u0103ng nh\u1eadp ho\u1eb7c th\u1eadm ch\u00ed danh t\u00ednh c\u1ee7a h\u1ecd.","title":"Oauth2"},{"location":"Web-Technologies/7.Authentication/#1-roles","text":"Trong OAuth2 \u0111\u1ecbnh ngh\u0129a 4 vai tr\u00f2: Resource owner (or the End User): L\u00e0 nh\u1eefng user c\u00f3 kh\u1ea3 n\u0103ng c\u1ea5p quy\u1ec1n truy c\u1eadp, ch\u1ee7 s\u1edf h\u1eefu c\u1ee7a t\u00e0i nguy\u00ean m\u00e0 \u1ee9ng d\u1ee5ng mu\u1ed1n l\u1ea5y. Resource server (or API Gateway): N\u01a1i l\u01b0u tr\u1eef c\u00e1c t\u00e0i nguy\u00ean, c\u00f3 kh\u1ea3 n\u0103ng x\u1eed l\u00fd c\u00e1c request truy c\u1eadp \u0111\u1ebfn c\u00e1c t\u00e0i nguy\u00ean \u0111\u01b0\u1ee3c b\u1ea3o v\u1ec7. Client Application (or the Client): L\u00e0 nh\u1eefng \u1ee9ng d\u1ee5ng b\u00ean th\u1ee9 3 mu\u1ed1n truy c\u1eadp v\u00e0o ph\u1ea7n t\u00e0i nguy\u00ean \u0111\u01b0\u1ee3c chia s\u1ebb v\u1edbi t\u01b0 c\u00e1ch c\u1ee7a ng\u01b0\u1eddi s\u1edf h\u1eefu (resource owner) v\u00e0 tr\u01b0\u1edbc khi truy c\u1eadp \u1ee9ng d\u1ee5ng c\u1ea7n \u0111\u01b0\u1ee3c s\u1ef1 \u1ee7y quy\u1ec1n c\u1ee7a user . Authorization server : L\u00e0m nhi\u1ec7m v\u1ee5 x\u00e1c th\u1ef1c, ki\u1ec3m tra th\u00f4ng tin m\u00e0 user g\u1eedi \u0111\u1ebfn t\u1eeb \u0111\u00f3 c\u1ea5p quy\u1ec1n truy c\u1eadp cho \u1ee9ng d\u1ee5ng b\u1eb1ng vi\u1ec7c sinh ra c\u00e1c access token . \u0110\u00f4i khi authorization server c\u0169ng ch\u00ednh l\u00e0 resource server .","title":"1. Roles"},{"location":"Web-Technologies/7.Authentication/#2-authorization-grant-types","text":"Khi Client Application y\u00eau c\u1ea7u \u1ee7y quy\u1ec1n \u0111\u1ec3 truy c\u1eadp v\u00e0o Resource Server th\u00f4ng qua Resource owner . N\u1ebfu Resource owner \u1ee7y quy\u1ec1n cho y\u00eau c\u1ea7u tr\u00ean, Application s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c gi\u1ea5y \u1ee7y quy\u1ec1n - Authorization Grant t\u1eeb ph\u00eda Resource owner . C\u00f3 4 lo\u1ea1i Authorization Grant : Authorization Code : \u0110\u00e2y l\u00e0 lo\u1ea1i gi\u1ea5y \u1ee7y quy\u1ec1n \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng nh\u01b0 l\u00e0 m\u1ed9t access tokens (v\u00e0 optional l\u00e0 refresh token ). Th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng v\u1edbi c\u00e1c server-side Application. T\u1ed1i \u01b0u h\u00f3a cho confidential clients . Implicit : \u0110\u01b0\u1ee3c s\u1eed d\u1ee5ng v\u1edbi c\u00e1c Mobile App (\u1ee9ng d\u1ee5ng ch\u1ea1y tr\u00ean thi\u1ebft b\u1ecb c\u1ee7a User) ho\u1eb7c Web App (c\u00f3 th\u1ec3 hi\u1ec3u l\u00e0 Browser App, vd Chrome Extension). T\u1ed1i \u01b0u h\u00f3a cho public clients . Client Credentials: S\u1eed d\u1ee5ng v\u1edbi c\u00e1c \u1ee9ng d\u1ee5ng truy c\u1eadp th\u00f4ng qua API. T\u1ed1i \u01b0u h\u00f3a cho client-only authentication Resource Owner Password Credentials : S\u1eed d\u1ee5ng v\u1edbi c\u00e1c Trusted Application, ki\u1ec3u nh\u01b0 nh\u1eefng \u1ee9ng d\u1ee5ng v\u1ec1 Security. Khi \u0111\u00f3 Resource Owner c\u00f3 m\u1ed1i quan h\u1ec7 tin c\u1eady v\u1edbi Client Application v\u00e0 Client Application c\u00f3 kh\u1ea3 n\u0103ng l\u1ea5y th\u00f4ng tin \u0111\u0103ng nh\u1eadp c\u1ee7a Resource Owner .","title":"2. Authorization Grant Types"},{"location":"Web-Technologies/7.Authentication/#3-api-gateway","text":"API Gateway c\u00f3 th\u1ec3 coi l\u00e0 m\u1ed9t c\u1ed5ng trung gian, c\u1ed5ng v\u00e0o duy nh\u1ea5t t\u1edbi h\u1ec7 th\u1ed1ng microservices , khi \u0111\u00f3 API Gateway s\u1ebd nh\u1eadn c\u00e1c requests t\u1eeb ph\u00eda client, x\u00e1c th\u1ef1c v\u00e0 \u0111i\u1ec1u h\u01b0\u1edbng ch\u00fang \u0111\u1ebfn c\u00e1c API c\u1ee5 th\u1ec3 tr\u00ean c\u00e1c behavior services. API Gateway c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng nh\u01b0 m\u1ed9t Authorization server v\u00e0 m\u1ed9t Resource server .","title":"3. API Gateway"},{"location":"Web-Technologies/7.Authentication/#a-api-gateway-as-a-resource-server","text":"Khi API Gateway \u0111\u00f3ng vai tr\u00f2 l\u00e0 m\u1ed9t Resource server , n\u00f3 l\u01b0u tr\u1eef c\u00e1c protected resources , \u0111\u1ed3ng th\u1eddi ti\u1ebfp nh\u1eadn v\u00e0 ph\u1ea3n h\u1ed3i c\u00e1c y\u00eau c\u1ea7u c\u1ee7a Client Application trong \u0111\u00f3 bao g\u1ed3m m\u00e3 access token . Client Application s\u1ebd g\u1eedi access token trong Header c\u1ee7a Request v\u1edbi c\u00e1i field l\u00e0 Authorization s\u1eed d\u1ee5ng Bearer authentication scheme . Sau \u0111\u00f3 Resource server ti\u1ebfn h\u00e0nh x\u00e1c th\u1ef1c access token , n\u1ebfu access token h\u1ee3p l\u1ec7 th\u00ec Client Application c\u00f3 quy\u1ec1n truy c\u1eadp protected resources , n\u1ebfu kh\u00f4ng h\u1ee3p l\u1ec7, c\u00e1i request s\u1ebd b\u1ecb rejects.","title":"a. API Gateway as a Resource Server"},{"location":"Web-Technologies/7.Authentication/#b-api-gateway-as-an-authorization-server","text":"Khi API Gateway ho\u1ea1t \u0111\u1ed9ng nh\u01b0 m\u1ed9t Authorization Server , n\u00f3 s\u1ebd nh\u1eadn c\u00e1c y\u00eau c\u1ea7u \u1ee7y quy\u1ec1n t\u1eeb Client Application v\u00e0 x\u1eed l\u00fd c\u00e1c t\u01b0\u01a1ng t\u00e1c gi\u1eefa Client Application , Resource server v\u00e0 Resource owner \u0111\u1ec3 approve cho c\u00e1i request \u1ee7y quy\u1ec1n \u0111\u00f3. C\u1ee5 th\u1ec3: API Gateway s\u1ebd c\u1ea5p 1 access token cho c\u00e1c Client Application thay m\u1eb7t cho Resource owner \u0111\u1ec3 s\u1eed d\u1ee5ng trong vi\u1ec7c x\u00e1c th\u1ef1c c\u00e1c l\u1ec7nh g\u1ecdi API t\u1edbi Resource server . Resource server ti\u1ebfp nh\u1eadn access token t\u1eeb ph\u00eda Client Application v\u00e0 x\u00e9t: N\u1ebfu Client Application \u0111\u01b0\u1ee3c ph\u00e9p truy c\u1eadp protected resources , Resource server s\u1ebd th\u1ef1c thi c\u00e1i request n\u00e0y. V\u00e0 Authorization Server , khi n\u00e0y \u0111ang l\u00e0 API Gateway s\u1ebd gi\u1eef l\u1ea1i th\u00f4ng tin v\u1ec1 c\u00e1c access token m\u00e0 n\u00f3 ph\u00e1t h\u00e0nh, bao g\u1ed3m c\u1ea3 th\u00f4ng tin ng\u01b0\u1eddi d\u00f9ng ( Resource owner ). Khi Resource owner xu\u1ea5t tr\u00ecnh access token cho Resource server , Resource server s\u1ebd g\u1eedi access token \u0111\u1ebfn Authorization Server \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o r\u1eb1ng access token h\u1ee3p l\u1ec7 v\u00e0 c\u00e1i kh\u1ea3 n\u0103ng service cho c\u00e1i request n\u00e0y n\u1eb1m trong scope c\u1ee7a access token . Scope l\u00e0 \u0111\u1ecbnh ngh\u0129a c\u1ee7a c\u00e1c t\u00e0i nguy\u00ean m\u00e0 Client Application c\u00f3 th\u1ec3 truy c\u1eadp thay m\u1eb7t cho Resource owner . N\u1ebfu Client Application kh\u00f4ng c\u00f3 quy\u1ec1n truy c\u1eadp t\u00e0i nguy\u00ean, Resource server s\u1ebd t\u1eeb ch\u1ed1i y\u00eau c\u1ea7u.","title":"b. API Gateway as an Authorization Server"},{"location":"Web-Technologies/7.Authentication/#4-oauth-20-workflow","text":"Workflow c\u1ee7a OAuth 2.0 th\u00f4ng qua 4 b\u01b0\u1edbc, \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 nh\u01b0 sau: End-user \u0111\u0103ng nh\u1eadp, Client Application g\u1eedi y\u00eau c\u1ea7u x\u00e1c th\u1ef1c ( k\u00e8m id token ) \u0111\u1ebfn m\u00e1y ch\u1ee7 \u1ee7y quy\u1ec1n \u0111\u1ec3 l\u1ea5y access token . Authorization Server x\u00e1c th\u1ef1c y\u00eau c\u1ea7u v\u00e0 t\u1ea1o access token cho Client Application Client Application s\u1eed d\u1ee5ng access token n\u00e0y \u0111\u1ec3 g\u1eedi c\u00e1c y\u00eau c\u1ea7u HTTP \u0111\u1ebfn API Gateway . API Gateway sau \u0111\u00f3 th\u1ef1c hi\u1ec7n nh\u01b0 sau: a. X\u00e1c \u0111\u1ecbnh danh t\u00ednh c\u1ee7a Client Application b\u1eb1ng clientId . b. Ti\u1ebfn h\u00e0nh verify c\u00e1i access token (locally ho\u1eb7c remotely) c. Ki\u1ec3m tra xem t\u00e0i nguy\u00ean \u0111\u01b0\u1ee3c y\u00eau c\u1ea7u trong c\u00e1i request thu\u1ed9c scope c\u1ee7a access token hay kh\u00f4ng. d.Ki\u1ec3m tra c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng \u0111i k\u00e8m trong request. N\u1ebfu t\u1ea5t c\u1ea3 nh\u1eefng \u0111i\u1ec1u tr\u00ean \u0111\u01b0\u1ee3c x\u00e1c th\u1ef1c, API Gateway s\u1ebd cung c\u1ea5p quy\u1ec1n truy c\u1eadp v\u00e0o protected resources . Trong tr\u01b0\u1eddng h\u1ee3p access token h\u1ebft h\u1ea1n, Authorization Server s\u1ebd tr\u1ea3 v\u1ec1 ph\u1ea3n h\u1ed3i l\u1ed7i c\u1ee5 th\u1ec3. Sau \u0111\u00f3, \u1ee9ng d\u1ee5ng kh\u00e1ch c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng refresh token \u0111\u1ec3 y\u00eau c\u1ea7u m\u1ed9t access token m\u1edbi. Authorization Server s\u1ebd tr\u1ea3 v\u1ec1 access token m\u1edbi \u0111\u1ec3 ti\u1ebfp t\u1ee5c d\u00f9ng cho vi\u1ec7c truy c\u1eadp protected resources .","title":"4. OAuth 2.0 Workflow"},{"location":"Web-Technologies/7.Authentication/#jwt","text":"","title":"JWT"},{"location":"Web-Technologies/7.Authentication/#1-concepts","text":"JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed. JWTs can be signed using a secret (with the HMAC algorithm) or a public/private key pair using RSA or ECDSA. Source JWT - JSON Web Token l\u00e0 m\u1ed9t ti\u00eau chu\u1ea9n m\u1edf d\u1ef1a tr\u00ean JSON (RFC 7519) , ph\u01b0\u01a1ng ti\u1ec7n \u0111\u1ea1i di\u1ec7n cho m\u1ed9t t\u1eadp h\u1ee3p th\u00f4ng tin \u0111\u01b0\u1ee3c truy\u1ec1n m\u1ed9t c\u00e1ch an to\u00e0n gi\u1eefa client-server d\u01b0\u1edbi d\u1ea1ng JSON object . T\u1eadp h\u1ee3p th\u00f4ng tin n\u00e0y \u0111\u01b0\u1ee3c \u0111\u1ea1i di\u1ec7n b\u1edfi JWT v\u00e0 n\u00f3 \u0111\u01b0\u1ee3c x\u00e1c minh , b\u1ea3o m\u1eadt v\u00e0 \u0111\u00e1ng tin c\u1eady v\u00ec n\u00f3 \u0111\u01b0\u1ee3c digitally signed . digitally signed b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng m\u1ed9t secret-key (\u0111\u1ed1i v\u1edbi thu\u1eadt to\u00e1n HMAC) ho\u1eb7c public/private key pair d\u00f9ng chu\u1ea9n RSA ho\u1eb7c ECDSA. T\u00f3m l\u1ea1i l\u00e0: D\u00f9ng \u0111\u1ec3 truy\u1ec1n th\u00f4ng tin m\u1ed9t c\u00e1ch an to\u00e0n. C\u00f3 ph\u1ea7n ch\u1eef k\u00fd n\u00ean \u0111\u1ea3m b\u1ea3o d\u1eef li\u1ec7u kh\u00f4ng b\u1ecb thay \u0111\u1ed5i, ch\u1ec9nh s\u1eeda tr\u00ean \u0111\u01b0\u1eddng \u0111i.","title":"1. Concepts"},{"location":"Web-Technologies/7.Authentication/#2-jwt-structure","text":"M\u1ed9t JWT s\u1ebd c\u00f3 c\u1ea5u tr\u00fac ki\u1ec3u: asdfasdfasdf.aD\u00e1daSDasd.FdfSDFsdfSDF Header : G\u1ed3m c\u00f3 2 ph\u1ea7n l\u00e0: lo\u1ea1i m\u00e3 token, v\u00e0 thu\u1eadt to\u00e1n \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 sinh ra ph\u1ea7n Signature . 2 ph\u1ea7n n\u00e0y \u0111\u01b0\u1ee3c define nh\u01b0 l\u00e0 1 json object v\u00e0 sau \u0111\u00f3, JSON n\u00e0y \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a Base64Url \u0111\u1ec3 t\u1ea1o th\u00e0nh ph\u1ea7n \u0111\u1ea7u ti\u00ean c\u1ee7a JWT. Payload : Ch\u1ee9a c\u00e1c claims . Claims th\u01b0\u1eddng ch\u1ee9a c\u00e1c thu\u1ed9c t\u00ednh nh\u01b0 typically , th\u00f4ng tin user v\u00e0 c\u00e1c d\u1eef li\u1ec7u b\u1ed5 sung. C\u00f3 3 lo\u1ea1i claims: registered , public , v\u00e0 private claims. Danh s\u00e1ch \u0111\u1ea7y \u0111\u1ee7 c\u00e1c Claims xem t\u1ea1i JSON Web Token Claims . Ph\u1ea7n n\u00e0y c\u0169ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a v\u00e0 m\u00e3 h\u00f3a t\u01b0\u01a1ng t\u1ef1 Header . Signature : M\u1ed9t chu\u1ed7i \u0111\u01b0\u1ee3c m\u00e3 h\u00f3a b\u1edfi header , payload c\u00f9ng v\u1edbi thu\u1eadt to\u00e1n m\u00e3 h\u00f3a \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh trong header. Signature \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 x\u00e1c minh data trong payload kh\u00f4ng b\u1ecb thay \u0111\u1ed5i trong qu\u00e1 tr\u00ecnh \u0111i t\u1eeb client-server v\u00e0 trong tr\u01b0\u1eddng h\u1ee3p token \u0111\u01b0\u1ee3c sign b\u1eb1ng private key , n\u00f3 c\u0169ng c\u00f3 th\u1ec3 x\u00e1c minh \u0111\u01b0\u1ee3c danh t\u00ednh c\u1ee7a ng\u01b0\u1eddi g\u1eedi JWT . Demo","title":"2. JWT Structure"},{"location":"Web-Technologies/7.Authentication/#api-gateway-jwt-usecase","text":"API Gateway s\u1eed d\u1ee5ng JWT d\u1ef1a tr\u00ean RSA \u0111\u1ec3 cung c\u1ea5p kh\u1ea3 n\u0103ng b\u1ea3o v\u1ec7 m\u1ea1nh m\u1ebd h\u01a1n cho JWT khi API Gateway l\u00e0 nh\u00e0 ph\u00e1t h\u00e0nh token . JWT ch\u1ee9a 1 ho\u1eb7c nhi\u1ec1u claims n\u1eb1m trong Payload c\u1ee7a JWT. API Gateway tr\u00edch xu\u1ea5t c\u00e1c y\u00eau c\u1ea7u t\u1eeb JWT , \u0111\u1ecbnh danh cho application v\u00e0 sau \u0111\u00f3 cho ph\u00e9p application truy c\u1eadp v\u00e0o protected resources .","title":"API Gateway &amp; JWT Usecase"},{"location":"Web-Technologies/7.Authentication/#jwt-authorization-workflow","text":"Workflow gi\u1eefa requests v\u00e0 responses \u0111\u01b0\u1ee3c \u1ee7y quy\u1ec1n, gi\u1eefa end-user , client-app , n\u01a1i ph\u00e1t h\u00e0nh JWT v\u00e0 resource server nh\u01b0 \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 trong h\u00ecnh sau: End-user \u0111\u0103ng nh\u1eadp, Client app g\u1eedi y\u00eau c\u1ea7u x\u00e1c th\u1ef1c \u0111\u1ebfn API Gateway ho\u1eb7c \u0111\u1ebfn b\u1ea5t k\u1ef3 b\u00ean th\u1ee9 ba n\u00e0o \u0111\u1ec3 l\u1ea5y m\u00e3 JWT . N\u1ebfu th\u00f4ng tin \u0111\u0103ng nh\u1eadp c\u1ee7a End-user \u0111\u01b0\u1ee3c g\u1eedi t\u1eeb Client app h\u1ee3p l\u1ec7, API Gateway s\u1ebd t\u1ea1o m\u00e3 JWT b\u1eb1ng c\u00e1c logic, thu\u1eadt to\u00e1n s\u1ebd t\u00ecm hi\u1ec3u b\u00ean d\u01b0\u1edbi v\u00e0 g\u1eedi JWT \u0111\u00e3 t\u1ea1o \u0111\u1ebfn Client app . N\u1ebfu th\u00f4ng tin x\u00e1c th\u1ef1c c\u1ee7a ng\u01b0\u1eddi d\u00f9ng kh\u00f4ng h\u1ee3p l\u1ec7, API Gateway tr\u1ea3 v\u1ec1 m\u1ed9t ph\u1ea3n h\u1ed3i l\u1ed7i c\u1ee5 th\u1ec3. Client app g\u1eedi JWT \u0111\u00e3 t\u1ea1o ch\u1ee9a trong Header c\u1ee7a request header d\u01b0\u1edbi d\u1ea1ng HTTP Bearer Authorization token \u0111\u1ec3 truy c\u1eadp t\u1edbi protected resources \u0111\u01b0\u1ee3c b\u1ea3o v\u1ec7 trong API Gateway. API Gateway s\u1ebd x\u00e1c th\u1ef1c client-app tr\u01b0\u1edbc, d\u1ef1a tr\u00ean th\u00f4ng tin l\u1ea5y t\u1eeb JWT, sau \u0111\u00f3 x\u00e1c th\u1ef1c JWT b\u1eb1ng c\u00e1c thu\u1eadt to\u00e1n, logic v\u00e0 cung c\u1ea5p quy\u1ec1n truy c\u1eadp v\u00e0o c\u00e1c protected resources . N\u1ebfu x\u00e1c th\u1ef1c kh\u00f4ng th\u00e0nh c\u00f4ng, API Gateway tr\u1ea3 v\u1ec1 ph\u1ea3n h\u1ed3i l\u1ed7i c\u1ee5 th\u1ec3.","title":"JWT Authorization Workflow"},{"location":"Web-Technologies/7.Authentication/#reference","text":"AUTHeNtication VS AUTHoriZation - dev.to Difference between Authentication and Authorization Authentication vs. Authorization - auth0.com 4 Most Used Authentication Methods OAuth2 Authentication Use case and Workflow JWT Authentication Use case and Workflow JWT Structure","title":"Reference"}]}